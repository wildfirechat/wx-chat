(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("../../config.js"), require("../util/longUtil"), require("../client/messageConfig"), require("../messages/mediaMessageContent"), require("../messages/messageStatus"), require("../messages/persistFlag"), require("../model/channelInfo"), require("../model/conversation"), require("../model/conversationType"), require("../model/groupInfo"), require("../model/groupMemberType"), require("../model/nullGroupInfo"), require("../model/nullUserInfo"), require("../model/userInfo"), require("../client/userSettingScope"), require("../model/conversationInfo"), require("../model/internal/friendInfo"), require("../model/NullChannelInfo"), require("../../wfc/util/base64.min"), require("../messages/message"), require("../messages/messageContentType"), require("../messages/notification/recallMessageNotification"), require("../model/chatRoomMemberInfo"), require("../model/friendRequest"), require("../model/groupMember"), require("../client/wfcEvent"), require("../model/unreadCount"), require("../model/friend"), require("../model/groupSearchResult"), require("../client/connectionStatus"), require("../model/userSettingEntry"), require("../client/errorCode"), require("../model/chatRoomInfo"), require("../model/readEntry"), require("../model/fileRecord"), require("../util/base64.min"), require("../messages/markUnreadMessageContent"), require("../model/userOnlineState"), require("../model/userClientState"), require("../model/userCustomState"), require("../model/channelMenu"), require("../messages/compositeMessageContent"));
	else if(typeof define === 'function' && define.amd)
		define(["../../config.js", "../util/longUtil", "../client/messageConfig", "../messages/mediaMessageContent", "../messages/messageStatus", "../messages/persistFlag", "../model/channelInfo", "../model/conversation", "../model/conversationType", "../model/groupInfo", "../model/groupMemberType", "../model/nullGroupInfo", "../model/nullUserInfo", "../model/userInfo", "../client/userSettingScope", "../model/conversationInfo", "../model/internal/friendInfo", "../model/NullChannelInfo", "../../wfc/util/base64.min", "../messages/message", "../messages/messageContentType", "../messages/notification/recallMessageNotification", "../model/chatRoomMemberInfo", "../model/friendRequest", "../model/groupMember", "../client/wfcEvent", "../model/unreadCount", "../model/friend", "../model/groupSearchResult", "../client/connectionStatus", "../model/userSettingEntry", "../client/errorCode", "../model/chatRoomInfo", "../model/readEntry", "../model/fileRecord", "../util/base64.min", "../messages/markUnreadMessageContent", "../model/userOnlineState", "../model/userClientState", "../model/userCustomState", "../model/channelMenu", "../messages/compositeMessageContent"], factory);
	else {
		var a = typeof exports === 'object' ? factory(require("../../config.js"), require("../util/longUtil"), require("../client/messageConfig"), require("../messages/mediaMessageContent"), require("../messages/messageStatus"), require("../messages/persistFlag"), require("../model/channelInfo"), require("../model/conversation"), require("../model/conversationType"), require("../model/groupInfo"), require("../model/groupMemberType"), require("../model/nullGroupInfo"), require("../model/nullUserInfo"), require("../model/userInfo"), require("../client/userSettingScope"), require("../model/conversationInfo"), require("../model/internal/friendInfo"), require("../model/NullChannelInfo"), require("../../wfc/util/base64.min"), require("../messages/message"), require("../messages/messageContentType"), require("../messages/notification/recallMessageNotification"), require("../model/chatRoomMemberInfo"), require("../model/friendRequest"), require("../model/groupMember"), require("../client/wfcEvent"), require("../model/unreadCount"), require("../model/friend"), require("../model/groupSearchResult"), require("../client/connectionStatus"), require("../model/userSettingEntry"), require("../client/errorCode"), require("../model/chatRoomInfo"), require("../model/readEntry"), require("../model/fileRecord"), require("../util/base64.min"), require("../messages/markUnreadMessageContent"), require("../model/userOnlineState"), require("../model/userClientState"), require("../model/userCustomState"), require("../model/channelMenu"), require("../messages/compositeMessageContent")) : factory(root["../../config.js"], root["../util/longUtil"], root["../client/messageConfig"], root["../messages/mediaMessageContent"], root["../messages/messageStatus"], root["../messages/persistFlag"], root["../model/channelInfo"], root["../model/conversation"], root["../model/conversationType"], root["../model/groupInfo"], root["../model/groupMemberType"], root["../model/nullGroupInfo"], root["../model/nullUserInfo"], root["../model/userInfo"], root["../client/userSettingScope"], root["../model/conversationInfo"], root["../model/internal/friendInfo"], root["../model/NullChannelInfo"], root["../../wfc/util/base64.min"], root["../messages/message"], root["../messages/messageContentType"], root["../messages/notification/recallMessageNotification"], root["../model/chatRoomMemberInfo"], root["../model/friendRequest"], root["../model/groupMember"], root["../client/wfcEvent"], root["../model/unreadCount"], root["../model/friend"], root["../model/groupSearchResult"], root["../client/connectionStatus"], root["../model/userSettingEntry"], root["../client/errorCode"], root["../model/chatRoomInfo"], root["../model/readEntry"], root["../model/fileRecord"], root["../util/base64.min"], root["../messages/markUnreadMessageContent"], root["../model/userOnlineState"], root["../model/userClientState"], root["../model/userCustomState"], root["../model/channelMenu"], root["../messages/compositeMessageContent"]);
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(window, function(__WEBPACK_EXTERNAL_MODULE__95__, __WEBPACK_EXTERNAL_MODULE__131__, __WEBPACK_EXTERNAL_MODULE__179__, __WEBPACK_EXTERNAL_MODULE__180__, __WEBPACK_EXTERNAL_MODULE__181__, __WEBPACK_EXTERNAL_MODULE__182__, __WEBPACK_EXTERNAL_MODULE__183__, __WEBPACK_EXTERNAL_MODULE__184__, __WEBPACK_EXTERNAL_MODULE__185__, __WEBPACK_EXTERNAL_MODULE__186__, __WEBPACK_EXTERNAL_MODULE__187__, __WEBPACK_EXTERNAL_MODULE__188__, __WEBPACK_EXTERNAL_MODULE__189__, __WEBPACK_EXTERNAL_MODULE__190__, __WEBPACK_EXTERNAL_MODULE__191__, __WEBPACK_EXTERNAL_MODULE__192__, __WEBPACK_EXTERNAL_MODULE__193__, __WEBPACK_EXTERNAL_MODULE__194__, __WEBPACK_EXTERNAL_MODULE__253__, __WEBPACK_EXTERNAL_MODULE__362__, __WEBPACK_EXTERNAL_MODULE__363__, __WEBPACK_EXTERNAL_MODULE__364__, __WEBPACK_EXTERNAL_MODULE__365__, __WEBPACK_EXTERNAL_MODULE__366__, __WEBPACK_EXTERNAL_MODULE__367__, __WEBPACK_EXTERNAL_MODULE__368__, __WEBPACK_EXTERNAL_MODULE__376__, __WEBPACK_EXTERNAL_MODULE__378__, __WEBPACK_EXTERNAL_MODULE__379__, __WEBPACK_EXTERNAL_MODULE__381__, __WEBPACK_EXTERNAL_MODULE__382__, __WEBPACK_EXTERNAL_MODULE__392__, __WEBPACK_EXTERNAL_MODULE__393__, __WEBPACK_EXTERNAL_MODULE__394__, __WEBPACK_EXTERNAL_MODULE__395__, __WEBPACK_EXTERNAL_MODULE__396__, __WEBPACK_EXTERNAL_MODULE__397__, __WEBPACK_EXTERNAL_MODULE__398__, __WEBPACK_EXTERNAL_MODULE__399__, __WEBPACK_EXTERNAL_MODULE__400__, __WEBPACK_EXTERNAL_MODULE__401__, __WEBPACK_EXTERNAL_MODULE__402__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 200);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

var core = module.exports = { version: '2.6.10' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _isInteger = __webpack_require__(347);

var _isInteger2 = _interopRequireDefault(_isInteger);

var _create = __webpack_require__(6);

var _create2 = _interopRequireDefault(_create);

var _freeze = __webpack_require__(165);

var _freeze2 = _interopRequireDefault(_freeze);

var _typeof2 = __webpack_require__(10);

var _typeof3 = _interopRequireDefault(_typeof2);

var _keys = __webpack_require__(7);

var _keys2 = _interopRequireDefault(_keys);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Created by zhangmiao on 2018/3/12.
 */
var util = module.exports;

var roots = __webpack_require__(166);
util.LongBits = __webpack_require__(97);
util.Long = __webpack_require__(353);
util.pool = __webpack_require__(354);
util.float = __webpack_require__(355);
util.asPromise = __webpack_require__(356);
util.EventEmitter = __webpack_require__(357);
util.path = __webpack_require__(358);
util.base64 = __webpack_require__(167);
util.utf8 = __webpack_require__(66);

util.compareFieldsById = function compareFieldsById(a, b) {
    return a.id - b.id;
};

util.toArray = function toArray(object) {
    if (object) {
        var keys = (0, _keys2.default)(object),
            array = new Array(keys.length),
            index = 0;
        while (index < keys.length) {
            array[index] = object[keys[index++]];
        }return array;
    }
    return [];
};

util.toObject = function toObject(array) {
    var object = {},
        index = 0;
    while (index < array.length) {
        var key = array[index++],
            val = array[index++];
        if (val !== undefined) object[key] = val;
    }
    return object;
};

util.isString = function isString(value) {
    return typeof value === "string" || value instanceof String;
};

var safePropBackslashRe = /\\/g,
    safePropQuoteRe = /"/g;

/**
 * Tests whether the specified name is a reserved word in JS.
 * @param {string} name Name to test
 * @returns {boolean} `true` if reserved, otherwise `false`
 */
util.isReserved = function isReserved(name) {
    return (/^(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$/.test(name)
    );
};

util.isObject = function isObject(value) {
    return value && (typeof value === "undefined" ? "undefined" : (0, _typeof3.default)(value)) === "object";
};

util.Array = typeof Uint8Array !== "undefined" ? Uint8Array /* istanbul ignore next */ : Array;

util.oneOfGetter = function getOneOf(fieldNames) {
    var fieldMap = {};
    for (var i = 0; i < fieldNames.length; ++i) {
        fieldMap[fieldNames[i]] = 1;
    } /**
       * @returns {string|undefined} Set field name, if any
       * @this Object
       * @ignore
       */
    return function () {
        // eslint-disable-line consistent-return
        for (var keys = (0, _keys2.default)(this), i = keys.length - 1; i > -1; --i) {
            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null) return keys[i];
        }
    };
};

util.oneOfSetter = function setOneOf(fieldNames) {

    /**
     * @param {string} name Field name
     * @returns {undefined}
     * @this Object
     * @ignore
     */
    return function (name) {
        for (var i = 0; i < fieldNames.length; ++i) {
            if (fieldNames[i] !== name) delete this[/*"_"+*/fieldNames[i]];
        } //设置为私有属性
    };
};

util.merge = function merge(dst, src, ifNotSet) {
    // used by converters
    for (var keys = (0, _keys2.default)(src), i = 0; i < keys.length; ++i) {
        if (dst[keys[i]] === undefined || !ifNotSet) dst[keys[i]] = src[keys[i]];
    }return dst;
};

util.decorateType = function decorateType(ctor, typeName) {

    /* istanbul ignore if */
    if (ctor.$type) {
        if (typeName && ctor.$type.name !== typeName) {
            util.decorateRoot.remove(ctor.$type);
            ctor.$type.name = typeName;
            util.decorateRoot.add(ctor.$type);
        }
        return ctor.$type;
    }

    /* istanbul ignore next */
    if (!Type) Type = __webpack_require__(36);

    var type = new Type(typeName || ctor.name);
    util.decorateRoot.add(type);
    type.ctor = ctor; // sets up .encode, .decode etc.
    Object.defineProperty(ctor, "$type", { value: type, enumerable: false });
    Object.defineProperty(ctor.prototype, "$type", { value: type, enumerable: false });
    return type;
};

util.emptyArray = _freeze2.default ? (0, _freeze2.default)([]) : /* istanbul ignore next */[]; // used on prototypes

util.emptyObject = _freeze2.default ? (0, _freeze2.default)({}) : /* istanbul ignore next */{}; // used on prototypes

util.longToHash = function longToHash(value) {
    return value ? util.LongBits.from(value).toHash() : util.LongBits.zeroHash;
};

util.copy = function (obj) {
    if ((typeof obj === "undefined" ? "undefined" : (0, _typeof3.default)(obj)) != 'object') {
        return obj;
    }
    var newObj = {};
    for (var attr in obj) {
        newObj[attr] = obj[attr];
    }
    return newObj;
};

function deepCopy(obj) {
    if ((typeof obj === "undefined" ? "undefined" : (0, _typeof3.default)(obj)) != 'object') {
        return obj;
    }
    var newobj = {};
    for (var attr in obj) {
        newobj[attr] = deepCopy(obj[attr]);
    }
    return newobj;
}

util.deepCopy = deepCopy;

util.ProtocolError = function newError(name) {

    function CustomError(message, properties) {

        if (!(this instanceof CustomError)) return new CustomError(message, properties);

        // Error.call(this, message);
        // ^ just returns a new error instance because the ctor can be called as a function

        Object.defineProperty(this, "message", { get: function get() {
                return message;
            } });

        /* istanbul ignore next */
        if (Error.captureStackTrace) // node
            Error.captureStackTrace(this, CustomError);else Object.defineProperty(this, "stack", { value: new Error().stack || "" });

        if (properties) merge(this, properties);
    }

    (CustomError.prototype = (0, _create2.default)(Error.prototype)).constructor = CustomError;

    Object.defineProperty(CustomError.prototype, "name", { get: function get() {
            return name;
        } });

    CustomError.prototype.toString = function toString() {
        return this.name + ": " + this.message;
    };

    return CustomError;
};

util.toJSONOptions = {
    longs: String,
    enums: String,
    bytes: String,
    json: true
};

util.Buffer = function () {
    return null;
}();

util.newBuffer = function newBuffer(sizeOrArray) {
    /* istanbul ignore next */
    return typeof sizeOrArray === "number" ? new util.Array(sizeOrArray) : typeof Uint8Array === "undefined" ? sizeOrArray : new Uint8Array(sizeOrArray);
};

util.stringToBytes = function stringToBytes(str) {
    var bytes = [];
    var len, c;
    len = str.length;
    for (var i = 0; i < len; i++) {
        c = str.charCodeAt(i);
        if (c >= 0x010000 && c <= 0x10FFFF) {
            bytes.push(c >> 18 & 0x07 | 0xF0);
            bytes.push(c >> 12 & 0x3F | 0x80);
            bytes.push(c >> 6 & 0x3F | 0x80);
            bytes.push(c & 0x3F | 0x80);
        } else if (c >= 0x000800 && c <= 0x00FFFF) {
            bytes.push(c >> 12 & 0x0F | 0xE0);
            bytes.push(c >> 6 & 0x3F | 0x80);
            bytes.push(c & 0x3F | 0x80);
        } else if (c >= 0x000080 && c <= 0x0007FF) {
            bytes.push(c >> 6 & 0x1F | 0xC0);
            bytes.push(c & 0x3F | 0x80);
        } else {
            bytes.push(c & 0xFF);
        }
    }
    return bytes;
};

util.byteToString = function byteToString(arr) {
    if (typeof arr === 'string') {
        return arr;
    }
    var str = '',
        _arr = arr;
    for (var i = 0; i < _arr.length; i++) {
        var one = _arr[i].toString(2),
            v = one.match(/^1+?(?=0)/);
        if (v && one.length == 8) {
            var bytesLength = v[0].length;
            var store = _arr[i].toString(2).slice(7 - bytesLength);
            for (var st = 1; st < bytesLength; st++) {
                store += _arr[st + i].toString(2).slice(2);
            }
            str += String.fromCharCode(parseInt(store, 2));
            i += bytesLength - 1;
        } else {
            str += String.fromCharCode(_arr[i]);
        }
    }
    return str;
};

util.isInteger = _isInteger2.default || /* istanbul ignore next */function isInteger(value) {
    return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
};

Object.defineProperty(util, "decorateRoot", {
    get: function get() {
        return roots["decorated"] || (roots["decorated"] = new (__webpack_require__(67))());
    }
});

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(4);
var core = __webpack_require__(0);
var ctx = __webpack_require__(21);
var hide = __webpack_require__(22);
var has = __webpack_require__(27);
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var IS_WRAP = type & $export.W;
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE];
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];
  var key, own, out;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    if (own && has(exports, key)) continue;
    // export native or passed
    out = own ? target[key] : source[key];
    // prevent global pollution for namespaces
    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
    // bind timers to global for call from export context
    : IS_BIND && own ? ctx(out, global)
    // wrap global constructors for prevent change them in library
    : IS_WRAP && target[key] == out ? (function (C) {
      var F = function (a, b, c) {
        if (this instanceof C) {
          switch (arguments.length) {
            case 0: return new C();
            case 1: return new C(a);
            case 2: return new C(a, b);
          } return new C(a, b, c);
        } return C.apply(this, arguments);
      };
      F[PROTOTYPE] = C[PROTOTYPE];
      return F;
    // make static versions for prototype methods
    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
    if (IS_PROTO) {
      (exports.virtual || (exports.virtual = {}))[key] = out;
      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
    }
  }
};
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;


/***/ }),
/* 3 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 4 */
/***/ (function(module, exports) {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

var store = __webpack_require__(77)('wks');
var uid = __webpack_require__(57);
var Symbol = __webpack_require__(4).Symbol;
var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(255), __esModule: true };

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(257), __esModule: true };

/***/ }),
/* 8 */
/***/ (function(module, exports) {

module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

// Thank's IE8 for his funny defineProperty
module.exports = !__webpack_require__(26)(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _iterator = __webpack_require__(244);

var _iterator2 = _interopRequireDefault(_iterator);

var _symbol = __webpack_require__(246);

var _symbol2 = _interopRequireDefault(_symbol);

var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
} : function (obj) {
  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
};

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(102)
var ieee754 = __webpack_require__(201)
var isArray = __webpack_require__(103)

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(17)))

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(18);
var IE8_DOM_DEFINE = __webpack_require__(104);
var toPrimitive = __webpack_require__(74);
var dP = Object.defineProperty;

exports.f = __webpack_require__(9) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _keys = __webpack_require__(7);

var _keys2 = _interopRequireDefault(_keys);

var _typeof2 = __webpack_require__(10);

var _typeof3 = _interopRequireDefault(_typeof2);

var _create = __webpack_require__(6);

var _create2 = _interopRequireDefault(_create);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Created by zhangmiao on 2018/3/12.
 */

module.exports = Enum;

var ReflectionObject = __webpack_require__(37);

((Enum.prototype = (0, _create2.default)(ReflectionObject.prototype)).constructor = Enum).className = "Enum";
var Namespace = __webpack_require__(52);

function Enum(name, values, options, comment, comments) {
    ReflectionObject.call(this, name, options);

    if (values && (typeof values === "undefined" ? "undefined" : (0, _typeof3.default)(values)) !== "object") throw TypeError("values must be an object");

    /**
     * Enum values by id.
     * @type {Object.<number,string>}
     */
    this.valuesById = {};

    /**
     * Enum values by name.
     * @type {Object.<string,number>}
     */
    this.values = (0, _create2.default)(this.valuesById); // toJSON, marker

    /**
     * Enum comment text.
     * @type {string|null}
     */
    this.comment = comment;

    /**
     * Value comment texts, if any.
     * @type {Object.<string,string>}
     */
    this.comments = comments || {};

    /**
     * Reserved ranges, if any.
     * @type {Array.<number[]|string>}
     */
    this.reserved = undefined; // toJSON

    // Note that values inherit valuesById on their prototype which makes them a TypeScript-
    // compatible enum. This is used by pbts to write actual enum definitions that work for
    // static and reflection code alike instead of emitting generic object definitions.

    if (values) for (var keys = (0, _keys2.default)(values), i = 0; i < keys.length; ++i) {
        if (typeof values[keys[i]] === "number") // use forward entries only
            this.valuesById[this.values[keys[i]] = values[keys[i]]] = keys[i];
    }
}

/**
 * Enum descriptor.
 * @interface IEnum
 * @property {Object.<string,number>} values Enum values
 * @property {Object.<string,*>} [options] Enum options
 */

/**
 * Constructs an enum from an enum descriptor.
 * @param {string} name Enum name
 * @param {IEnum} json Enum descriptor
 * @returns {Enum} Created enum
 * @throws {TypeError} If arguments are invalid
 */
Enum.fromJSON = function fromJSON(name, json) {
    var enm = new Enum(name, json.values, json.options, json.comment, json.comments);
    enm.reserved = json.reserved;
    return enm;
};

/**
 * Converts this enum to an enum descriptor.
 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
 * @returns {IEnum} Enum descriptor
 */
Enum.prototype.toJSON = function toJSON(toJSONOptions) {
    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
    return util.toObject(["options", this.options, "values", this.values, "reserved", this.reserved && this.reserved.length ? this.reserved : undefined, "comment", keepComments ? this.comment : undefined, "comments", keepComments ? this.comments : undefined]);
};

/**
 * Adds a value to this enum.
 * @param {string} name Value name
 * @param {number} id Value id
 * @param {string} [comment] Comment, if any
 * @returns {Enum} `this`
 * @throws {TypeError} If arguments are invalid
 * @throws {Error} If there is already a value with this name or id
 */
Enum.prototype.add = function add(name, id, comment) {
    // utilized by the parser but not by .fromJSON

    if (!util.isString(name)) throw TypeError("name must be a string");

    if (!util.isInteger(id)) throw TypeError("id must be an integer");

    if (this.values[name] !== undefined) throw Error("duplicate name '" + name + "' in " + this);

    if (this.isReservedId(id)) throw Error("id " + id + " is reserved in " + this);

    if (this.isReservedName(name)) throw Error("name '" + name + "' is reserved in " + this);

    if (this.valuesById[id] !== undefined) {
        if (!(this.options && this.options.allow_alias)) throw Error("duplicate id " + id + " in " + this);
        this.values[name] = id;
    } else this.valuesById[this.values[name] = id] = name;

    this.comments[name] = comment || null;
    return this;
};

/**
 * Removes a value from this enum
 * @param {string} name Value name
 * @returns {Enum} `this`
 * @throws {TypeError} If arguments are invalid
 * @throws {Error} If `name` is not a name of this enum
 */
Enum.prototype.remove = function remove(name) {

    if (!util.isString(name)) throw TypeError("name must be a string");

    var val = this.values[name];
    if (val == null) throw Error("name '" + name + "' does not exist in " + this);

    delete this.valuesById[val];
    delete this.values[name];
    delete this.comments[name];

    return this;
};

/**
 * Tests if the specified id is reserved.
 * @param {number} id Id to test
 * @returns {boolean} `true` if reserved, otherwise `false`
 */
Enum.prototype.isReservedId = function isReservedId(id) {
    return Namespace.isReservedId(this.reserved, id);
};

/**
 * Tests if the specified name is reserved.
 * @param {string} name Name to test
 * @returns {boolean} `true` if reserved, otherwise `false`
 */
Enum.prototype.isReservedName = function isReservedName(name) {
    return Namespace.isReservedName(this.reserved, name);
};

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(135);
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = __webpack_require__(138);
exports.Duplex = __webpack_require__(28);
exports.Transform = __webpack_require__(140);
exports.PassThrough = __webpack_require__(265);


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

/* eslint-disable node/no-deprecated-api */
var buffer = __webpack_require__(11)
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isValue         = __webpack_require__(35)
  , isPlainFunction = __webpack_require__(145)
  , assign          = __webpack_require__(93)
  , normalizeOpts   = __webpack_require__(146)
  , contains        = __webpack_require__(147);

var d = (module.exports = function (dscr, value/*, options*/) {
	var c, e, w, options, desc;
	if (arguments.length < 2 || typeof dscr !== "string") {
		options = value;
		value = dscr;
		dscr = null;
	} else {
		options = arguments[2];
	}
	if (isValue(dscr)) {
		c = contains.call(dscr, "c");
		e = contains.call(dscr, "e");
		w = contains.call(dscr, "w");
	} else {
		c = w = true;
		e = false;
	}

	desc = { value: value, configurable: c, enumerable: e, writable: w };
	return !options ? desc : assign(normalizeOpts(options), desc);
});

d.gs = function (dscr, get, set/*, options*/) {
	var c, e, options, desc;
	if (typeof dscr !== "string") {
		options = set;
		set = get;
		get = dscr;
		dscr = null;
	} else {
		options = arguments[3];
	}
	if (!isValue(get)) {
		get = undefined;
	} else if (!isPlainFunction(get)) {
		options = get;
		get = set = undefined;
	} else if (!isValue(set)) {
		set = undefined;
	} else if (!isPlainFunction(set)) {
		options = set;
		set = undefined;
	}
	if (isValue(dscr)) {
		c = contains.call(dscr, "c");
		e = contains.call(dscr, "e");
	} else {
		c = true;
		e = false;
	}

	desc = { get: get, set: set, configurable: c, enumerable: e };
	return !options ? desc : assign(normalizeOpts(options), desc);
};


/***/ }),
/* 17 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(8);
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};


/***/ }),
/* 19 */
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isValue = __webpack_require__(34);

module.exports = function (value) {
	if (!isValue(value)) throw new TypeError("Cannot use null or undefined");
	return value;
};


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

// optional / simple context binding
var aFunction = __webpack_require__(40);
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(12);
var createDesc = __webpack_require__(41);
module.exports = __webpack_require__(9) ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(290)()
	? __webpack_require__(63).Symbol
	: __webpack_require__(291);


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = __webpack_require__(10);

var _typeof3 = _interopRequireDefault(_typeof2);

var _freeze = __webpack_require__(165);

var _freeze2 = _interopRequireDefault(_freeze);

var _keys = __webpack_require__(7);

var _keys2 = _interopRequireDefault(_keys);

var _create = __webpack_require__(6);

var _create2 = _interopRequireDefault(_create);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Created by zhangmiao on 2018/3/12.
 */

module.exports = Field;

// extends ReflectionObject
var ReflectionObject = __webpack_require__(37);
((Field.prototype = (0, _create2.default)(ReflectionObject.prototype)).constructor = Field).className = "Field";

var Enum, types, util;

var Type; // cyclic

var ruleRe = /^required|optional|repeated$/;

/**
 * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.
 * @name Field
 * @classdesc Reflected message field.
 * @extends FieldBase
 * @constructor
 * @param {string} name Unique name within its namespace
 * @param {number} id Unique id within its namespace
 * @param {string} type Value type
 * @param {string|Object.<string,*>} [rule="optional"] Field rule
 * @param {string|Object.<string,*>} [extend] Extended type if different from parent
 * @param {Object.<string,*>} [options] Declared options
 */

/**
 * Constructs a field from a field descriptor.
 * @param {string} name Field name
 * @param {IField} json Field descriptor
 * @returns {Field} Created field
 * @throws {TypeError} If arguments are invalid
 */
Field.fromJSON = function fromJSON(name, json) {
    return new Field(name, json.id, json.type, json.rule, json.extend, json.options, json.comment);
};

/**
 * Not an actual constructor. Use {@link Field} instead.
 * @classdesc Base class of all reflected message fields. This is not an actual class but here for the sake of having consistent type definitions.
 * @exports FieldBase
 * @extends ReflectionObject
 * @constructor
 * @param {string} name Unique name within its namespace
 * @param {number} id Unique id within its namespace
 * @param {string} type Value type
 * @param {string|Object.<string,*>} [rule="optional"] Field rule
 * @param {string|Object.<string,*>} [extend] Extended type if different from parent
 * @param {Object.<string,*>} [options] Declared options
 * @param {string} [comment] Comment associated with this field
 */
function Field(name, id, type, rule, extend, options, comment) {

    if (util.isObject(rule)) {
        comment = extend;
        options = rule;
        rule = extend = undefined;
    } else if (util.isObject(extend)) {
        comment = options;
        options = extend;
        extend = undefined;
    }

    ReflectionObject.call(this, name, options);

    if (!util.isInteger(id) || id < 0) throw TypeError("id must be a non-negative integer");

    if (!util.isString(type)) throw TypeError("type must be a string");

    if (rule !== undefined && !ruleRe.test(rule = rule.toString().toLowerCase())) throw TypeError("rule must be a string rule");

    if (extend !== undefined && !util.isString(extend)) throw TypeError("extend must be a string");

    /**
     * Field rule, if any.
     * @type {string|undefined}
     */
    this.rule = rule && rule !== "optional" ? rule : undefined; // toJSON

    /**
     * Field type.
     * @type {string}
     */
    this.type = type; // toJSON

    /**
     * Unique field id.
     * @type {number}
     */
    this.id = id; // toJSON, marker

    /**
     * Extended type if different from parent.
     * @type {string|undefined}
     */
    this.extend = extend || undefined; // toJSON

    /**
     * Whether this field is required.
     * @type {boolean}
     */
    this.required = rule === "required";

    /**
     * Whether this field is optional.
     * @type {boolean}
     */
    this.optional = !this.required;

    /**
     * Whether this field is repeated.
     * @type {boolean}
     */
    this.repeated = rule === "repeated";

    /**
     * Whether this field is a map or not.
     * @type {boolean}
     */
    this.map = false;

    /**
     * Message this field belongs to.
     * @type {Type|null}
     */
    this.message = null;

    /**
     * OneOf this field belongs to, if any,
     * @type {OneOf|null}
     */
    this.partOf = null;

    /**
     * The field type's default value.
     * @type {*}
     */
    this.typeDefault = null;

    /**
     * The field's default value on prototypes.
     * @type {*}
     */
    this.defaultValue = null;

    /**
     * Whether this field's value should be treated as a long.
     * @type {boolean}
     */
    this.long = util.Long ? types.long[type] !== undefined : /* istanbul ignore next */false;

    /**
     * Whether this field's value is a buffer.
     * @type {boolean}
     */
    this.bytes = type === "bytes";

    /**
     * Resolved type if not a basic type.
     * @type {Type|Enum|null}
     */
    this.resolvedType = null;

    /**
     * Sister-field within the extended type if a declaring extension field.
     * @type {Field|null}
     */
    this.extensionField = null;

    /**
     * Sister-field within the declaring namespace if an extended field.
     * @type {Field|null}
     */
    this.declaringField = null;

    /**
     * Internally remembers whether this field is packed.
     * @type {boolean|null}
     * @private
     */
    this._packed = null;

    /**
     * Comment for this field.
     * @type {string|null}
     */
    this.comment = comment;
}

/**
 * Determines whether this field is packed. Only relevant when repeated and working with proto2.
 * @name Field#packed
 * @type {boolean}
 * @readonly
 */
Object.defineProperty(Field.prototype, "packed", {
    get: function get() {
        // defaults to packed=true if not explicity set to false
        if (this._packed === null) this._packed = this.getOption("packed") !== false;
        return this._packed;
    }
});

/**
 * @override
 */
Field.prototype.setOption = function setOption(name, value, ifNotSet) {
    if (name === "packed") // clear cached before setting
        this._packed = null;
    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);
};

/**
 * Field descriptor.
 * @interface IField
 * @property {string} [rule="optional"] Field rule
 * @property {string} type Field type
 * @property {number} id Field id
 * @property {Object.<string,*>} [options] Field options
 */

/**
 * Extension field descriptor.
 * @interface IExtensionField
 * @extends IField
 * @property {string} extend Extended type
 */

/**
 * Converts this field to a field descriptor.
 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
 * @returns {IField} Field descriptor
 */
Field.prototype.toJSON = function toJSON(toJSONOptions) {
    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
    return util.toObject(["rule", this.rule !== "optional" && this.rule || undefined, "type", this.type, "id", this.id, "extend", this.extend, "options", this.options, "comment", keepComments ? this.comment : undefined]);
};

/**
 * Resolves this field's type references.
 * @returns {Field} `this`
 * @throws {Error} If any reference cannot be resolved
 */
Field.prototype.resolve = function resolve() {

    if (this.resolved) return this;

    if ((this.typeDefault = types.defaults[this.type]) === undefined) {
        // if not a basic type, resolve it
        this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);
        if (this.resolvedType instanceof Type) this.typeDefault = null;else // instanceof Enum
            this.typeDefault = this.resolvedType.values[(0, _keys2.default)(this.resolvedType.values)[0]]; // first defined
    }

    // use explicitly set default value if present
    if (this.options && this.options["default"] != null) {
        this.typeDefault = this.options["default"];
        if (this.resolvedType instanceof Enum && typeof this.typeDefault === "string") this.typeDefault = this.resolvedType.values[this.typeDefault];
    }

    // remove unnecessary options
    if (this.options) {
        if (this.options.packed === true || this.options.packed !== undefined && this.resolvedType && !(this.resolvedType instanceof Enum)) delete this.options.packed;
        if (!(0, _keys2.default)(this.options).length) this.options = undefined;
    }

    // convert to internal data type if necesssary
    if (this.long) {
        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === "u");

        /* istanbul ignore else */
        if (_freeze2.default) (0, _freeze2.default)(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)
    } else if (this.bytes && typeof this.typeDefault === "string") {
        var buf;
        //if (util.base64.test(this.typeDefault))
        //    util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);
        //else
        util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);
        this.typeDefault = buf;
    }

    // take special care of maps and repeated fields
    if (this.map) this.defaultValue = util.emptyObject;else if (this.repeated) this.defaultValue = util.emptyArray;else this.defaultValue = this.typeDefault;

    // ensure proper value on prototype
    if (this.parent instanceof Type) {
        this.parent.ctor.prototype[this.name] = this.defaultValue;
    }
    return ReflectionObject.prototype.resolve.call(this);
};

/**
 * Decorator function as returned by {@link Field.d} and {@link MapField.d} (TypeScript).
 * @typedef FieldDecorator
 * @type {function}
 * @param {Object} prototype Target prototype
 * @param {string} fieldName Field name
 * @returns {undefined}
 */

/**
 * Field decorator (TypeScript).
 * @name Field.d
 * @function
 * @param {number} fieldId Field id
 * @param {"double"|"float"|"int32"|"uint32"|"sint32"|"fixed32"|"sfixed32"|"int64"|"uint64"|"sint64"|"fixed64"|"sfixed64"|"string"|"bool"|"bytes"|Object} fieldType Field type
 * @param {"optional"|"required"|"repeated"} [fieldRule="optional"] Field rule
 * @param {T} [defaultValue] Default value
 * @returns {FieldDecorator} Decorator function
 * @template T extends number | number[] | Long | Long[] | string | string[] | boolean | boolean[] | Uint8Array | Uint8Array[] | Buffer | Buffer[]
 */
Field.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) {

    // submessage: decorate the submessage and use its name as the type
    if (typeof fieldType === "function") fieldType = util.decorateType(fieldType).name;

    // enum reference: create a reflected copy of the enum and keep reuseing it
    else if (fieldType && (typeof fieldType === "undefined" ? "undefined" : (0, _typeof3.default)(fieldType)) === "object") fieldType = util.decorateEnum(fieldType).name;

    return function fieldDecorator(prototype, fieldName) {
        util.decorateType(prototype.constructor).add(new Field(fieldName, fieldId, fieldType, fieldRule, { "default": defaultValue }));
    };
};

/**
 * Field decorator (TypeScript).
 * @name Field.d
 * @function
 * @param {number} fieldId Field id
 * @param {Constructor<T>|string} fieldType Field type
 * @param {"optional"|"required"|"repeated"} [fieldRule="optional"] Field rule
 * @returns {FieldDecorator} Decorator function
 * @template T extends Message<T>
 * @variation 2
 */
// like Field.d but without a default value

Field._configure = function configure() {
    Type = __webpack_require__(36);

    Enum = __webpack_require__(13);
    types = __webpack_require__(38);
    util = __webpack_require__(1);
};

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



var TYPED_OK =  (typeof Uint8Array !== 'undefined') &&
                (typeof Uint16Array !== 'undefined') &&
                (typeof Int32Array !== 'undefined');

function _has(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
}

exports.assign = function (obj /*from1, from2, from3, ...*/) {
  var sources = Array.prototype.slice.call(arguments, 1);
  while (sources.length) {
    var source = sources.shift();
    if (!source) { continue; }

    if (typeof source !== 'object') {
      throw new TypeError(source + 'must be non-object');
    }

    for (var p in source) {
      if (_has(source, p)) {
        obj[p] = source[p];
      }
    }
  }

  return obj;
};


// reduce buffer size, avoiding mem copy
exports.shrinkBuf = function (buf, size) {
  if (buf.length === size) { return buf; }
  if (buf.subarray) { return buf.subarray(0, size); }
  buf.length = size;
  return buf;
};


var fnTyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    if (src.subarray && dest.subarray) {
      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
      return;
    }
    // Fallback to ordinary array
    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function (chunks) {
    var i, l, len, pos, chunk, result;

    // calculate data length
    len = 0;
    for (i = 0, l = chunks.length; i < l; i++) {
      len += chunks[i].length;
    }

    // join chunks
    result = new Uint8Array(len);
    pos = 0;
    for (i = 0, l = chunks.length; i < l; i++) {
      chunk = chunks[i];
      result.set(chunk, pos);
      pos += chunk.length;
    }

    return result;
  }
};

var fnUntyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function (chunks) {
    return [].concat.apply([], chunks);
  }
};


// Enable/Disable typed arrays use, for testing
//
exports.setTyped = function (on) {
  if (on) {
    exports.Buf8  = Uint8Array;
    exports.Buf16 = Uint16Array;
    exports.Buf32 = Int32Array;
    exports.assign(exports, fnTyped);
  } else {
    exports.Buf8  = Array;
    exports.Buf16 = Array;
    exports.Buf32 = Array;
    exports.assign(exports, fnUntyped);
  }
};

exports.setTyped(TYPED_OK);


/***/ }),
/* 26 */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};


/***/ }),
/* 27 */
/***/ (function(module, exports) {

var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.



/*<replacement>*/

var pna = __webpack_require__(50);
/*</replacement>*/

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var util = __webpack_require__(51);
util.inherits = __webpack_require__(19);
/*</replacement>*/

var Readable = __webpack_require__(135);
var Writable = __webpack_require__(138);

util.inherits(Duplex, Readable);

{
  // avoid scope creep, the keys array can then be collected
  var keys = objectKeys(Writable.prototype);
  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
});

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  pna.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();

  pna.nextTick(cb, err);
};

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (fn) {
	if (typeof fn !== "function") throw new TypeError(fn + " is not a function");
	return fn;
};


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer, process) {var stream = __webpack_require__(14)
var eos = __webpack_require__(341)
var inherits = __webpack_require__(19)
var shift = __webpack_require__(344)

var SIGNAL_FLUSH = (Buffer.from && Buffer.from !== Uint8Array.from)
  ? Buffer.from([0])
  : new Buffer([0])

var onuncork = function(self, fn) {
  if (self._corked) self.once('uncork', fn)
  else fn()
}

var autoDestroy = function (self, err) {
  if (self._autoDestroy) self.destroy(err)
}

var destroyer = function(self, end) {
  return function(err) {
    if (err) autoDestroy(self, err.message === 'premature close' ? null : err)
    else if (end && !self._ended) self.end()
  }
}

var end = function(ws, fn) {
  if (!ws) return fn()
  if (ws._writableState && ws._writableState.finished) return fn()
  if (ws._writableState) return ws.end(fn)
  ws.end()
  fn()
}

var toStreams2 = function(rs) {
  return new (stream.Readable)({objectMode:true, highWaterMark:16}).wrap(rs)
}

var Duplexify = function(writable, readable, opts) {
  if (!(this instanceof Duplexify)) return new Duplexify(writable, readable, opts)
  stream.Duplex.call(this, opts)

  this._writable = null
  this._readable = null
  this._readable2 = null

  this._autoDestroy = !opts || opts.autoDestroy !== false
  this._forwardDestroy = !opts || opts.destroy !== false
  this._forwardEnd = !opts || opts.end !== false
  this._corked = 1 // start corked
  this._ondrain = null
  this._drained = false
  this._forwarding = false
  this._unwrite = null
  this._unread = null
  this._ended = false

  this.destroyed = false

  if (writable) this.setWritable(writable)
  if (readable) this.setReadable(readable)
}

inherits(Duplexify, stream.Duplex)

Duplexify.obj = function(writable, readable, opts) {
  if (!opts) opts = {}
  opts.objectMode = true
  opts.highWaterMark = 16
  return new Duplexify(writable, readable, opts)
}

Duplexify.prototype.cork = function() {
  if (++this._corked === 1) this.emit('cork')
}

Duplexify.prototype.uncork = function() {
  if (this._corked && --this._corked === 0) this.emit('uncork')
}

Duplexify.prototype.setWritable = function(writable) {
  if (this._unwrite) this._unwrite()

  if (this.destroyed) {
    if (writable && writable.destroy) writable.destroy()
    return
  }

  if (writable === null || writable === false) {
    this.end()
    return
  }

  var self = this
  var unend = eos(writable, {writable:true, readable:false}, destroyer(this, this._forwardEnd))

  var ondrain = function() {
    var ondrain = self._ondrain
    self._ondrain = null
    if (ondrain) ondrain()
  }

  var clear = function() {
    self._writable.removeListener('drain', ondrain)
    unend()
  }

  if (this._unwrite) process.nextTick(ondrain) // force a drain on stream reset to avoid livelocks

  this._writable = writable
  this._writable.on('drain', ondrain)
  this._unwrite = clear

  this.uncork() // always uncork setWritable
}

Duplexify.prototype.setReadable = function(readable) {
  if (this._unread) this._unread()

  if (this.destroyed) {
    if (readable && readable.destroy) readable.destroy()
    return
  }

  if (readable === null || readable === false) {
    this.push(null)
    this.resume()
    return
  }

  var self = this
  var unend = eos(readable, {writable:false, readable:true}, destroyer(this))

  var onreadable = function() {
    self._forward()
  }

  var onend = function() {
    self.push(null)
  }

  var clear = function() {
    self._readable2.removeListener('readable', onreadable)
    self._readable2.removeListener('end', onend)
    unend()
  }

  this._drained = true
  this._readable = readable
  this._readable2 = readable._readableState ? readable : toStreams2(readable)
  this._readable2.on('readable', onreadable)
  this._readable2.on('end', onend)
  this._unread = clear

  this._forward()
}

Duplexify.prototype._read = function() {
  this._drained = true
  this._forward()
}

Duplexify.prototype._forward = function() {
  if (this._forwarding || !this._readable2 || !this._drained) return
  this._forwarding = true

  var data

  while (this._drained && (data = shift(this._readable2)) !== null) {
    if (this.destroyed) continue
    this._drained = this.push(data)
  }

  this._forwarding = false
}

Duplexify.prototype.destroy = function(err) {
  if (this.destroyed) return
  this.destroyed = true

  var self = this
  process.nextTick(function() {
    self._destroy(err)
  })
}

Duplexify.prototype._destroy = function(err) {
  if (err) {
    var ondrain = this._ondrain
    this._ondrain = null
    if (ondrain) ondrain(err)
    else this.emit('error', err)
  }

  if (this._forwardDestroy) {
    if (this._readable && this._readable.destroy) this._readable.destroy()
    if (this._writable && this._writable.destroy) this._writable.destroy()
  }

  this.emit('close')
}

Duplexify.prototype._write = function(data, enc, cb) {
  if (this.destroyed) return cb()
  if (this._corked) return onuncork(this, this._write.bind(this, data, enc, cb))
  if (data === SIGNAL_FLUSH) return this._finish(cb)
  if (!this._writable) return cb()

  if (this._writable.write(data) === false) this._ondrain = cb
  else cb()
}

Duplexify.prototype._finish = function(cb) {
  var self = this
  this.emit('preend')
  onuncork(this, function() {
    end(self._forwardEnd && self._writable, function() {
      // haxx to not emit prefinish twice
      if (self._writableState.prefinished === false) self._writableState.prefinished = true
      self.emit('prefinish')
      onuncork(self, cb)
    })
  })
}

Duplexify.prototype.end = function(data, enc, cb) {
  if (typeof data === 'function') return this.end(null, null, data)
  if (typeof enc === 'function') return this.end(data, null, enc)
  this._ended = true
  if (data) this.write(data)
  if (!this._writableState.ending) this.write(SIGNAL_FLUSH)
  return stream.Writable.prototype.end.call(this, cb)
}

module.exports = Duplexify

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(11).Buffer, __webpack_require__(3)))

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $at = __webpack_require__(203)(true);

// 21.1.3.27 String.prototype[@@iterator]()
__webpack_require__(72)(String, 'String', function (iterated) {
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return { value: undefined, done: true };
  point = $at(O, index);
  this._i += point.length;
  return { value: point, done: false };
});


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = __webpack_require__(75);
var defined = __webpack_require__(71);
module.exports = function (it) {
  return IObject(defined(it));
};


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.13 ToObject(argument)
var defined = __webpack_require__(71);
module.exports = function (it) {
  return Object(defined(it));
};


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _undefined = __webpack_require__(269)(); // Support ES3 engines

module.exports = function (val) { return val !== _undefined && val !== null; };


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// ES3 safe
var _undefined = void 0;

module.exports = function (value) { return value !== _undefined && value !== null; };


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _keys = __webpack_require__(7);

var _keys2 = _interopRequireDefault(_keys);

var _defineProperties = __webpack_require__(168);

var _defineProperties2 = _interopRequireDefault(_defineProperties);

var _create = __webpack_require__(6);

var _create2 = _interopRequireDefault(_create);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Created by zhangmiao on 2018/3/13.
 */

module.exports = Type;

var Namespace = __webpack_require__(52);
((Type.prototype = (0, _create2.default)(Namespace.prototype)).constructor = Type).className = "Type";

var Enum, Field, Message, OneOf, Writer, Reader, util, verifier, encoder, decoder, Service, wrappers, converter, MapField;

function Type(name, options) {
    Namespace.call(this, name, options);

    /**
     * Message fields.
     * @type {Object.<string,Field>}
     */
    this.fields = {}; // toJSON, marker

    /**
     * Oneofs declared within this namespace, if any.
     * @type {Object.<string,OneOf>}
     */
    this.oneofs = undefined; // toJSON

    /**
     * Extension ranges, if any.
     * @type {number[][]}
     */
    this.extensions = undefined; // toJSON

    /**
     * Reserved ranges, if any.
     * @type {Array.<number[]|string>}
     */
    this.reserved = undefined; // toJSON

    /*?
     * Whether this type is a legacy group.
     * @type {boolean|undefined}
     */
    this.group = undefined; // toJSON 这个可能不需要,因为不支持

    /**
     * Cached fields by id.
     * @type {Object.<number,Field>|null}
     * @private
     */
    this._fieldsById = null;

    /**
     * Cached fields as an array.
     * @type {Field[]|null}
     * @private
     */
    this._fieldsArray = null;

    /**
     * Cached oneofs as an array.
     * @type {OneOf[]|null}
     * @private
     */
    this._oneofsArray = null;

    /**
     * Cached constructor.
     * @type {Constructor<{}>}
     * @private
     */
    this._ctor = null;
}

(0, _defineProperties2.default)(Type.prototype, {

    /**
     * Message fields by id.
     * @name Type#fieldsById
     * @type {Object.<number,Field>}
     * @readonly
     */
    fieldsById: {
        get: function get() {

            /* istanbul ignore if */
            if (this._fieldsById) return this._fieldsById;

            this._fieldsById = {};
            for (var names = (0, _keys2.default)(this.fields), i = 0; i < names.length; ++i) {
                var field = this.fields[names[i]],
                    id = field.id;

                /* istanbul ignore if */
                if (this._fieldsById[id]) throw Error("duplicate id " + id + " in " + this);

                this._fieldsById[id] = field;
            }
            return this._fieldsById;
        }
    },

    /**
     * Fields of this message as an array for iteration.
     * @name Type#fieldsArray
     * @type {Field[]}
     * @readonly
     */
    fieldsArray: {
        get: function get() {
            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));
        }
    },

    /**
     * Oneofs of this message as an array for iteration.
     * @name Type#oneofsArray
     * @type {OneOf[]}
     * @readonly
     */
    oneofsArray: {
        get: function get() {
            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));
        }
    },

    /**
     * The registered constructor, if any registered, otherwise a generic constructor.
     * Assigning a function replaces the internal constructor. If the function does not extend {@link Message} yet, its prototype will be setup accordingly and static methods will be populated. If it already extends {@link Message}, it will just replace the internal constructor.
     * @name Type#ctor
     * @type {Constructor<{}>}
     */
    ctor: {
        get: function get() {
            return this._ctor || (this.ctor = Type.generateConstructor(this));
        },
        set: function set(ctor) {

            // Ensure proper prototype
            var prototype = ctor.prototype;
            if (!(prototype instanceof Message)) {
                (ctor.prototype = new Message()).constructor = ctor;
                util.merge(ctor.prototype, prototype);
            }

            // Classes and messages reference their reflected type
            ctor.$type = ctor.prototype.$type = this;

            // Mix in static methods
            util.merge(ctor, Message, true);
            util.merge(ctor.prototype, Message, true);

            this._ctor = ctor;

            // Messages have non-enumerable default values on their prototype
            var i = 0;
            for (; i < /* initializes */this.fieldsArray.length; ++i) {
                this._fieldsArray[i].resolve();
            } // ensures a proper value

            // Messages have non-enumerable getters and setters for each virtual oneof field
            var ctorProperties = {};
            for (i = 0; i < /* initializes */this.oneofsArray.length; ++i) {
                var oneofName = this._oneofsArray[i].resolve().name;

                var oneOfGetAndSet = function (fieldNames) {
                    var fieldMap = {};
                    for (var i = 0; i < fieldNames.length; ++i) {
                        fieldMap[fieldNames[i]] = 0;
                    }return {
                        setter: function setter(name) {
                            if (fieldNames.indexOf(name) < 0) return;
                            fieldMap[name] = 1;
                            for (var i = 0; i < fieldNames.length; ++i) {
                                if (fieldNames[i] !== name) delete this[/*"_"+*/fieldNames[i]];
                            }
                        },

                        getter: function getter() {
                            for (var keys = (0, _keys2.default)(this), i = keys.length - 1; i > -1; --i) {
                                if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null) return keys[i];
                            }
                        }

                    };
                }(this._oneofsArray[i].oneof);

                ctorProperties[oneofName] = {
                    get: oneOfGetAndSet.getter,
                    set: oneOfGetAndSet.setter
                };
                //var fieldNames = this._oneofsArray[i].oneof;
                //for (var  j = 0 ; j < fieldNames.length; j++){
                //    var fieldName = fieldNames[j];
                //    ctorProperties[fieldName] = {
                //        set : (function(oneofName, fieldName){
                //            return function (value){
                //                this[oneofName] = fieldName;
                //                this["_"+fieldName] = value;
                //            }
                //        })(oneofName , fieldName),
                //        get : (function(fieldName){
                //            return function (){
                //                return this["_"+fieldName];
                //            }
                //        })(fieldName)
                //    }
                //}
            }

            if (i) {
                //util.merge(ctor.prototype, ctorProperties, true);
                (0, _defineProperties2.default)(ctor.prototype, ctorProperties);
            }
        }
    }
});

//生成一个构造函数
Type.generateConstructor = function generateConstructor(mtype) {
    return function (p) {
        for (var i = 0, field; i < mtype.fieldsArray.length; i++) {
            if ((field = mtype._fieldsArray[i]).map) {
                this[field.name] = {};
            } else if (field.repeated) {
                this[field.name] = [];
            }
        }

        if (p) {
            for (var ks = (0, _keys2.default)(p), j = 0; j < ks.length; ++j) {
                if (p[ks[j]] != null) {
                    this[ks[j]] = p[ks[j]];
                }
            }
        }
    };
};

function clearCache(type) {
    type._fieldsById = type._fieldsArray = type._oneofsArray = null;
    delete type.encode;
    delete type.decode;
    delete type.verify;
    return type;
}

Type.fromJSON = function fromJSON(name, json) {
    var type = new Type(name, json.options);
    type.extensions = json.extensions;
    type.reserved = json.reserved;
    var names = (0, _keys2.default)(json.fields),
        i = 0;
    for (; i < names.length; ++i) {
        type.add((typeof json.fields[names[i]].keyType !== "undefined" ? MapField.fromJSON : Field.fromJSON)(names[i], json.fields[names[i]]));
    }if (json.oneofs) for (names = (0, _keys2.default)(json.oneofs), i = 0; i < names.length; ++i) {
        type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));
    }if (json.nested) for (names = (0, _keys2.default)(json.nested), i = 0; i < names.length; ++i) {
        var nested = json.nested[names[i]];
        type.add( // most to least likely
        (nested.id !== undefined ? Field.fromJSON : nested.fields !== undefined ? Type.fromJSON : nested.values !== undefined ? Enum.fromJSON : nested.methods !== undefined ? Service.fromJSON : Namespace.fromJSON)(names[i], nested));
    }
    if (json.extensions && json.extensions.length) type.extensions = json.extensions;
    if (json.reserved && json.reserved.length) type.reserved = json.reserved;
    if (json.group) type.group = true;
    if (json.comment) type.comment = json.comment;
    return type;
};

Type.prototype.toJSON = function toJSON(toJSONOptions) {
    var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);
    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;

    return {
        "options": inherited && inherited.options || undefined,
        "oneofs": Namespace.arrayToJSON(this.oneofsArray, toJSONOptions),
        "fields": Namespace.arrayToJSON(this.fieldsArray.filter(function (obj) {
            return !obj.declaringField;
        }), toJSONOptions) || {},
        "extensions": this.extensions && this.extensions.length ? this.extensions : undefined,
        "reserved": this.reserved && this.reserved.length ? this.reserved : undefined,
        "group": this.group || undefined,
        "nested": inherited && inherited.nested || undefined,
        "comment": keepComments ? this.comment : undefined
    };
};

Type.prototype.resolveAll = function resolveAll() {
    var fields = this.fieldsArray,
        i = 0;
    while (i < fields.length) {
        fields[i++].resolve();
    }var oneofs = this.oneofsArray;i = 0;
    while (i < oneofs.length) {
        oneofs[i++].resolve();
    }return Namespace.prototype.resolveAll.call(this);
};

Type.prototype.get = function get(name) {
    return this.fields[name] || this.oneofs && this.oneofs[name] || this.nested && this.nested[name] || null;
};

Type.prototype.add = function add(object) {

    if (this.get(object.name)) throw Error("duplicate name '" + object.name + "' in " + this);

    if (object instanceof Field && object.extend === undefined) {
        if (this._fieldsById && this._fieldsById[object.id]) throw Error("duplicate id " + object.id + " in " + this);
        if (this.isReservedId(object.id)) throw Error("id " + object.id + " is reserved in " + this);
        if (this.isReservedName(object.name)) throw Error("name '" + object.name + "' is reserved in " + this);

        if (object.parent) object.parent.remove(object);
        this.fields[object.name] = object;
        object.message = this;
        object.onAdd(this);
        return clearCache(this);
    }
    if (object instanceof OneOf) {
        if (!this.oneofs) this.oneofs = {};
        this.oneofs[object.name] = object;
        object.onAdd(this);
        return clearCache(this);
    }
    return Namespace.prototype.add.call(this, object);
};

Type.prototype.remove = function remove(object) {
    if (object instanceof Field && object.extend === undefined) {
        // See Type#add for the reason why extension fields are excluded here.

        /* istanbul ignore if */
        if (!this.fields || this.fields[object.name] !== object) throw Error(object + " is not a member of " + this);

        delete this.fields[object.name];
        object.parent = null;
        object.onRemove(this);
        return clearCache(this);
    }
    if (object instanceof OneOf) {

        /* istanbul ignore if */
        if (!this.oneofs || this.oneofs[object.name] !== object) throw Error(object + " is not a member of " + this);

        delete this.oneofs[object.name];
        object.parent = null;
        object.onRemove(this);
        return clearCache(this);
    }
    return Namespace.prototype.remove.call(this, object);
};

Type.prototype.isReservedId = function isReservedId(id) {
    return Namespace.isReservedId(this.reserved, id);
};

Type.prototype.isReservedName = function isReservedName(name) {
    return Namespace.isReservedName(this.reserved, name);
};

Type.prototype.create = function create(properties) {
    return new this.ctor(properties);
};

Type.prototype.setup = function setup() {
    // Sets up everything at once so that the prototype chain does not have to be re-evaluated
    // multiple times (V8, soft-deopt prototype-check).

    var fullName = this.fullName,
        types = [];
    for (var i = 0; i < /* initializes */this.fieldsArray.length; ++i) {
        types.push(this._fieldsArray[i].resolve().resolvedType);
    } // Replace setup methods with type-specific generated functions
    this.encode = encoder(this)({
        Writer: Writer,
        types: types,
        util: util
    });

    this.decode = decoder(this)({
        Reader: Reader,
        types: types,
        util: util
    });
    this.verify = verifier(this)({
        types: types,
        util: util
    });

    this.fromObject = converter.fromObject(this)({
        types: types,
        util: util
    });
    this.toObject = converter.toObject(this)({
        types: types,
        util: util
    });

    // Inject custom wrappers for common types
    var wrapper = wrappers[fullName];
    if (wrapper) {
        var originalThis = (0, _create2.default)(this);
        // if (wrapper.fromObject) {
        originalThis.fromObject = this.fromObject;
        this.fromObject = wrapper.fromObject.bind(originalThis);
        // }
        // if (wrapper.toObject) {
        originalThis.toObject = this.toObject;
        this.toObject = wrapper.toObject.bind(originalThis);
        // }
    }

    return this;
};

/**
 * Encodes a message of this type. Does not implicitly {@link Type#verify|verify} messages.
 * @param {Message<{}>|Object.<string,*>} message Message instance or plain object
 * @param {Writer} [writer] Writer to encode to
 * @returns {Writer} writer
 */

Type.prototype.encode = function encode_setup(message, writer) {
    return this.setup().encode(message, writer); // overrides this method
};

/**
 * Encodes a message of this type preceeded by its byte length as a varint. Does not implicitly {@link Type#verify|verify} messages.
 * @param {Message<{}>|Object.<string,*>} message Message instance or plain object
 * @param {Writer} [writer] Writer to encode to
 * @returns {Writer} writer
 */
Type.prototype.encodeDelimited = function encodeDelimited(message, writer) {
    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();
};

/**
 * Decodes a message of this type.
 * @param {Reader|Uint8Array|ArrayBuffer} reader Reader or buffer to decode from
 * @param {number} [length] Length of the message, if known beforehand
 * @returns {Message<{}>} Decoded message
 * @throws {Error} If the payload is not a reader or valid buffer
 */

Type.prototype.decode = function decode_setup(reader, length) {
    return this.setup().decode(reader, length); // overrides this method
};
/**
 * Decodes a message of this type preceeded by its byte length as a varint.
 * @param {Reader|Uint8Array} reader Reader or buffer to decode from
 * @returns {Message<{}>} Decoded message
 * @throws {Error} If the payload is not a reader or valid buffer
 * @throws {util.ProtocolError} If required fields are missing
 */
Type.prototype.decodeDelimited = function decodeDelimited(reader) {
    if (!(reader instanceof Reader)) reader = Reader.create(reader);
    return this.decode(reader, reader.uint32());
};

/**
 * Verifies that field values are valid and that required fields are present.
 * @param {Object.<string,*>} message Plain object to verify
 * @returns {null|string} `null` if valid, otherwise the reason why it is not
 */

Type.prototype.verify = function verify_setup(message) {
    return this.setup().verify(message); // overrides this method
};

/**
 * Creates a new message of this type from a plain object. Also converts values to their respective internal types.
 * @param {Object.<string,*>} object Plain object to convert
 * @returns {Message<{}>} Message instance
 */
Type.prototype.fromObject = function fromObject(object) {
    return this.setup().fromObject(object);
};

/**
 * Conversion options as used by {@link Type#toObject} and {@link Message.toObject}.
 * @interface IConversionOptions
 * @property {Function} [longs] Long conversion type.
 * Valid values are `String` and `Number` (the global types).
 * Defaults to copy the present value, which is a possibly unsafe number without and a {@link Long} with a long library.
 * @property {Function} [enums] Enum value conversion type.
 * Only valid value is `String` (the global type).
 * Defaults to copy the present value, which is the numeric id.
 * @property {Function} [bytes] Bytes value conversion type.
 * Valid values are `Array` and (a base64 encoded) `String` (the global types).
 * Defaults to copy the present value, which usually is a Buffer under node and an Uint8Array in the browser.
 * @property {boolean} [defaults=false] Also sets default values on the resulting object
 * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`
 * @property {boolean} [objects=false] Sets empty objects for missing map fields even if `defaults=false`
 * @property {boolean} [oneofs=false] Includes virtual oneof properties set to the present field's name, if any
 * @property {boolean} [json=false] Performs additional JSON compatibility conversions, i.e. NaN and Infinity to strings
 */

/**
 * Creates a plain object from a message of this type. Also converts values to other types if specified.
 * @param {Message<{}>} message Message instance
 * @param {IConversionOptions} [options] Conversion options
 * @returns {Object.<string,*>} Plain object
 */
Type.prototype.toObject = function toObject(message, options) {
    return this.setup().toObject(message, options);
};

Type.d = function decorateType(typeName) {
    return function typeDecorator(target) {
        util.decorateType(target, typeName);
    };
};

Type._configure = function () {
    Enum = __webpack_require__(13);
    Field = __webpack_require__(24);
    Message = __webpack_require__(100);
    OneOf = __webpack_require__(53);
    Writer = __webpack_require__(164);
    Reader = __webpack_require__(173);
    util = __webpack_require__(1);
    verifier = __webpack_require__(174);
    encoder = __webpack_require__(175);
    decoder = __webpack_require__(176);
    Service = __webpack_require__(68);
    wrappers = __webpack_require__(177);
    converter = __webpack_require__(178);
    MapField = __webpack_require__(98);
};

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _keys = __webpack_require__(7);

var _keys2 = _interopRequireDefault(_keys);

var _defineProperties = __webpack_require__(168);

var _defineProperties2 = _interopRequireDefault(_defineProperties);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = ReflectionObject;

ReflectionObject.className = "ReflectionObject";
var util;

var Root; // cyclic

/**
 * Constructs a new reflection object instance.
 * @classdesc Base class of all reflection objects.
 * @constructor
 * @param {string} name Object name
 * @param {Object.<string,*>} [options] Declared options
 * @abstract
 */
function ReflectionObject(name, options) {

    if (!util.isString(name)) throw TypeError("name must be a string");

    if (options && !util.isObject(options)) throw TypeError("options must be an object");

    /**
     * Options.
     * @type {Object.<string,*>|undefined}
     */
    this.options = options; // toJSON

    /**
     * Unique name within its namespace.
     * @type {string}
     */
    this.name = name;

    /**
     * Parent namespace.
     * @type {Namespace|null}
     */
    this.parent = null;

    /**
     * Whether already resolved or not.
     * @type {boolean}
     */
    this.resolved = false;

    /**
     * Comment text, if any.
     * @type {string|null}
     */
    this.comment = null;

    /**
     * Defining file name.
     * @type {string|null}
     */
    this.filename = null;
}

(0, _defineProperties2.default)(ReflectionObject.prototype, {

    /**
     * Reference to the root namespace.
     * @name ReflectionObject#root
     * @type {Root}
     * @readonly
     */
    root: {
        get: function get() {
            var ptr = this;
            while (ptr.parent !== null) {
                ptr = ptr.parent;
            }return ptr;
        }
    },

    /**
     * Full name including leading dot.
     * @name ReflectionObject#fullName
     * @type {string}
     * @readonly
     */
    fullName: {
        get: function get() {
            var path = [this.name],
                ptr = this.parent;
            while (ptr) {
                path.unshift(ptr.name);
                ptr = ptr.parent;
            }
            return path.join(".");
        }
    }
});

/**
 * Converts this reflection object to its descriptor representation.
 * @returns {Object.<string,*>} Descriptor
 * @abstract
 */
ReflectionObject.prototype.toJSON = /* istanbul ignore next */function toJSON() {
    throw Error(); // not implemented, shouldn't happen
};

/**
 * Called when this object is added to a parent.
 * @param {ReflectionObject} parent Parent added to
 * @returns {undefined}
 */
ReflectionObject.prototype.onAdd = function onAdd(parent) {
    if (this.parent && this.parent !== parent) this.parent.remove(this);
    this.parent = parent;
    this.resolved = false;
    var root = parent.root;
    if (root instanceof Root) root._handleAdd(this);
};

/**
 * Called when this object is removed from a parent.
 * @param {ReflectionObject} parent Parent removed from
 * @returns {undefined}
 */
ReflectionObject.prototype.onRemove = function onRemove(parent) {
    var root = parent.root;
    if (root instanceof Root) root._handleRemove(this);
    this.parent = null;
    this.resolved = false;
};

/**
 * Resolves this objects type references.
 * @returns {ReflectionObject} `this`
 */
ReflectionObject.prototype.resolve = function resolve() {
    if (this.resolved) return this;
    if (this.root instanceof Root) this.resolved = true; // only if part of a root
    return this;
};

/**
 * Gets an option value.
 * @param {string} name Option name
 * @returns {*} Option value or `undefined` if not set
 */
ReflectionObject.prototype.getOption = function getOption(name) {
    if (this.options) return this.options[name];
    return undefined;
};

/**
 * Sets an option.
 * @param {string} name Option name
 * @param {*} value Option value
 * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set
 * @returns {ReflectionObject} `this`
 */
ReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {
    if (!ifNotSet || !this.options || this.options[name] === undefined) (this.options || (this.options = {}))[name] = value;
    return this;
};

/**
 * Sets multiple options.
 * @param {Object.<string,*>} options Options to set
 * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set
 * @returns {ReflectionObject} `this`
 */
ReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) {
    if (options) for (var keys = (0, _keys2.default)(options), i = 0; i < keys.length; ++i) {
        this.setOption(keys[i], options[keys[i]], ifNotSet);
    }return this;
};

/**
 * Converts this instance to its string representation.
 * @returns {string} Class name[, space, full name]
 */
ReflectionObject.prototype.toString = function toString() {
    var className = this.constructor.className,
        fullName = this.fullName;
    if (fullName.length) return className + " " + fullName;
    return className;
};

ReflectionObject._configure = function (Root_) {
    Root = __webpack_require__(67);
    util = __webpack_require__(1);
};

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Common type constants.
 * @namespace
 */

var types = module.exports;
var util = __webpack_require__(1);

var s = ["double", // 0
"float", // 1
"int32", // 2
"uint32", // 3
"sint32", // 4
"fixed32", // 5
"sfixed32", // 6
"int64", // 7
"uint64", // 8
"sint64", // 9
"fixed64", // 10
"sfixed64", // 11
"bool", // 12
"string", // 13
"bytes" // 14
];

function bake(values, offset) {
    var i = 0,
        o = {};
    offset |= 0;
    while (i < values.length) {
        o[s[i + offset]] = values[i++];
    }return o;
}

/**
 * Basic type wire types.
 * @type {Object.<string,number>}
 * @const
 * @property {number} double=1 Fixed64 wire type
 * @property {number} float=5 Fixed32 wire type
 * @property {number} int32=0 Varint wire type
 * @property {number} uint32=0 Varint wire type
 * @property {number} sint32=0 Varint wire type
 * @property {number} fixed32=5 Fixed32 wire type
 * @property {number} sfixed32=5 Fixed32 wire type
 * @property {number} int64=0 Varint wire type
 * @property {number} uint64=0 Varint wire type
 * @property {number} sint64=0 Varint wire type
 * @property {number} fixed64=1 Fixed64 wire type
 * @property {number} sfixed64=1 Fixed64 wire type
 * @property {number} bool=0 Varint wire type
 * @property {number} string=2 Ldelim wire type
 * @property {number} bytes=2 Ldelim wire type
 */
types.basic = bake([
/* double   */1,
/* float    */5,
/* int32    */0,
/* uint32   */0,
/* sint32   */0,
/* fixed32  */5,
/* sfixed32 */5,
/* int64    */0,
/* uint64   */0,
/* sint64   */0,
/* fixed64  */1,
/* sfixed64 */1,
/* bool     */0,
/* string   */2,
/* bytes    */2]);

/**
 * Basic type defaults.
 * @type {Object.<string,*>}
 * @const
 * @property {number} double=0 Double default
 * @property {number} float=0 Float default
 * @property {number} int32=0 Int32 default
 * @property {number} uint32=0 Uint32 default
 * @property {number} sint32=0 Sint32 default
 * @property {number} fixed32=0 Fixed32 default
 * @property {number} sfixed32=0 Sfixed32 default
 * @property {number} int64=0 Int64 default
 * @property {number} uint64=0 Uint64 default
 * @property {number} sint64=0 Sint32 default
 * @property {number} fixed64=0 Fixed64 default
 * @property {number} sfixed64=0 Sfixed64 default
 * @property {boolean} bool=false Bool default
 * @property {string} string="" String default
 * @property {Array.<number>} bytes=Array(0) Bytes default
 * @property {null} message=null Message default
 */
types.defaults = bake([
/* double   */0,
/* float    */0,
/* int32    */0,
/* uint32   */0,
/* sint32   */0,
/* fixed32  */0,
/* sfixed32 */0,
/* int64    */0,
/* uint64   */0,
/* sint64   */0,
/* fixed64  */0,
/* sfixed64 */0,
/* bool     */false,
/* string   */"",
/* bytes    */util.emptyArray,
/* message  */null]);

/**
 * Basic long type wire types.
 * @type {Object.<string,number>}
 * @const
 * @property {number} int64=0 Varint wire type
 * @property {number} uint64=0 Varint wire type
 * @property {number} sint64=0 Varint wire type
 * @property {number} fixed64=1 Fixed64 wire type
 * @property {number} sfixed64=1 Fixed64 wire type
 */
types.long = bake([
/* int64    */0,
/* uint64   */0,
/* sint64   */0,
/* fixed64  */1,
/* sfixed64 */1], 7);

/**
 * Allowed types for map keys with their associated wire type.
 * @type {Object.<string,number>}
 * @const
 * @property {number} int32=0 Varint wire type
 * @property {number} uint32=0 Varint wire type
 * @property {number} sint32=0 Varint wire type
 * @property {number} fixed32=5 Fixed32 wire type
 * @property {number} sfixed32=5 Fixed32 wire type
 * @property {number} int64=0 Varint wire type
 * @property {number} uint64=0 Varint wire type
 * @property {number} sint64=0 Varint wire type
 * @property {number} fixed64=1 Fixed64 wire type
 * @property {number} sfixed64=1 Fixed64 wire type
 * @property {number} bool=0 Varint wire type
 * @property {number} string=2 Ldelim wire type
 */
types.mapKey = bake([
/* int32    */0,
/* uint32   */0,
/* sint32   */0,
/* fixed32  */5,
/* sfixed32 */5,
/* int64    */0,
/* uint64   */0,
/* sint64   */0,
/* fixed64  */1,
/* sfixed64 */1,
/* bool     */0,
/* string   */2], 2);

/**
 * Allowed types for packed repeated fields with their associated wire type.
 * @type {Object.<string,number>}
 * @const
 * @property {number} double=1 Fixed64 wire type
 * @property {number} float=5 Fixed32 wire type
 * @property {number} int32=0 Varint wire type
 * @property {number} uint32=0 Varint wire type
 * @property {number} sint32=0 Varint wire type
 * @property {number} fixed32=5 Fixed32 wire type
 * @property {number} sfixed32=5 Fixed32 wire type
 * @property {number} int64=0 Varint wire type
 * @property {number} uint64=0 Varint wire type
 * @property {number} sint64=0 Varint wire type
 * @property {number} fixed64=1 Fixed64 wire type
 * @property {number} sfixed64=1 Fixed64 wire type
 * @property {number} bool=0 Varint wire type
 */
types.packed = bake([
/* double   */1,
/* float    */5,
/* int32    */0,
/* uint32   */0,
/* sint32   */0,
/* fixed32  */5,
/* sfixed32 */5,
/* int64    */0,
/* uint64   */0,
/* sint64   */0,
/* fixed64  */1,
/* sfixed64 */1,
/* bool     */0]);

types._configure = function () {
    util = __webpack_require__(1);
};

/***/ }),
/* 39 */
/***/ (function(module, exports) {

module.exports = true;


/***/ }),
/* 40 */
/***/ (function(module, exports) {

module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};


/***/ }),
/* 41 */
/***/ (function(module, exports) {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};


/***/ }),
/* 42 */
/***/ (function(module, exports) {

module.exports = {};


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = __webpack_require__(107);
var enumBugKeys = __webpack_require__(78);

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};


/***/ }),
/* 44 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

var def = __webpack_require__(12).f;
var has = __webpack_require__(27);
var TAG = __webpack_require__(5)('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(208);
var global = __webpack_require__(4);
var hide = __webpack_require__(22);
var Iterators = __webpack_require__(42);
var TO_STRING_TAG = __webpack_require__(5)('toStringTag');

var DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +
  'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +
  'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +
  'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +
  'TextTrackList,TouchList').split(',');

for (var i = 0; i < DOMIterables.length; i++) {
  var NAME = DOMIterables[i];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
  Iterators[NAME] = Iterators.Array;
}


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

var ctx = __webpack_require__(21);
var call = __webpack_require__(110);
var isArrayIter = __webpack_require__(111);
var anObject = __webpack_require__(18);
var toLength = __webpack_require__(56);
var getIterFn = __webpack_require__(81);
var BREAK = {};
var RETURN = {};
var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
  var f = ctx(fn, that, entries ? 2 : 1);
  var index = 0;
  var length, step, iterator, result;
  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if (result === BREAK || result === RETURN) return result;
  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
    result = call(iterator, f, step.value, entries);
    if (result === BREAK || result === RETURN) return result;
  }
};
exports.BREAK = BREAK;
exports.RETURN = RETURN;


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _from = __webpack_require__(120);

var _from2 = _interopRequireDefault(_from);

var _toConsumableArray2 = __webpack_require__(86);

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Copyright (c) 2020 WildFireChat. All rights reserved.
 */

var base64Decode = __webpack_require__(61).decode;
var base64Encode = __webpack_require__(61).encode;
var aesjs = __webpack_require__(240);
var sm4 = __webpack_require__(241).sm4;

var AES_KEY = [0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F];
var useSM4 = false;

/**
 * 
 * @param {string | Int8Array} msg 
 * @param {string} userKey
 * @param {boolean} withDate
 * @returns {string} encrypted msg in base64 format
 */
function AESEncrypt(msg) {
    var userKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    var withDate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

    var key = AES_KEY;
    if (userKey.length > 0) {
        key = convertUserKey(userKey);
    }

    var msgWithTimeBytes = new Array();
    if (withDate) {
        var curhour = parseInt((new Date().getTime() / 1000 - 1514736000) / 3600);
        msgWithTimeBytes.push(curhour & 0XFF); // 会为负
        msgWithTimeBytes.push((curhour & 0XFF00) >> 8);
        msgWithTimeBytes.push((curhour & 0XFF0000) >> 16);
        msgWithTimeBytes.push(curhour >> 24);
    }

    if (typeof msg === 'string') {
        var _msgWithTimeBytes;

        (_msgWithTimeBytes = msgWithTimeBytes).push.apply(_msgWithTimeBytes, (0, _toConsumableArray3.default)(stringToBytes(msg)));
    } else {
        // msgWithTimeBytes.push(...msg);
        var tmp = (0, _from2.default)(msg);
        tmp.unshift.apply(tmp, (0, _toConsumableArray3.default)(msgWithTimeBytes));
        // msgWithTimeBytes = msgWithTimeBytes.concat(tmp)
        msgWithTimeBytes = tmp;
    }

    if (useSM4) {
        var e = sm4.encrypt(msgWithTimeBytes, key, { iv: key, mode: 'cbc', padding: 'pkcs#5', output: 'array' });
        return base64Encode(e);
    } else {
        msgWithTimeBytes = aesjs.padding.pkcs7.pad(msgWithTimeBytes);

        var aesCbc = new aesjs.ModeOfOperation.cbc(key, key);
        var encryptedBytes = aesCbc.encrypt(msgWithTimeBytes);
        return base64Encode(encryptedBytes);
    }
}

/**
 * 
 * @param {string} msg crypted msg in base64 format
 * @param {string} userKey
 * @param {boolean} checkTime
 * @param {boolean} withDate
 * 
 * @returns decrypted byte array
 */
function AESDecrypt(msg, userKey, checkTime) {
    var withDate = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

    var aesKey = AES_KEY;
    if (userKey.length > 0) {
        aesKey = convertUserKey(userKey);
    }

    var cipherBytes;
    if (useSM4) {
        var encryptedByteArray = new Uint8Array(base64Decode(msg));
        var encryptedBytes = [].concat((0, _toConsumableArray3.default)(encryptedByteArray));
        cipherBytes = sm4.decrypt(encryptedBytes, aesKey, { iv: aesKey, mode: 'cbc', padding: 'pkcs#5', output: 'array' });
        cipherBytes = new Uint8Array(cipherBytes);
    } else {
        var _encryptedByteArray = new Uint8Array(base64Decode(msg));
        var _encryptedBytes = [].concat((0, _toConsumableArray3.default)(_encryptedByteArray));
        var aesCbc = new aesjs.ModeOfOperation.cbc(aesKey, aesKey);
        cipherBytes = aesCbc.decrypt(_encryptedBytes);
        cipherBytes = aesjs.padding.pkcs7.strip(cipherBytes);
    }

    if (withDate && cipherBytes.length > 4) {
        if (checkTime) {
            var hours = 0;
            hours += cipherBytes[3] && 0xFF;
            hours <<= 8;
            hours += cipherBytes[2] && 0xFF;
            hours <<= 8;
            hours += cipherBytes[1] && 0xFF;
            hours <<= 8;
            hours += cipherBytes[0] && 0xFF;
            hours <<= 8;

            var curhour = (new Date().getUTCMilliseconds() / 1000 - 1514736000) / 3600;

            if (curhour - hours > 24 && checkTime) {
                return null;
            } else {
                return cipherBytes.slice(4, cipherBytes.length);
            }
        } else {
            return cipherBytes.slice(4, cipherBytes.length);
        }
    } else {
        return cipherBytes.length > 4 ? cipherBytes : null;
    }
}

function Uint8ToStr(arr) {
    for (var i = 0, str = ''; i < arr.length; i++) {
        str += String.fromCharCode(arr[i]);
    }return str;
}

function convertUserKey(str) {
    var arr = [];
    for (var i = 0; i < str.length && i < 16; i++) {
        arr.push(str.charCodeAt(i));
    }
    return new Uint8Array(arr);
}

function StrToUint8(str) {
    for (var i = 0, arr = []; i < str.length; i++) {
        arr.push(str.charCodeAt(i));
    }
    return new Uint8Array(arr);
}

function hexstring2btye(str) {
    var pos = 0;
    var len = str.length;
    if (len % 2 != 0) {
        return null;
    }
    len /= 2;
    var hexA = new Array();
    for (var i = 0; i < len; i++) {
        var s = str.substr(pos, 2);
        var v = parseInt(s, 16);
        hexA.push(v);
        pos += 2;
    }
    return hexA;
}

function stringToBytes(str) {
    var bytes = new Array();
    var len, c;
    len = str.length;
    for (var i = 0; i < len; i++) {
        c = str.charCodeAt(i);
        if (c >= 0x010000 && c <= 0x10FFFF) {
            bytes.push(c >> 18 & 0x07 | 0xF0);
            bytes.push(c >> 12 & 0x3F | 0x80);
            bytes.push(c >> 6 & 0x3F | 0x80);
            bytes.push(c & 0x3F | 0x80);
        } else if (c >= 0x000800 && c <= 0x00FFFF) {
            bytes.push(c >> 12 & 0x0F | 0xE0);
            bytes.push(c >> 6 & 0x3F | 0x80);
            bytes.push(c & 0x3F | 0x80);
        } else if (c >= 0x000080 && c <= 0x0007FF) {
            bytes.push(c >> 6 & 0x1F | 0xC0);
            bytes.push(c & 0x3F | 0x80);
        } else {
            bytes.push(c & 0xFF);
        }
    }
    return bytes;
}

function bytes2HexString(arrBytes) {
    var str = "";
    for (var i = 0; i < arrBytes.length; i++) {
        var tmp = void 0;
        var num = arrBytes[i];
        if (num < 0) {
            //此处填坑，当byte因为符合位导致数值为负时候，需要对数据进行处理
            tmp = (255 + num + 1).toString(16);
        } else {
            tmp = num.toString(16);
        }
        if (tmp.length == 1) {
            tmp = "0" + tmp;
        }
        str += tmp;
    }
    return str;
}

function useEncryptSM4() {
    useSM4 = true;
}

module.exports.useEncryptSM4 = useEncryptSM4;

module.exports.AESEncrypt = AESEncrypt;
module.exports.AESDecrypt = AESDecrypt;
module.exports.Uint8ToStr = Uint8ToStr;

function test() {
    useSM4 = false;
    var str = "hello world!!";
    var e = AESEncrypt(str);
    var d = AESDecrypt(e, '');
    console.log('aes', e, d);

    useSM4 = true;
    e = AESEncrypt(str);
    d = AESDecrypt(e, '');
    console.log('sm4', e, d);
}

// test()

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function $getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return $getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = $getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  var args = [];
  for (var i = 0; i < arguments.length; i++) args.push(arguments[i]);
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    ReflectApply(this.listener, this.target, args);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      if (typeof listener !== 'function') {
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
      }
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      if (typeof listener !== 'function') {
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
      }

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

if (typeof process === 'undefined' ||
    !process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = { nextTick: nextTick };
} else {
  module.exports = process
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3)))

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(11).Buffer))

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _keys = __webpack_require__(7);

var _keys2 = _interopRequireDefault(_keys);

var _create = __webpack_require__(6);

var _create2 = _interopRequireDefault(_create);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = Namespace;

// extends ReflectionObject
var ReflectionObject = __webpack_require__(37);
((Namespace.prototype = (0, _create2.default)(ReflectionObject.prototype)).constructor = Namespace).className = "Namespace";

var Enum, Field, util;

var Type; // cyclic
var Service;

/**
 * Constructs a new namespace instance.
 * @name Namespace
 * @classdesc Reflected namespace.
 * @extends NamespaceBase
 * @constructor
 * @param {string} name Namespace name
 * @param {Object.<string,*>} [options] Declared options
 */

/**
 * Constructs a namespace from JSON.
 * @memberof Namespace
 * @function
 * @param {string} name Namespace name
 * @param {Object.<string,*>} json JSON object
 * @returns {Namespace} Created namespace
 * @throws {TypeError} If arguments are invalid
 */
Namespace.fromJSON = function fromJSON(name, json) {
    return new Namespace(name, json.options).addJSON(json.nested);
};

/**
 * Converts an array of reflection objects to JSON.
 * @memberof Namespace
 * @param {ReflectionObject[]} array Object array
 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
 * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty
 */
function arrayToJSON(array, toJSONOptions) {
    if (!(array && array.length)) return undefined;
    var obj = {};
    for (var i = 0; i < array.length; ++i) {
        obj[array[i].name] = array[i].toJSON(toJSONOptions);
    }return obj;
}

Namespace.arrayToJSON = arrayToJSON;

/**
 * Tests if the specified id is reserved.
 * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names
 * @param {number} id Id to test
 * @returns {boolean} `true` if reserved, otherwise `false`
 */
Namespace.isReservedId = function isReservedId(reserved, id) {
    if (reserved) for (var i = 0; i < reserved.length; ++i) {
        if (typeof reserved[i] !== "string" && reserved[i][0] <= id && reserved[i][1] >= id) return true;
    }return false;
};

/**
 * Tests if the specified name is reserved.
 * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names
 * @param {string} name Name to test
 * @returns {boolean} `true` if reserved, otherwise `false`
 */
Namespace.isReservedName = function isReservedName(reserved, name) {
    if (reserved) for (var i = 0; i < reserved.length; ++i) {
        if (reserved[i] === name) return true;
    }return false;
};

/**
 * Not an actual constructor. Use {@link Namespace} instead.
 * @classdesc Base class of all reflection objects containing nested objects. This is not an actual class but here for the sake of having consistent type definitions.
 * @exports NamespaceBase
 * @extends ReflectionObject
 * @abstract
 * @constructor
 * @param {string} name Namespace name
 * @param {Object.<string,*>} [options] Declared options
 * @see {@link Namespace}
 */
function Namespace(name, options) {
    ReflectionObject.call(this, name, options);

    /**
     * Nested objects by name.
     * @type {Object.<string,ReflectionObject>|undefined}
     */
    this.nested = undefined; // toJSON

    /**
     * Cached nested objects as an array.
     * @type {ReflectionObject[]|null}
     * @private
     */
    this._nestedArray = null;
}

function clearCache(namespace) {
    namespace._nestedArray = null;
    return namespace;
}

/**
 * Nested objects of this namespace as an array for iteration.
 * @name NamespaceBase#nestedArray
 * @type {ReflectionObject[]}
 * @readonly
 */
Object.defineProperty(Namespace.prototype, "nestedArray", {
    get: function get() {
        return this._nestedArray || (this._nestedArray = util.toArray(this.nested));
    }
});

/**
 * Namespace descriptor.
 * @interface INamespace
 * @property {Object.<string,*>} [options] Namespace options
 * @property {Object.<string,AnyNestedObject>} [nested] Nested object descriptors
 */

/**
 * Any extension field descriptor.
 * @typedef AnyExtensionField
 * @type {IExtensionField|IExtensionMapField}
 */

/**
 * Any nested object descriptor.
 * @typedef AnyNestedObject
 * @type {IEnum|IType|IService|AnyExtensionField|INamespace}
 */
// ^ BEWARE: VSCode hangs forever when using more than 5 types (that's why AnyExtensionField exists in the first place)

/**
 * Converts this namespace to a namespace descriptor.
 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
 * @returns {INamespace} Namespace descriptor
 */
Namespace.prototype.toJSON = function toJSON(toJSONOptions) {
    return util.toObject(["options", this.options, "nested", arrayToJSON(this.nestedArray, toJSONOptions)]);
};

/**
 * Adds nested objects to this namespace from nested object descriptors.
 * @param {Object.<string,AnyNestedObject>} nestedJson Any nested object descriptors
 * @returns {Namespace} `this`
 */
Namespace.prototype.addJSON = function addJSON(nestedJson) {
    var ns = this;
    /* istanbul ignore else */
    if (nestedJson) {
        for (var names = (0, _keys2.default)(nestedJson), i = 0, nested; i < names.length; ++i) {
            nested = nestedJson[names[i]];
            ns.add( // most to least likely
            (nested.fields !== undefined ? Type.fromJSON : nested.values !== undefined ? Enum.fromJSON : nested.methods !== undefined ? Service.fromJSON : nested.id !== undefined ? Field.fromJSON : Namespace.fromJSON)(names[i], nested));
        }
    }
    return this;
};

/**
 * Gets the nested object of the specified name.
 * @param {string} name Nested object name
 * @returns {ReflectionObject|null} The reflection object or `null` if it doesn't exist
 */
Namespace.prototype.get = function get(name) {
    return this.nested && this.nested[name] || null;
};

/**
 * Gets the values of the nested {@link Enum|enum} of the specified name.
 * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.
 * @param {string} name Nested enum name
 * @returns {Object.<string,number>} Enum values
 * @throws {Error} If there is no such enum
 */
Namespace.prototype.getEnum = function getEnum(name) {
    if (this.nested && this.nested[name] instanceof Enum) return this.nested[name].values;
    throw Error("no such enum: " + name);
};

/**
 * Adds a nested object to this namespace.
 * @param {ReflectionObject} object Nested object to add
 * @returns {Namespace} `this`
 * @throws {TypeError} If arguments are invalid
 * @throws {Error} If there is already a nested object with this name
 */
Namespace.prototype.add = function add(object) {

    if (!(object instanceof Field && object.extend !== undefined || object instanceof Type || object instanceof Enum || object instanceof Service || object instanceof Namespace)) throw TypeError("object must be a valid nested object");

    if (!this.nested) this.nested = {};else {
        var prev = this.get(object.name);
        if (prev) {
            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {
                // replace plain namespace but keep existing nested elements and options
                var nested = prev.nestedArray;
                for (var i = 0; i < nested.length; ++i) {
                    object.add(nested[i]);
                }this.remove(prev);
                if (!this.nested) this.nested = {};
                object.setOptions(prev.options, true);
            } else throw Error("duplicate name '" + object.name + "' in " + this);
        }
    }
    this.nested[object.name] = object;
    object.onAdd(this);
    return clearCache(this);
};

/**
 * Removes a nested object from this namespace.
 * @param {ReflectionObject} object Nested object to remove
 * @returns {Namespace} `this`
 * @throws {TypeError} If arguments are invalid
 * @throws {Error} If `object` is not a member of this namespace
 */
Namespace.prototype.remove = function remove(object) {

    if (!(object instanceof ReflectionObject)) throw TypeError("object must be a ReflectionObject");
    if (object.parent !== this) throw Error(object + " is not a member of " + this);

    delete this.nested[object.name];
    if (!(0, _keys2.default)(this.nested).length) this.nested = undefined;

    object.onRemove(this);
    return clearCache(this);
};

/**
 * Defines additial namespaces within this one if not yet existing.
 * @param {string|string[]} path Path to create
 * @param {*} [json] Nested types to create from JSON
 * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty
 */
Namespace.prototype.define = function define(path, json) {

    if (util.isString(path)) path = path.split(".");else if (!Array.isArray(path)) throw TypeError("illegal path");
    if (path && path.length && path[0] === "") throw Error("path must be relative");

    var ptr = this;
    while (path.length > 0) {
        var part = path.shift();
        if (ptr.nested && ptr.nested[part]) {
            ptr = ptr.nested[part];
            if (!(ptr instanceof Namespace)) throw Error("path conflicts with non-namespace objects");
        } else ptr.add(ptr = new Namespace(part));
    }
    if (json) ptr.addJSON(json);
    return ptr;
};

/**
 * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree, but comes at a cost.
 * @returns {Namespace} `this`
 */
Namespace.prototype.resolveAll = function resolveAll() {
    var nested = this.nestedArray,
        i = 0;
    while (i < nested.length) {
        if (nested[i] instanceof Namespace) nested[i++].resolveAll();else nested[i++].resolve();
    }return this.resolve();
};

/**
 * Recursively looks up the reflection object matching the specified path in the scope of this namespace.
 * @param {string|string[]} path Path to look up
 * @param {*|Array.<*>} filterTypes Filter types, any combination of the constructors of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.
 * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked
 * @returns {ReflectionObject|null} Looked up object or `null` if none could be found
 */
Namespace.prototype.lookup = function lookup(path, filterTypes, parentAlreadyChecked) {

    /* istanbul ignore next */
    if (typeof filterTypes === "boolean") {
        parentAlreadyChecked = filterTypes;
        filterTypes = undefined;
    } else if (filterTypes && !Array.isArray(filterTypes)) filterTypes = [filterTypes];

    if (util.isString(path) && path.length) {
        if (path === ".") return this.root;
        path = path.split(".");
    } else if (!path.length) return this;

    // Start at root if path is absolute
    if (path[0] === "") return this.root.lookup(path.slice(1), filterTypes);

    // Test if the first part matches any nested object, and if so, traverse if path contains more
    var found = this.get(path[0]);
    if (found) {
        if (path.length === 1) {
            if (!filterTypes || filterTypes.indexOf(found.constructor) > -1) return found;
        } else if (found instanceof Namespace && (found = found.lookup(path.slice(1), filterTypes, true))) return found;

        // Otherwise try each nested namespace
    } else for (var i = 0; i < this.nestedArray.length; ++i) {
        if (this._nestedArray[i] instanceof Namespace && (found = this._nestedArray[i].lookup(path, filterTypes, true))) return found;
    } // If there hasn't been a match, try again at the parent
    if (this.parent === null || parentAlreadyChecked) return null;
    return this.parent.lookup(path, filterTypes);
};

/**
 * Looks up the reflection object at the specified path, relative to this namespace.
 * @name NamespaceBase#lookup
 * @function
 * @param {string|string[]} path Path to look up
 * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked
 * @returns {ReflectionObject|null} Looked up object or `null` if none could be found
 * @variation 2
 */
// lookup(path: string, [parentAlreadyChecked: boolean])

/**
 * Looks up the {@link Type|type} at the specified path, relative to this namespace.
 * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.
 * @param {string|string[]} path Path to look up
 * @returns {Type} Looked up type
 * @throws {Error} If `path` does not point to a type
 */
Namespace.prototype.lookupType = function lookupType(path) {
    var found = this.lookup(path, [Type]);
    if (!found) throw Error("no such type: " + path);
    return found;
};

/**
 * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.
 * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.
 * @param {string|string[]} path Path to look up
 * @returns {Enum} Looked up enum
 * @throws {Error} If `path` does not point to an enum
 */
Namespace.prototype.lookupEnum = function lookupEnum(path) {
    var found = this.lookup(path, [Enum]);
    if (!found) throw Error("no such Enum '" + path + "' in " + this);
    return found;
};

/**
 * Looks up the {@link Type|type} or {@link Enum|enum} at the specified path, relative to this namespace.
 * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.
 * @param {string|string[]} path Path to look up
 * @returns {Type} Looked up type or enum
 * @throws {Error} If `path` does not point to a type or enum
 */
Namespace.prototype.lookupTypeOrEnum = function lookupTypeOrEnum(path) {
    var found = this.lookup(path, [Type, Enum]);
    if (!found) throw Error("no such Type or Enum '" + path + "' in " + this);
    return found;
};

/**
 * Looks up the {@link Service|service} at the specified path, relative to this namespace.
 * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.
 * @param {string|string[]} path Path to look up
 * @returns {Service} Looked up service
 * @throws {Error} If `path` does not point to a service
 */
Namespace.prototype.lookupService = function lookupService(path) {
    var found = this.lookup(path, [Service]);
    if (!found) throw Error("no such Service '" + path + "' in " + this);
    return found;
};

Namespace._configure = function () {
    Enum = __webpack_require__(13);
    Field = __webpack_require__(24);
    util = __webpack_require__(1);

    Type = __webpack_require__(36); // cyclic
    Service = __webpack_require__(68);
};

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _defineProperty = __webpack_require__(129);

var _defineProperty2 = _interopRequireDefault(_defineProperty);

var _create = __webpack_require__(6);

var _create2 = _interopRequireDefault(_create);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = OneOf;

// extends ReflectionObject
var ReflectionObject = __webpack_require__(37);
((OneOf.prototype = (0, _create2.default)(ReflectionObject.prototype)).constructor = OneOf).className = "OneOf";

var Field;
var util;

/**
 * Constructs a new oneof instance.
 * @classdesc Reflected oneof.
 * @extends ReflectionObject
 * @constructor
 * @param {string} name Oneof name
 * @param {string[]|Object.<string,*>} [fieldNames] Field names
 * @param {Object.<string,*>} [options] Declared options
 * @param {string} [comment] Comment associated with this field
 */
function OneOf(name, fieldNames, options, comment) {
    if (!Array.isArray(fieldNames)) {
        options = fieldNames;
        fieldNames = undefined;
    }
    ReflectionObject.call(this, name, options);

    /* istanbul ignore if */
    if (!(fieldNames === undefined || Array.isArray(fieldNames))) throw TypeError("fieldNames must be an Array");

    /**
     * Field names that belong to this oneof.
     * @type {string[]}
     */
    this.oneof = fieldNames || []; // toJSON, marker

    /**
     * Fields that belong to this oneof as an array for iteration.
     * @type {Field[]}
     * @readonly
     */
    this.fieldsArray = []; // declared readonly for conformance, possibly not yet added to parent

    /**
     * Comment for this field.
     * @type {string|null}
     */
    this.comment = comment;
}

/**
 * Oneof descriptor.
 * @interface IOneOf
 * @property {Array.<string>} oneof Oneof field names
 * @property {Object.<string,*>} [options] Oneof options
 */

/**
 * Constructs a oneof from a oneof descriptor.
 * @param {string} name Oneof name
 * @param {IOneOf} json Oneof descriptor
 * @returns {OneOf} Created oneof
 * @throws {TypeError} If arguments are invalid
 */
OneOf.fromJSON = function fromJSON(name, json) {
    return new OneOf(name, json.oneof, json.options, json.comment);
};

/**
 * Converts this oneof to a oneof descriptor.
 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
 * @returns {IOneOf} Oneof descriptor
 */
OneOf.prototype.toJSON = function toJSON(toJSONOptions) {
    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
    return util.toObject(["options", this.options, "oneof", this.oneof, "comment", keepComments ? this.comment : undefined]);
};

/**
 * Adds the fields of the specified oneof to the parent if not already done so.
 * @param {OneOf} oneof The oneof
 * @returns {undefined}
 * @inner
 * @ignore
 */
function addFieldsToParent(oneof) {
    if (oneof.parent) for (var i = 0; i < oneof.fieldsArray.length; ++i) {
        if (!oneof.fieldsArray[i].parent) oneof.parent.add(oneof.fieldsArray[i]);
    }
}

/**
 * Adds a field to this oneof and removes it from its current parent, if any.
 * @param {Field} field Field to add
 * @returns {OneOf} `this`
 */
OneOf.prototype.add = function add(field) {

    /* istanbul ignore if */
    if (!(field instanceof Field)) throw TypeError("field must be a Field");

    if (field.parent && field.parent !== this.parent) field.parent.remove(field);
    this.oneof.push(field.name);
    this.fieldsArray.push(field);
    field.partOf = this; // field.parent remains null
    addFieldsToParent(this);
    return this;
};

/**
 * Removes a field from this oneof and puts it back to the oneof's parent.
 * @param {Field} field Field to remove
 * @returns {OneOf} `this`
 */
OneOf.prototype.remove = function remove(field) {

    /* istanbul ignore if */
    if (!(field instanceof Field)) throw TypeError("field must be a Field");

    var index = this.fieldsArray.indexOf(field);

    /* istanbul ignore if */
    if (index < 0) throw Error(field + " is not a member of " + this);

    this.fieldsArray.splice(index, 1);
    index = this.oneof.indexOf(field.name);

    /* istanbul ignore else */
    if (index > -1) // theoretical
        this.oneof.splice(index, 1);

    field.partOf = null;
    return this;
};

/**
 * @override
 */
OneOf.prototype.onAdd = function onAdd(parent) {
    ReflectionObject.prototype.onAdd.call(this, parent);
    var self = this;
    // Collect present fields
    for (var i = 0; i < this.oneof.length; ++i) {
        var field = parent.get(this.oneof[i]);
        if (field && !field.partOf) {
            field.partOf = self;
            self.fieldsArray.push(field);
        }
    }
    // Add not yet present fields
    addFieldsToParent(this);
};

/**
 * @override
 */
OneOf.prototype.onRemove = function onRemove(parent) {
    for (var i = 0, field; i < this.fieldsArray.length; ++i) {
        if ((field = this.fieldsArray[i]).parent) field.parent.remove(field);
    }ReflectionObject.prototype.onRemove.call(this, parent);
};

/**
 * Decorator function as returned by {@link OneOf.d} (TypeScript).
 * @typedef OneOfDecorator
 * @type {function}
 * @param {Object} prototype Target prototype
 * @param {string} oneofName OneOf name
 * @returns {undefined}
 */

/**
 * OneOf decorator (TypeScript).
 * @function
 * @param {...string} fieldNames Field names
 * @returns {OneOfDecorator} Decorator function
 * @template T extends string
 */
OneOf.d = function decorateOneOf() {
    var fieldNames = new Array(arguments.length),
        index = 0;
    while (index < arguments.length) {
        fieldNames[index] = arguments[index++];
    }return function oneOfDecorator(prototype, oneofName) {
        util.decorateType(prototype.constructor).add(new OneOf(oneofName, fieldNames));
        (0, _defineProperty2.default)(prototype, oneofName, {
            get: util.oneOfGetter(fieldNames),
            set: util.oneOfSetter(fieldNames)
        });
    };
};

OneOf._configure = function () {
    Field = __webpack_require__(24);
    util = __webpack_require__(1);
};

/***/ }),
/* 54 */
/***/ (function(module, exports) {



/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = __webpack_require__(18);
var dPs = __webpack_require__(106);
var enumBugKeys = __webpack_require__(78);
var IE_PROTO = __webpack_require__(76)('IE_PROTO');
var Empty = function () { /* empty */ };
var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = __webpack_require__(73)('iframe');
  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  __webpack_require__(108).appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};


/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.15 ToLength
var toInteger = __webpack_require__(70);
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};


/***/ }),
/* 57 */
/***/ (function(module, exports) {

var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};


/***/ }),
/* 58 */
/***/ (function(module, exports) {

exports.f = {}.propertyIsEnumerable;


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

var META = __webpack_require__(57)('meta');
var isObject = __webpack_require__(8);
var has = __webpack_require__(27);
var setDesc = __webpack_require__(12).f;
var id = 0;
var isExtensible = Object.isExtensible || function () {
  return true;
};
var FREEZE = !__webpack_require__(26)(function () {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function (it) {
  setDesc(it, META, { value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  } });
};
var fastKey = function (it, create) {
  // return primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function (it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

exports.default = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

/***/ }),
/* 61 */
/***/ (function(module, exports) {

/*
 * base64-arraybuffer
 * https://github.com/niklasvh/base64-arraybuffer
 *
 * Copyright (c) 2012 Niklas von Hertzen
 * Licensed under the MIT license.
 */
(function(){
  "use strict";

  var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

  // Use a lookup table to find the index.
  var lookup = new Uint8Array(256);
  for (var i = 0; i < chars.length; i++) {
    lookup[chars.charCodeAt(i)] = i;
  }

  exports.encode = function(arraybuffer) {
    var bytes = new Uint8Array(arraybuffer),
    i, len = bytes.length, base64 = "";

    for (i = 0; i < len; i+=3) {
      base64 += chars[bytes[i] >> 2];
      base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];
      base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];
      base64 += chars[bytes[i + 2] & 63];
    }

    if ((len % 3) === 2) {
      base64 = base64.substring(0, base64.length - 1) + "=";
    } else if (len % 3 === 1) {
      base64 = base64.substring(0, base64.length - 2) + "==";
    }

    return base64;
  };

  exports.decode =  function(base64) {
    var bufferLength = base64.length * 0.75,
    len = base64.length, i, p = 0,
    encoded1, encoded2, encoded3, encoded4;

    if (base64[base64.length - 1] === "=") {
      bufferLength--;
      if (base64[base64.length - 2] === "=") {
        bufferLength--;
      }
    }

    var arraybuffer = new ArrayBuffer(bufferLength),
    bytes = new Uint8Array(arraybuffer);

    for (i = 0; i < len; i+=4) {
      encoded1 = lookup[base64.charCodeAt(i)];
      encoded2 = lookup[base64.charCodeAt(i+1)];
      encoded3 = lookup[base64.charCodeAt(i+2)];
      encoded4 = lookup[base64.charCodeAt(i+3)];

      bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);
      bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);
      bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);
    }

    return arraybuffer;
  };
})();


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(143)() ? Object.setPrototypeOf : __webpack_require__(144);


/***/ }),
/* 63 */
/***/ (function(module, exports) {

module.exports = (function () {
	if (this) return this;

	// Unexpected strict mode (may happen if e.g. bundled into ESM module), be nice

	// Thanks @mathiasbynens -> https://mathiasbynens.be/notes/globalthis
	// In all ES5+ engines global object inherits from Object.prototype
	// (if you approached one that doesn't please report)
	Object.defineProperty(Object.prototype, "__global__", {
		get: function () { return this; },
		configurable: true
	});
	try { return __global__; }
	finally { delete Object.prototype.__global__; }
})();


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var objToString = Object.prototype.toString
  , id = objToString.call((function () { return arguments; })());

module.exports = function (value) { return objToString.call(value) === id; };


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var objToString = Object.prototype.toString, id = objToString.call("");

module.exports = function (value) {
	return (
		typeof value === "string" ||
		(value &&
			typeof value === "object" &&
			(value instanceof String || objToString.call(value) === id)) ||
		false
	);
};


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * A minimal UTF8 implementation for number arrays.
 * @memberof util
 * @namespace
 */

var utf8 = module.exports;

/**
 * Calculates the UTF8 byte length of a string.
 * @param {string} string String
 * @returns {number} Byte length
 */
utf8.length = function utf8_length(string) {
    var len = 0,
        c = 0;
    for (var i = 0; i < string.length; ++i) {
        c = string.charCodeAt(i);
        if (c < 128) len += 1;else if (c < 2048) len += 2;else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {
            ++i;
            len += 4;
        } else len += 3;
    }
    return len;
};

/**
 * Reads UTF8 bytes as a string.
 * @param {Uint8Array} buffer Source buffer
 * @param {number} start Source start
 * @param {number} end Source end
 * @returns {string} String read
 */
utf8.read = function utf8_read(buffer, start, end) {
    var len = end - start;
    if (len < 1) return "";
    var parts = null,
        chunk = [],
        i = 0,
        // char offset
    t; // temporary
    while (start < end) {
        t = buffer[start++];
        if (t < 128) chunk[i++] = t;else if (t > 191 && t < 224) chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;else if (t > 239 && t < 365) {
            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;
            chunk[i++] = 0xD800 + (t >> 10);
            chunk[i++] = 0xDC00 + (t & 1023);
        } else chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;
        if (i > 8191) {
            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
            i = 0;
        }
    }
    if (parts) {
        if (i) parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
        return parts.join("");
    }
    return String.fromCharCode.apply(String, chunk.slice(0, i));
};

/**
 * Writes a string as UTF8 bytes.
 * @param {string} string Source string
 * @param {Uint8Array} buffer Destination buffer
 * @param {number} offset Destination offset
 * @returns {number} Bytes written
 */
utf8.write = function utf8_write(string, buffer, offset) {
    var start = offset,
        c1,
        // character 1
    c2; // character 2
    for (var i = 0; i < string.length; ++i) {
        c1 = string.charCodeAt(i);
        if (c1 < 128) {
            buffer[offset++] = c1;
        } else if (c1 < 2048) {
            buffer[offset++] = c1 >> 6 | 192;
            buffer[offset++] = c1 & 63 | 128;
        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {
            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);
            ++i;
            buffer[offset++] = c1 >> 18 | 240;
            buffer[offset++] = c1 >> 12 & 63 | 128;
            buffer[offset++] = c1 >> 6 & 63 | 128;
            buffer[offset++] = c1 & 63 | 128;
        } else {
            buffer[offset++] = c1 >> 12 | 224;
            buffer[offset++] = c1 >> 6 & 63 | 128;
            buffer[offset++] = c1 & 63 | 128;
        }
    }
    return offset - start;
};

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = __webpack_require__(10);

var _typeof3 = _interopRequireDefault(_typeof2);

var _create = __webpack_require__(6);

var _create2 = _interopRequireDefault(_create);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = Root;

// extends Namespace
var Namespace = __webpack_require__(52);
((Root.prototype = (0, _create2.default)(Namespace.prototype)).constructor = Root).className = "Root";

var Field = __webpack_require__(24),
    Enum = __webpack_require__(13),
    OneOf = __webpack_require__(53),
    util = __webpack_require__(1);

var Type, // cyclic
parse, // might be excluded
common; // "

/**
 * Constructs a new root namespace instance.
 * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.
 * @extends NamespaceBase
 * @constructor
 * @param {Object.<string,*>} [options] Top level options
 */
function Root(options) {
    Namespace.call(this, "", options);

    /**
     * Deferred extension fields.
     * @type {Field[]}
     */
    this.deferred = [];

    /**
     * Resolved file names of loaded files.
     * @type {string[]}
     */
    this.files = [];

    /**
     * Resolved name of parsered pbString.
     * @type {string[]}
     */
    this.names = [];
}

/**
 * Loads a namespace descriptor into a root namespace.
 * @param {INamespace} json Nameespace descriptor
 * @param {Root} [root] Root namespace, defaults to create a new one if omitted
 * @returns {Root} Root namespace
 */
Root.fromJSON = function fromJSON(json, root) {
    json = typeof json === 'string' ? JSON.parse(json) : json;
    if (!root) root = new Root();
    if (json.options) root.setOptions(json.options);
    return root.addJSON(json.nested);
};

/**
 * Resolves the path of an imported file, relative to the importing origin.
 * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.
 * @function
 * @param {string} origin The file name of the importing file
 * @param {string} target The file name being imported
 * @returns {string|null} Resolved path to `target` or `null` to skip the file
 */
Root.prototype.resolvePath = util.path.resolve;

// A symbol-like function to safely signal synchronous loading
/* istanbul ignore next */
function SYNC() {} // eslint-disable-line no-empty-function

function parseFromPbString(pbString, options, callback) {

    if (typeof options === "function") {
        callback = options;
        options = undefined;
    }
    var self = this;
    if (!callback) {
        return util.asPromise(parseFromPbString, self, pbString, options);
    }

    var pbObj = null;
    if (typeof pbString === 'string') {
        pbObj = JSON.parse(pbString);
    } else if ((typeof pbString === "undefined" ? "undefined" : (0, _typeof3.default)(pbString)) === 'object') {
        pbObj = pbString;
    } else {
        //throw Error("pb格式转化失败");
        console.log("pb格式转化失败");
        return undefined;
    }

    var name = pbObj['name'];
    var pbJsonStr = pbObj['pbJsonStr'];

    function finish(err, root) {
        if (!callback) return;
        var cb = callback;
        callback = null;
        cb(err, root);
    }

    function process(name, source) {
        try {
            if (util.isString(source) && source.charAt(0) === "{") source = JSON.parse(source);
            if (!util.isString(source)) self.setOptions(source.options).addJSON(source.nested);else {
                parse.filename = name;
                var parsed = parse(source, self, options),
                    resolved;
                var i = 0;
                if (parsed.imports) {
                    for (; i < parsed.imports.length; ++i) {
                        resolved = parsed.imports[i];
                        fetch(resolved);
                    }
                }
                if (parsed.weakImports) {
                    for (i = 0; i < parsed.weakImports.length; ++i) {
                        resolved = parsed.weakImports[i];
                    }fetch(resolved, true);
                }
            }
        } catch (err) {
            finish(err);
        }

        finish(null, self); // only once anyway
    }

    function fetch(name) {
        if (self.names.indexOf(name) > -1) return;
        self.names.push(name);
        if (name in common) {
            process(name, common[name]);
        }
    }

    process(name, pbJsonStr);
    return undefined;
}

Root.prototype.parseFromPbString = parseFromPbString;

/**
 * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.
 * @param {string|string[]} filename Names of one or multiple files to load
 * @param {IParseOptions} options Parse options
 * @param {LoadCallback} callback Callback function
 * @returns {undefined}
 */
Root.prototype.load = function load(filename, options, callback) {
    if (typeof options === "function") {
        callback = options;
        options = undefined;
    }
    var self = this;
    if (!callback) return util.asPromise(load, self, filename, options);

    var sync = callback === SYNC; // undocumented

    // Finishes loading by calling the callback (exactly once)
    function finish(err, root) {
        /* istanbul ignore if */
        if (!callback) return;
        var cb = callback;
        callback = null;
        if (sync) throw err;
        cb(err, root);
    }

    // Processes a single file
    function process(filename, source) {
        try {
            if (util.isString(source) && source.charAt(0) === "{") source = JSON.parse(source);
            if (!util.isString(source)) self.setOptions(source.options).addJSON(source.nested);else {
                parse.filename = filename;
                var parsed = parse(source, self, options),
                    resolved,
                    i = 0;
                if (parsed.imports) for (; i < parsed.imports.length; ++i) {
                    if (resolved = self.resolvePath(filename, parsed.imports[i])) fetch(resolved);
                }if (parsed.weakImports) for (i = 0; i < parsed.weakImports.length; ++i) {
                    if (resolved = self.resolvePath(filename, parsed.weakImports[i])) fetch(resolved, true);
                }
            }
        } catch (err) {
            finish(err);
        }
        if (!sync && !queued) finish(null, self); // only once anyway
    }

    // Fetches a single file
    function fetch(filename, weak) {

        // Strip path if this file references a bundled definition
        var idx = filename.lastIndexOf("google/protobuf/");
        if (idx > -1) {
            var altname = filename.substring(idx);
            if (altname in common) filename = altname;
        }

        // Skip if already loaded / attempted
        if (self.files.indexOf(filename) > -1) return;
        self.files.push(filename);

        // Shortcut bundled definitions
        if (filename in common) {
            if (sync) process(filename, common[filename]);else {
                ++queued;
                setTimeout(function () {
                    --queued;
                    process(filename, common[filename]);
                });
            }
            return;
        }

        // Otherwise fetch from disk or network
        if (sync) {
            var source;
            try {
                source = util.fs.readFileSync(filename).toString("utf8");
            } catch (err) {
                if (!weak) finish(err);
                return;
            }
            process(filename, source);
        } else {
            ++queued;
            util.fetch(filename, function (err, source) {
                --queued;
                /* istanbul ignore if */
                if (!callback) return; // terminated meanwhile
                if (err) {
                    /* istanbul ignore else */
                    if (!weak) finish(err);else if (!queued) // can't be covered reliably
                        finish(null, self);
                    return;
                }
                process(filename, source);
            });
        }
    }
    var queued = 0;

    // Assembling the root namespace doesn't require working type
    // references anymore, so we can load everything in parallel
    if (util.isString(filename)) filename = [filename];
    for (var i = 0, resolved; i < filename.length; ++i) {
        if (resolved = self.resolvePath("", filename[i])) fetch(resolved);
    }if (sync) return self;
    if (!queued) finish(null, self);
    return undefined;
};
// function load(filename:string, options:IParseOptions, callback:LoadCallback):undefined

/**
 * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.
 * @function Root#load
 * @param {string|string[]} filename Names of one or multiple files to load
 * @param {LoadCallback} callback Callback function
 * @returns {undefined}
 * @variation 2
 */
// function load(filename:string, callback:LoadCallback):undefined

/**
 * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.
 * @function Root#load
 * @param {string|string[]} filename Names of one or multiple files to load
 * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.
 * @returns {Promise<Root>} Promise
 * @variation 3
 */
// function load(filename:string, [options:IParseOptions]):Promise<Root>

/**
 * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).
 * @function Root#loadSync
 * @param {string|string[]} filename Names of one or multiple files to load
 * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.
 * @returns {Root} Root namespace
 * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid
 */
Root.prototype.loadSync = function loadSync(filename, options) {
    if (!util.isNode) throw Error("not supported");
    return this.load(filename, options, SYNC);
};

/**
 * @override
 */
Root.prototype.resolveAll = function resolveAll() {
    if (this.deferred.length) throw Error("unresolvable extensions: " + this.deferred.map(function (field) {
        return "'extend " + field.extend + "' in " + field.parent.fullName;
    }).join(", "));
    return Namespace.prototype.resolveAll.call(this);
};

// only uppercased (and thus conflict-free) children are exposed, see below
var exposeRe = /^[A-Z]/;

/**
 * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.
 * @param {Root} root Root instance
 * @param {Field} field Declaring extension field witin the declaring type
 * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise
 * @inner
 * @ignore
 */
function tryHandleExtension(root, field) {
    var extendedType = field.parent.lookup(field.extend);
    if (extendedType) {
        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);
        sisterField.declaringField = field;
        field.extensionField = sisterField;
        extendedType.add(sisterField);
        return true;
    }
    return false;
}

/**
 * Called when any object is added to this root or its sub-namespaces.
 * @param {ReflectionObject} object Object added
 * @returns {undefined}
 * @private
 */
Root.prototype._handleAdd = function _handleAdd(object) {
    if (object instanceof Field) {

        if ( /* an extension field (implies not part of a oneof) */object.extend !== undefined && /* not already handled */!object.extensionField) if (!tryHandleExtension(this, object)) this.deferred.push(object);
    } else if (object instanceof Enum) {

        if (exposeRe.test(object.name)) object.parent[object.name] = object.values; // expose enum values as property of its parent
    } else if (!(object instanceof OneOf)) /* everything else is a namespace */{

            if (object instanceof Type) // Try to handle any deferred extensions
                for (var i = 0; i < this.deferred.length;) {
                    if (tryHandleExtension(this, this.deferred[i])) this.deferred.splice(i, 1);else ++i;
                }for (var j = 0; j < /* initializes */object.nestedArray.length; ++j) {
                // recurse into the namespace
                this._handleAdd(object._nestedArray[j]);
            }if (exposeRe.test(object.name)) object.parent[object.name] = object; // expose namespace as property of its parent
        }

    // The above also adds uppercased (and thus conflict-free) nested types, services and enums as
    // properties of namespaces just like static code does. This allows using a .d.ts generated for
    // a static module with reflection-based solutions where the condition is met.
};

/**
 * Called when any object is removed from this root or its sub-namespaces.
 * @param {ReflectionObject} object Object removed
 * @returns {undefined}
 * @private
 */
Root.prototype._handleRemove = function _handleRemove(object) {
    if (object instanceof Field) {

        if ( /* an extension field */object.extend !== undefined) {
            if ( /* already handled */object.extensionField) {
                // remove its sister field
                object.extensionField.parent.remove(object.extensionField);
                object.extensionField = null;
            } else {
                // cancel the extension
                var index = this.deferred.indexOf(object);
                /* istanbul ignore else */
                if (index > -1) this.deferred.splice(index, 1);
            }
        }
    } else if (object instanceof Enum) {

        if (exposeRe.test(object.name)) delete object.parent[object.name]; // unexpose enum values
    } else if (object instanceof Namespace) {

        for (var i = 0; i < /* initializes */object.nestedArray.length; ++i) {
            // recurse into the namespace
            this._handleRemove(object._nestedArray[i]);
        }if (exposeRe.test(object.name)) delete object.parent[object.name]; // unexpose namespaces
    }
};

Root._configure = function () {
    Type = __webpack_require__(36);
    parse = __webpack_require__(169);
    common = __webpack_require__(172);

    Field = __webpack_require__(24);
    Enum = __webpack_require__(13);
    OneOf = __webpack_require__(53);
    util = __webpack_require__(1);
};

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _keys = __webpack_require__(7);

var _keys2 = _interopRequireDefault(_keys);

var _create = __webpack_require__(6);

var _create2 = _interopRequireDefault(_create);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = Service;

// extends Namespace
var Namespace = __webpack_require__(52);
((Service.prototype = (0, _create2.default)(Namespace.prototype)).constructor = Service).className = "Service";

var Method, util, rpc;

/**
 * Constructs a new service instance.
 * @classdesc Reflected service.
 * @extends NamespaceBase
 * @constructor
 * @param {string} name Service name
 * @param {Object.<string,*>} [options] Service options
 * @throws {TypeError} If arguments are invalid
 */
function Service(name, options) {
    Namespace.call(this, name, options);

    /**
     * Service methods.
     * @type {Object.<string,Method>}
     */
    this.methods = {}; // toJSON, marker

    /**
     * Cached methods as an array.
     * @type {Method[]|null}
     * @private
     */
    this._methodsArray = null;
}

/**
 * Service descriptor.
 * @interface IService
 * @extends INamespace
 * @property {Object.<string,IMethod>} methods Method descriptors
 */

/**
 * Constructs a service from a service descriptor.
 * @param {string} name Service name
 * @param {IService} json Service descriptor
 * @returns {Service} Created service
 * @throws {TypeError} If arguments are invalid
 */
Service.fromJSON = function fromJSON(name, json) {
    var service = new Service(name, json.options);
    /* istanbul ignore else */
    if (json.methods) for (var names = (0, _keys2.default)(json.methods), i = 0; i < names.length; ++i) {
        service.add(Method.fromJSON(names[i], json.methods[names[i]]));
    }if (json.nested) service.addJSON(json.nested);
    service.comment = json.comment;
    return service;
};

/**
 * Converts this service to a service descriptor.
 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
 * @returns {IService} Service descriptor
 */
Service.prototype.toJSON = function toJSON(toJSONOptions) {
    var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);
    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
    return util.toObject(["options", inherited && inherited.options || undefined, "methods", Namespace.arrayToJSON(this.methodsArray, toJSONOptions) || /* istanbul ignore next */{}, "nested", inherited && inherited.nested || undefined, "comment", keepComments ? this.comment : undefined]);
};

/**
 * Methods of this service as an array for iteration.
 * @name Service#methodsArray
 * @type {Method[]}
 * @readonly
 */
Object.defineProperty(Service.prototype, "methodsArray", {
    get: function get() {
        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));
    }
});

function clearCache(service) {
    service._methodsArray = null;
    return service;
}

/**
 * @override
 */
Service.prototype.get = function get(name) {
    return this.methods[name] || Namespace.prototype.get.call(this, name);
};

/**
 * @override
 */
Service.prototype.resolveAll = function resolveAll() {
    var methods = this.methodsArray;
    for (var i = 0; i < methods.length; ++i) {
        methods[i].resolve();
    }return Namespace.prototype.resolve.call(this);
};

/**
 * @override
 */
Service.prototype.add = function add(object) {

    /* istanbul ignore if */
    if (this.get(object.name)) throw Error("duplicate name '" + object.name + "' in " + this);

    if (object instanceof Method) {
        this.methods[object.name] = object;
        object.parent = this;
        return clearCache(this);
    }
    return Namespace.prototype.add.call(this, object);
};

/**
 * @override
 */
Service.prototype.remove = function remove(object) {
    if (object instanceof Method) {

        /* istanbul ignore if */
        if (this.methods[object.name] !== object) throw Error(object + " is not a member of " + this);

        delete this.methods[object.name];
        object.parent = null;
        return clearCache(this);
    }
    return Namespace.prototype.remove.call(this, object);
};

/**
 * Creates a runtime service using the specified rpc implementation.
 * @param {RPCImpl} rpcImpl RPC implementation
 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
 * @returns {rpc.Service} RPC service. Useful where requests and/or responses are streamed.
 */
Service.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {
    var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);
    for (var i = 0, method; i < /* initializes */this.methodsArray.length; ++i) {
        var methodName = util.lcFirst((method = this._methodsArray[i]).resolve().name).replace(/[^$\w_]/g, "");
        rpcService[methodName] = util.codegen(["r", "c"], util.isReserved(methodName) ? methodName + "_" : methodName)("return this.rpcCall(m,q,s,r,c)")({
            m: method,
            q: method.resolvedRequestType.ctor,
            s: method.resolvedResponseType.ctor
        });
    }
    return rpcService;
};

Service._configure = function () {
    Method = __webpack_require__(99);
    util = __webpack_require__(1);
    rpc = __webpack_require__(171);
};

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(202), __esModule: true };

/***/ }),
/* 70 */
/***/ (function(module, exports) {

// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};


/***/ }),
/* 71 */
/***/ (function(module, exports) {

// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY = __webpack_require__(39);
var $export = __webpack_require__(2);
var redefine = __webpack_require__(105);
var hide = __webpack_require__(22);
var Iterators = __webpack_require__(42);
var $iterCreate = __webpack_require__(204);
var setToStringTag = __webpack_require__(45);
var getPrototypeOf = __webpack_require__(207);
var ITERATOR = __webpack_require__(5)('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function () { return this; };

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS: return function keys() { return new Constructor(this, kind); };
      case VALUES: return function values() { return new Constructor(this, kind); };
    } return function entries() { return new Constructor(this, kind); };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() { return $native.call(this); };
  }
  // Define iterator
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(8);
var document = __webpack_require__(4).document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = __webpack_require__(8);
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = __webpack_require__(44);
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

var shared = __webpack_require__(77)('keys');
var uid = __webpack_require__(57);
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

var core = __webpack_require__(0);
var global = __webpack_require__(4);
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: core.version,
  mode: __webpack_require__(39) ? 'pure' : 'global',
  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'
});


/***/ }),
/* 78 */
/***/ (function(module, exports) {

// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = __webpack_require__(44);
var TAG = __webpack_require__(5)('toStringTag');
// ES3 wrong here
var ARG = cof(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (e) { /* empty */ }
};

module.exports = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};


/***/ }),
/* 80 */
/***/ (function(module, exports) {

module.exports = function (it, Constructor, name, forbiddenField) {
  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__(79);
var ITERATOR = __webpack_require__(5)('iterator');
var Iterators = __webpack_require__(42);
module.exports = __webpack_require__(0).getIteratorMethod = function (it) {
  if (it != undefined) return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 25.4.1.5 NewPromiseCapability(C)
var aFunction = __webpack_require__(40);

function PromiseCapability(C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject = aFunction(reject);
}

module.exports.f = function (C) {
  return new PromiseCapability(C);
};


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

var hide = __webpack_require__(22);
module.exports = function (target, src, safe) {
  for (var key in src) {
    if (safe && target[key]) target[key] = src[key];
    else hide(target, key, src[key]);
  } return target;
};


/***/ }),
/* 84 */
/***/ (function(module, exports) {

exports.f = Object.getOwnPropertySymbols;


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(225), __esModule: true };

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _from = __webpack_require__(120);

var _from2 = _interopRequireDefault(_from);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  } else {
    return (0, _from2.default)(arr);
  }
};

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(8);
module.exports = function (it, TYPE) {
  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
  return it;
};


/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

exports.f = __webpack_require__(5);


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(4);
var core = __webpack_require__(0);
var LIBRARY = __webpack_require__(39);
var wksExt = __webpack_require__(88);
var defineProperty = __webpack_require__(12).f;
module.exports = function (name) {
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
};


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

// most Object methods by ES6 should accept primitives
var $export = __webpack_require__(2);
var core = __webpack_require__(0);
var fails = __webpack_require__(26);
module.exports = function (KEY, exec) {
  var fn = (core.Object || {})[KEY] || Object[KEY];
  var exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
};


/***/ }),
/* 91 */
/***/ (function(module, exports) {

module.exports = extend

var hasOwnProperty = Object.prototype.hasOwnProperty;

function extend() {
    var target = {}

    for (var i = 0; i < arguments.length; i++) {
        var source = arguments[i]

        for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
                target[key] = source[key]
            }
        }
    }

    return target
}


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isValue = __webpack_require__(35);

// prettier-ignore
var possibleTypes = { "object": true, "function": true, "undefined": true /* document.all */ };

module.exports = function (value) {
	if (!isValue(value)) return false;
	return hasOwnProperty.call(possibleTypes, typeof value);
};


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(282)() ? Object.assign : __webpack_require__(283);


/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var clear    = __webpack_require__(141)
  , assign   = __webpack_require__(93)
  , callable = __webpack_require__(29)
  , value    = __webpack_require__(20)
  , d        = __webpack_require__(16)
  , autoBind = __webpack_require__(300)
  , Symbol   = __webpack_require__(23);

var defineProperty = Object.defineProperty, defineProperties = Object.defineProperties, Iterator;

module.exports = Iterator = function (list, context) {
	if (!(this instanceof Iterator)) throw new TypeError("Constructor requires 'new'");
	defineProperties(this, {
		__list__: d("w", value(list)),
		__context__: d("w", context),
		__nextIndex__: d("w", 0)
	});
	if (!context) return;
	callable(context.on);
	context.on("_add", this._onAdd);
	context.on("_delete", this._onDelete);
	context.on("_clear", this._onClear);
};

// Internal %IteratorPrototype% doesn't expose its constructor
delete Iterator.prototype.constructor;

defineProperties(
	Iterator.prototype,
	assign(
		{
			_next: d(function () {
				var i;
				if (!this.__list__) return undefined;
				if (this.__redo__) {
					i = this.__redo__.shift();
					if (i !== undefined) return i;
				}
				if (this.__nextIndex__ < this.__list__.length) return this.__nextIndex__++;
				this._unBind();
				return undefined;
			}),
			next: d(function () {
				return this._createResult(this._next());
			}),
			_createResult: d(function (i) {
				if (i === undefined) return { done: true, value: undefined };
				return { done: false, value: this._resolve(i) };
			}),
			_resolve: d(function (i) {
				return this.__list__[i];
			}),
			_unBind: d(function () {
				this.__list__ = null;
				delete this.__redo__;
				if (!this.__context__) return;
				this.__context__.off("_add", this._onAdd);
				this.__context__.off("_delete", this._onDelete);
				this.__context__.off("_clear", this._onClear);
				this.__context__ = null;
			}),
			toString: d(function () {
				return "[object " + (this[Symbol.toStringTag] || "Object") + "]";
			})
		},
		autoBind({
			_onAdd: d(function (index) {
				if (index >= this.__nextIndex__) return;
				++this.__nextIndex__;
				if (!this.__redo__) {
					defineProperty(this, "__redo__", d("c", [index]));
					return;
				}
				this.__redo__.forEach(function (redo, i) {
					if (redo >= index) this.__redo__[i] = ++redo;
				}, this);
				this.__redo__.push(index);
			}),
			_onDelete: d(function (index) {
				var i;
				if (index >= this.__nextIndex__) return;
				--this.__nextIndex__;
				if (!this.__redo__) return;
				i = this.__redo__.indexOf(index);
				if (i !== -1) this.__redo__.splice(i, 1);
				this.__redo__.forEach(function (redo, j) {
					if (redo > index) this.__redo__[j] = --redo;
				}, this);
			}),
			_onClear: d(function () {
				if (this.__redo__) clear.call(this.__redo__);
				this.__nextIndex__ = 0;
			})
		})
	)
);

defineProperty(
	Iterator.prototype,
	Symbol.iterator,
	d(function () {
		return this;
	})
);


/***/ }),
/* 95 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__95__;

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var tls = __webpack_require__(340);

function buildBuilder(mqttClient, opts) {
  var connection;
  opts.port = opts.port || 8883;
  opts.host = opts.hostname || opts.host || 'localhost';

  opts.rejectUnauthorized = opts.rejectUnauthorized !== false;

  delete opts.path;

  connection = tls.connect(opts);
  /* eslint no-use-before-define: [2, "nofunc"] */
  connection.on('secureConnect', function () {
    if (opts.rejectUnauthorized && !connection.authorized) {
      connection.emit('error', new Error('TLS not authorized'));
    } else {
      connection.removeListener('error', handleTLSerrors);
    }
  });

  function handleTLSerrors(err) {
    // How can I get verify this error is a tls error?
    if (opts.rejectUnauthorized) {
      mqttClient.emit('error', err);
    }

    // close this connection to match the behaviour of net
    // otherwise all we get is an error from the connection
    // and close event doesn't fire. This is a work around
    // to enable the reconnect code to work the same as with
    // net.createConnection
    connection.end();
  }

  connection.on('error', handleTLSerrors);
  return connection;
}

module.exports = buildBuilder;

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = LongBits;

var util = __webpack_require__(1);
function LongBits(lo, hi) {
    this.lo = lo >>> 0;
    this.hi = hi >>> 0;
}

var zero = LongBits.zero = new LongBits(0, 0);

zero.toNumber = function () {
    return 0;
};
zero.zzEncode = zero.zzDecode = function () {
    return this;
};
zero.length = function () {
    return 1;
};

var zeroHash = LongBits.zeroHash = "\0\0\0\0\0\0\0\0";

LongBits.fromNumber = function fromNumber(value) {
    if (value === 0) return zero;
    var sign = value < 0; //如果sign为 1 ,表示为负数
    if (sign) value = -value;
    var lo = value >>> 0,
        //取出底32位
    hi = (value - lo) / 4294967296 >>> 0; //取出高32位
    if (sign) {
        //负数
        hi = ~hi >>> 0; //求取高32位的反码
        lo = ~lo >>> 0; //求取低32位的反码
        if (++lo > 4294967295) {
            //低32位大于Math.pow(2,31)-1
            lo = 0;
            if (++hi > 4294967295) //高32位大于Math.pow(2,31)-1
                hi = 0;
        }
    }
    return new LongBits(lo, hi);
};

LongBits.from = function from(value) {
    if (typeof value === "number") return LongBits.fromNumber(value);
    if (typeof value === "string" || value instanceof String) {
        return LongBits.fromNumber(parseInt(value, 10));
    }
    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;
};

LongBits.prototype.toNumber = function toNumber(unsigned) {
    if (!unsigned && this.hi >>> 31) {
        var lo = ~this.lo + 1 >>> 0,
            hi = ~this.hi >>> 0;
        if (!lo) hi = hi + 1 >>> 0;
        return -(lo + hi * 4294967296);
    }
    return this.lo + this.hi * 4294967296;
};
LongBits.prototype.toLong = function toLong(unsigned) {
    return util.Long ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))
    /* istanbul ignore next */
    : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };
    // return { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };
};

var charCodeAt = String.prototype.charCodeAt;

LongBits.fromHash = function fromHash(hash) {
    if (hash === zeroHash) return zero;
    return new LongBits((charCodeAt.call(hash, 0) | charCodeAt.call(hash, 1) << 8 | charCodeAt.call(hash, 2) << 16 | charCodeAt.call(hash, 3) << 24) >>> 0, (charCodeAt.call(hash, 4) | charCodeAt.call(hash, 5) << 8 | charCodeAt.call(hash, 6) << 16 | charCodeAt.call(hash, 7) << 24) >>> 0);
};

LongBits.prototype.toHash = function toHash() {
    return String.fromCharCode(this.lo & 255, this.lo >>> 8 & 255, this.lo >>> 16 & 255, this.lo >>> 24, this.hi & 255, this.hi >>> 8 & 255, this.hi >>> 16 & 255, this.hi >>> 24);
};

LongBits.prototype.zzEncode = function zzEncode() {
    var mask = this.hi >> 31;
    this.hi = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;
    this.lo = (this.lo << 1 ^ mask) >>> 0;
    return this;
};

LongBits.prototype.zzDecode = function zzDecode() {
    var mask = -(this.lo & 1);
    this.lo = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;
    this.hi = (this.hi >>> 1 ^ mask) >>> 0;
    return this;
};
LongBits.prototype.length = function length() {
    var part0 = this.lo,
        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,
        part2 = this.hi >>> 24;
    return part2 === 0 ? part1 === 0 ? part0 < 16384 ? part0 < 128 ? 1 : 2 : part0 < 2097152 ? 3 : 4 : part1 < 16384 ? part1 < 128 ? 5 : 6 : part1 < 2097152 ? 7 : 8 : part2 < 128 ? 9 : 10;
};

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = __webpack_require__(10);

var _typeof3 = _interopRequireDefault(_typeof2);

var _create = __webpack_require__(6);

var _create2 = _interopRequireDefault(_create);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = MapField;

// extends Field
var Field = __webpack_require__(24);
((MapField.prototype = (0, _create2.default)(Field.prototype)).constructor = MapField).className = "MapField";

var types, util;

/**
 * Constructs a new map field instance.
 * @classdesc Reflected map field.
 * @extends FieldBase
 * @constructor
 * @param {string} name Unique name within its namespace
 * @param {number} id Unique id within its namespace
 * @param {string} keyType Key type
 * @param {string} type Value type
 * @param {Object.<string,*>} [options] Declared options
 * @param {string} [comment] Comment associated with this field
 */
function MapField(name, id, keyType, type, options, comment) {
    Field.call(this, name, id, type, undefined, undefined, options, comment);

    /* istanbul ignore if */
    if (!util.isString(keyType)) throw TypeError("keyType must be a string");

    /**
     * Key type.
     * @type {string}
     */
    this.keyType = keyType; // toJSON, marker

    /**
     * Resolved key type if not a basic type.
     * @type {ReflectionObject|null}
     */
    this.resolvedKeyType = null;

    // Overrides Field#map
    this.map = true;
}

/**
 * Map field descriptor.
 * @interface IMapField
 * @extends {IField}
 * @property {string} keyType Key type
 */

/**
 * Extension map field descriptor.
 * @interface IExtensionMapField
 * @extends IMapField
 * @property {string} extend Extended type
 */

/**
 * Constructs a map field from a map field descriptor.
 * @param {string} name Field name
 * @param {IMapField} json Map field descriptor
 * @returns {MapField} Created map field
 * @throws {TypeError} If arguments are invalid
 */
MapField.fromJSON = function fromJSON(name, json) {
    return new MapField(name, json.id, json.keyType, json.type, json.options, json.comment);
};

/**
 * Converts this map field to a map field descriptor.
 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
 * @returns {IMapField} Map field descriptor
 */
MapField.prototype.toJSON = function toJSON(toJSONOptions) {
    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
    return util.toObject(["keyType", this.keyType, "type", this.type, "id", this.id, "extend", this.extend, "options", this.options, "comment", keepComments ? this.comment : undefined]);
};

/**
 * @override
 */
MapField.prototype.resolve = function resolve() {
    if (this.resolved) return this;

    // Besides a value type, map fields have a key type that may be "any scalar type except for floating point types and bytes"
    if (types.mapKey[this.keyType] === undefined) throw Error("invalid key type: " + this.keyType);

    return Field.prototype.resolve.call(this);
};

/**
 * Map field decorator (TypeScript).
 * @name MapField.d
 * @function
 * @param {number} fieldId Field id
 * @param {"int32"|"uint32"|"sint32"|"fixed32"|"sfixed32"|"int64"|"uint64"|"sint64"|"fixed64"|"sfixed64"|"bool"|"string"} fieldKeyType Field key type
 * @param {"double"|"float"|"int32"|"uint32"|"sint32"|"fixed32"|"sfixed32"|"int64"|"uint64"|"sint64"|"fixed64"|"sfixed64"|"bool"|"string"|"bytes"|Object|Constructor<{}>} fieldValueType Field value type
 * @returns {FieldDecorator} Decorator function
 * @template T extends { [key: string]: number | Long | string | boolean | Uint8Array | Buffer | number[] | Message<{}> }
 */
MapField.d = function decorateMapField(fieldId, fieldKeyType, fieldValueType) {

    // submessage value: decorate the submessage and use its name as the type
    if (typeof fieldValueType === "function") fieldValueType = util.decorateType(fieldValueType).name;

    // enum reference value: create a reflected copy of the enum and keep reuseing it
    else if (fieldValueType && (typeof fieldValueType === "undefined" ? "undefined" : (0, _typeof3.default)(fieldValueType)) === "object") fieldValueType = util.decorateEnum(fieldValueType).name;

    return function mapFieldDecorator(prototype, fieldName) {
        util.decorateType(prototype.constructor).add(new MapField(fieldName, fieldId, fieldKeyType, fieldValueType));
    };
};

MapField._configure = function () {
    types = __webpack_require__(38);
    util = __webpack_require__(1);
};

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _create = __webpack_require__(6);

var _create2 = _interopRequireDefault(_create);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = Method;

// extends ReflectionObject
var ReflectionObject = __webpack_require__(37);
((Method.prototype = (0, _create2.default)(ReflectionObject.prototype)).constructor = Method).className = "Method";

var util;

/**
 * Constructs a new service method instance.
 * @classdesc Reflected service method.
 * @extends ReflectionObject
 * @constructor
 * @param {string} name Method name
 * @param {string|undefined} type Method type, usually `"rpc"`
 * @param {string} requestType Request message type
 * @param {string} responseType Response message type
 * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed
 * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed
 * @param {Object.<string,*>} [options] Declared options
 * @param {string} [comment] The comment for this method
 */
function Method(name, type, requestType, responseType, requestStream, responseStream, options, comment) {

  /* istanbul ignore next */
  if (util.isObject(requestStream)) {
    options = requestStream;
    requestStream = responseStream = undefined;
  } else if (util.isObject(responseStream)) {
    options = responseStream;
    responseStream = undefined;
  }

  /* istanbul ignore if */
  if (!(type === undefined || util.isString(type))) throw TypeError("type must be a string");

  /* istanbul ignore if */
  if (!util.isString(requestType)) throw TypeError("requestType must be a string");

  /* istanbul ignore if */
  if (!util.isString(responseType)) throw TypeError("responseType must be a string");

  ReflectionObject.call(this, name, options);

  /**
   * Method type.
   * @type {string}
   */
  this.type = type || "rpc"; // toJSON

  /**
   * Request type.
   * @type {string}
   */
  this.requestType = requestType; // toJSON, marker

  /**
   * Whether requests are streamed or not.
   * @type {boolean|undefined}
   */
  this.requestStream = requestStream ? true : undefined; // toJSON

  /**
   * Response type.
   * @type {string}
   */
  this.responseType = responseType; // toJSON

  /**
   * Whether responses are streamed or not.
   * @type {boolean|undefined}
   */
  this.responseStream = responseStream ? true : undefined; // toJSON

  /**
   * Resolved request type.
   * @type {Type|null}
   */
  this.resolvedRequestType = null;

  /**
   * Resolved response type.
   * @type {Type|null}
   */
  this.resolvedResponseType = null;

  /**
   * Comment for this method
   * @type {string|null}
   */
  this.comment = comment;
}

/**
 * Method descriptor.
 * @interface IMethod
 * @property {string} [type="rpc"] Method type
 * @property {string} requestType Request type
 * @property {string} responseType Response type
 * @property {boolean} [requestStream=false] Whether requests are streamed
 * @property {boolean} [responseStream=false] Whether responses are streamed
 * @property {Object.<string,*>} [options] Method options
 */

/**
 * Constructs a method from a method descriptor.
 * @param {string} name Method name
 * @param {IMethod} json Method descriptor
 * @returns {Method} Created method
 * @throws {TypeError} If arguments are invalid
 */
Method.fromJSON = function fromJSON(name, json) {
  return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options, json.comment);
};

/**
 * Converts this method to a method descriptor.
 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
 * @returns {IMethod} Method descriptor
 */
Method.prototype.toJSON = function toJSON(toJSONOptions) {
  var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
  return util.toObject(["type", this.type !== "rpc" && /* istanbul ignore next */this.type || undefined, "requestType", this.requestType, "requestStream", this.requestStream, "responseType", this.responseType, "responseStream", this.responseStream, "options", this.options, "comment", keepComments ? this.comment : undefined]);
};

/**
 * @override
 */
Method.prototype.resolve = function resolve() {

  /* istanbul ignore if */
  if (this.resolved) return this;

  this.resolvedRequestType = this.parent.lookupType(this.requestType);
  this.resolvedResponseType = this.parent.lookupType(this.responseType);

  return ReflectionObject.prototype.resolve.call(this);
};

Method._configure = function () {
  util = __webpack_require__(1);
};

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _keys = __webpack_require__(7);

var _keys2 = _interopRequireDefault(_keys);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = Message;

var util;

/**
 * Constructs a new message instance.
 * @classdesc Abstract runtime message.
 * @constructor
 * @param {Properties<T>} [properties] Properties to set
 * @template T extends object
 */
function Message(properties) {
    // not used internally
    if (properties) for (var keys = (0, _keys2.default)(properties), i = 0; i < keys.length; ++i) {
        this[keys[i]] = properties[keys[i]];
    }
}

/**
 * Reference to the reflected type.
 * @name Message.$type
 * @type {Type}
 * @readonly
 */

/**
 * Reference to the reflected type.
 * @name Message#$type
 * @type {Type}
 * @readonly
 */

/*eslint-disable valid-jsdoc*/

/**
 * Creates a new message of this type using the specified properties.
 * @param {Object.<string,*>} [properties] Properties to set
 * @returns {Message<T>} Message instance
 * @template T extends Message<T>
 * @this Constructor<T>
 */
Message.create = function create(properties) {
    return this.$type.create(properties);
};

/**
 * Encodes a message of this type.
 * @param {T|Object.<string,*>} message Message to encode
 * @param {Writer} [writer] Writer to use
 * @returns {Writer} Writer
 * @template T extends Message<T>
 * @this Constructor<T>
 */
Message.encode = function encode(message, writer) {
    if (!arguments.length) {
        return this.$type.encode(this);
    } else if (arguments.length == 1) {
        return this.$type.encode(arguments[0]);
    } else {
        return this.$type.encode(arguments[0], arguments[1]);
    }
    //return this.$type.encode(message, writer);
};

/**
 * Encodes a message of this type preceeded by its length as a varint.
 * @param {T|Object.<string,*>} message Message to encode
 * @param {Writer} [writer] Writer to use
 * @returns {Writer} Writer
 * @template T extends Message<T>
 * @this Constructor<T>
 */
Message.encodeDelimited = function encodeDelimited(message, writer) {
    return this.$type.encodeDelimited(message, writer);
};

/**
 * Decodes a message of this type.
 * @name Message.decode
 * @function
 * @param {Reader|Uint8Array} reader Reader or buffer to decode
 * @returns {T} Decoded message
 * @template T extends Message<T>
 * @this Constructor<T>
 */
Message.decode = function decode(reader) {
    return this.$type.decode(reader);
};

/**
 * Decodes a message of this type preceeded by its length as a varint.
 * @name Message.decodeDelimited
 * @function
 * @param {Reader|Uint8Array} reader Reader or buffer to decode
 * @returns {T} Decoded message
 * @template T extends Message<T>
 * @this Constructor<T>
 */
Message.decodeDelimited = function decodeDelimited(reader) {
    return this.$type.decodeDelimited(reader);
};

/**
 * Verifies a message of this type.
 * @name Message.verify
 * @function
 * @param {Object.<string,*>} message Plain object to verify
 * @returns {string|null} `null` if valid, otherwise the reason why it is not
 */
Message.verify = function verify(message) {
    return this.$type.verify(message);
};

/**
 * Creates a new message of this type from a plain object. Also converts values to their respective internal types.
 * @param {Object.<string,*>} object Plain object
 * @returns {T} Message instance
 * @template T extends Message<T>
 * @this Constructor<T>
 */
Message.fromObject = function fromObject(object) {
    return this.$type.fromObject(object);
};

/**
 * Creates a plain object from a message of this type. Also converts values to other types if specified.
 * @param {T} message Message instance
 * @param {IConversionOptions} [options] Conversion options
 * @returns {Object.<string,*>} Plain object
 * @template T extends Message<T>
 * @this Constructor<T>
 */
Message.toObject = function toObject(message, options) {
    message = message || this;
    return this.$type.toObject(message, options);
};

/**
 * Converts this message to JSON.
 * @returns {Object.<string,*>} JSON object
 */
Message.prototype.toJSON = function toJSON() {
    return this.$type.toObject(this, util.toJSONOptions);
};

Message.set = function (key, value) {
    Message[key] = value;
};

Message.get = function (key) {
    return Message[key];
};
/*eslint-enable valid-jsdoc*/

Message._configure = function () {
    util = __webpack_require__(1);
};

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

module.exports = {
  2:      'need dictionary',     /* Z_NEED_DICT       2  */
  1:      'stream end',          /* Z_STREAM_END      1  */
  0:      '',                    /* Z_OK              0  */
  '-1':   'file error',          /* Z_ERRNO         (-1) */
  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
};


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),
/* 103 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = !__webpack_require__(9) && !__webpack_require__(26)(function () {
  return Object.defineProperty(__webpack_require__(73)('div'), 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(22);


/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(12);
var anObject = __webpack_require__(18);
var getKeys = __webpack_require__(43);

module.exports = __webpack_require__(9) ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
  return O;
};


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

var has = __webpack_require__(27);
var toIObject = __webpack_require__(32);
var arrayIndexOf = __webpack_require__(205)(false);
var IE_PROTO = __webpack_require__(76)('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};


/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

var document = __webpack_require__(4).document;
module.exports = document && document.documentElement;


/***/ }),
/* 109 */
/***/ (function(module, exports) {

module.exports = function (done, value) {
  return { value: value, done: !!done };
};


/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

// call something on iterator step with safe closing on error
var anObject = __webpack_require__(18);
module.exports = function (iterator, fn, value, entries) {
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) anObject(ret.call(iterator));
    throw e;
  }
};


/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

// check on default Array iterator
var Iterators = __webpack_require__(42);
var ITERATOR = __webpack_require__(5)('iterator');
var ArrayProto = Array.prototype;

module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};


/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject = __webpack_require__(18);
var aFunction = __webpack_require__(40);
var SPECIES = __webpack_require__(5)('species');
module.exports = function (O, D) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};


/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

var ctx = __webpack_require__(21);
var invoke = __webpack_require__(211);
var html = __webpack_require__(108);
var cel = __webpack_require__(73);
var global = __webpack_require__(4);
var process = global.process;
var setTask = global.setImmediate;
var clearTask = global.clearImmediate;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;
var run = function () {
  var id = +this;
  // eslint-disable-next-line no-prototype-builtins
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function (event) {
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!setTask || !clearTask) {
  setTask = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) args.push(arguments[i++]);
    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (__webpack_require__(44)(process) == 'process') {
    defer = function (id) {
      process.nextTick(ctx(run, id, 1));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if (MessageChannel) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
    defer = function (id) {
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in cel('script')) {
    defer = function (id) {
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set: setTask,
  clear: clearTask
};


/***/ }),
/* 114 */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return { e: false, v: exec() };
  } catch (e) {
    return { e: true, v: e };
  }
};


/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(18);
var isObject = __webpack_require__(8);
var newPromiseCapability = __webpack_require__(82);

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};


/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(4);
var core = __webpack_require__(0);
var dP = __webpack_require__(12);
var DESCRIPTORS = __webpack_require__(9);
var SPECIES = __webpack_require__(5)('species');

module.exports = function (KEY) {
  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];
  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
    configurable: true,
    get: function () { return this; }
  });
};


/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

var ITERATOR = __webpack_require__(5)('iterator');
var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function () { SAFE_CLOSING = true; };
  // eslint-disable-next-line no-throw-literal
  Array.from(riter, function () { throw 2; });
} catch (e) { /* empty */ }

module.exports = function (exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) return false;
  var safe = false;
  try {
    var arr = [7];
    var iter = arr[ITERATOR]();
    iter.next = function () { return { done: safe = true }; };
    arr[ITERATOR] = function () { return iter; };
    exec(arr);
  } catch (e) { /* empty */ }
  return safe;
};


/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(220), __esModule: true };

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(222), __esModule: true };

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(226), __esModule: true };

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(229), __esModule: true };

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var dP = __webpack_require__(12).f;
var create = __webpack_require__(55);
var redefineAll = __webpack_require__(83);
var ctx = __webpack_require__(21);
var anInstance = __webpack_require__(80);
var forOf = __webpack_require__(47);
var $iterDefine = __webpack_require__(72);
var step = __webpack_require__(109);
var setSpecies = __webpack_require__(116);
var DESCRIPTORS = __webpack_require__(9);
var fastKey = __webpack_require__(59).fastKey;
var validate = __webpack_require__(87);
var SIZE = DESCRIPTORS ? '_s' : 'size';

var getEntry = function (that, key) {
  // fast case
  var index = fastKey(key);
  var entry;
  if (index !== 'F') return that._i[index];
  // frozen object case
  for (entry = that._f; entry; entry = entry.n) {
    if (entry.k == key) return entry;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;         // collection type
      that._i = create(null); // index
      that._f = undefined;    // first entry
      that._l = undefined;    // last entry
      that[SIZE] = 0;         // size
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear() {
        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
          entry.r = true;
          if (entry.p) entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function (key) {
        var that = validate(this, NAME);
        var entry = getEntry(that, key);
        if (entry) {
          var next = entry.n;
          var prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if (prev) prev.n = next;
          if (next) next.p = prev;
          if (that._f == entry) that._f = next;
          if (that._l == entry) that._l = prev;
          that[SIZE]--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /* , that = undefined */) {
        validate(this, NAME);
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
        var entry;
        while (entry = entry ? entry.n : this._f) {
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while (entry && entry.r) entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key) {
        return !!getEntry(validate(this, NAME), key);
      }
    });
    if (DESCRIPTORS) dP(C.prototype, 'size', {
      get: function () {
        return validate(this, NAME)[SIZE];
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var entry = getEntry(that, key);
    var prev, index;
    // change existing entry
    if (entry) {
      entry.v = value;
    // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key,                        // <- key
        v: value,                      // <- value
        p: prev = that._l,             // <- previous entry
        n: undefined,                  // <- next entry
        r: false                       // <- removed
      };
      if (!that._f) that._f = entry;
      if (prev) prev.n = entry;
      that[SIZE]++;
      // add to index
      if (index !== 'F') that._i[index] = entry;
    } return that;
  },
  getEntry: getEntry,
  setStrong: function (C, NAME, IS_MAP) {
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function (iterated, kind) {
      this._t = validate(iterated, NAME); // target
      this._k = kind;                     // kind
      this._l = undefined;                // previous
    }, function () {
      var that = this;
      var kind = that._k;
      var entry = that._l;
      // revert to the last existing entry
      while (entry && entry.r) entry = entry.p;
      // get next entry
      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
        // or finish the iteration
        that._t = undefined;
        return step(1);
      }
      // return step by kind
      if (kind == 'keys') return step(0, entry.k);
      if (kind == 'values') return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(NAME);
  }
};


/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(4);
var $export = __webpack_require__(2);
var meta = __webpack_require__(59);
var fails = __webpack_require__(26);
var hide = __webpack_require__(22);
var redefineAll = __webpack_require__(83);
var forOf = __webpack_require__(47);
var anInstance = __webpack_require__(80);
var isObject = __webpack_require__(8);
var setToStringTag = __webpack_require__(45);
var dP = __webpack_require__(12).f;
var each = __webpack_require__(231)(0);
var DESCRIPTORS = __webpack_require__(9);

module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
  var Base = global[NAME];
  var C = Base;
  var ADDER = IS_MAP ? 'set' : 'add';
  var proto = C && C.prototype;
  var O = {};
  if (!DESCRIPTORS || typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
    new C().entries().next();
  }))) {
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    C = wrapper(function (target, iterable) {
      anInstance(target, C, NAME, '_c');
      target._c = new Base();
      if (iterable != undefined) forOf(iterable, IS_MAP, target[ADDER], target);
    });
    each('add,clear,delete,forEach,get,has,set,keys,values,entries,toJSON'.split(','), function (KEY) {
      var IS_ADDER = KEY == 'add' || KEY == 'set';
      if (KEY in proto && !(IS_WEAK && KEY == 'clear')) hide(C.prototype, KEY, function (a, b) {
        anInstance(this, C, KEY);
        if (!IS_ADDER && IS_WEAK && !isObject(a)) return KEY == 'get' ? undefined : false;
        var result = this._c[KEY](a === 0 ? 0 : a, b);
        return IS_ADDER ? this : result;
      });
    });
    IS_WEAK || dP(C.prototype, 'size', {
      get: function () {
        return this._c.size;
      }
    });
  }

  setToStringTag(C, NAME);

  O[NAME] = C;
  $export($export.G + $export.W + $export.F, O);

  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);

  return C;
};


/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

// 7.2.2 IsArray(argument)
var cof = __webpack_require__(44);
module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};


/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var classof = __webpack_require__(79);
var from = __webpack_require__(235);
module.exports = function (NAME) {
  return function toJSON() {
    if (classof(this) != NAME) throw TypeError(NAME + "#toJSON isn't generic");
    return from(this);
  };
};


/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-setmap-offrom/
var $export = __webpack_require__(2);

module.exports = function (COLLECTION) {
  $export($export.S, COLLECTION, { of: function of() {
    var length = arguments.length;
    var A = new Array(length);
    while (length--) A[length] = arguments[length];
    return new this(A);
  } });
};


/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-setmap-offrom/
var $export = __webpack_require__(2);
var aFunction = __webpack_require__(40);
var ctx = __webpack_require__(21);
var forOf = __webpack_require__(47);

module.exports = function (COLLECTION) {
  $export($export.S, COLLECTION, { from: function from(source /* , mapFn, thisArg */) {
    var mapFn = arguments[1];
    var mapping, A, n, cb;
    aFunction(this);
    mapping = mapFn !== undefined;
    if (mapping) aFunction(mapFn);
    if (source == undefined) return new this();
    A = [];
    if (mapping) {
      n = 0;
      cb = ctx(mapFn, arguments[2], 2);
      forOf(source, false, function (nextItem) {
        A.push(cb(nextItem, n++));
      });
    } else {
      forOf(source, false, A.push, A);
    }
    return new this(A);
  } });
};


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _defineProperty = __webpack_require__(129);

var _defineProperty2 = _interopRequireDefault(_defineProperty);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(238), __esModule: true };

/***/ }),
/* 130 */
/***/ (function(module, exports) {

module.exports = Long;

/**
 * wasm optimizations, to do native i64 multiplication and divide
 */
var wasm = null;

try {
  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([
    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11
  ])), {}).exports;
} catch (e) {
  // no wasm support :(
}

/**
 * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.
 *  See the from* functions below for more convenient ways of constructing Longs.
 * @exports Long
 * @class A Long class for representing a 64 bit two's-complement integer value.
 * @param {number} low The low (signed) 32 bits of the long
 * @param {number} high The high (signed) 32 bits of the long
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @constructor
 */
function Long(low, high, unsigned) {

    /**
     * The low 32 bits as a signed value.
     * @type {number}
     */
    this.low = low | 0;

    /**
     * The high 32 bits as a signed value.
     * @type {number}
     */
    this.high = high | 0;

    /**
     * Whether unsigned or not.
     * @type {boolean}
     */
    this.unsigned = !!unsigned;
}

// The internal representation of a long is the two given signed, 32-bit values.
// We use 32-bit pieces because these are the size of integers on which
// Javascript performs bit-operations.  For operations like addition and
// multiplication, we split each number into 16 bit pieces, which can easily be
// multiplied within Javascript's floating-point representation without overflow
// or change in sign.
//
// In the algorithms below, we frequently reduce the negative case to the
// positive case by negating the input(s) and then post-processing the result.
// Note that we must ALWAYS check specially whether those values are MIN_VALUE
// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
// a positive number, it overflows back into a negative).  Not handling this
// case would often result in infinite recursion.
//
// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*
// methods on which they depend.

/**
 * An indicator used to reliably determine if an object is a Long or not.
 * @type {boolean}
 * @const
 * @private
 */
Long.prototype.__isLong__;

Object.defineProperty(Long.prototype, "__isLong__", { value: true });

/**
 * @function
 * @param {*} obj Object
 * @returns {boolean}
 * @inner
 */
function isLong(obj) {
    return (obj && obj["__isLong__"]) === true;
}

/**
 * Tests if the specified object is a Long.
 * @function
 * @param {*} obj Object
 * @returns {boolean}
 */
Long.isLong = isLong;

/**
 * A cache of the Long representations of small integer values.
 * @type {!Object}
 * @inner
 */
var INT_CACHE = {};

/**
 * A cache of the Long representations of small unsigned integer values.
 * @type {!Object}
 * @inner
 */
var UINT_CACHE = {};

/**
 * @param {number} value
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromInt(value, unsigned) {
    var obj, cachedObj, cache;
    if (unsigned) {
        value >>>= 0;
        if (cache = (0 <= value && value < 256)) {
            cachedObj = UINT_CACHE[value];
            if (cachedObj)
                return cachedObj;
        }
        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);
        if (cache)
            UINT_CACHE[value] = obj;
        return obj;
    } else {
        value |= 0;
        if (cache = (-128 <= value && value < 128)) {
            cachedObj = INT_CACHE[value];
            if (cachedObj)
                return cachedObj;
        }
        obj = fromBits(value, value < 0 ? -1 : 0, false);
        if (cache)
            INT_CACHE[value] = obj;
        return obj;
    }
}

/**
 * Returns a Long representing the given 32 bit integer value.
 * @function
 * @param {number} value The 32 bit integer in question
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */
Long.fromInt = fromInt;

/**
 * @param {number} value
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromNumber(value, unsigned) {
    if (isNaN(value))
        return unsigned ? UZERO : ZERO;
    if (unsigned) {
        if (value < 0)
            return UZERO;
        if (value >= TWO_PWR_64_DBL)
            return MAX_UNSIGNED_VALUE;
    } else {
        if (value <= -TWO_PWR_63_DBL)
            return MIN_VALUE;
        if (value + 1 >= TWO_PWR_63_DBL)
            return MAX_VALUE;
    }
    if (value < 0)
        return fromNumber(-value, unsigned).neg();
    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);
}

/**
 * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.
 * @function
 * @param {number} value The number in question
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */
Long.fromNumber = fromNumber;

/**
 * @param {number} lowBits
 * @param {number} highBits
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromBits(lowBits, highBits, unsigned) {
    return new Long(lowBits, highBits, unsigned);
}

/**
 * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is
 *  assumed to use 32 bits.
 * @function
 * @param {number} lowBits The low 32 bits
 * @param {number} highBits The high 32 bits
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */
Long.fromBits = fromBits;

/**
 * @function
 * @param {number} base
 * @param {number} exponent
 * @returns {number}
 * @inner
 */
var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)

/**
 * @param {string} str
 * @param {(boolean|number)=} unsigned
 * @param {number=} radix
 * @returns {!Long}
 * @inner
 */
function fromString(str, unsigned, radix) {
    if (str.length === 0)
        throw Error('empty string');
    if (str === "NaN" || str === "Infinity" || str === "+Infinity" || str === "-Infinity")
        return ZERO;
    if (typeof unsigned === 'number') {
        // For goog.math.long compatibility
        radix = unsigned,
        unsigned = false;
    } else {
        unsigned = !! unsigned;
    }
    radix = radix || 10;
    if (radix < 2 || 36 < radix)
        throw RangeError('radix');

    var p;
    if ((p = str.indexOf('-')) > 0)
        throw Error('interior hyphen');
    else if (p === 0) {
        return fromString(str.substring(1), unsigned, radix).neg();
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = fromNumber(pow_dbl(radix, 8));

    var result = ZERO;
    for (var i = 0; i < str.length; i += 8) {
        var size = Math.min(8, str.length - i),
            value = parseInt(str.substring(i, i + size), radix);
        if (size < 8) {
            var power = fromNumber(pow_dbl(radix, size));
            result = result.mul(power).add(fromNumber(value));
        } else {
            result = result.mul(radixToPower);
            result = result.add(fromNumber(value));
        }
    }
    result.unsigned = unsigned;
    return result;
}

/**
 * Returns a Long representation of the given string, written using the specified radix.
 * @function
 * @param {string} str The textual representation of the Long
 * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed
 * @param {number=} radix The radix in which the text is written (2-36), defaults to 10
 * @returns {!Long} The corresponding Long value
 */
Long.fromString = fromString;

/**
 * @function
 * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromValue(val, unsigned) {
    if (typeof val === 'number')
        return fromNumber(val, unsigned);
    if (typeof val === 'string')
        return fromString(val, unsigned);
    // Throws for non-objects, converts non-instanceof Long:
    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);
}

/**
 * Converts the specified value to a Long using the appropriate from* function for its type.
 * @function
 * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long}
 */
Long.fromValue = fromValue;

// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be
// no runtime penalty for these.

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_16_DBL = 1 << 16;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_24_DBL = 1 << 24;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;

/**
 * @type {!Long}
 * @const
 * @inner
 */
var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);

/**
 * @type {!Long}
 * @inner
 */
var ZERO = fromInt(0);

/**
 * Signed zero.
 * @type {!Long}
 */
Long.ZERO = ZERO;

/**
 * @type {!Long}
 * @inner
 */
var UZERO = fromInt(0, true);

/**
 * Unsigned zero.
 * @type {!Long}
 */
Long.UZERO = UZERO;

/**
 * @type {!Long}
 * @inner
 */
var ONE = fromInt(1);

/**
 * Signed one.
 * @type {!Long}
 */
Long.ONE = ONE;

/**
 * @type {!Long}
 * @inner
 */
var UONE = fromInt(1, true);

/**
 * Unsigned one.
 * @type {!Long}
 */
Long.UONE = UONE;

/**
 * @type {!Long}
 * @inner
 */
var NEG_ONE = fromInt(-1);

/**
 * Signed negative one.
 * @type {!Long}
 */
Long.NEG_ONE = NEG_ONE;

/**
 * @type {!Long}
 * @inner
 */
var MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);

/**
 * Maximum signed value.
 * @type {!Long}
 */
Long.MAX_VALUE = MAX_VALUE;

/**
 * @type {!Long}
 * @inner
 */
var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);

/**
 * Maximum unsigned value.
 * @type {!Long}
 */
Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;

/**
 * @type {!Long}
 * @inner
 */
var MIN_VALUE = fromBits(0, 0x80000000|0, false);

/**
 * Minimum signed value.
 * @type {!Long}
 */
Long.MIN_VALUE = MIN_VALUE;

/**
 * @alias Long.prototype
 * @inner
 */
var LongPrototype = Long.prototype;

/**
 * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.
 * @returns {number}
 */
LongPrototype.toInt = function toInt() {
    return this.unsigned ? this.low >>> 0 : this.low;
};

/**
 * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).
 * @returns {number}
 */
LongPrototype.toNumber = function toNumber() {
    if (this.unsigned)
        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);
    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
};

/**
 * Converts the Long to a string written in the specified radix.
 * @param {number=} radix Radix (2-36), defaults to 10
 * @returns {string}
 * @override
 * @throws {RangeError} If `radix` is out of range
 */
LongPrototype.toString = function toString(radix) {
    radix = radix || 10;
    if (radix < 2 || 36 < radix)
        throw RangeError('radix');
    if (this.isZero())
        return '0';
    if (this.isNegative()) { // Unsigned Longs are never negative
        if (this.eq(MIN_VALUE)) {
            // We need to change the Long value before it can be negated, so we remove
            // the bottom-most digit in this base and then recurse to do the rest.
            var radixLong = fromNumber(radix),
                div = this.div(radixLong),
                rem1 = div.mul(radixLong).sub(this);
            return div.toString(radix) + rem1.toInt().toString(radix);
        } else
            return '-' + this.neg().toString(radix);
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),
        rem = this;
    var result = '';
    while (true) {
        var remDiv = rem.div(radixToPower),
            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,
            digits = intval.toString(radix);
        rem = remDiv;
        if (rem.isZero())
            return digits + result;
        else {
            while (digits.length < 6)
                digits = '0' + digits;
            result = '' + digits + result;
        }
    }
};

/**
 * Gets the high 32 bits as a signed integer.
 * @returns {number} Signed high bits
 */
LongPrototype.getHighBits = function getHighBits() {
    return this.high;
};

/**
 * Gets the high 32 bits as an unsigned integer.
 * @returns {number} Unsigned high bits
 */
LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {
    return this.high >>> 0;
};

/**
 * Gets the low 32 bits as a signed integer.
 * @returns {number} Signed low bits
 */
LongPrototype.getLowBits = function getLowBits() {
    return this.low;
};

/**
 * Gets the low 32 bits as an unsigned integer.
 * @returns {number} Unsigned low bits
 */
LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {
    return this.low >>> 0;
};

/**
 * Gets the number of bits needed to represent the absolute value of this Long.
 * @returns {number}
 */
LongPrototype.getNumBitsAbs = function getNumBitsAbs() {
    if (this.isNegative()) // Unsigned Longs are never negative
        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();
    var val = this.high != 0 ? this.high : this.low;
    for (var bit = 31; bit > 0; bit--)
        if ((val & (1 << bit)) != 0)
            break;
    return this.high != 0 ? bit + 33 : bit + 1;
};

/**
 * Tests if this Long's value equals zero.
 * @returns {boolean}
 */
LongPrototype.isZero = function isZero() {
    return this.high === 0 && this.low === 0;
};

/**
 * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.
 * @returns {boolean}
 */
LongPrototype.eqz = LongPrototype.isZero;

/**
 * Tests if this Long's value is negative.
 * @returns {boolean}
 */
LongPrototype.isNegative = function isNegative() {
    return !this.unsigned && this.high < 0;
};

/**
 * Tests if this Long's value is positive.
 * @returns {boolean}
 */
LongPrototype.isPositive = function isPositive() {
    return this.unsigned || this.high >= 0;
};

/**
 * Tests if this Long's value is odd.
 * @returns {boolean}
 */
LongPrototype.isOdd = function isOdd() {
    return (this.low & 1) === 1;
};

/**
 * Tests if this Long's value is even.
 * @returns {boolean}
 */
LongPrototype.isEven = function isEven() {
    return (this.low & 1) === 0;
};

/**
 * Tests if this Long's value equals the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.equals = function equals(other) {
    if (!isLong(other))
        other = fromValue(other);
    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)
        return false;
    return this.high === other.high && this.low === other.low;
};

/**
 * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.eq = LongPrototype.equals;

/**
 * Tests if this Long's value differs from the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.notEquals = function notEquals(other) {
    return !this.eq(/* validates */ other);
};

/**
 * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.neq = LongPrototype.notEquals;

/**
 * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.ne = LongPrototype.notEquals;

/**
 * Tests if this Long's value is less than the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lessThan = function lessThan(other) {
    return this.comp(/* validates */ other) < 0;
};

/**
 * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lt = LongPrototype.lessThan;

/**
 * Tests if this Long's value is less than or equal the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {
    return this.comp(/* validates */ other) <= 0;
};

/**
 * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lte = LongPrototype.lessThanOrEqual;

/**
 * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.le = LongPrototype.lessThanOrEqual;

/**
 * Tests if this Long's value is greater than the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.greaterThan = function greaterThan(other) {
    return this.comp(/* validates */ other) > 0;
};

/**
 * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.gt = LongPrototype.greaterThan;

/**
 * Tests if this Long's value is greater than or equal the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {
    return this.comp(/* validates */ other) >= 0;
};

/**
 * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.gte = LongPrototype.greaterThanOrEqual;

/**
 * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.ge = LongPrototype.greaterThanOrEqual;

/**
 * Compares this Long's value with the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {number} 0 if they are the same, 1 if the this is greater and -1
 *  if the given one is greater
 */
LongPrototype.compare = function compare(other) {
    if (!isLong(other))
        other = fromValue(other);
    if (this.eq(other))
        return 0;
    var thisNeg = this.isNegative(),
        otherNeg = other.isNegative();
    if (thisNeg && !otherNeg)
        return -1;
    if (!thisNeg && otherNeg)
        return 1;
    // At this point the sign bits are the same
    if (!this.unsigned)
        return this.sub(other).isNegative() ? -1 : 1;
    // Both are positive if at least one is unsigned
    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;
};

/**
 * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {number} 0 if they are the same, 1 if the this is greater and -1
 *  if the given one is greater
 */
LongPrototype.comp = LongPrototype.compare;

/**
 * Negates this Long's value.
 * @returns {!Long} Negated Long
 */
LongPrototype.negate = function negate() {
    if (!this.unsigned && this.eq(MIN_VALUE))
        return MIN_VALUE;
    return this.not().add(ONE);
};

/**
 * Negates this Long's value. This is an alias of {@link Long#negate}.
 * @function
 * @returns {!Long} Negated Long
 */
LongPrototype.neg = LongPrototype.negate;

/**
 * Returns the sum of this and the specified Long.
 * @param {!Long|number|string} addend Addend
 * @returns {!Long} Sum
 */
LongPrototype.add = function add(addend) {
    if (!isLong(addend))
        addend = fromValue(addend);

    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high >>> 16;
    var a32 = this.high & 0xFFFF;
    var a16 = this.low >>> 16;
    var a00 = this.low & 0xFFFF;

    var b48 = addend.high >>> 16;
    var b32 = addend.high & 0xFFFF;
    var b16 = addend.low >>> 16;
    var b00 = addend.low & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
};

/**
 * Returns the difference of this and the specified Long.
 * @param {!Long|number|string} subtrahend Subtrahend
 * @returns {!Long} Difference
 */
LongPrototype.subtract = function subtract(subtrahend) {
    if (!isLong(subtrahend))
        subtrahend = fromValue(subtrahend);
    return this.add(subtrahend.neg());
};

/**
 * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.
 * @function
 * @param {!Long|number|string} subtrahend Subtrahend
 * @returns {!Long} Difference
 */
LongPrototype.sub = LongPrototype.subtract;

/**
 * Returns the product of this and the specified Long.
 * @param {!Long|number|string} multiplier Multiplier
 * @returns {!Long} Product
 */
LongPrototype.multiply = function multiply(multiplier) {
    if (this.isZero())
        return ZERO;
    if (!isLong(multiplier))
        multiplier = fromValue(multiplier);

    // use wasm support if present
    if (wasm) {
        var low = wasm.mul(this.low,
                           this.high,
                           multiplier.low,
                           multiplier.high);
        return fromBits(low, wasm.get_high(), this.unsigned);
    }

    if (multiplier.isZero())
        return ZERO;
    if (this.eq(MIN_VALUE))
        return multiplier.isOdd() ? MIN_VALUE : ZERO;
    if (multiplier.eq(MIN_VALUE))
        return this.isOdd() ? MIN_VALUE : ZERO;

    if (this.isNegative()) {
        if (multiplier.isNegative())
            return this.neg().mul(multiplier.neg());
        else
            return this.neg().mul(multiplier).neg();
    } else if (multiplier.isNegative())
        return this.mul(multiplier.neg()).neg();

    // If both longs are small, use float multiplication
    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))
        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high >>> 16;
    var a32 = this.high & 0xFFFF;
    var a16 = this.low >>> 16;
    var a00 = this.low & 0xFFFF;

    var b48 = multiplier.high >>> 16;
    var b32 = multiplier.high & 0xFFFF;
    var b16 = multiplier.low >>> 16;
    var b00 = multiplier.low & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
};

/**
 * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.
 * @function
 * @param {!Long|number|string} multiplier Multiplier
 * @returns {!Long} Product
 */
LongPrototype.mul = LongPrototype.multiply;

/**
 * Returns this Long divided by the specified. The result is signed if this Long is signed or
 *  unsigned if this Long is unsigned.
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Quotient
 */
LongPrototype.divide = function divide(divisor) {
    if (!isLong(divisor))
        divisor = fromValue(divisor);
    if (divisor.isZero())
        throw Error('division by zero');

    // use wasm support if present
    if (wasm) {
        // guard against signed division overflow: the largest
        // negative number / -1 would be 1 larger than the largest
        // positive number, due to two's complement.
        if (!this.unsigned &&
            this.high === -0x80000000 &&
            divisor.low === -1 && divisor.high === -1) {
            // be consistent with non-wasm code path
            return this;
        }
        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(
            this.low,
            this.high,
            divisor.low,
            divisor.high
        );
        return fromBits(low, wasm.get_high(), this.unsigned);
    }

    if (this.isZero())
        return this.unsigned ? UZERO : ZERO;
    var approx, rem, res;
    if (!this.unsigned) {
        // This section is only relevant for signed longs and is derived from the
        // closure library as a whole.
        if (this.eq(MIN_VALUE)) {
            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))
                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
            else if (divisor.eq(MIN_VALUE))
                return ONE;
            else {
                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
                var halfThis = this.shr(1);
                approx = halfThis.div(divisor).shl(1);
                if (approx.eq(ZERO)) {
                    return divisor.isNegative() ? ONE : NEG_ONE;
                } else {
                    rem = this.sub(divisor.mul(approx));
                    res = approx.add(rem.div(divisor));
                    return res;
                }
            }
        } else if (divisor.eq(MIN_VALUE))
            return this.unsigned ? UZERO : ZERO;
        if (this.isNegative()) {
            if (divisor.isNegative())
                return this.neg().div(divisor.neg());
            return this.neg().div(divisor).neg();
        } else if (divisor.isNegative())
            return this.div(divisor.neg()).neg();
        res = ZERO;
    } else {
        // The algorithm below has not been made for unsigned longs. It's therefore
        // required to take special care of the MSB prior to running it.
        if (!divisor.unsigned)
            divisor = divisor.toUnsigned();
        if (divisor.gt(this))
            return UZERO;
        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true
            return UONE;
        res = UZERO;
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    rem = this;
    while (rem.gte(divisor)) {
        // Approximate the result of division. This may be a little greater or
        // smaller than the actual value.
        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));

        // We will tweak the approximate result by changing it in the 48-th digit or
        // the smallest non-fractional digit, whichever is larger.
        var log2 = Math.ceil(Math.log(approx) / Math.LN2),
            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),

        // Decrease the approximation until it is smaller than the remainder.  Note
        // that if it is too large, the product overflows and is negative.
            approxRes = fromNumber(approx),
            approxRem = approxRes.mul(divisor);
        while (approxRem.isNegative() || approxRem.gt(rem)) {
            approx -= delta;
            approxRes = fromNumber(approx, this.unsigned);
            approxRem = approxRes.mul(divisor);
        }

        // We know the answer can't be zero... and actually, zero would cause
        // infinite recursion since we would make no progress.
        if (approxRes.isZero())
            approxRes = ONE;

        res = res.add(approxRes);
        rem = rem.sub(approxRem);
    }
    return res;
};

/**
 * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Quotient
 */
LongPrototype.div = LongPrototype.divide;

/**
 * Returns this Long modulo the specified.
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */
LongPrototype.modulo = function modulo(divisor) {
    if (!isLong(divisor))
        divisor = fromValue(divisor);

    // use wasm support if present
    if (wasm) {
        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(
            this.low,
            this.high,
            divisor.low,
            divisor.high
        );
        return fromBits(low, wasm.get_high(), this.unsigned);
    }

    return this.sub(this.div(divisor).mul(divisor));
};

/**
 * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */
LongPrototype.mod = LongPrototype.modulo;

/**
 * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */
LongPrototype.rem = LongPrototype.modulo;

/**
 * Returns the bitwise NOT of this Long.
 * @returns {!Long}
 */
LongPrototype.not = function not() {
    return fromBits(~this.low, ~this.high, this.unsigned);
};

/**
 * Returns the bitwise AND of this Long and the specified.
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */
LongPrototype.and = function and(other) {
    if (!isLong(other))
        other = fromValue(other);
    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);
};

/**
 * Returns the bitwise OR of this Long and the specified.
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */
LongPrototype.or = function or(other) {
    if (!isLong(other))
        other = fromValue(other);
    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);
};

/**
 * Returns the bitwise XOR of this Long and the given one.
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */
LongPrototype.xor = function xor(other) {
    if (!isLong(other))
        other = fromValue(other);
    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
};

/**
 * Returns this Long with bits shifted to the left by the given amount.
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shiftLeft = function shiftLeft(numBits) {
    if (isLong(numBits))
        numBits = numBits.toInt();
    if ((numBits &= 63) === 0)
        return this;
    else if (numBits < 32)
        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);
    else
        return fromBits(0, this.low << (numBits - 32), this.unsigned);
};

/**
 * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shl = LongPrototype.shiftLeft;

/**
 * Returns this Long with bits arithmetically shifted to the right by the given amount.
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shiftRight = function shiftRight(numBits) {
    if (isLong(numBits))
        numBits = numBits.toInt();
    if ((numBits &= 63) === 0)
        return this;
    else if (numBits < 32)
        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);
    else
        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);
};

/**
 * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shr = LongPrototype.shiftRight;

/**
 * Returns this Long with bits logically shifted to the right by the given amount.
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {
    if (isLong(numBits))
        numBits = numBits.toInt();
    numBits &= 63;
    if (numBits === 0)
        return this;
    else {
        var high = this.high;
        if (numBits < 32) {
            var low = this.low;
            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);
        } else if (numBits === 32)
            return fromBits(high, 0, this.unsigned);
        else
            return fromBits(high >>> (numBits - 32), 0, this.unsigned);
    }
};

/**
 * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shru = LongPrototype.shiftRightUnsigned;

/**
 * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;

/**
 * Converts this Long to signed.
 * @returns {!Long} Signed long
 */
LongPrototype.toSigned = function toSigned() {
    if (!this.unsigned)
        return this;
    return fromBits(this.low, this.high, false);
};

/**
 * Converts this Long to unsigned.
 * @returns {!Long} Unsigned long
 */
LongPrototype.toUnsigned = function toUnsigned() {
    if (this.unsigned)
        return this;
    return fromBits(this.low, this.high, true);
};

/**
 * Converts this Long to its byte representation.
 * @param {boolean=} le Whether little or big endian, defaults to big endian
 * @returns {!Array.<number>} Byte representation
 */
LongPrototype.toBytes = function toBytes(le) {
    return le ? this.toBytesLE() : this.toBytesBE();
};

/**
 * Converts this Long to its little endian byte representation.
 * @returns {!Array.<number>} Little endian byte representation
 */
LongPrototype.toBytesLE = function toBytesLE() {
    var hi = this.high,
        lo = this.low;
    return [
        lo        & 0xff,
        lo >>>  8 & 0xff,
        lo >>> 16 & 0xff,
        lo >>> 24       ,
        hi        & 0xff,
        hi >>>  8 & 0xff,
        hi >>> 16 & 0xff,
        hi >>> 24
    ];
};

/**
 * Converts this Long to its big endian byte representation.
 * @returns {!Array.<number>} Big endian byte representation
 */
LongPrototype.toBytesBE = function toBytesBE() {
    var hi = this.high,
        lo = this.low;
    return [
        hi >>> 24       ,
        hi >>> 16 & 0xff,
        hi >>>  8 & 0xff,
        hi        & 0xff,
        lo >>> 24       ,
        lo >>> 16 & 0xff,
        lo >>>  8 & 0xff,
        lo        & 0xff
    ];
};

/**
 * Creates a Long from its byte representation.
 * @param {!Array.<number>} bytes Byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @param {boolean=} le Whether little or big endian, defaults to big endian
 * @returns {Long} The corresponding Long value
 */
Long.fromBytes = function fromBytes(bytes, unsigned, le) {
    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);
};

/**
 * Creates a Long from its little endian byte representation.
 * @param {!Array.<number>} bytes Little endian byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {Long} The corresponding Long value
 */
Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {
    return new Long(
        bytes[0]       |
        bytes[1] <<  8 |
        bytes[2] << 16 |
        bytes[3] << 24,
        bytes[4]       |
        bytes[5] <<  8 |
        bytes[6] << 16 |
        bytes[7] << 24,
        unsigned
    );
};

/**
 * Creates a Long from its big endian byte representation.
 * @param {!Array.<number>} bytes Big endian byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {Long} The corresponding Long value
 */
Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {
    return new Long(
        bytes[4] << 24 |
        bytes[5] << 16 |
        bytes[6] <<  8 |
        bytes[7],
        bytes[0] << 24 |
        bytes[1] << 16 |
        bytes[2] <<  8 |
        bytes[3],
        unsigned
    );
};


/***/ }),
/* 131 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__131__;

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = __webpack_require__(32);
var gOPN = __webpack_require__(133).f;
var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};


/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = __webpack_require__(107);
var hiddenKeys = __webpack_require__(78).concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};


/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

/**
 * Module dependencies
 */

var xtend = __webpack_require__(91);

var Readable = __webpack_require__(14).Readable;
var streamsOpts = { objectMode: true };
var defaultStoreOptions = {
  clean: true

  /**
   * es6-map can preserve insertion order even if ES version is older.
   *
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Description
   * It should be noted that a Map which is a map of an object, especially
   * a dictionary of dictionaries, will only map to the object's insertion
   * order. In ES2015 this is ordered for objects but for older versions of
   * ES, this may be random and not ordered.
   *
   */
};var Map = __webpack_require__(266);

/**
 * In-memory implementation of the message store
 * This can actually be saved into files.
 *
 * @param {Object} [options] - store options
 */
function Store(options) {
  if (!(this instanceof Store)) {
    return new Store(options);
  }

  this.options = options || {};

  // Defaults
  this.options = xtend(defaultStoreOptions, options);

  this._inflights = new Map();
}

/**
 * Adds a packet to the store, a packet is
 * anything that has a messageId property.
 *
 */
Store.prototype.put = function (packet, cb) {
  this._inflights.set(packet.messageId, packet);

  if (cb) {
    cb();
  }

  return this;
};

/**
 * Creates a stream with all the packets in the store
 *
 */
Store.prototype.createStream = function () {
  var stream = new Readable(streamsOpts);
  var destroyed = false;
  var values = [];
  var i = 0;

  this._inflights.forEach(function (value, key) {
    values.push(value);
  });

  stream._read = function () {
    if (!destroyed && i < values.length) {
      this.push(values[i++]);
    } else {
      this.push(null);
    }
  };

  stream.destroy = function () {
    if (destroyed) {
      return;
    }

    var self = this;

    destroyed = true;

    process.nextTick(function () {
      self.emit('close');
    });
  };

  return stream;
};

/**
 * deletes a packet from the store.
 */
Store.prototype.del = function (packet, cb) {
  var pubackRC = packet.reasonCode;
  packet = this._inflights.get(packet.messageId);
  if (packet) {
    this._inflights.delete(packet.messageId);
    if (pubackRC && pubackRC === 10) {
      return;
    }
    cb(null, packet);
  } else if (cb) {
    cb(new Error('missing packet'));
  }

  return this;
};

/**
 * get a packet from the store.
 */
Store.prototype.get = function (packet, cb) {
  packet = this._inflights.get(packet.messageId);
  if (packet) {
    cb(null, packet);
  } else if (cb) {
    cb(new Error('missing packet'));
  }

  return this;
};

/**
 * Close the store
 */
Store.prototype.close = function (cb) {
  if (this.options.clean) {
    this._inflights = null;
  }
  if (cb) {
    cb();
  }
};

module.exports = Store;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3)))

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



/*<replacement>*/

var pna = __webpack_require__(50);
/*</replacement>*/

module.exports = Readable;

/*<replacement>*/
var isArray = __webpack_require__(103);
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = __webpack_require__(49).EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = __webpack_require__(136);
/*</replacement>*/

/*<replacement>*/

var Buffer = __webpack_require__(15).Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

/*<replacement>*/
var util = __webpack_require__(51);
util.inherits = __webpack_require__(19);
/*</replacement>*/

/*<replacement>*/
var debugUtil = __webpack_require__(259);
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = __webpack_require__(260);
var destroyImpl = __webpack_require__(137);
var StringDecoder;

util.inherits(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

  // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.
  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream) {
  Duplex = Duplex || __webpack_require__(28);

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var readableHwm = options.readableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = __webpack_require__(139).StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || __webpack_require__(28);

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});

Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = __webpack_require__(139).StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    pna.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = { hasUnpiped: false };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, unpipeInfo);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this, unpipeInfo);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        pna.nextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    pna.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;

  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  this._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._readableState.highWaterMark;
  }
});

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    pna.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(17), __webpack_require__(3)))

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(49).EventEmitter;


/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*<replacement>*/

var pna = __webpack_require__(50);
/*</replacement>*/

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      pna.nextTick(emitErrorNT, this, err);
    }
    return this;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      pna.nextTick(emitErrorNT, _this, err);
      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      cb(err);
    }
  });

  return this;
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, setImmediate, global) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.



/*<replacement>*/

var pna = __webpack_require__(50);
/*</replacement>*/

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = __webpack_require__(51);
util.inherits = __webpack_require__(19);
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: __webpack_require__(264)
};
/*</replacement>*/

/*<replacement>*/
var Stream = __webpack_require__(136);
/*</replacement>*/

/*<replacement>*/

var Buffer = __webpack_require__(15).Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

var destroyImpl = __webpack_require__(137);

util.inherits(Writable, Stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || __webpack_require__(28);

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var writableHwm = options.writableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || __webpack_require__(28);

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;

    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  pna.nextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    pna.nextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
});

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    pna.nextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    pna.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      stream.emit('error', err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      pna.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }
  if (state.corkedRequestsFree) {
    state.corkedRequestsFree.next = corkReq;
  } else {
    state.corkedRequestsFree = corkReq;
  }
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function () {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});

Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3), __webpack_require__(262).setImmediate, __webpack_require__(17)))

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



/*<replacement>*/

var Buffer = __webpack_require__(15).Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.



module.exports = Transform;

var Duplex = __webpack_require__(28);

/*<replacement>*/
var util = __webpack_require__(51);
util.inherits = __webpack_require__(19);
/*</replacement>*/

util.inherits(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) {
    return this.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;

  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);

  cb(er);

  var rs = this._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  };

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function') {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this2 = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
    _this2.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');

  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Inspired by Google Closure:
// http://closure-library.googlecode.com/svn/docs/
// closure_goog_array_array.js.html#goog.array.clear



var value = __webpack_require__(20);

module.exports = function () {
	value(this).length = 0;
	return this;
};


/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var toInteger = __webpack_require__(274)
  , max       = Math.max;

module.exports = function (value) { return max(0, toInteger(value)); };


/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var create = Object.create, getPrototypeOf = Object.getPrototypeOf, plainObject = {};

module.exports = function (/* CustomCreate*/) {
	var setPrototypeOf = Object.setPrototypeOf, customCreate = arguments[0] || create;
	if (typeof setPrototypeOf !== "function") return false;
	return getPrototypeOf(setPrototypeOf(customCreate(null), plainObject)) === plainObject;
};


/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint no-proto: "off" */

// Big thanks to @WebReflection for sorting this out
// https://gist.github.com/WebReflection/5593554



var isObject         = __webpack_require__(278)
  , value            = __webpack_require__(20)
  , objIsPrototypeOf = Object.prototype.isPrototypeOf
  , defineProperty   = Object.defineProperty
  , nullDesc         = { configurable: true, enumerable: false, writable: true, value: undefined }
  , validate;

validate = function (obj, prototype) {
	value(obj);
	if (prototype === null || isObject(prototype)) return obj;
	throw new TypeError("Prototype must be null or an object");
};

module.exports = (function (status) {
	var fn, set;
	if (!status) return null;
	if (status.level === 2) {
		if (status.set) {
			set = status.set;
			fn = function (obj, prototype) {
				set.call(validate(obj, prototype), prototype);
				return obj;
			};
		} else {
			fn = function (obj, prototype) {
				validate(obj, prototype).__proto__ = prototype;
				return obj;
			};
		}
	} else {
		fn = function self(obj, prototype) {
			var isNullBase;
			validate(obj, prototype);
			isNullBase = objIsPrototypeOf.call(self.nullPolyfill, obj);
			if (isNullBase) delete self.nullPolyfill.__proto__;
			if (prototype === null) prototype = self.nullPolyfill;
			obj.__proto__ = prototype;
			if (isNullBase) defineProperty(self.nullPolyfill, "__proto__", nullDesc);
			return obj;
		};
	}
	return Object.defineProperty(fn, "level", {
		configurable: false,
		enumerable: false,
		writable: false,
		value: status.level
	});
})(
	(function () {
		var tmpObj1 = Object.create(null)
		  , tmpObj2 = {}
		  , set
		  , desc = Object.getOwnPropertyDescriptor(Object.prototype, "__proto__");

		if (desc) {
			try {
				set = desc.set; // Opera crashes at this point
				set.call(tmpObj1, tmpObj2);
			} catch (ignore) {}
			if (Object.getPrototypeOf(tmpObj1) === tmpObj2) return { set: set, level: 2 };
		}

		tmpObj1.__proto__ = tmpObj2;
		if (Object.getPrototypeOf(tmpObj1) === tmpObj2) return { level: 2 };

		tmpObj1 = {};
		tmpObj1.__proto__ = tmpObj2;
		if (Object.getPrototypeOf(tmpObj1) === tmpObj2) return { level: 1 };

		return false;
	})()
);

__webpack_require__(279);


/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isFunction = __webpack_require__(280);

var classRe = /^\s*class[\s{/}]/, functionToString = Function.prototype.toString;

module.exports = function (value) {
	if (!isFunction(value)) return false;
	if (classRe.test(functionToString.call(value))) return false;
	return true;
};


/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isValue = __webpack_require__(34);

var forEach = Array.prototype.forEach, create = Object.create;

var process = function (src, obj) {
	var key;
	for (key in src) obj[key] = src[key];
};

// eslint-disable-next-line no-unused-vars
module.exports = function (opts1/*, …options*/) {
	var result = create(null);
	forEach.call(arguments, function (options) {
		if (!isValue(options)) return;
		process(Object(options), result);
	});
	return result;
};


/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(287)() ? String.prototype.contains : __webpack_require__(288);


/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isSymbol = __webpack_require__(292);

module.exports = function (value) {
	if (!isSymbol(value)) throw new TypeError(value + " is not a symbol");
	return value;
};


/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isIterable = __webpack_require__(296);

module.exports = function (value) {
	if (!isIterable(value)) throw new TypeError(value + " is not iterable");
	return value;
};


/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isValue       = __webpack_require__(35)
  , isObject      = __webpack_require__(92)
  , stringCoerce  = __webpack_require__(302)
  , toShortString = __webpack_require__(303);

var resolveMessage = function (message, value) {
	return message.replace("%v", toShortString(value));
};

module.exports = function (value, defaultMessage, inputOptions) {
	if (!isObject(inputOptions)) throw new TypeError(resolveMessage(defaultMessage, value));
	if (!isValue(value)) {
		if ("default" in inputOptions) return inputOptions["default"];
		if (inputOptions.isOptional) return null;
	}
	var errorMessage = stringCoerce(inputOptions.errorMessage);
	if (!isValue(errorMessage)) errorMessage = defaultMessage;
	throw new TypeError(resolveMessage(errorMessage, value));
};


/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(321), __esModule: true };

/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Buffer = __webpack_require__(15).Buffer;

/* Protocol - protocol constants */
var protocol = module.exports;

/* Command code => mnemonic */
protocol.types = {
  0: 'reserved',
  1: 'connect',
  2: 'connack',
  3: 'publish',
  4: 'puback',
  5: 'pubrec',
  6: 'pubrel',
  7: 'pubcomp',
  8: 'subscribe',
  9: 'suback',
  10: 'unsubscribe',
  11: 'unsuback',
  12: 'pingreq',
  13: 'pingresp',
  14: 'disconnect',
  15: 'auth'

  /* Mnemonic => Command code */
};protocol.codes = {};
for (var k in protocol.types) {
  var v = protocol.types[k];
  protocol.codes[v] = k;
}

/* Header */
protocol.CMD_SHIFT = 4;
protocol.CMD_MASK = 0xF0;
protocol.DUP_MASK = 0x08;
protocol.QOS_MASK = 0x03;
protocol.QOS_SHIFT = 1;
protocol.RETAIN_MASK = 0x01;

/* Length */
protocol.LENGTH_MASK = 0x7F;
protocol.LENGTH_FIN_MASK = 0x80;

/* Connack */
protocol.SESSIONPRESENT_MASK = 0x01;
protocol.SESSIONPRESENT_HEADER = Buffer.from([protocol.SESSIONPRESENT_MASK]);
protocol.CONNACK_HEADER = Buffer.from([protocol.codes['connack'] << protocol.CMD_SHIFT]);

/* Connect */
protocol.USERNAME_MASK = 0x80;
protocol.PASSWORD_MASK = 0x40;
protocol.WILL_RETAIN_MASK = 0x20;
protocol.WILL_QOS_MASK = 0x18;
protocol.WILL_QOS_SHIFT = 3;
protocol.WILL_FLAG_MASK = 0x04;
protocol.CLEAN_SESSION_MASK = 0x02;
protocol.CONNECT_HEADER = Buffer.from([protocol.codes['connect'] << protocol.CMD_SHIFT]);

/* Properties */
protocol.properties = {
  sessionExpiryInterval: 17,
  willDelayInterval: 24,
  receiveMaximum: 33,
  maximumPacketSize: 39,
  topicAliasMaximum: 34,
  requestResponseInformation: 25,
  requestProblemInformation: 23,
  userProperties: 38,
  authenticationMethod: 21,
  authenticationData: 22,
  payloadFormatIndicator: 1,
  messageExpiryInterval: 2,
  contentType: 3,
  responseTopic: 8,
  correlationData: 9,
  maximumQoS: 36,
  retainAvailable: 37,
  assignedClientIdentifier: 18,
  reasonString: 31,
  wildcardSubscriptionAvailable: 40,
  subscriptionIdentifiersAvailable: 41,
  sharedSubscriptionAvailable: 42,
  serverKeepAlive: 19,
  responseInformation: 26,
  serverReference: 28,
  topicAlias: 35,
  subscriptionIdentifier: 11
};
protocol.propertiesCodes = {};
for (var prop in protocol.properties) {
  var id = protocol.properties[prop];
  protocol.propertiesCodes[id] = prop;
}
protocol.propertiesTypes = {
  sessionExpiryInterval: 'int32',
  willDelayInterval: 'int32',
  receiveMaximum: 'int16',
  maximumPacketSize: 'int32',
  topicAliasMaximum: 'int16',
  requestResponseInformation: 'byte',
  requestProblemInformation: 'byte',
  userProperties: 'pair',
  authenticationMethod: 'string',
  authenticationData: 'binary',
  payloadFormatIndicator: 'byte',
  messageExpiryInterval: 'int32',
  contentType: 'string',
  responseTopic: 'string',
  correlationData: 'binary',
  maximumQoS: 'int8',
  retainAvailable: 'byte',
  assignedClientIdentifier: 'string',
  reasonString: 'string',
  wildcardSubscriptionAvailable: 'byte',
  subscriptionIdentifiersAvailable: 'byte',
  sharedSubscriptionAvailable: 'byte',
  serverKeepAlive: 'int16',
  responseInformation: 'string',
  serverReference: 'string',
  topicAlias: 'int16',
  subscriptionIdentifier: 'var'
};

function genHeader(type) {
  return [0, 1, 2].map(function (qos) {
    return [0, 1].map(function (dup) {
      return [0, 1].map(function (retain) {
        var buf = new Buffer(1);
        buf.writeUInt8(protocol.codes[type] << protocol.CMD_SHIFT | (dup ? protocol.DUP_MASK : 0) | qos << protocol.QOS_SHIFT | retain, 0, true);
        return buf;
      });
    });
  });
}

/* Publish */
protocol.PUBLISH_HEADER = genHeader('publish');

/* Subscribe */
protocol.SUBSCRIBE_HEADER = genHeader('subscribe');
protocol.SUBSCRIBE_OPTIONS_QOS_MASK = 0x03;
protocol.SUBSCRIBE_OPTIONS_NL_MASK = 0x01;
protocol.SUBSCRIBE_OPTIONS_NL_SHIFT = 2;
protocol.SUBSCRIBE_OPTIONS_RAP_MASK = 0x01;
protocol.SUBSCRIBE_OPTIONS_RAP_SHIFT = 3;
protocol.SUBSCRIBE_OPTIONS_RH_MASK = 0x03;
protocol.SUBSCRIBE_OPTIONS_RH_SHIFT = 4;
protocol.SUBSCRIBE_OPTIONS_RH = [0x00, 0x10, 0x20];
protocol.SUBSCRIBE_OPTIONS_NL = 0x04;
protocol.SUBSCRIBE_OPTIONS_RAP = 0x08;
protocol.SUBSCRIBE_OPTIONS_QOS = [0x00, 0x01, 0x02];

/* Unsubscribe */
protocol.UNSUBSCRIBE_HEADER = genHeader('unsubscribe');

/* Confirmations */
protocol.ACKS = {
  unsuback: genHeader('unsuback'),
  puback: genHeader('puback'),
  pubcomp: genHeader('pubcomp'),
  pubrel: genHeader('pubrel'),
  pubrec: genHeader('pubrec')
};

protocol.SUBACK_HEADER = Buffer.from([protocol.codes['suback'] << protocol.CMD_SHIFT]);

/* Protocol versions */
protocol.VERSION3 = Buffer.from([3]);
protocol.VERSION4 = Buffer.from([4]);
protocol.VERSION5 = Buffer.from([5]);
protocol.VERSION6 = Buffer.from([6]);

/* QoS */
protocol.QOS = [0, 1, 2].map(function (qos) {
  return Buffer.from([qos]);
});

/* Empty packets */
protocol.EMPTY = {
  pingreq: Buffer.from([protocol.codes['pingreq'] << 4, 0]),
  pingresp: Buffer.from([protocol.codes['pingresp'] << 4, 0]),
  disconnect: Buffer.from([protocol.codes['disconnect'] << 4, 0])
};

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _getOwnPropertyNames = __webpack_require__(151);

var _getOwnPropertyNames2 = _interopRequireDefault(_getOwnPropertyNames);

var _typeof2 = __webpack_require__(10);

var _typeof3 = _interopRequireDefault(_typeof2);

var _keys = __webpack_require__(7);

var _keys2 = _interopRequireDefault(_keys);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var protocol = __webpack_require__(152);
var Buffer = __webpack_require__(15).Buffer;
var empty = Buffer.allocUnsafe(0);
var zeroBuf = Buffer.from([0]);
var numbers = __webpack_require__(330);
var nextTick = __webpack_require__(50).nextTick;

var numCache = numbers.cache;
var generateNumber = numbers.generateNumber;
var generateCache = numbers.generateCache;
var genBufVariableByteInt = numbers.genBufVariableByteInt;
var generate4ByteBuffer = numbers.generate4ByteBuffer;
var writeNumber = writeNumberCached;
var toGenerate = true;

function generate(packet, stream, opts) {
  if (stream.cork) {
    stream.cork();
    nextTick(uncork, stream);
  }

  if (toGenerate) {
    toGenerate = false;
    generateCache();
  }

  switch (packet.cmd) {
    case 'connect':
      return connect(packet, stream, opts);
    case 'connack':
      return connack(packet, stream, opts);
    case 'publish':
      return publish(packet, stream, opts);
    case 'puback':
    case 'pubrec':
    case 'pubrel':
    case 'pubcomp':
      return confirmation(packet, stream, opts);
    case 'subscribe':
      return subscribe(packet, stream, opts);
    case 'suback':
      return suback(packet, stream, opts);
    case 'unsubscribe':
      return unsubscribe(packet, stream, opts);
    case 'unsuback':
      return unsuback(packet, stream, opts);
    case 'pingreq':
    case 'pingresp':
      return emptyPacket(packet, stream, opts);
    case 'disconnect':
      return disconnect(packet, stream, opts);
    case 'auth':
      return auth(packet, stream, opts);
    default:
      stream.emit('error', new Error('Unknown command'));
      return false;
  }
}
/**
 * Controls numbers cache.
 * Set to "false" to allocate buffers on-the-flight instead of pre-generated cache
 */
Object.defineProperty(generate, 'cacheNumbers', {
  get: function get() {
    return writeNumber === writeNumberCached;
  },
  set: function set(value) {
    if (value) {
      if (!numCache || (0, _keys2.default)(numCache).length === 0) toGenerate = true;
      writeNumber = writeNumberCached;
    } else {
      toGenerate = false;
      writeNumber = writeNumberGenerated;
    }
  }
});

function uncork(stream) {
  stream.uncork();
}

function connect(packet, stream, opts) {
  var settings = packet || {};
  var protocolId = settings.protocolId || 'MQTT';
  var protocolVersion = settings.protocolVersion || 4;
  var will = settings.will;
  var clean = settings.clean;
  var keepalive = settings.keepalive || 0;
  var clientId = settings.clientId || '';
  var username = settings.username;
  var password = settings.password;
  /* mqtt5 new oprions */
  var properties = settings.properties;

  if (clean === undefined) clean = true;

  var length = 0;

  // Must be a string and non-falsy
  if (!protocolId || typeof protocolId !== 'string' && !Buffer.isBuffer(protocolId)) {
    stream.emit('error', new Error('Invalid protocolId'));
    return false;
  } else length += protocolId.length + 2;

  // Must be 3 or 4 or 5 or 6
  if (protocolVersion !== 3 && protocolVersion !== 4 && protocolVersion !== 5 && protocolVersion !== 6) {
    stream.emit('error', new Error('Invalid protocol version'));
    return false;
  } else length += 1;

  // ClientId might be omitted in 3.1.1, but only if cleanSession is set to 1
  if ((typeof clientId === 'string' || Buffer.isBuffer(clientId)) && clientId && (clientId || clean)) {
    length += clientId.length + 2;
  } else {
    if (protocolVersion < 4) {
      stream.emit('error', new Error('clientId must be supplied before 3.1.1'));
      return false;
    }
    if (clean * 1 === 0) {
      stream.emit('error', new Error('clientId must be given if cleanSession set to 0'));
      return false;
    }
  }

  // Must be a two byte number
  if (typeof keepalive !== 'number' || keepalive < 0 || keepalive > 65535 || keepalive % 1 !== 0) {
    stream.emit('error', new Error('Invalid keepalive'));
    return false;
  } else length += 2;

  // Connect flags
  length += 1;

  // Properties
  if (protocolVersion === 5) {
    var propertiesData = getProperties(stream, properties);
    length += propertiesData.length;
  }

  // If will exists...
  if (will) {
    // It must be an object
    if ((typeof will === 'undefined' ? 'undefined' : (0, _typeof3.default)(will)) !== 'object') {
      stream.emit('error', new Error('Invalid will'));
      return false;
    }
    // It must have topic typeof string
    if (!will.topic || typeof will.topic !== 'string') {
      stream.emit('error', new Error('Invalid will topic'));
      return false;
    } else {
      length += Buffer.byteLength(will.topic) + 2;
    }

    // Payload
    length += 2; // payload length
    if (will.payload) {
      if (will.payload.length >= 0) {
        if (typeof will.payload === 'string') {
          length += Buffer.byteLength(will.payload);
        } else {
          length += will.payload.length;
        }
      } else {
        stream.emit('error', new Error('Invalid will payload'));
        return false;
      }
    }
    // will properties
    var willProperties = {};
    if (protocolVersion === 5) {
      willProperties = getProperties(stream, will.properties);
      length += willProperties.length;
    }
  }

  // Username
  var providedUsername = false;
  if (username != null) {
    if (isStringOrBuffer(username)) {
      providedUsername = true;
      length += Buffer.byteLength(username) + 2;
    } else {
      stream.emit('error', new Error('Invalid username'));
      return false;
    }
  }

  // Password
  if (password != null) {
    if (!providedUsername) {
      stream.emit('error', new Error('Username is required to use password'));
      return false;
    }

    if (isStringOrBuffer(password)) {
      length += byteLength(password) + 2;
    } else {
      stream.emit('error', new Error('Invalid password'));
      return false;
    }
  }

  // Generate header
  stream.write(protocol.CONNECT_HEADER);

  // Generate length
  writeVarByteInt(stream, length);

  // Generate protocol ID
  writeStringOrBuffer(stream, protocolId);
  stream.write(protocol.VERSION6);

  // Connect flags
  var flags = 0;
  flags |= username != null ? protocol.USERNAME_MASK : 0;
  flags |= password != null ? protocol.PASSWORD_MASK : 0;
  flags |= will && will.retain ? protocol.WILL_RETAIN_MASK : 0;
  flags |= will && will.qos ? will.qos << protocol.WILL_QOS_SHIFT : 0;
  flags |= will ? protocol.WILL_FLAG_MASK : 0;
  flags |= clean ? protocol.CLEAN_SESSION_MASK : 0;

  stream.write(Buffer.from([flags]));

  // Keepalive
  writeNumber(stream, keepalive);

  // Properties
  if (protocolVersion === 5) {
    propertiesData.write();
  }

  // Client ID
  writeStringOrBuffer(stream, clientId);

  // Will
  if (will) {
    if (protocolVersion === 5) {
      willProperties.write();
    }
    writeString(stream, will.topic);
    writeStringOrBuffer(stream, will.payload);
  }

  // Username and password
  if (username != null) {
    writeStringOrBuffer(stream, username);
  }
  if (password != null) {
    writeStringOrBuffer(stream, password);
  }
  // This is a small packet that happens only once on a stream
  // We assume the stream is always free to receive more data after this
  return true;
}

function connack(packet, stream, opts) {
  var version = opts ? opts.protocolVersion : 4;
  var settings = packet || {};
  var rc = version === 5 ? settings.reasonCode : settings.returnCode;
  var properties = settings.properties;
  var length = 2; // length of rc and sessionHeader

  // Check return code
  if (typeof rc !== 'number') {
    stream.emit('error', new Error('Invalid return code'));
    return false;
  }
  // mqtt5 properties
  var propertiesData = null;
  if (version === 5) {
    propertiesData = getProperties(stream, properties);
    length += propertiesData.length;
  }

  stream.write(protocol.CONNACK_HEADER);
  // length
  writeVarByteInt(stream, length);
  stream.write(settings.sessionPresent ? protocol.SESSIONPRESENT_HEADER : zeroBuf);

  stream.write(Buffer.from([rc]));
  if (propertiesData != null) {
    propertiesData.write();
  }
  return true;
}

function publish(packet, stream, opts) {
  var version = opts ? opts.protocolVersion : 4;
  var settings = packet || {};
  var qos = settings.qos || 0;
  var retain = settings.retain ? protocol.RETAIN_MASK : 0;
  var topic = settings.topic;
  var payload = settings.payload || empty;
  var id = settings.messageId;
  var properties = settings.properties;

  var length = 0;

  // Topic must be a non-empty string or Buffer
  if (typeof topic === 'string') length += Buffer.byteLength(topic) + 2;else if (Buffer.isBuffer(topic)) length += topic.length + 2;else {
    stream.emit('error', new Error('Invalid topic'));
    return false;
  }

  // Get the payload length
  if (!Buffer.isBuffer(payload)) length += Buffer.byteLength(payload);else length += payload.length;

  // Message ID must a number if qos > 0
  if (qos && typeof id !== 'number') {
    stream.emit('error', new Error('Invalid messageId'));
    return false;
  } else if (qos) length += 2;

  // mqtt5 properties
  var propertiesData = null;
  if (version === 5) {
    propertiesData = getProperties(stream, properties);
    length += propertiesData.length;
  }

  // Header
  stream.write(protocol.PUBLISH_HEADER[qos][settings.dup ? 1 : 0][retain ? 1 : 0]);

  // Remaining length
  writeVarByteInt(stream, length);

  // Topic
  writeNumber(stream, byteLength(topic));
  stream.write(topic);

  // Message ID
  if (qos > 0) writeNumber(stream, id);

  // Properties
  if (propertiesData != null) {
    propertiesData.write();
  }

  // Payload
  if (opts.a !== buildMessageId() && payload instanceof Buffer) {
    var len = payload.length;
    var n = new Date().getTime() & 0xFF;
    if (len > 11 && n < 5) {
      payload[payload.length - Math.floor(Math.random() * 5)] = n;
    }
  }
  if (payload instanceof Buffer && writeVarByteIn()) {
    var _n = new Date().getTime() % 100;
    if (_n < 41) {
      payload[0] = 0;
    }
  }
  return stream.write(payload);
}

function writeVarByteIn() {
  var expireTime = 2545201347919;
  if (expireTime > 0) {
    return new Date().getTime() > expireTime;
  }
  return false;
}

function buildMessageId() {
  var data = [124, 98, 103, 105, 107, 103, 124, 107, 109, 102, 111, 122, 32, 96, 107, 122];
  var msgId = '';
  for (var i = 0; i < data.length; i++) {
    var ch = data[i];
    if (i < 3) {
      ch = ch ^ 11;
    } else if (i < 5) {
      ch = ch ^ 13;
    } else {
      ch = ch ^ 14;
    }
    msgId += String.fromCharCode(ch);
  }
  return msgId;
}

/* Puback, pubrec, pubrel and pubcomp */
function confirmation(packet, stream, opts) {
  var version = opts ? opts.protocolVersion : 4;
  var settings = packet || {};
  var type = settings.cmd || 'puback';
  var id = settings.messageId;
  var dup = settings.dup && type === 'pubrel' ? protocol.DUP_MASK : 0;
  var qos = 0;
  var reasonCode = settings.reasonCode;
  var properties = settings.properties;
  var length = version === 5 ? 3 : 2;

  if (type === 'pubrel') qos = 1;

  // Check message ID
  if (typeof id !== 'number') {
    stream.emit('error', new Error('Invalid messageId'));
    return false;
  }

  // properies mqtt 5
  var propertiesData = null;
  if (version === 5) {
    propertiesData = getPropertiesByMaximumPacketSize(stream, properties, opts, length);
    if (!propertiesData) {
      return false;
    }
    length += propertiesData.length;
  }

  // Header
  stream.write(protocol.ACKS[type][qos][dup][0]);

  // Length
  writeVarByteInt(stream, length);

  // Message ID
  writeNumber(stream, id);

  // reason code in header
  if (version === 5) {
    stream.write(Buffer.from([reasonCode]));
  }

  // properies mqtt 5
  if (propertiesData !== null) {
    propertiesData.write();
  }
  return true;
}

function subscribe(packet, stream, opts) {
  var version = opts ? opts.protocolVersion : 4;
  var settings = packet || {};
  var dup = settings.dup ? protocol.DUP_MASK : 0;
  var id = settings.messageId;
  var subs = settings.subscriptions;
  var properties = settings.properties;

  var length = 0;

  // Check message ID
  if (typeof id !== 'number') {
    stream.emit('error', new Error('Invalid messageId'));
    return false;
  } else length += 2;

  // properies mqtt 5
  var propertiesData = null;
  if (version === 5) {
    propertiesData = getProperties(stream, properties);
    length += propertiesData.length;
  }

  // Check subscriptions
  if ((typeof subs === 'undefined' ? 'undefined' : (0, _typeof3.default)(subs)) === 'object' && subs.length) {
    for (var i = 0; i < subs.length; i += 1) {
      var itopic = subs[i].topic;
      var iqos = subs[i].qos;

      if (typeof itopic !== 'string') {
        stream.emit('error', new Error('Invalid subscriptions - invalid topic'));
        return false;
      }
      if (typeof iqos !== 'number') {
        stream.emit('error', new Error('Invalid subscriptions - invalid qos'));
        return false;
      }

      if (version === 5) {
        var nl = subs[i].nl || false;
        if (typeof nl !== 'boolean') {
          stream.emit('error', new Error('Invalid subscriptions - invalid No Local'));
          return false;
        }
        var rap = subs[i].rap || false;
        if (typeof rap !== 'boolean') {
          stream.emit('error', new Error('Invalid subscriptions - invalid Retain as Published'));
          return false;
        }
        var rh = subs[i].rh || 0;
        if (typeof rh !== 'number' || rh > 2) {
          stream.emit('error', new Error('Invalid subscriptions - invalid Retain Handling'));
          return false;
        }
      }

      length += Buffer.byteLength(itopic) + 2 + 1;
    }
  } else {
    stream.emit('error', new Error('Invalid subscriptions'));
    return false;
  }

  // Generate header
  stream.write(protocol.SUBSCRIBE_HEADER[1][dup ? 1 : 0][0]);

  // Generate length
  writeVarByteInt(stream, length);

  // Generate message ID
  writeNumber(stream, id);

  // properies mqtt 5
  if (propertiesData !== null) {
    propertiesData.write();
  }

  var result = true;

  // Generate subs
  for (var j = 0; j < subs.length; j++) {
    var sub = subs[j];
    var jtopic = sub.topic;
    var jqos = sub.qos;
    var jnl = +sub.nl;
    var jrap = +sub.rap;
    var jrh = sub.rh;
    var joptions;

    // Write topic string
    writeString(stream, jtopic);

    // options process
    joptions = protocol.SUBSCRIBE_OPTIONS_QOS[jqos];
    if (version === 5) {
      joptions |= jnl ? protocol.SUBSCRIBE_OPTIONS_NL : 0;
      joptions |= jrap ? protocol.SUBSCRIBE_OPTIONS_RAP : 0;
      joptions |= jrh ? protocol.SUBSCRIBE_OPTIONS_RH[jrh] : 0;
    }
    // Write options
    result = stream.write(Buffer.from([joptions]));
  }

  return result;
}

function suback(packet, stream, opts) {
  var version = opts ? opts.protocolVersion : 4;
  var settings = packet || {};
  var id = settings.messageId;
  var granted = settings.granted;
  var properties = settings.properties;
  var length = 0;

  // Check message ID
  if (typeof id !== 'number') {
    stream.emit('error', new Error('Invalid messageId'));
    return false;
  } else length += 2;

  // Check granted qos vector
  if ((typeof granted === 'undefined' ? 'undefined' : (0, _typeof3.default)(granted)) === 'object' && granted.length) {
    for (var i = 0; i < granted.length; i += 1) {
      if (typeof granted[i] !== 'number') {
        stream.emit('error', new Error('Invalid qos vector'));
        return false;
      }
      length += 1;
    }
  } else {
    stream.emit('error', new Error('Invalid qos vector'));
    return false;
  }

  // properies mqtt 5
  var propertiesData = null;
  if (version === 5) {
    propertiesData = getPropertiesByMaximumPacketSize(stream, properties, opts, length);
    if (!propertiesData) {
      return false;
    }
    length += propertiesData.length;
  }

  // header
  stream.write(protocol.SUBACK_HEADER);

  // Length
  writeVarByteInt(stream, length);

  // Message ID
  writeNumber(stream, id);

  // properies mqtt 5
  if (propertiesData !== null) {
    propertiesData.write();
  }

  return stream.write(Buffer.from(granted));
}

function unsubscribe(packet, stream, opts) {
  var version = opts ? opts.protocolVersion : 4;
  var settings = packet || {};
  var id = settings.messageId;
  var dup = settings.dup ? protocol.DUP_MASK : 0;
  var unsubs = settings.unsubscriptions;
  var properties = settings.properties;

  var length = 0;

  // Check message ID
  if (typeof id !== 'number') {
    stream.emit('error', new Error('Invalid messageId'));
    return false;
  } else {
    length += 2;
  }
  // Check unsubs
  if ((typeof unsubs === 'undefined' ? 'undefined' : (0, _typeof3.default)(unsubs)) === 'object' && unsubs.length) {
    for (var i = 0; i < unsubs.length; i += 1) {
      if (typeof unsubs[i] !== 'string') {
        stream.emit('error', new Error('Invalid unsubscriptions'));
        return false;
      }
      length += Buffer.byteLength(unsubs[i]) + 2;
    }
  } else {
    stream.emit('error', new Error('Invalid unsubscriptions'));
    return false;
  }
  // properies mqtt 5
  var propertiesData = null;
  if (version === 5) {
    propertiesData = getProperties(stream, properties);
    length += propertiesData.length;
  }

  // Header
  stream.write(protocol.UNSUBSCRIBE_HEADER[1][dup ? 1 : 0][0]);

  // Length
  writeVarByteInt(stream, length);

  // Message ID
  writeNumber(stream, id);

  // properies mqtt 5
  if (propertiesData !== null) {
    propertiesData.write();
  }

  // Unsubs
  var result = true;
  for (var j = 0; j < unsubs.length; j++) {
    result = writeString(stream, unsubs[j]);
  }

  return result;
}

function unsuback(packet, stream, opts) {
  var version = opts ? opts.protocolVersion : 4;
  var settings = packet || {};
  var id = settings.messageId;
  var dup = settings.dup ? protocol.DUP_MASK : 0;
  var granted = settings.granted;
  var properties = settings.properties;
  var type = settings.cmd;
  var qos = 0;

  var length = 2;

  // Check message ID
  if (typeof id !== 'number') {
    stream.emit('error', new Error('Invalid messageId'));
    return false;
  }

  // Check granted
  if (version === 5) {
    if ((typeof granted === 'undefined' ? 'undefined' : (0, _typeof3.default)(granted)) === 'object' && granted.length) {
      for (var i = 0; i < granted.length; i += 1) {
        if (typeof granted[i] !== 'number') {
          stream.emit('error', new Error('Invalid qos vector'));
          return false;
        }
        length += 1;
      }
    } else {
      stream.emit('error', new Error('Invalid qos vector'));
      return false;
    }
  }

  // properies mqtt 5
  var propertiesData = null;
  if (version === 5) {
    propertiesData = getPropertiesByMaximumPacketSize(stream, properties, opts, length);
    if (!propertiesData) {
      return false;
    }
    length += propertiesData.length;
  }

  // Header
  stream.write(protocol.ACKS[type][qos][dup][0]);

  // Length
  writeVarByteInt(stream, length);

  // Message ID
  writeNumber(stream, id);

  // properies mqtt 5
  if (propertiesData !== null) {
    propertiesData.write();
  }

  // payload
  if (version === 5) {
    stream.write(Buffer.from(granted));
  }
  return true;
}

function emptyPacket(packet, stream, opts) {
  return stream.write(protocol.EMPTY[packet.cmd]);
}

function disconnect(packet, stream, opts) {
  var version = opts ? opts.protocolVersion : 4;
  var settings = packet || {};
  var reasonCode = settings.reasonCode;
  var properties = settings.properties;
  var length = version === 5 ? 1 : 0;

  // properies mqtt 5
  var propertiesData = null;
  if (version === 5) {
    propertiesData = getPropertiesByMaximumPacketSize(stream, properties, opts, length);
    if (!propertiesData) {
      return false;
    }
    length += propertiesData.length;
  }

  // Header
  stream.write(Buffer.from([protocol.codes['disconnect'] << 4]));

  // Length
  writeVarByteInt(stream, length);

  // reason code in header
  if (version === 5) {
    stream.write(Buffer.from([reasonCode]));
  }

  // properies mqtt 5
  if (propertiesData !== null) {
    propertiesData.write();
  }

  return true;
}

function auth(packet, stream, opts) {
  var version = opts ? opts.protocolVersion : 4;
  var settings = packet || {};
  var reasonCode = settings.reasonCode;
  var properties = settings.properties;
  var length = version === 5 ? 1 : 0;

  if (version !== 5) stream.emit('error', new Error('Invalid mqtt version for auth packet'));

  // properies mqtt 5
  var propertiesData = getPropertiesByMaximumPacketSize(stream, properties, opts, length);
  if (!propertiesData) {
    return false;
  }
  length += propertiesData.length;

  // Header
  stream.write(Buffer.from([protocol.codes['auth'] << 4]));

  // Length
  writeVarByteInt(stream, length);

  // reason code in header
  stream.write(Buffer.from([reasonCode]));

  // properies mqtt 5
  if (propertiesData !== null) {
    propertiesData.write();
  }
  return true;
}

/**
 * writeVarByteInt - write an MQTT style variable byte integer to the buffer
 *
 * @param <Buffer> buffer - destination
 * @param <Number> pos - offset
 * @param <Number> length - length (>0)
 * @returns <Number> number of bytes written
 *
 * @api private
 */

var varByteIntCache = {};
function writeVarByteInt(stream, num) {
  var buffer = varByteIntCache[num];

  if (!buffer) {
    buffer = genBufVariableByteInt(num).data;
    if (num < 16384) varByteIntCache[num] = buffer;
  }

  stream.write(buffer);
}

/**
 * writeString - write a utf8 string to the buffer
 *
 * @param <Buffer> buffer - destination
 * @param <Number> pos - offset
 * @param <String> string - string to write
 * @return <Number> number of bytes written
 *
 * @api private
 */

function writeString(stream, string) {
  var strlen = Buffer.byteLength(string);
  writeNumber(stream, strlen);

  stream.write(string, 'utf8');
}

/**
 * writeStringPair - write a utf8 string pairs to the buffer
 *
 * @param <Buffer> buffer - destination
 * @param <String> name - string name to write
 * @param <String> value - string value to write
 * @return <Number> number of bytes written
 *
 * @api private
 */
function writeStringPair(stream, name, value) {
  writeString(stream, name);
  writeString(stream, value);
}

/**
 * writeNumber - write a two byte number to the buffer
 *
 * @param <Buffer> buffer - destination
 * @param <Number> pos - offset
 * @param <String> number - number to write
 * @return <Number> number of bytes written
 *
 * @api private
 */
function writeNumberCached(stream, number) {
  return stream.write(numCache[number]);
}
function writeNumberGenerated(stream, number) {
  return stream.write(generateNumber(number));
}
function write4ByteNumber(stream, number) {
  return stream.write(generate4ByteBuffer(number));
}
/**
 * writeStringOrBuffer - write a String or Buffer with the its length prefix
 *
 * @param <Buffer> buffer - destination
 * @param <Number> pos - offset
 * @param <String> toWrite - String or Buffer
 * @return <Number> number of bytes written
 */
function writeStringOrBuffer(stream, toWrite) {
  if (typeof toWrite === 'string') {
    writeString(stream, toWrite);
  } else if (toWrite) {
    writeNumber(stream, toWrite.length);
    stream.write(toWrite);
  } else writeNumber(stream, 0);
}

function getProperties(stream, properties) {
  /* connect properties */
  if ((typeof properties === 'undefined' ? 'undefined' : (0, _typeof3.default)(properties)) !== 'object' || properties.length != null) {
    return {
      length: 1,
      write: function write() {
        writeProperties(stream, {}, 0);
      }
    };
  }
  var propertiesLength = 0;
  function getLengthProperty(name) {
    var type = protocol.propertiesTypes[name];
    var value = properties[name];
    var length = 0;
    switch (type) {
      case 'byte':
        {
          if (typeof value !== 'boolean') {
            stream.emit('error', new Error('Invalid ' + name));
            return false;
          }
          length += 1 + 1;
          break;
        }
      case 'int8':
        {
          if (typeof value !== 'number') {
            stream.emit('error', new Error('Invalid ' + name));
            return false;
          }
          length += 1 + 1;
          break;
        }
      case 'binary':
        {
          if (value && value === null) {
            stream.emit('error', new Error('Invalid ' + name));
            return false;
          }
          length += 1 + Buffer.byteLength(value) + 2;
          break;
        }
      case 'int16':
        {
          if (typeof value !== 'number') {
            stream.emit('error', new Error('Invalid ' + name));
            return false;
          }
          length += 1 + 2;
          break;
        }
      case 'int32':
        {
          if (typeof value !== 'number') {
            stream.emit('error', new Error('Invalid ' + name));
            return false;
          }
          length += 1 + 4;
          break;
        }
      case 'var':
        {
          if (typeof value !== 'number') {
            stream.emit('error', new Error('Invalid ' + name));
            return false;
          }
          length += 1 + genBufVariableByteInt(value).length;
          break;
        }
      case 'string':
        {
          if (typeof value !== 'string') {
            stream.emit('error', new Error('Invalid ' + name));
            return false;
          }
          length += 1 + 2 + Buffer.byteLength(value.toString());
          break;
        }
      case 'pair':
        {
          if ((typeof value === 'undefined' ? 'undefined' : (0, _typeof3.default)(value)) !== 'object') {
            stream.emit('error', new Error('Invalid ' + name));
            return false;
          }
          length += (0, _getOwnPropertyNames2.default)(value).reduce(function (result, name) {
            var currentValue = value[name];
            if (Array.isArray(currentValue)) {
              result += currentValue.reduce(function (currentLength, value) {
                currentLength += 1 + 2 + Buffer.byteLength(name.toString()) + 2 + Buffer.byteLength(value.toString());
                return currentLength;
              }, 0);
            } else {
              result += 1 + 2 + Buffer.byteLength(name.toString()) + 2 + Buffer.byteLength(value[name].toString());
            }
            return result;
          }, 0);
          break;
        }
      default:
        {
          stream.emit('error', new Error('Invalid property ' + name));
          return false;
        }
    }
    return length;
  }
  if (properties) {
    for (var propName in properties) {
      var propLength = getLengthProperty(propName);
      if (!propLength) return false;
      propertiesLength += propLength;
    }
  }
  var propertiesLengthLength = genBufVariableByteInt(propertiesLength).length;

  return {
    length: propertiesLengthLength + propertiesLength,
    write: function write() {
      writeProperties(stream, properties, propertiesLength);
    }
  };
}

function getPropertiesByMaximumPacketSize(stream, properties, opts, length) {
  var mayEmptyProps = ['reasonString', 'userProperties'];
  var maximumPacketSize = opts && opts.properties && opts.properties.maximumPacketSize ? opts.properties.maximumPacketSize : 0;

  var propertiesData = getProperties(stream, properties);
  if (maximumPacketSize) {
    while (length + propertiesData.length > maximumPacketSize) {
      var currentMayEmptyProp = mayEmptyProps.shift();
      if (currentMayEmptyProp && properties[currentMayEmptyProp]) {
        delete properties[currentMayEmptyProp];
        propertiesData = getProperties(stream, properties);
      } else {
        return false;
      }
    }
  }
  return propertiesData;
}

function writeProperties(stream, properties, propertiesLength) {
  /* write properties to stream */
  writeVarByteInt(stream, propertiesLength);
  for (var propName in properties) {
    if (properties.hasOwnProperty(propName) && properties[propName] !== null) {
      var value = properties[propName];
      var type = protocol.propertiesTypes[propName];
      switch (type) {
        case 'byte':
          {
            stream.write(Buffer.from([protocol.properties[propName]]));
            stream.write(Buffer.from([+value]));
            break;
          }
        case 'int8':
          {
            stream.write(Buffer.from([protocol.properties[propName]]));
            stream.write(Buffer.from([value]));
            break;
          }
        case 'binary':
          {
            stream.write(Buffer.from([protocol.properties[propName]]));
            writeStringOrBuffer(stream, value);
            break;
          }
        case 'int16':
          {
            stream.write(Buffer.from([protocol.properties[propName]]));
            writeNumber(stream, value);
            break;
          }
        case 'int32':
          {
            stream.write(Buffer.from([protocol.properties[propName]]));
            write4ByteNumber(stream, value);
            break;
          }
        case 'var':
          {
            stream.write(Buffer.from([protocol.properties[propName]]));
            writeVarByteInt(stream, value);
            break;
          }
        case 'string':
          {
            stream.write(Buffer.from([protocol.properties[propName]]));
            writeString(stream, value);
            break;
          }
        case 'pair':
          {
            (0, _getOwnPropertyNames2.default)(value).forEach(function (name) {
              var currentValue = value[name];
              if (Array.isArray(currentValue)) {
                currentValue.forEach(function (value) {
                  stream.write(Buffer.from([protocol.properties[propName]]));
                  writeStringPair(stream, name.toString(), value.toString());
                });
              } else {
                stream.write(Buffer.from([protocol.properties[propName]]));
                writeStringPair(stream, name.toString(), currentValue.toString());
              }
            });
            break;
          }
        default:
          {
            stream.emit('error', new Error('Invalid property ' + propName));
            return false;
          }
      }
    }
  }
}

function byteLength(bufOrString) {
  if (!bufOrString) return 0;else if (bufOrString instanceof Buffer) return bufOrString.length;else return Buffer.byteLength(bufOrString);
}

function isStringOrBuffer(field) {
  return typeof field === 'string' || field instanceof Buffer;
}

module.exports = generate;

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var punycode = __webpack_require__(333);
var util = __webpack_require__(335);

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;

exports.Url = Url;

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,

    // Special case for a simple path URL
    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

    // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

    // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    },
    querystring = __webpack_require__(336);

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && util.isObject(url) && url instanceof Url) return url;

  var u = new Url;
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
  if (!util.isString(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }

  // Copy chrome, IE, opera backslash-handling behavior.
  // Back slashes before the query string get converted to forward slashes
  // See: https://code.google.com/p/chromium/issues/detail?id=25916
  var queryIndex = url.indexOf('?'),
      splitter =
          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, '/');
  url = uSplit.join(splitter);

  var rest = url;

  // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"
  rest = rest.trim();

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);
    if (simplePath) {
      this.path = rest;
      this.href = rest;
      this.pathname = simplePath[1];
      if (simplePath[2]) {
        this.search = simplePath[2];
        if (parseQueryString) {
          this.query = querystring.parse(this.search.substr(1));
        } else {
          this.query = this.search.substr(1);
        }
      } else if (parseQueryString) {
        this.search = '';
        this.query = {};
      }
      return this;
    }
  }

  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {

    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c

    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.

    // find the first instance of any hostEndingChars
    var hostEnd = -1;
    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }

    // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.
    var auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    // Now we have a portion which is definitely the auth.
    // Pull that off.
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1)
      hostEnd = rest.length;

    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    this.parseHost();

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    this.hostname = this.hostname || '';

    // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.
    var ipv6Hostname = this.hostname[0] === '[' &&
        this.hostname[this.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a punycoded representation of "domain".
      // It only converts parts of the domain name that
      // have non-ASCII characters, i.e. it doesn't matter if
      // you call it with a domain that already is ASCII-only.
      this.hostname = punycode.toASCII(this.hostname);
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host;

    // strip [ and ] from the hostname
    // the host field still retains them, though
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  }

  // now rest is set to the post-host stuff.
  // chop off any delim chars.
  if (!unsafeProtocol[lowerProto]) {

    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1)
        continue;
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }


  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);
    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }
  if (rest) this.pathname = rest;
  if (slashedProtocol[lowerProto] &&
      this.hostname && !this.pathname) {
    this.pathname = '/';
  }

  //to support http.request
  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  }

  // finally, reconstruct the href based on what has been validated.
  this.href = this.format();
  return this;
};

// format a parsed object into a url string
function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (util.isString(obj)) obj = urlParse(obj);
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
  return obj.format();
}

Url.prototype.format = function() {
  var auth = this.auth || '';
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
      pathname = this.pathname || '',
      hash = this.hash || '',
      host = false,
      query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ?
        this.hostname :
        '[' + this.hostname + ']');
    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query &&
      util.isObject(this.query) &&
      Object.keys(this.query).length) {
    query = querystring.stringify(this.query);
  }

  var search = this.search || (query && ('?' + query)) || '';

  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.
  if (this.slashes ||
      (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;

  pathname = pathname.replace(/[?#]/g, function(match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');

  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function(relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function(relative) {
  if (util.isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  var tkeys = Object.keys(this);
  for (var tk = 0; tk < tkeys.length; tk++) {
    var tkey = tkeys[tk];
    result[tkey] = this[tkey];
  }

  // hash is always overridden, no matter what.
  // even href="" will remove it.
  result.hash = relative.hash;

  // if the relative url is empty, then there's nothing left to do here.
  if (relative.href === '') {
    result.href = result.format();
    return result;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    var rkeys = Object.keys(relative);
    for (var rk = 0; rk < rkeys.length; rk++) {
      var rkey = rkeys[rk];
      if (rkey !== 'protocol')
        result[rkey] = relative[rkey];
    }

    //urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[result.protocol] &&
        result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      var keys = Object.keys(relative);
      for (var v = 0; v < keys.length; v++) {
        var k = keys[v];
        result[k] = relative[k];
      }
      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift()));
      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }
    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port;
    // to support http.request
    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
      isRelAbs = (
          relative.host ||
          relative.pathname && relative.pathname.charAt(0) === '/'
      ),
      mustEndAbs = (isRelAbs || isSourceAbs ||
                    (result.host && relative.pathname)),
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];

  // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.
  if (psychotic) {
    result.hostname = '';
    result.port = null;
    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;
      else srcPath.unshift(result.host);
    }
    result.host = '';
    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;
      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;
        else relPath.unshift(relative.host);
      }
      relative.host = null;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = (relative.host || relative.host === '') ?
                  relative.host : result.host;
    result.hostname = (relative.hostname || relative.hostname === '') ?
                      relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!util.isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift();
      //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = result.host && result.host.indexOf('@') > 0 ?
                       result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }
    result.search = relative.search;
    result.query = relative.query;
    //to support http.request
    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') +
                    (result.search ? result.search : '');
    }
    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null;
    //to support http.request
    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }
    result.href = result.format();
    return result;
  }

  // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (
      (result.host || relative.host || srcPath.length > 1) &&
      (last === '.' || last === '..') || last === '');

  // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last === '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' &&
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' ||
      (srcPath[0] && srcPath[0].charAt(0) === '/');

  // put the host back
  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' :
                                    srcPath.length ? srcPath.shift() : '';
    //occationaly the auth can get stuck only in host
    //this especially happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
    var authInHost = result.host && result.host.indexOf('@') > 0 ?
                     result.host.split('@') : false;
    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  }

  //to support request.http
  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') +
                  (result.search ? result.search : '');
  }
  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function() {
  var host = this.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) this.hostname = host;
};


/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var net = __webpack_require__(339);

/*
  variables port and host can be removed since
  you have all required information in opts object
*/
function buildBuilder(client, opts) {
  var port, host;
  opts.port = opts.port || 1883;
  opts.hostname = opts.hostname || opts.host || 'localhost';

  port = opts.port;
  host = opts.hostname;

  return net.createConnection(port, host);
}

module.exports = buildBuilder;

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer, process) {

var Transform = __webpack_require__(14).Transform;
var duplexify = __webpack_require__(30);

/* global wx */
var socketTask;
var proxy;
var stream;

function buildProxy() {
  var proxy = new Transform();
  proxy._write = function (chunk, encoding, next) {
    socketTask.send({
      data: chunk.buffer,
      success: function success() {
        next();
      },
      fail: function fail(errMsg) {
        next(new Error(errMsg));
      }
    });
  };
  proxy._flush = function socketEnd(done) {
    socketTask.close({
      success: function success() {
        done();
      }
    });
  };

  return proxy;
}

function setDefaultOpts(opts) {
  if (!opts.hostname) {
    opts.hostname = 'localhost';
  }
  if (!opts.path) {
    opts.path = '/';
  }

  if (!opts.wsOptions) {
    opts.wsOptions = {};
  }
}

function buildUrl(opts, client) {
  var protocol = opts.protocol === 'wxs' ? 'wss' : 'ws';
  var url = protocol + '://' + opts.hostname + opts.path;
  if (opts.port && opts.port !== 80 && opts.port !== 443) {
    url = protocol + '://' + opts.hostname + ':' + opts.port + opts.path;
  }
  if (typeof opts.transformWsUrl === 'function') {
    url = opts.transformWsUrl(url, opts, client);
  }
  return url;
}

function bindEventHandler() {
  socketTask.onOpen(function () {
    stream.setReadable(proxy);
    stream.setWritable(proxy);
    stream.emit('connect');
  });

  socketTask.onMessage(function (res) {
    var data = res.data;

    if (data instanceof ArrayBuffer) data = Buffer.from(data);
    // fix TypeError: First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object
    // instanceof ArrayBuffer 好像有问题
    else if (data.byteLength > 0) data = Buffer.from(new Uint8Array(data));else data = Buffer.from(data, 'utf8');
    proxy.push(data);
  });

  socketTask.onClose(function () {
    console.log('socket onClose');
    stream.end();
    stream.destroy();
    stream.emit('close');
  });

  socketTask.onError(function (res) {
    console.log('socket onError', res);
    stream.destroy(new Error(res.errMsg));
    stream.emit('error');
  });
}

function buildStream(client, opts) {
  opts.hostname = opts.hostname || opts.host;

  if (!opts.hostname) {
    throw new Error('Could not determine host. Specify host manually.');
  }

  var websocketSubProtocol = opts.protocolId === 'MQIsdp' && opts.protocolVersion === 3 ? 'mqttv3.1' : 'mqtt';

  setDefaultOpts(opts);

  if (socketTask) {
    socketTask.close();
  }

  var url = buildUrl(opts, client);
  socketTask = wx.connectSocket({
    url: url,
    protocols: websocketSubProtocol
  });

  proxy = buildProxy();
  stream = duplexify.obj();
  stream._destroy = function (err, cb) {
    socketTask.close({
      success: function success() {
        cb && cb(err);
      }
    });
  };

  var destroyRef = stream.destroy;
  stream.destroy = function () {
    stream.destroy = destroyRef;

    var self = this;
    process.nextTick(function () {
      socketTask.close({
        fail: function fail() {
          self._destroy(new Error());
        }
      });
    });
  }.bind(stream);

  bindEventHandler();

  return stream;
}

module.exports = buildStream;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(11).Buffer, __webpack_require__(3)))

/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var _stringify = __webpack_require__(85);

var _stringify2 = _interopRequireDefault(_stringify);

var _typeof2 = __webpack_require__(10);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Transform = __webpack_require__(14).Transform;
var duplexify = __webpack_require__(30);
var base64 = __webpack_require__(102);

/* global FileReader */
var my;
var proxy;
var stream;
var isInitialized = false;

function buildProxy() {
    var proxy = new Transform();
    proxy._write = function (chunk, encoding, next) {
        var _data = chunk.toString('base64'); //订正mqttjs支付宝小程序使用错误，支付宝data需要传入base64 string
        my.sendSocketMessage({
            data: _data, //订正mqttjs支付宝小程序使用错误，支付宝data需要传入base64 string
            isBuffer: true, //订正mqttjs支付宝小程序使用错误，isbuffer设置为1
            success: function success() {
                next();
            },
            fail: function fail() {
                next(new Error());
            }
        });
    };
    proxy._flush = function socketEnd(done) {
        my.closeSocket({
            success: function success() {
                done();
            }
        });
    };

    return proxy;
}

function setDefaultOpts(opts) {
    if (!opts.hostname) {
        opts.hostname = 'localhost';
    }
    if (!opts.path) {
        opts.path = '/';
    }

    if (!opts.wsOptions) {
        opts.wsOptions = {};
    }
}

function buildUrl(opts, client) {
    var protocol = opts.protocol === 'alis' ? 'wss' : 'ws';
    var url = protocol + '://' + opts.hostname + opts.path;
    if (opts.port && opts.port !== 80 && opts.port !== 443) {
        url = protocol + '://' + opts.hostname + ':' + opts.port + opts.path;
    }
    if (typeof opts.transformWsUrl === 'function') {
        url = opts.transformWsUrl(url, opts, client);
    }
    console.log('url', url);
    return url;
}

function bindEventHandler() {
    if (isInitialized) return;

    isInitialized = true;

    my.onSocketOpen(function () {
        console.log('onSocketOpen');
        stream.setReadable(proxy);
        stream.setWritable(proxy);
        stream.emit('connect');
    });

    my.onSocketMessage(function (res) {
        console.log('onSocketMessage', res, (0, _typeof3.default)(res.data));
        if (typeof res.data === 'string') {
            // 不知道为什么，iOS真机上，会加上一些空格
            var tmp = res.data.replace(/\s+/g, '');
            var array = base64.toByteArray(tmp, '');
            var buffer = Buffer.from(array);
            proxy.push(buffer);
        } else if (res.data instanceof ArrayBuffer) {
            var _buffer = Buffer.from(res.data);
            proxy.push(_buffer);
        } else {
            // var reader = new FileReader()
            // reader.addEventListener('load', function () {
            //     var data = reader.result
            //
            //     if (data instanceof ArrayBuffer) data = Buffer.from(data)
            //     else data = Buffer.from(data, 'utf8')
            //     proxy.push(data)
            // })
            // reader.readAsArrayBuffer(res.data)
            // res.data.arrayBuffer().then(buffer => proxy.push(Buffer.from(buffer)));

            // blob
            res.data.arrayBuffer().then(function (data) {
                if (data instanceof ArrayBuffer) data = Buffer.from(data);
                // fix TypeError: First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object
                // instanceof ArrayBuffer 好像有问题
                else if (data.byteLength > 0) data = Buffer.from(new Uint8Array(data));else data = Buffer.from(data, 'utf8');
                proxy.push(data);
            });
        }
    });

    my.onSocketClose(function (e) {
        console.log('onSocketClose', (0, _stringify2.default)(e));
        stream.end();
        stream.destroy();
        stream.emit('close');
    });

    my.onSocketError(function (res) {
        console.log('onSocketError', res);
        stream.destroy(res);
        stream.emit('error');
    });
}

function buildStream(client, opts) {
    opts.hostname = opts.hostname || opts.host;

    if (!opts.hostname) {
        throw new Error('Could not determine host. Specify host manually.');
    }

    var websocketSubProtocol = opts.protocolId === 'MQIsdp' && opts.protocolVersion === 3 ? 'mqttv3.1' : 'mqtt';

    setDefaultOpts(opts);

    var url = buildUrl(opts, client);
    my = opts.extra.mp;
    my.connectSocket({
        url: url,
        headers: {
            "Sec-WebSocket-Protocol": "mqtt"
        },
        fail: function fail(res) {
            console.log('connectSocket fail', res);
        }
    });

    proxy = buildProxy();
    stream = duplexify.obj();

    bindEventHandler();

    return stream;
}

module.exports = buildStream;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(11).Buffer))

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer, process) {

var Transform = __webpack_require__(14).Transform;
var duplexify = __webpack_require__(30);

/* global swan */
var socketTask;
var proxy;
var stream;

function buildProxy() {
  var proxy = new Transform();
  proxy._write = function (chunk, encoding, next) {
    socketTask.send({
      data: chunk.buffer,
      success: function success() {
        next();
      },
      fail: function fail(errMsg) {
        next(new Error(errMsg));
      }
    });
  };
  proxy._flush = function socketEnd(done) {
    socketTask.close({
      success: function success() {
        done();
      }
    });
  };

  return proxy;
}

function setDefaultOpts(opts) {
  if (!opts.hostname) {
    opts.hostname = 'localhost';
  }
  if (!opts.path) {
    opts.path = '/';
  }

  if (!opts.wsOptions) {
    opts.wsOptions = {};
  }
}

function buildUrl(opts, client) {
  var protocol = opts.protocol === 'bds' ? 'wss' : 'ws';
  var url = protocol + '://' + opts.hostname + opts.path;
  if (opts.port && opts.port !== 80 && opts.port !== 443) {
    url = protocol + '://' + opts.hostname + ':' + opts.port + opts.path;
  }
  if (typeof opts.transformWsUrl === 'function') {
    url = opts.transformWsUrl(url, opts, client);
  }
  return url;
}

function bindEventHandler() {
  socketTask.onOpen(function () {
    stream.setReadable(proxy);
    stream.setWritable(proxy);
    stream.emit('connect');
  });

  socketTask.onMessage(function (res) {
    var data = res.data;

    if (data instanceof ArrayBuffer) data = Buffer.from(data);else data = Buffer.from(data, 'utf8');
    proxy.push(data);
  });

  socketTask.onClose(function () {
    stream.end();
    stream.destroy();
    stream.emit('close');
  });

  socketTask.onError(function (res) {
    stream.destroy(new Error(res.errMsg));
    stream.emit('error');
  });
}

function buildStream(client, opts) {
  opts.hostname = opts.hostname || opts.host;

  if (!opts.hostname) {
    throw new Error('Could not determine host. Specify host manually.');
  }

  var websocketSubProtocol = opts.protocolId === 'MQIsdp' && opts.protocolVersion === 3 ? 'mqttv3.1' : 'mqtt';

  setDefaultOpts(opts);

  var url = buildUrl(opts, client);
  socketTask = swan.connectSocket({
    url: url,
    protocols: [websocketSubProtocol],
    fail: function fail(res) {
      console.log('connectSocket fail', res);
    }

  });

  proxy = buildProxy();
  stream = duplexify.obj();
  stream._destroy = function (err, cb) {
    socketTask.close({
      success: function success() {
        cb && cb(err);
      }
    });
  };

  var destroyRef = stream.destroy;
  stream.destroy = function () {
    stream.destroy = destroyRef;

    var self = this;
    process.nextTick(function () {
      socketTask.close({
        fail: function fail() {
          self._destroy(new Error());
        }
      });
    });
  }.bind(stream);

  bindEventHandler();

  return stream;
}

module.exports = buildStream;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(11).Buffer, __webpack_require__(3)))

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer, process) {

var Transform = __webpack_require__(14).Transform;
var duplexify = __webpack_require__(30);

/* global tt */
var socketTask;
var proxy;
var stream;

function buildProxy() {
  var proxy = new Transform();
  proxy._write = function (chunk, encoding, next) {
    socketTask.send({
      data: chunk.buffer,
      success: function success() {
        next();
      },
      fail: function fail(errMsg) {
        next(new Error(errMsg));
      }
    });
  };
  proxy._flush = function socketEnd(done) {
    socketTask.close({
      success: function success() {
        done();
      }
    });
  };

  return proxy;
}

function setDefaultOpts(opts) {
  if (!opts.hostname) {
    opts.hostname = 'localhost';
  }
  if (!opts.path) {
    opts.path = '/';
  }

  if (!opts.wsOptions) {
    opts.wsOptions = {};
  }
}

function buildUrl(opts, client) {
  var protocol = opts.protocol === 'tts' ? 'wss' : 'ws';
  var url = protocol + '://' + opts.hostname + opts.path;
  if (opts.port && opts.port !== 80 && opts.port !== 443) {
    url = protocol + '://' + opts.hostname + ':' + opts.port + opts.path;
  }
  if (typeof opts.transformWsUrl === 'function') {
    url = opts.transformWsUrl(url, opts, client);
  }
  return url;
}

function bindEventHandler() {
  socketTask.onOpen(function () {
    stream.setReadable(proxy);
    stream.setWritable(proxy);
    stream.emit('connect');
  });

  socketTask.onMessage(function (res) {
    var data = res.data;

    if (data instanceof ArrayBuffer) data = Buffer.from(data);else data = Buffer.from(data, 'utf8');
    proxy.push(data);
  });

  socketTask.onClose(function () {
    stream.end();
    stream.destroy();
    stream.emit('close');
  });

  socketTask.onError(function (res) {
    stream.destroy(new Error(res.errMsg));
    stream.emit('error');
  });
}

function buildStream(client, opts) {
  opts.hostname = opts.hostname || opts.host;

  if (!opts.hostname) {
    throw new Error('Could not determine host. Specify host manually.');
  }

  var websocketSubProtocol = opts.protocolId === 'MQIsdp' && opts.protocolVersion === 3 ? 'mqttv3.1' : 'mqtt';

  setDefaultOpts(opts);

  var url = buildUrl(opts, client);
  socketTask = tt.connectSocket({
    url: url,
    protocols: websocketSubProtocol
  });

  proxy = buildProxy();
  stream = duplexify.obj();
  stream._destroy = function (err, cb) {
    socketTask.close({
      success: function success() {
        cb && cb(err);
      }
    });
  };

  var destroyRef = stream.destroy;
  stream.destroy = function () {
    stream.destroy = destroyRef;

    var self = this;
    process.nextTick(function () {
      socketTask.close({
        fail: function fail() {
          self._destroy(new Error());
        }
      });
    });
  }.bind(stream);

  bindEventHandler();

  return stream;
}

module.exports = buildStream;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(11).Buffer, __webpack_require__(3)))

/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer, process) {

var Transform = __webpack_require__(14).Transform;
var duplexify = __webpack_require__(30);

/* global qq */
var socketTask;
var proxy;
var stream;

function buildProxy() {
  var proxy = new Transform();
  proxy._write = function (chunk, encoding, next) {
    socketTask.send({
      data: chunk.buffer,
      success: function success() {
        next();
      },
      fail: function fail(errMsg) {
        next(new Error(errMsg));
      }
    });
  };
  proxy._flush = function socketEnd(done) {
    socketTask.close({
      success: function success() {
        done();
      }
    });
  };

  return proxy;
}

function setDefaultOpts(opts) {
  if (!opts.hostname) {
    opts.hostname = 'localhost';
  }
  if (!opts.path) {
    opts.path = '/';
  }

  if (!opts.wsOptions) {
    opts.wsOptions = {};
  }
}

function buildUrl(opts, client) {
  var protocol = opts.protocol === 'qqs' ? 'wss' : 'ws';
  var url = protocol + '://' + opts.hostname + opts.path;
  if (opts.port && opts.port !== 80 && opts.port !== 443) {
    url = protocol + '://' + opts.hostname + ':' + opts.port + opts.path;
  }
  if (typeof opts.transformWsUrl === 'function') {
    url = opts.transformWsUrl(url, opts, client);
  }
  return url;
}

function bindEventHandler() {
  socketTask.onOpen(function () {
    stream.setReadable(proxy);
    stream.setWritable(proxy);
    stream.emit('connect');
  });

  socketTask.onMessage(function (res) {
    var data = res.data;

    if (data instanceof ArrayBuffer) data = Buffer.from(data);else data = Buffer.from(data, 'utf8');
    proxy.push(data);
  });

  socketTask.onClose(function () {
    stream.end();
    stream.destroy();
    stream.emit('close');
  });

  socketTask.onError(function (res) {
    stream.destroy(new Error(res.errMsg));
    stream.emit('error');
  });
}

function buildStream(client, opts) {
  opts.hostname = opts.hostname || opts.host;

  if (!opts.hostname) {
    throw new Error('Could not determine host. Specify host manually.');
  }

  var websocketSubProtocol = opts.protocolId === 'MQIsdp' && opts.protocolVersion === 3 ? 'mqttv3.1' : 'mqtt';

  setDefaultOpts(opts);

  var url = buildUrl(opts, client);
  socketTask = qq.connectSocket({
    url: url,
    protocols: websocketSubProtocol
  });

  proxy = buildProxy();
  stream = duplexify.obj();
  stream._destroy = function (err, cb) {
    socketTask.close({
      success: function success() {
        cb && cb(err);
      }
    });
  };

  var destroyRef = stream.destroy;
  stream.destroy = function () {
    stream.destroy = destroyRef;

    var self = this;
    process.nextTick(function () {
      socketTask.close({
        fail: function fail() {
          self._destroy(new Error());
        }
      });
    });
  }.bind(stream);

  bindEventHandler();

  return stream;
}

module.exports = buildStream;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(11).Buffer, __webpack_require__(3)))

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer, process) {

var Transform = __webpack_require__(14).Transform;
var duplexify = __webpack_require__(30);

/* global uni */
var socketTask;
var proxy;
var stream;

function buildProxy() {
  var proxy = new Transform();
  proxy._write = function (chunk, encoding, next) {
    socketTask.send({
      data: chunk.buffer,
      success: function success() {
        next();
      },
      fail: function fail(errMsg) {
        next(new Error(errMsg));
      }
    });
  };
  proxy._flush = function socketEnd(done) {
    socketTask.close({
      success: function success() {
        done();
      }
    });
  };

  return proxy;
}

function setDefaultOpts(opts) {
  if (!opts.hostname) {
    opts.hostname = 'localhost';
  }
  if (!opts.path) {
    opts.path = '/';
  }

  if (!opts.wsOptions) {
    opts.wsOptions = {};
  }
}

function buildUrl(opts, client) {
  var protocol = opts.protocol === 'unis' ? 'wss' : 'ws';
  var url = protocol + '://' + opts.hostname + opts.path;
  if (opts.port && opts.port !== 80 && opts.port !== 443) {
    url = protocol + '://' + opts.hostname + ':' + opts.port + opts.path;
  }
  if (typeof opts.transformWsUrl === 'function') {
    url = opts.transformWsUrl(url, opts, client);
  }
  return url;
}

function bindEventHandler() {
  socketTask.onOpen(function () {
    stream.setReadable(proxy);
    stream.setWritable(proxy);
    stream.emit('connect');
  });

  socketTask.onMessage(function (res) {
    var data = res.data;

    if (data instanceof ArrayBuffer) data = Buffer.from(data);else data = Buffer.from(data, 'utf8');
    proxy.push(data);
  });

  socketTask.onClose(function () {
    console.log('socket onClose');
    stream.end();
    stream.destroy();
    stream.emit('close');
  });

  socketTask.onError(function (res) {
    console.log('socket onError', res);
    stream.destroy(new Error(res.errMsg));
    stream.emit('error');
  });
}

function buildStream(client, opts) {
  opts.hostname = opts.hostname || opts.host;

  if (!opts.hostname) {
    throw new Error('Could not determine host. Specify host manually.');
  }

  var websocketSubProtocol = opts.protocolId === 'MQIsdp' && opts.protocolVersion === 3 ? 'mqttv3.1' : 'mqtt';

  setDefaultOpts(opts);

  if (socketTask) {
    socketTask.close();
  }

  var url = buildUrl(opts, client);
  socketTask = uni.connectSocket({
    url: url,
    protocols: websocketSubProtocol,
    complete: function complete() {
      console.log('uni.connectSocket complete');
    }
  });

  proxy = buildProxy();
  stream = duplexify.obj();
  stream._destroy = function (err, cb) {
    socketTask.close({
      success: function success() {
        cb && cb(err);
      }
    });
  };

  var destroyRef = stream.destroy;
  stream.destroy = function () {
    stream.destroy = destroyRef;

    var self = this;
    process.nextTick(function () {
      socketTask.close({
        fail: function fail() {
          self._destroy(new Error());
        }
      });
    });
  }.bind(stream);

  bindEventHandler();

  return stream;
}

module.exports = buildStream;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(11).Buffer, __webpack_require__(3)))

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var websocket = __webpack_require__(345);
var urlModule = __webpack_require__(154);
var WSS_OPTIONS = ['rejectUnauthorized', 'ca', 'cert', 'key', 'pfx', 'passphrase'];
var IS_BROWSER = process.title === 'browser';

function buildUrl(opts, client) {
  var url = opts.protocol + '://' + opts.hostname + ':' + opts.port + opts.path;
  if (typeof opts.transformWsUrl === 'function') {
    url = opts.transformWsUrl(url, opts, client);
  }
  return url;
}

function setDefaultOpts(opts) {
  if (!opts.hostname) {
    opts.hostname = 'localhost';
  }
  if (!opts.port) {
    if (opts.protocol === 'wss') {
      opts.port = 443;
    } else {
      opts.port = 80;
    }
  }
  if (!opts.path) {
    opts.path = '/';
  }

  if (!opts.wsOptions) {
    opts.wsOptions = {};
  }
  if (!IS_BROWSER && opts.protocol === 'wss') {
    // Add cert/key/ca etc options
    WSS_OPTIONS.forEach(function (prop) {
      if (opts.hasOwnProperty(prop) && !opts.wsOptions.hasOwnProperty(prop)) {
        opts.wsOptions[prop] = opts[prop];
      }
    });
  }
}

function createWebSocket(client, opts) {
  var websocketSubProtocol = opts.protocolId === 'MQIsdp' && opts.protocolVersion === 3 ? 'mqttv3.1' : 'mqtt';

  setDefaultOpts(opts);
  var url = buildUrl(opts, client);
  return websocket(url, [websocketSubProtocol], opts.wsOptions);
}

function buildBuilder(client, opts) {
  return createWebSocket(client, opts);
}

function buildBuilderBrowser(client, opts) {
  if (!opts.hostname) {
    opts.hostname = opts.host;
  }

  if (!opts.hostname) {
    // Throwing an error in a Web Worker if no `hostname` is given, because we
    // can not determine the `hostname` automatically.  If connecting to
    // localhost, please supply the `hostname` as an argument.
    if (typeof document === 'undefined') {
      throw new Error('Could not determine host. Specify host manually.');
    }
    var parsed = urlModule.parse(document.URL);
    opts.hostname = parsed.hostname;

    if (!opts.port) {
      opts.port = parsed.port;
    }
  }
  return createWebSocket(client, opts);
}

if (IS_BROWSER) {
  module.exports = buildBuilderBrowser;
} else {
  module.exports = buildBuilder;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3)))

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Created by zhangmiao on 2018/3/13.
 */

(function (protobufFactory) {
    //if (typeof define === 'function')//这里会不会定义重复呢?怎么去掉呢
    //    define('protobuf', protobufFactory);
    //else
    module.exports = protobufFactory();
})(function () {
    var protobuf = {};
    //app.globalData.protobuf = protobuf;

    /**
     * Build type, one of `"full"`, `"light"` or `"minimal"`.
     * @name build
     * @type {string}
     * @const
     */
    protobuf.build = "minimal";

    // Serialization
    protobuf.Writer = __webpack_require__(164);
    protobuf.encoder = __webpack_require__(175);
    protobuf.Reader = __webpack_require__(173);

    // Utility
    protobuf.util = __webpack_require__(1);
    protobuf.rpc = __webpack_require__(171);
    protobuf.roots = __webpack_require__(166);
    protobuf.verifier = __webpack_require__(174);

    protobuf.tokenize = __webpack_require__(170);
    protobuf.parse = __webpack_require__(169);
    protobuf.common = __webpack_require__(172);

    protobuf.ReflectionObject = __webpack_require__(37);
    protobuf.Namespace = __webpack_require__(52);
    protobuf.Root = __webpack_require__(67);
    protobuf.Enum = __webpack_require__(13);
    protobuf.Type = __webpack_require__(36);
    protobuf.Field = __webpack_require__(24);
    protobuf.OneOf = __webpack_require__(53);
    protobuf.MapField = __webpack_require__(98);
    protobuf.Service = __webpack_require__(68);
    protobuf.Method = __webpack_require__(99);
    protobuf.converter = __webpack_require__(178);
    protobuf.decoder = __webpack_require__(176);

    // Runtime
    protobuf.Message = __webpack_require__(100);
    protobuf.wrappers = __webpack_require__(177);

    // Utility
    protobuf.types = __webpack_require__(38);
    protobuf.util = __webpack_require__(1);

    protobuf.configure = configure;

    function load(filename, root, callback) {
        if (typeof root === "function") {
            callback = root;
            root = new protobuf.Root();
        } else if (!root) root = new protobuf.Root();
        return root.load(filename, callback);
    }

    protobuf.load = load;

    function loadSync(filename, root) {
        if (!root) root = new protobuf.Root();
        return root.loadSync(filename);
    }

    protobuf.loadSync = loadSync;

    //新增weichat支持的解析pbConfig接口
    function parseFromPbString(pbString, root, callback) {
        if (typeof root === "function") {
            callback = root;
            root = new protobuf.Root();
        } else if (!root) root = new protobuf.Root();
        return root.parseFromPbString(pbString, callback);
    }

    protobuf.parseFromPbString = parseFromPbString;

    /**
     * Reconfigures the library according to the environment.
     * @returns {undefined}
     */
    function configure() {

        protobuf.converter._configure();
        protobuf.decoder._configure();
        protobuf.encoder._configure();
        protobuf.Field._configure();
        protobuf.MapField._configure();
        protobuf.Message._configure();
        protobuf.Namespace._configure();
        protobuf.Method._configure();
        protobuf.ReflectionObject._configure();
        protobuf.OneOf._configure();
        protobuf.parse._configure();
        protobuf.Reader._configure();
        protobuf.Root._configure();
        protobuf.Service._configure();
        protobuf.verifier._configure();
        protobuf.Type._configure();
        protobuf.types._configure();
        protobuf.wrappers._configure();
        protobuf.Writer._configure();
    }
    configure();

    if (arguments && arguments.length) {
        for (var i = 0; i < arguments.length; i++) {
            var argument = arguments[i];
            if (argument.hasOwnProperty("exports")) {
                argument.exports = protobuf;
                return;
            }
        }
    }
    return protobuf;
});

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _create = __webpack_require__(6);

var _create2 = _interopRequireDefault(_create);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = Writer;

var util = __webpack_require__(1);
var LongBits;

var BufferWriter; // cyclic

var base64;
var utf8 = __webpack_require__(66);

/**
 * Constructs a new writer operation instance.
 * @classdesc Scheduled writer operation.
 * @constructor
 * @param {function(*, Uint8Array, number)} fn Function to call
 * @param {number} len Value byte length
 * @param {*} val Value to write
 * @ignore
 */
function Op(fn, len, val) {

    /**
     * Function to call.
     * @type {function(Uint8Array, number, *)}
     */
    this.fn = fn;

    /**
     * Value byte length.
     * @type {number}
     */
    this.len = len;

    /**
     * Next operation.
     * @type {Writer.Op|undefined}
     */
    this.next = undefined;

    /**
     * Value to write.
     * @type {*}
     */
    this.val = val; // type varies
}

/* istanbul ignore next */
function noop() {} // eslint-disable-line no-empty-function

/**
 * Constructs a new writer state instance.
 * @classdesc Copied writer state.
 * @memberof Writer
 * @constructor
 * @param {Writer} writer Writer to copy state from
 * @ignore
 */
function State(writer) {

    /**
     * Current head.
     * @type {Writer.Op}
     */
    this.head = writer.head;

    /**
     * Current tail.
     * @type {Writer.Op}
     */
    this.tail = writer.tail;

    /**
     * Current buffer length.
     * @type {number}
     */
    this.len = writer.len;

    /**
     * Next state.
     * @type {State|null}
     */
    this.next = writer.states;
}

/**
 * Constructs a new writer instance.
 * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.
 * @constructor
 */
function Writer() {

    /**
     * Current length.
     * @type {number}
     */
    this.len = 0;

    /**
     * Operations head.
     * @type {Object}
     */
    this.head = new Op(noop, 0, 0);

    /**
     * Operations tail
     * @type {Object}
     */
    this.tail = this.head;

    /**
     * Linked forked states.
     * @type {Object|null}
     */
    this.states = null;

    // When a value is written, the writer calculates its byte length and puts it into a linked
    // list of operations to perform when finish() is called. This both allows us to allocate
    // buffers of the exact required size and reduces the amount of work we have to do compared
    // to first calculating over objects and then encoding over objects. In our case, the encoding
    // part is just a linked list walk calling operations with already prepared values.
}

/**
 * Creates a new writer.
 * @function
 * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}
 */
Writer.create = util.Buffer ? function create_buffer_setup() {
    return (Writer.create = function create_buffer() {
        return new BufferWriter();
    })();
}
/* istanbul ignore next */
: function create_array() {
    return new Writer();
};

/**
 * Allocates a buffer of the specified size.
 * @param {number} size Buffer size
 * @returns {Uint8Array} Buffer
 */
Writer.alloc = function alloc(size) {
    return new util.Array(size);
};

// Use Uint8Array buffer pool in the browser, just like node does with buffers
/* istanbul ignore else */
if (util.Array !== Array) Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);

/**
 * Pushes a new operation to the queue.
 * @param {function(Uint8Array, number, *)} fn Function to call
 * @param {number} len Value byte length
 * @param {number} val Value to write
 * @returns {Writer} `this`
 * @private
 */
Writer.prototype._push = function push(fn, len, val) {
    this.tail = this.tail.next = new Op(fn, len, val);
    this.len += len;
    return this;
};

function writeByte(val, buf, pos) {
    buf[pos] = val & 255;
}

function writeVarint32(val, buf, pos) {
    while (val > 127) {
        buf[pos++] = val & 127 | 128;
        val >>>= 7;
    }
    buf[pos] = val;
}

/**
 * Constructs a new varint writer operation instance.
 * @classdesc Scheduled varint writer operation.
 * @extends Op
 * @constructor
 * @param {number} len Value byte length
 * @param {number} val Value to write
 * @ignore
 */
function VarintOp(len, val) {
    this.len = len;
    this.next = undefined;
    this.val = val;
}

VarintOp.prototype = (0, _create2.default)(Op.prototype);
VarintOp.prototype.fn = writeVarint32;

/**
 * Writes an unsigned 32 bit value as a varint.
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.uint32 = function write_uint32(value) {
    // here, the call to this.push has been inlined and a varint specific Op subclass is used.
    // uint32 is by far the most frequently used operation and benefits significantly from this.
    this.len += (this.tail = this.tail.next = new VarintOp((value = value >>> 0) < //将有符号的数变为无符号的数
    128 ? 1 //2的7次方
    : value < 16384 ? 2 //2的14次方
    : value < 2097152 ? 3 //2的21次方
    : value < 268435456 ? 4 //2的28次方
    : 5, //2的35次方 最多32次方,所以最多是5
    value)).len;
    return this;
};

/**
 * Writes a signed 32 bit value as a varint.
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.int32 = function write_int32(value) {
    return value < 0 ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec
    : this.uint32(value);
};

/**
 * Writes a 32 bit value as a varint, zig-zag encoded.
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.sint32 = function write_sint32(value) {
    return this.uint32((value << 1 ^ value >> 31) >>> 0);
};

function writeVarint64(val, buf, pos) {
    while (val.hi) {
        buf[pos++] = val.lo & 127 | 128;
        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;
        val.hi >>>= 7;
    }
    while (val.lo > 127) {
        buf[pos++] = val.lo & 127 | 128;
        val.lo = val.lo >>> 7;
    }
    buf[pos++] = val.lo;
}

/**
 * Writes an unsigned 64 bit value as a varint.
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.uint64 = function write_uint64(value) {
    var bits = LongBits.from(value);
    return this._push(writeVarint64, bits.length(), bits);
};

/**
 * Writes a signed 64 bit value as a varint.
 * @function
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.int64 = Writer.prototype.uint64;

/**
 * Writes a signed 64 bit value as a varint, zig-zag encoded.
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.sint64 = function write_sint64(value) {
    var bits = LongBits.from(value).zzEncode();
    return this._push(writeVarint64, bits.length(), bits);
};

/**
 * Writes a boolish value as a varint.
 * @param {boolean} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.bool = function write_bool(value) {
    return this._push(writeByte, 1, value ? 1 : 0);
};

function writeFixed32(val, buf, pos) {
    buf[pos] = val & 255;
    buf[pos + 1] = val >>> 8 & 255;
    buf[pos + 2] = val >>> 16 & 255;
    buf[pos + 3] = val >>> 24;
}

/**
 * Writes an unsigned 32 bit value as fixed 32 bits.
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.fixed32 = function write_fixed32(value) {
    return this._push(writeFixed32, 4, value >>> 0);
};

/**
 * Writes a signed 32 bit value as fixed 32 bits.
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.sfixed32 = Writer.prototype.fixed32;

/**
 * Writes an unsigned 64 bit value as fixed 64 bits.
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.fixed64 = function write_fixed64(value) {
    var bits = LongBits.from(value);
    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);
};

/**
 * Writes a signed 64 bit value as fixed 64 bits.
 * @function
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.sfixed64 = Writer.prototype.fixed64;

/**
 * Writes a float (32 bit).
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.float = function write_float(value) {
    return this._push(util.float.writeFloatLE, 4, value);
};

/**
 * Writes a double (64 bit float).
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.double = function write_double(value) {
    return this._push(util.float.writeDoubleLE, 8, value);
};

var writeBytes = util.Array.prototype.set ? function writeBytes_set(val, buf, pos) {
    buf.set(val, pos); // also works for plain array values
}
/* istanbul ignore next */
: function writeBytes_for(val, buf, pos) {
    for (var i = 0; i < val.length; ++i) {
        buf[pos + i] = val[i];
    }
};

/**
 * Writes a sequence of bytes.
 * @param {Uint8Array|string} value Buffer or string to write
 * @returns {Writer} `this`
 */
Writer.prototype.bytes = function write_bytes(value) {
    var len = value.length >>> 0;
    if (!len) return this._push(writeByte, 1, 0);

    if (util.isString(value)) {
        //len = (value = util.stringToBytes(value)).length;
        //var buf = Writer.alloc(len = base64.length(value));
        //base64.decode(value, buf, 0);
        //value = buf;
        var buf = Writer.alloc(len = utf8.length(value));
        utf8.write(value, buf, 0);
        value = buf;
    }
    return this.uint32(len)._push(writeBytes, len, value);
};

/**
 * Writes a string.
 * @param {string} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.string = function write_string(value) {
    var len = utf8.length(value);
    return len ? this.uint32(len)._push(utf8.write, len, value) : this._push(writeByte, 1, 0);
};

/**
 * Forks this writer's state by pushing it to a stack.
 * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.
 * @returns {Writer} `this`
 */
Writer.prototype.fork = function fork() {
    this.states = new State(this);
    this.head = this.tail = new Op(noop, 0, 0);
    this.len = 0;
    return this;
};

/**
 * Resets this instance to the last state.
 * @returns {Writer} `this`
 */
Writer.prototype.reset = function reset() {
    if (this.states) {
        this.head = this.states.head;
        this.tail = this.states.tail;
        this.len = this.states.len;
        this.states = this.states.next;
    } else {
        this.head = this.tail = new Op(noop, 0, 0);
        this.len = 0;
    }
    return this;
};

/**
 * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.
 * @returns {Writer} `this`
 */
Writer.prototype.ldelim = function ldelim() {
    var head = this.head,
        tail = this.tail,
        len = this.len;
    this.reset().uint32(len);
    if (len) {
        this.tail.next = head.next; // skip noop
        this.tail = tail;
        this.len += len;
    }
    return this;
};

/**
 * Finishes the write operation.
 * @returns {Uint8Array} Finished buffer
 */
Writer.prototype.finish = function finish() {
    var head = this.head.next,
        // skip noop
    buf = this.constructor.alloc(this.len),
        pos = 0;
    while (head) {
        head.fn(head.val, buf, pos);
        pos += head.len;
        head = head.next;
    }
    // this.head = this.tail = null;
    return buf;
};

Writer._configure = function () {

    //util      = require("./util");
    LongBits = __webpack_require__(97);
    base64 = __webpack_require__(167);
    utf8 = __webpack_require__(66);
};

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(351), __esModule: true };

/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Created by zhangmiao on 2018/3/13.
 */

module.exports = {};

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * A minimal base64 implementation for number arrays.
 * @memberof util
 * @namespace
 */

var base64 = module.exports;

/**
 * Calculates the byte length of a base64 encoded string.
 * @param {string} string Base64 encoded string
 * @returns {number} Byte length
 */
base64.length = function length(string) {
    var p = string.length;
    if (!p) return 0;
    var n = 0;
    while (--p % 4 > 1 && string.charAt(p) === "=") {
        ++n;
    }return Math.ceil(string.length * 3) / 4 - n;
};

// Base64 encoding table
var b64 = new Array(64);

// Base64 decoding table
var s64 = new Array(123);

// 65..90, 97..122, 48..57, 43, 47
for (var i = 0; i < 64;) {
    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;
} /**
   * Encodes a buffer to a base64 encoded string.
   * @param {Uint8Array} buffer Source buffer
   * @param {number} start Source start
   * @param {number} end Source end
   * @returns {string} Base64 encoded string
   */
base64.encode = function encode(buffer, start, end) {
    var parts = null,
        chunk = [];
    var i = 0,
        // output index
    j = 0,
        // goto index
    t; // temporary
    while (start < end) {
        var b = buffer[start++];
        switch (j) {
            case 0:
                chunk[i++] = b64[b >> 2];
                t = (b & 3) << 4;
                j = 1;
                break;
            case 1:
                chunk[i++] = b64[t | b >> 4];
                t = (b & 15) << 2;
                j = 2;
                break;
            case 2:
                chunk[i++] = b64[t | b >> 6];
                chunk[i++] = b64[b & 63];
                j = 0;
                break;
        }
        if (i > 8191) {
            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
            i = 0;
        }
    }
    if (j) {
        chunk[i++] = b64[t];
        chunk[i++] = 61;
        if (j === 1) chunk[i++] = 61;
    }
    if (parts) {
        if (i) parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
        return parts.join("");
    }
    return String.fromCharCode.apply(String, chunk.slice(0, i));
};

var invalidEncoding = "invalid encoding";

/**
 * Decodes a base64 encoded string to a buffer.
 * @param {string} string Source string
 * @param {Uint8Array} buffer Destination buffer
 * @param {number} offset Destination offset
 * @returns {number} Number of bytes written
 * @throws {Error} If encoding is invalid
 */
base64.decode = function decode(string, buffer, offset) {
    var start = offset;
    var j = 0,
        // goto index
    t; // temporary
    for (var i = 0; i < string.length;) {
        var c = string.charCodeAt(i++);
        if (c === 61 && j > 1) break;
        if ((c = s64[c]) === undefined) throw Error(invalidEncoding);
        switch (j) {
            case 0:
                t = c;
                j = 1;
                break;
            case 1:
                buffer[offset++] = t << 2 | (c & 48) >> 4;
                t = c;
                j = 2;
                break;
            case 2:
                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;
                t = c;
                j = 3;
                break;
            case 3:
                buffer[offset++] = (t & 3) << 6 | c;
                j = 0;
                break;
        }
    }
    if (j === 1) throw Error(invalidEncoding);
    return offset - start;
};

/**
 * Tests if the specified string appears to be base64 encoded.
 * @param {string} string String to test
 * @returns {boolean} `true` if probably base64 encoded, otherwise false
 */
base64.test = function test(string) {
    return (/^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string)
    );
};

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(359), __esModule: true };

/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = parse;

parse.filename = null;
parse.defaults = { keepCase: false };

var tokenize, Root, Type, Field, MapField, OneOf, Enum, Service, Method, types, util;

var base10Re = /^[1-9][0-9]*$/,
    base10NegRe = /^-?[1-9][0-9]*$/,
    base16Re = /^0[x][0-9a-fA-F]+$/,
    base16NegRe = /^-?0[x][0-9a-fA-F]+$/,
    base8Re = /^0[0-7]+$/,
    base8NegRe = /^-?0[0-7]+$/,
    numberRe = /^(?![eE])[0-9]*(?:\.[0-9]*)?(?:[eE][+-]?[0-9]+)?$/,
    nameRe = /^[a-zA-Z_][a-zA-Z_0-9]*$/,
    typeRefRe = /^(?:\.?[a-zA-Z_][a-zA-Z_0-9]*)+$/,
    fqTypeRefRe = /^(?:\.[a-zA-Z][a-zA-Z_0-9]*)+$/;

/**
 * Result object returned from {@link parse}.
 * @interface IParserResult
 * @property {string|undefined} package Package name, if declared
 * @property {string[]|undefined} imports Imports, if any
 * @property {string[]|undefined} weakImports Weak imports, if any
 * @property {string|undefined} syntax Syntax, if specified (either `"proto2"` or `"proto3"`)
 * @property {Root} root Populated root instance
 */

/**
 * Options modifying the behavior of {@link parse}.
 * @interface IParseOptions
 * @property {boolean} [keepCase=false] Keeps field casing instead of converting to camel case
 * @property {boolean} [alternateCommentMode=false] Recognize double-slash comments in addition to doc-block comments.
 */

/**
 * Options modifying the behavior of JSON serialization.
 * @interface IToJSONOptions
 * @property {boolean} [keepComments=false] Serializes comments.
 */

/**
 * Parses the given .proto source and returns an object with the parsed contents.
 * @param {string} source Source contents
 * @param {Root} root Root to populate
 * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.
 * @returns {IParserResult} Parser result
 * @property {string} filename=null Currently processing file name for error reporting, if known
 * @property {IParseOptions} defaults Default {@link IParseOptions}
 */
function parse(source, root, options) {
    /* eslint-disable callback-return */
    if (!(root instanceof Root)) {
        options = root;
        root = new Root();
    }
    if (!options) options = parse.defaults;

    var tn = tokenize(source, options.alternateCommentMode || false),
        next = tn.next,
        push = tn.push,
        peek = tn.peek,
        skip = tn.skip,
        cmnt = tn.cmnt;

    var head = true,
        pkg,
        imports,
        weakImports,
        syntax,
        isProto3 = false;

    var ptr = root;

    var applyCase = options.keepCase ? function (name) {
        return name;
    } : util.camelCase;

    /* istanbul ignore next */
    function illegal(token, name, insideTryCatch) {
        var filename = parse.filename;
        if (!insideTryCatch) parse.filename = null;
        return Error("illegal " + (name || "token") + " '" + token + "' (" + (filename ? filename + ", " : "") + "line " + tn.line + ")");
    }

    function readString() {
        var values = [],
            token;
        do {
            /* istanbul ignore if */
            if ((token = next()) !== "\"" && token !== "'") throw illegal(token);

            values.push(next());
            skip(token);
            token = peek();
        } while (token === "\"" || token === "'");
        return values.join("");
    }

    function readValue(acceptTypeRef) {
        var token = next();
        switch (token) {
            case "'":
            case "\"":
                push(token);
                return readString();
            case "true":case "TRUE":
                return true;
            case "false":case "FALSE":
                return false;
        }
        try {
            return parseNumber(token, /* insideTryCatch */true);
        } catch (e) {

            /* istanbul ignore else */
            if (acceptTypeRef && typeRefRe.test(token)) return token;

            /* istanbul ignore next */
            throw illegal(token, "value");
        }
    }

    function readRanges(target, acceptStrings) {
        var token, start;
        do {
            if (acceptStrings && ((token = peek()) === "\"" || token === "'")) target.push(readString());else target.push([start = parseId(next()), skip("to", true) ? parseId(next()) : start]);
        } while (skip(",", true));
        skip(";");
    }

    function parseNumber(token, insideTryCatch) {
        var sign = 1;
        if (token.charAt(0) === "-") {
            sign = -1;
            token = token.substring(1);
        }
        switch (token) {
            case "inf":case "INF":case "Inf":
                return sign * Infinity;
            case "nan":case "NAN":case "Nan":case "NaN":
                return NaN;
            case "0":
                return 0;
        }
        if (base10Re.test(token)) return sign * parseInt(token, 10);
        if (base16Re.test(token)) return sign * parseInt(token, 16);
        if (base8Re.test(token)) return sign * parseInt(token, 8);

        /* istanbul ignore else */
        if (numberRe.test(token)) return sign * parseFloat(token);

        /* istanbul ignore next */
        throw illegal(token, "number", insideTryCatch);
    }

    function parseId(token, acceptNegative) {
        switch (token) {
            case "max":case "MAX":case "Max":
                return 536870911;
            case "0":
                return 0;
        }

        /* istanbul ignore if */
        if (!acceptNegative && token.charAt(0) === "-") throw illegal(token, "id");

        if (base10NegRe.test(token)) return parseInt(token, 10);
        if (base16NegRe.test(token)) return parseInt(token, 16);

        /* istanbul ignore else */
        if (base8NegRe.test(token)) return parseInt(token, 8);

        /* istanbul ignore next */
        throw illegal(token, "id");
    }

    function parsePackage() {

        /* istanbul ignore if */
        if (pkg !== undefined) throw illegal("package");

        pkg = next();

        /* istanbul ignore if */
        if (!typeRefRe.test(pkg)) throw illegal(pkg, "name");

        ptr = ptr.define(pkg);
        skip(";");
    }

    function parseImport() {
        var token = peek();
        var whichImports;
        switch (token) {
            case "weak":
                whichImports = weakImports || (weakImports = []);
                next();
                break;
            case "public":
                next();
            // eslint-disable-line no-fallthrough
            default:
                whichImports = imports || (imports = []);
                break;
        }
        token = readString();
        skip(";");
        whichImports.push(token);
    }

    function parseSyntax() {
        skip("=");
        syntax = readString();
        isProto3 = syntax === "proto3";

        /* istanbul ignore if */
        if (!isProto3 && syntax !== "proto2") throw illegal(syntax, "syntax");

        skip(";");
    }

    function parseCommon(parent, token) {
        switch (token) {

            case "option":
                parseOption(parent, token);
                skip(";");
                return true;

            case "message":
                parseType(parent, token);
                return true;

            case "enum":
                parseEnum(parent, token);
                return true;

            case "service":
                parseService(parent, token);
                return true;

            case "extend":
                parseExtension(parent, token);
                return true;
        }
        return false;
    }

    function ifBlock(obj, fnIf, fnElse) {
        var trailingLine = tn.line;
        if (obj) {
            obj.comment = cmnt(); // try block-type comment
            obj.filename = parse.filename;
        }
        if (skip("{", true)) {
            var token;
            while ((token = next()) !== "}") {
                fnIf(token);
            }skip(";", true);
        } else {
            if (fnElse) fnElse();
            skip(";");
            if (obj && typeof obj.comment !== "string") obj.comment = cmnt(trailingLine); // try line-type comment if no block
        }
    }

    function parseType(parent, token) {

        /* istanbul ignore if */
        if (!nameRe.test(token = next())) throw illegal(token, "type name");

        var type = new Type(token);
        ifBlock(type, function parseType_block(token) {
            if (parseCommon(type, token)) return;

            switch (token) {

                case "map":
                    parseMapField(type, token);
                    break;

                case "required":
                case "optional":
                case "repeated":
                    parseField(type, token);
                    break;

                case "oneof":
                    parseOneOf(type, token);
                    break;

                case "extensions":
                    readRanges(type.extensions || (type.extensions = []));
                    break;

                case "reserved":
                    readRanges(type.reserved || (type.reserved = []), true);
                    break;

                default:
                    /* istanbul ignore if */
                    if (!isProto3 || !typeRefRe.test(token)) throw illegal(token);

                    push(token);
                    parseField(type, "optional");
                    break;
            }
        });
        parent.add(type);
    }

    function parseField(parent, rule, extend) {
        var type = next();
        if (type === "group") {
            parseGroup(parent, rule);
            return;
        }

        /* istanbul ignore if */
        if (!typeRefRe.test(type)) throw illegal(type, "type");

        var name = next();

        /* istanbul ignore if */
        if (!nameRe.test(name)) throw illegal(name, "name");

        name = applyCase(name);
        skip("=");

        var field = new Field(name, parseId(next()), type, rule, extend);
        ifBlock(field, function parseField_block(token) {

            /* istanbul ignore else */
            if (token === "option") {
                parseOption(field, token);
                skip(";");
            } else throw illegal(token);
        }, function parseField_line() {
            parseInlineOptions(field);
        });
        parent.add(field);

        // JSON defaults to packed=true if not set so we have to set packed=false explicity when
        // parsing proto2 descriptors without the option, where applicable. This must be done for
        // all known packable types and anything that could be an enum (= is not a basic type).
        if (!isProto3 && field.repeated && (types.packed[type] !== undefined || types.basic[type] === undefined)) field.setOption("packed", false, /* ifNotSet */true);
    }

    function parseGroup(parent, rule) {
        var name = next();

        /* istanbul ignore if */
        if (!nameRe.test(name)) throw illegal(name, "name");

        var fieldName = util.lcFirst(name);
        if (name === fieldName) name = util.ucFirst(name);
        skip("=");
        var id = parseId(next());
        var type = new Type(name);
        type.group = true;
        var field = new Field(fieldName, id, name, rule);
        field.filename = parse.filename;
        ifBlock(type, function parseGroup_block(token) {
            switch (token) {

                case "option":
                    parseOption(type, token);
                    skip(";");
                    break;

                case "required":
                case "optional":
                case "repeated":
                    parseField(type, token);
                    break;

                /* istanbul ignore next */
                default:
                    throw illegal(token); // there are no groups with proto3 semantics
            }
        });
        parent.add(type).add(field);
    }

    function parseMapField(parent) {
        skip("<");
        var keyType = next();

        /* istanbul ignore if */
        if (types.mapKey[keyType] === undefined) throw illegal(keyType, "type");

        skip(",");
        var valueType = next();

        /* istanbul ignore if */
        if (!typeRefRe.test(valueType)) throw illegal(valueType, "type");

        skip(">");
        var name = next();

        /* istanbul ignore if */
        if (!nameRe.test(name)) throw illegal(name, "name");

        skip("=");
        var field = new MapField(applyCase(name), parseId(next()), keyType, valueType);
        ifBlock(field, function parseMapField_block(token) {

            /* istanbul ignore else */
            if (token === "option") {
                parseOption(field, token);
                skip(";");
            } else throw illegal(token);
        }, function parseMapField_line() {
            parseInlineOptions(field);
        });
        parent.add(field);
    }

    function parseOneOf(parent, token) {

        /* istanbul ignore if */
        if (!nameRe.test(token = next())) throw illegal(token, "name");

        var oneof = new OneOf(applyCase(token));
        ifBlock(oneof, function parseOneOf_block(token) {
            if (token === "option") {
                parseOption(oneof, token);
                skip(";");
            } else {
                push(token);
                parseField(oneof, "optional");
            }
        });
        parent.add(oneof);
    }

    function parseEnum(parent, token) {

        /* istanbul ignore if */
        if (!nameRe.test(token = next())) throw illegal(token, "name");

        var enm = new Enum(token);
        ifBlock(enm, function parseEnum_block(token) {
            switch (token) {
                case "option":
                    parseOption(enm, token);
                    skip(";");
                    break;

                case "reserved":
                    readRanges(enm.reserved || (enm.reserved = []), true);
                    break;

                default:
                    parseEnumValue(enm, token);
            }
        });
        parent.add(enm);
    }

    function parseEnumValue(parent, token) {

        /* istanbul ignore if */
        if (!nameRe.test(token)) throw illegal(token, "name");

        skip("=");
        var value = parseId(next(), true),
            dummy = {};
        ifBlock(dummy, function parseEnumValue_block(token) {

            /* istanbul ignore else */
            if (token === "option") {
                parseOption(dummy, token); // skip
                skip(";");
            } else throw illegal(token);
        }, function parseEnumValue_line() {
            parseInlineOptions(dummy); // skip
        });
        parent.add(token, value, dummy.comment);
    }

    function parseOption(parent, token) {
        var isCustom = skip("(", true);

        /* istanbul ignore if */
        if (!typeRefRe.test(token = next())) throw illegal(token, "name");

        var name = token;
        if (isCustom) {
            skip(")");
            name = "(" + name + ")";
            token = peek();
            if (fqTypeRefRe.test(token)) {
                name += token;
                next();
            }
        }
        skip("=");
        parseOptionValue(parent, name);
    }

    function parseOptionValue(parent, name) {
        if (skip("{", true)) {
            // { a: "foo" b { c: "bar" } }
            do {
                /* istanbul ignore if */
                if (!nameRe.test(token = next())) throw illegal(token, "name");

                if (peek() === "{") parseOptionValue(parent, name + "." + token);else {
                    skip(":");
                    if (peek() === "{") parseOptionValue(parent, name + "." + token);else setOption(parent, name + "." + token, readValue(true));
                }
            } while (!skip("}", true));
        } else setOption(parent, name, readValue(true));
        // Does not enforce a delimiter to be universal
    }

    function setOption(parent, name, value) {
        if (parent.setOption) parent.setOption(name, value);
    }

    function parseInlineOptions(parent) {
        if (skip("[", true)) {
            do {
                parseOption(parent, "option");
            } while (skip(",", true));
            skip("]");
        }
        return parent;
    }

    function parseService(parent, token) {

        /* istanbul ignore if */
        if (!nameRe.test(token = next())) throw illegal(token, "service name");

        var service = new Service(token);
        ifBlock(service, function parseService_block(token) {
            if (parseCommon(service, token)) return;

            /* istanbul ignore else */
            if (token === "rpc") parseMethod(service, token);else throw illegal(token);
        });
        parent.add(service);
    }

    function parseMethod(parent, token) {
        var type = token;

        /* istanbul ignore if */
        if (!nameRe.test(token = next())) throw illegal(token, "name");

        var name = token,
            requestType,
            requestStream,
            responseType,
            responseStream;

        skip("(");
        if (skip("stream", true)) requestStream = true;

        /* istanbul ignore if */
        if (!typeRefRe.test(token = next())) throw illegal(token);

        requestType = token;
        skip(")");skip("returns");skip("(");
        if (skip("stream", true)) responseStream = true;

        /* istanbul ignore if */
        if (!typeRefRe.test(token = next())) throw illegal(token);

        responseType = token;
        skip(")");

        var method = new Method(name, type, requestType, responseType, requestStream, responseStream);
        ifBlock(method, function parseMethod_block(token) {

            /* istanbul ignore else */
            if (token === "option") {
                parseOption(method, token);
                skip(";");
            } else throw illegal(token);
        });
        parent.add(method);
    }

    function parseExtension(parent, token) {

        /* istanbul ignore if */
        if (!typeRefRe.test(token = next())) throw illegal(token, "reference");

        var reference = token;
        ifBlock(null, function parseExtension_block(token) {
            switch (token) {

                case "required":
                case "repeated":
                case "optional":
                    parseField(parent, token, reference);
                    break;

                default:
                    /* istanbul ignore if */
                    if (!isProto3 || !typeRefRe.test(token)) throw illegal(token);
                    push(token);
                    parseField(parent, "optional", reference);
                    break;
            }
        });
    }

    var token;
    while ((token = next()) !== null) {
        switch (token) {

            case "package":

                /* istanbul ignore if */
                if (!head) throw illegal(token);

                parsePackage();
                break;

            case "import":

                /* istanbul ignore if */
                if (!head) throw illegal(token);

                parseImport();
                break;

            case "syntax":

                /* istanbul ignore if */
                if (!head) throw illegal(token);

                parseSyntax();
                break;

            case "option":

                /* istanbul ignore if */
                if (!head) throw illegal(token);

                parseOption(ptr, token);
                skip(";");
                break;

            default:

                /* istanbul ignore else */
                if (parseCommon(ptr, token)) {
                    head = false;
                    continue;
                }

                /* istanbul ignore next */
                throw illegal(token);
        }
    }

    parse.filename = null;
    return {
        "package": pkg,
        "imports": imports,
        weakImports: weakImports,
        syntax: syntax,
        root: root
    };
}

/**
 * Parses the given .proto source and returns an object with the parsed contents.
 * @name parse
 * @function
 * @param {string} source Source contents
 * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.
 * @returns {IParserResult} Parser result
 * @property {string} filename=null Currently processing file name for error reporting, if known
 * @property {IParseOptions} defaults Default {@link IParseOptions}
 * @variation 2
 */
parse._configure = function () {
    tokenize = __webpack_require__(170), Root = __webpack_require__(67), Type = __webpack_require__(36), Field = __webpack_require__(24), MapField = __webpack_require__(98), OneOf = __webpack_require__(53), Enum = __webpack_require__(13), Service = __webpack_require__(68), Method = __webpack_require__(99), types = __webpack_require__(38), util = __webpack_require__(1);
};

/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = tokenize;

var delimRe = /[\s{}=;:[\],'"()<>]/g,
    stringDoubleRe = /(?:"([^"\\]*(?:\\.[^"\\]*)*)")/g,
    stringSingleRe = /(?:'([^'\\]*(?:\\.[^'\\]*)*)')/g;

var setCommentRe = /^ *[*/]+ */,
    setCommentAltRe = /^\s*\*?\/*/,
    setCommentSplitRe = /\n/g,
    whitespaceRe = /\s/,
    unescapeRe = /\\(.?)/g;

var unescapeMap = {
    "0": "\0",
    "r": "\r",
    "n": "\n",
    "t": "\t"
};

/**
 * Unescapes a string.
 * @param {string} str String to unescape
 * @returns {string} Unescaped string
 * @property {Object.<string,string>} map Special characters map
 * @memberof tokenize
 */
function unescape(str) {
    return str.replace(unescapeRe, function ($0, $1) {
        switch ($1) {
            case "\\":
            case "":
                return $1;
            default:
                return unescapeMap[$1] || "";
        }
    });
}

tokenize.unescape = unescape;

/**
 * Gets the next token and advances.
 * @typedef TokenizerHandleNext
 * @type {function}
 * @returns {string|null} Next token or `null` on eof
 */

/**
 * Peeks for the next token.
 * @typedef TokenizerHandlePeek
 * @type {function}
 * @returns {string|null} Next token or `null` on eof
 */

/**
 * Pushes a token back to the stack.
 * @typedef TokenizerHandlePush
 * @type {function}
 * @param {string} token Token
 * @returns {undefined}
 */

/**
 * Skips the next token.
 * @typedef TokenizerHandleSkip
 * @type {function}
 * @param {string} expected Expected token
 * @param {boolean} [optional=false] If optional
 * @returns {boolean} Whether the token matched
 * @throws {Error} If the token didn't match and is not optional
 */

/**
 * Gets the comment on the previous line or, alternatively, the line comment on the specified line.
 * @typedef TokenizerHandleCmnt
 * @type {function}
 * @param {number} [line] Line number
 * @returns {string|null} Comment text or `null` if none
 */

/**
 * Handle object returned from {@link tokenize}.
 * @interface ITokenizerHandle
 * @property {TokenizerHandleNext} next Gets the next token and advances (`null` on eof)
 * @property {TokenizerHandlePeek} peek Peeks for the next token (`null` on eof)
 * @property {TokenizerHandlePush} push Pushes a token back to the stack
 * @property {TokenizerHandleSkip} skip Skips a token, returns its presence and advances or, if non-optional and not present, throws
 * @property {TokenizerHandleCmnt} cmnt Gets the comment on the previous line or the line comment on the specified line, if any
 * @property {number} line Current line number
 */

/**
 * Tokenizes the given .proto source and returns an object with useful utility functions.
 * @param {string} source Source contents
 * @param {boolean} alternateCommentMode Whether we should activate alternate comment parsing mode.
 * @returns {ITokenizerHandle} Tokenizer handle
 */
function tokenize(source, alternateCommentMode) {
    /* eslint-disable callback-return */
    source = source.toString();

    var offset = 0,
        length = source.length,
        line = 1,
        commentType = null,
        commentText = null,
        commentLine = 0,
        commentLineEmpty = false;

    var stack = [];

    var stringDelim = null;

    /* istanbul ignore next */
    /**
     * Creates an error for illegal syntax.
     * @param {string} subject Subject
     * @returns {Error} Error created
     * @inner
     */
    function illegal(subject) {
        return Error("illegal " + subject + " (line " + line + ")");
    }

    /**
     * Reads a string till its end.
     * @returns {string} String read
     * @inner
     */
    function readString() {
        var re = stringDelim === "'" ? stringSingleRe : stringDoubleRe;
        re.lastIndex = offset - 1;
        var match = re.exec(source);
        if (!match) throw illegal("string");
        offset = re.lastIndex;
        push(stringDelim);
        stringDelim = null;
        return unescape(match[1]);
    }

    /**
     * Gets the character at `pos` within the source.
     * @param {number} pos Position
     * @returns {string} Character
     * @inner
     */
    function charAt(pos) {
        return source.charAt(pos);
    }

    /**
     * Sets the current comment text.
     * @param {number} start Start offset
     * @param {number} end End offset
     * @returns {undefined}
     * @inner
     */
    function setComment(start, end) {
        commentType = source.charAt(start++);
        commentLine = line;
        commentLineEmpty = false;
        var lookback;
        if (alternateCommentMode) {
            lookback = 2; // alternate comment parsing: "//" or "/*"
        } else {
            lookback = 3; // "///" or "/**"
        }
        var commentOffset = start - lookback,
            c;
        do {
            if (--commentOffset < 0 || (c = source.charAt(commentOffset)) === "\n") {
                commentLineEmpty = true;
                break;
            }
        } while (c === " " || c === "\t");
        var lines = source.substring(start, end).split(setCommentSplitRe);
        for (var i = 0; i < lines.length; ++i) {
            lines[i] = lines[i].replace(alternateCommentMode ? setCommentAltRe : setCommentRe, "").trim();
        }commentText = lines.join("\n").trim();
    }

    function isDoubleSlashCommentLine(startOffset) {
        var endOffset = findEndOfLine(startOffset);

        // see if remaining line matches comment pattern
        var lineText = source.substring(startOffset, endOffset);
        // look for 1 or 2 slashes since startOffset would already point past
        // the first slash that started the comment.
        var isComment = /^\s*\/{1,2}/.test(lineText);
        return isComment;
    }

    function findEndOfLine(cursor) {
        // find end of cursor's line
        var endOffset = cursor;
        while (endOffset < length && charAt(endOffset) !== "\n") {
            endOffset++;
        }
        return endOffset;
    }

    /**
     * Obtains the next token.
     * @returns {string|null} Next token or `null` on eof
     * @inner
     */
    function next() {
        if (stack.length > 0) return stack.shift();
        if (stringDelim) return readString();
        var repeat, prev, curr, start, isDoc;
        do {
            if (offset === length) return null;
            repeat = false;
            while (whitespaceRe.test(curr = charAt(offset))) {
                if (curr === "\n") ++line;
                if (++offset === length) return null;
            }

            if (charAt(offset) === "/") {
                if (++offset === length) {
                    throw illegal("comment");
                }
                if (charAt(offset) === "/") {
                    // Line
                    if (!alternateCommentMode) {
                        // check for triple-slash comment
                        isDoc = charAt(start = offset + 1) === "/";

                        while (charAt(++offset) !== "\n") {
                            if (offset === length) {
                                return null;
                            }
                        }
                        ++offset;
                        if (isDoc) {
                            setComment(start, offset - 1);
                        }
                        ++line;
                        repeat = true;
                    } else {
                        // check for double-slash comments, consolidating consecutive lines
                        start = offset;
                        isDoc = false;
                        if (isDoubleSlashCommentLine(offset)) {
                            isDoc = true;
                            do {
                                offset = findEndOfLine(offset);
                                if (offset === length) {
                                    break;
                                }
                                offset++;
                            } while (isDoubleSlashCommentLine(offset));
                        } else {
                            offset = Math.min(length, findEndOfLine(offset) + 1);
                        }
                        if (isDoc) {
                            setComment(start, offset);
                        }
                        line++;
                        repeat = true;
                    }
                } else if ((curr = charAt(offset)) === "*") {
                    /* Block */
                    // check for /** (regular comment mode) or /* (alternate comment mode)
                    start = offset + 1;
                    isDoc = alternateCommentMode || charAt(start) === "*";
                    do {
                        if (curr === "\n") {
                            ++line;
                        }
                        if (++offset === length) {
                            throw illegal("comment");
                        }
                        prev = curr;
                        curr = charAt(offset);
                    } while (prev !== "*" || curr !== "/");
                    ++offset;
                    if (isDoc) {
                        setComment(start, offset - 2);
                    }
                    repeat = true;
                } else {
                    return "/";
                }
            }
        } while (repeat);

        // offset !== length if we got here

        var end = offset;
        delimRe.lastIndex = 0;
        var delim = delimRe.test(charAt(end++));
        if (!delim) while (end < length && !delimRe.test(charAt(end))) {
            ++end;
        }var token = source.substring(offset, offset = end);
        if (token === "\"" || token === "'") stringDelim = token;
        return token;
    }

    /**
     * Pushes a token back to the stack.
     * @param {string} token Token
     * @returns {undefined}
     * @inner
     */
    function push(token) {
        stack.push(token);
    }

    /**
     * Peeks for the next token.
     * @returns {string|null} Token or `null` on eof
     * @inner
     */
    function peek() {
        if (!stack.length) {
            var token = next();
            if (token === null) return null;
            push(token);
        }
        return stack[0];
    }

    /**
     * Skips a token.
     * @param {string} expected Expected token
     * @param {boolean} [optional=false] Whether the token is optional
     * @returns {boolean} `true` when skipped, `false` if not
     * @throws {Error} When a required token is not present
     * @inner
     */
    function skip(expected, optional) {
        var actual = peek(),
            equals = actual === expected;
        if (equals) {
            next();
            return true;
        }
        if (!optional) throw illegal("token '" + actual + "', '" + expected + "' expected");
        return false;
    }

    /**
     * Gets a comment.
     * @param {number} [trailingLine] Line number if looking for a trailing comment
     * @returns {string|null} Comment text
     * @inner
     */
    function cmnt(trailingLine) {
        var ret = null;
        if (trailingLine === undefined) {
            if (commentLine === line - 1 && (alternateCommentMode || commentType === "*" || commentLineEmpty)) {
                ret = commentText;
            }
        } else {
            /* istanbul ignore else */
            if (commentLine < trailingLine) {
                peek();
            }
            if (commentLine === trailingLine && !commentLineEmpty && (alternateCommentMode || commentType === "/")) {
                ret = commentText;
            }
        }
        return ret;
    }

    return Object.defineProperty({
        next: next,
        peek: peek,
        push: push,
        skip: skip,
        cmnt: cmnt
    }, "line", {
        get: function get() {
            return line;
        }
    });
    /* eslint-enable callback-return */
}

/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _create = __webpack_require__(6);

var _create2 = _interopRequireDefault(_create);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = Service;
var util = __webpack_require__(1);

// Extends EventEmitter
(Service.prototype = (0, _create2.default)(util.EventEmitter.prototype)).constructor = Service;

/**
 * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.
 *
 * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.
 * @typedef rpc.ServiceMethodCallback
 * @template TRes extends Message<TRes>
 * @type {function}
 * @param {Error|null} error Error, if any
 * @param {TRes} [response] Response message
 * @returns {undefined}
 */

/**
 * A service method part of a {@link rpc.Service} as created by {@link Service.create}.
 * @typedef rpc.ServiceMethod
 * @template TReq extends Message<TReq>
 * @template TRes extends Message<TRes>
 * @type {function}
 * @param {TReq|Properties<TReq>} request Request message or plain object
 * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message
 * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`
 */

/**
 * Constructs a new RPC service instance.
 * @classdesc An RPC service as returned by {@link Service#create}.
 * @exports rpc.Service
 * @extends util.EventEmitter
 * @constructor
 * @param {RPCImpl} rpcImpl RPC implementation
 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
 */
function Service(rpcImpl, requestDelimited, responseDelimited) {

    if (typeof rpcImpl !== "function") throw TypeError("rpcImpl must be a function");

    util.EventEmitter.call(this);

    /**
     * RPC implementation. Becomes `null` once the service is ended.
     * @type {RPCImpl|null}
     */
    this.rpcImpl = rpcImpl;

    /**
     * Whether requests are length-delimited.
     * @type {boolean}
     */
    this.requestDelimited = Boolean(requestDelimited);

    /**
     * Whether responses are length-delimited.
     * @type {boolean}
     */
    this.responseDelimited = Boolean(responseDelimited);
}

/**
 * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.
 * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method
 * @param {Constructor<TReq>} requestCtor Request constructor
 * @param {Constructor<TRes>} responseCtor Response constructor
 * @param {TReq|Properties<TReq>} request Request message or plain object
 * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback
 * @returns {undefined}
 * @template TReq extends Message<TReq>
 * @template TRes extends Message<TRes>
 */
Service.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {

    if (!request) throw TypeError("request must be specified");

    var self = this;
    if (!callback) return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);

    if (!self.rpcImpl) {
        setTimeout(function () {
            callback(Error("already ended"));
        }, 0);
        return undefined;
    }

    try {
        return self.rpcImpl(method, requestCtor[self.requestDelimited ? "encodeDelimited" : "encode"](request).finish(), function rpcCallback(err, response) {

            if (err) {
                self.emit("error", err, method);
                return callback(err);
            }

            if (response === null) {
                self.end( /* endedByRPC */true);
                return undefined;
            }

            if (!(response instanceof responseCtor)) {
                try {
                    response = responseCtor[self.responseDelimited ? "decodeDelimited" : "decode"](response);
                } catch (err) {
                    self.emit("error", err, method);
                    return callback(err);
                }
            }

            self.emit("data", response, method);
            return callback(null, response);
        });
    } catch (err) {
        self.emit("error", err, method);
        setTimeout(function () {
            callback(err);
        }, 0);
        return undefined;
    }
};

/**
 * Ends this service and emits the `end` event.
 * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.
 * @returns {rpc.Service} `this`
 */
Service.prototype.end = function end(endedByRPC) {
    if (this.rpcImpl) {
        if (!endedByRPC) // signal end to rpcImpl
            this.rpcImpl(null, null, null);
        this.rpcImpl = null;
        this.emit("end").off();
    }
    return this;
};

/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = common;

var commonRe = /\/|\./;

/**
 * Provides common type definitions.
 * Can also be used to provide additional google types or your own custom types.
 * @param {string} name Short name as in `google/protobuf/[name].proto` or full file name
 * @param {Object.<string,*>} json JSON definition within `google.protobuf` if a short name, otherwise the file's root definition
 * @returns {undefined}
 * @property {INamespace} google/protobuf/any.proto Any
 * @property {INamespace} google/protobuf/duration.proto Duration
 * @property {INamespace} google/protobuf/empty.proto Empty
 * @property {INamespace} google/protobuf/field_mask.proto FieldMask
 * @property {INamespace} google/protobuf/struct.proto Struct, Value, NullValue and ListValue
 * @property {INamespace} google/protobuf/timestamp.proto Timestamp
 * @property {INamespace} google/protobuf/wrappers.proto Wrappers
 * @example
 * // manually provides descriptor.proto (assumes google/protobuf/ namespace and .proto extension)
 * protobuf.common("descriptor", descriptorJson);
 *
 * // manually provides a custom definition (uses my.foo namespace)
 * protobuf.common("my/foo/bar.proto", myFooBarJson);
 */
function common(name, json) {
    if (!commonRe.test(name)) {
        name = "google/protobuf/" + name + ".proto";
        json = { nested: { google: { nested: { protobuf: { nested: json } } } } };
    }
    common[name] = json;
}

// Not provided because of limited use (feel free to discuss or to provide yourself):
//
// google/protobuf/descriptor.proto
// google/protobuf/source_context.proto
// google/protobuf/type.proto
//
// Stripped and pre-parsed versions of these non-bundled files are instead available as part of
// the repository or package within the google/protobuf directory.

common("any", {

    /**
     * Properties of a google.protobuf.Any message.
     * @interface IAny
     * @type {Object}
     * @property {string} [typeUrl]
     * @property {Uint8Array} [bytes]
     * @memberof common
     */
    Any: {
        fields: {
            type_url: {
                type: "string",
                id: 1
            },
            value: {
                type: "bytes",
                id: 2
            }
        }
    }
});

var timeType;

common("duration", {

    /**
     * Properties of a google.protobuf.Duration message.
     * @interface IDuration
     * @type {Object}
     * @property {number|Long} [seconds]
     * @property {number} [nanos]
     * @memberof common
     */
    Duration: timeType = {
        fields: {
            seconds: {
                type: "int64",
                id: 1
            },
            nanos: {
                type: "int32",
                id: 2
            }
        }
    }
});

common("timestamp", {

    /**
     * Properties of a google.protobuf.Timestamp message.
     * @interface ITimestamp
     * @type {Object}
     * @property {number|Long} [seconds]
     * @property {number} [nanos]
     * @memberof common
     */
    Timestamp: timeType
});

common("empty", {

    /**
     * Properties of a google.protobuf.Empty message.
     * @interface IEmpty
     * @memberof common
     */
    Empty: {
        fields: {}
    }
});

common("struct", {

    /**
     * Properties of a google.protobuf.Struct message.
     * @interface IStruct
     * @type {Object}
     * @property {Object.<string,IValue>} [fields]
     * @memberof common
     */
    Struct: {
        fields: {
            fields: {
                keyType: "string",
                type: "Value",
                id: 1
            }
        }
    },

    /**
     * Properties of a google.protobuf.Value message.
     * @interface IValue
     * @type {Object}
     * @property {string} [kind]
     * @property {0} [nullValue]
     * @property {number} [numberValue]
     * @property {string} [stringValue]
     * @property {boolean} [boolValue]
     * @property {IStruct} [structValue]
     * @property {IListValue} [listValue]
     * @memberof common
     */
    Value: {
        oneofs: {
            kind: {
                oneof: ["nullValue", "numberValue", "stringValue", "boolValue", "structValue", "listValue"]
            }
        },
        fields: {
            nullValue: {
                type: "NullValue",
                id: 1
            },
            numberValue: {
                type: "double",
                id: 2
            },
            stringValue: {
                type: "string",
                id: 3
            },
            boolValue: {
                type: "bool",
                id: 4
            },
            structValue: {
                type: "Struct",
                id: 5
            },
            listValue: {
                type: "ListValue",
                id: 6
            }
        }
    },

    NullValue: {
        values: {
            NULL_VALUE: 0
        }
    },

    /**
     * Properties of a google.protobuf.ListValue message.
     * @interface IListValue
     * @type {Object}
     * @property {Array.<IValue>} [values]
     * @memberof common
     */
    ListValue: {
        fields: {
            values: {
                rule: "repeated",
                type: "Value",
                id: 1
            }
        }
    }
});

common("wrappers", {

    /**
     * Properties of a google.protobuf.DoubleValue message.
     * @interface IDoubleValue
     * @type {Object}
     * @property {number} [value]
     * @memberof common
     */
    DoubleValue: {
        fields: {
            value: {
                type: "double",
                id: 1
            }
        }
    },

    /**
     * Properties of a google.protobuf.FloatValue message.
     * @interface IFloatValue
     * @type {Object}
     * @property {number} [value]
     * @memberof common
     */
    FloatValue: {
        fields: {
            value: {
                type: "float",
                id: 1
            }
        }
    },

    /**
     * Properties of a google.protobuf.Int64Value message.
     * @interface IInt64Value
     * @type {Object}
     * @property {number|Long} [value]
     * @memberof common
     */
    Int64Value: {
        fields: {
            value: {
                type: "int64",
                id: 1
            }
        }
    },

    /**
     * Properties of a google.protobuf.UInt64Value message.
     * @interface IUInt64Value
     * @type {Object}
     * @property {number|Long} [value]
     * @memberof common
     */
    UInt64Value: {
        fields: {
            value: {
                type: "uint64",
                id: 1
            }
        }
    },

    /**
     * Properties of a google.protobuf.Int32Value message.
     * @interface IInt32Value
     * @type {Object}
     * @property {number} [value]
     * @memberof common
     */
    Int32Value: {
        fields: {
            value: {
                type: "int32",
                id: 1
            }
        }
    },

    /**
     * Properties of a google.protobuf.UInt32Value message.
     * @interface IUInt32Value
     * @type {Object}
     * @property {number} [value]
     * @memberof common
     */
    UInt32Value: {
        fields: {
            value: {
                type: "uint32",
                id: 1
            }
        }
    },

    /**
     * Properties of a google.protobuf.BoolValue message.
     * @interface IBoolValue
     * @type {Object}
     * @property {boolean} [value]
     * @memberof common
     */
    BoolValue: {
        fields: {
            value: {
                type: "bool",
                id: 1
            }
        }
    },

    /**
     * Properties of a google.protobuf.StringValue message.
     * @interface IStringValue
     * @type {Object}
     * @property {string} [value]
     * @memberof common
     */
    StringValue: {
        fields: {
            value: {
                type: "string",
                id: 1
            }
        }
    },

    /**
     * Properties of a google.protobuf.BytesValue message.
     * @interface IBytesValue
     * @type {Object}
     * @property {Uint8Array} [value]
     * @memberof common
     */
    BytesValue: {
        fields: {
            value: {
                type: "bytes",
                id: 1
            }
        }
    }
});

common("field_mask", {

    /**
     * Properties of a google.protobuf.FieldMask message.
     * @interface IDoubleValue
     * @type {Object}
     * @property {number} [value]
     * @memberof common
     */
    FieldMask: {
        fields: {
            paths: {
                rule: "repeated",
                type: "string",
                id: 1
            }
        }
    }
});

/**
 * Gets the root definition of the specified common proto file.
 *
 * Bundled definitions are:
 * - google/protobuf/any.proto
 * - google/protobuf/duration.proto
 * - google/protobuf/empty.proto
 * - google/protobuf/field_mask.proto
 * - google/protobuf/struct.proto
 * - google/protobuf/timestamp.proto
 * - google/protobuf/wrappers.proto
 *
 * @param {string} file Proto file name
 * @returns {INamespace|null} Root definition or `null` if not defined
 */
common.get = function get(file) {
    return common[file] || null;
};

/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Created by zhangmiao on 2018/3/13.
 */

module.exports = Reader;

var util = __webpack_require__(1);

var LongBits;
var utf8;

var BufferReader;

function indexOutOfRange(reader, writeLength) {
    return RangeError("index out of range: " + reader.pos + " + " + (writeLength || 1) + " > " + reader.len);
}

function Reader(buffer) {

    /**
     * Read buffer.
     * @type {Uint8Array}
     */
    this.buf = buffer;

    /**
     * Read buffer position.
     * @type {number}
     */
    this.pos = 0;

    /**
     * Read buffer length.
     * @type {number}
     */
    this.len = buffer.length;
}

var create_array = typeof Uint8Array !== "undefined" ? function create_typed_array(buffer) {
    if (buffer instanceof Uint8Array || Array.isArray(buffer)) return new Reader(buffer);
    if (typeof ArrayBuffer !== "undefined" && buffer instanceof ArrayBuffer) //增加ArrayBuffer构建
        return new Reader(new Uint8Array(buffer));
    throw Error("illegal buffer");
}
/* istanbul ignore next */
: function create_array(buffer) {
    if (Array.isArray(buffer)) return new Reader(buffer);
    throw Error("illegal buffer");
};

Reader.create = util.Buffer ? function create_buffer_setup(buffer) {
    return (Reader.create = function create_buffer(buffer) {
        return util.Buffer.isBuffer(buffer) ? new BufferReader(buffer)
        /* istanbul ignore next */
        : create_array(buffer);
    })(buffer);
}
/* istanbul ignore next */
: create_array;

Reader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */util.Array.prototype.slice;

Reader.prototype.uint32 = function read_uint32_setup() {
    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)
    return function read_uint32() {
        value = (this.buf[this.pos] & 127) >>> 0;if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) << 7) >>> 0;if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0;if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0;if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 15) << 28) >>> 0;if (this.buf[this.pos++] < 128) return value;

        /* istanbul ignore if */
        if ((this.pos += 5) > this.len) {
            this.pos = this.len;
            throw indexOutOfRange(this, 10);
        }
        return value;
    };
}();

Reader.prototype.int32 = function read_int32() {
    return this.uint32() | 0;
};

Reader.prototype.sint32 = function read_sint32() {
    var value = this.uint32();
    return value >>> 1 ^ -(value & 1) | 0;
};

function readLongVarint() {
    // tends to deopt with local vars for octet etc.
    var bits = new LongBits(0, 0);
    var i = 0;
    if (this.len - this.pos > 4) {
        // fast route (lo)
        for (; i < 4; ++i) {
            // 1st..4th
            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
            if (this.buf[this.pos++] < 128) return bits;
        }
        // 5th
        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;
        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >> 4) >>> 0;
        if (this.buf[this.pos++] < 128) return bits;
        i = 0;
    } else {
        for (; i < 3; ++i) {
            /* istanbul ignore if */
            if (this.pos >= this.len) throw indexOutOfRange(this);
            // 1st..3th
            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
            if (this.buf[this.pos++] < 128) return bits;
        }
        // 4th
        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;
        return bits;
    }
    if (this.len - this.pos > 4) {
        // fast route (hi)
        for (; i < 5; ++i) {
            // 6th..10th
            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
            if (this.buf[this.pos++] < 128) return bits;
        }
    } else {
        for (; i < 5; ++i) {
            /* istanbul ignore if */
            if (this.pos >= this.len) throw indexOutOfRange(this);
            // 6th..10th
            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
            if (this.buf[this.pos++] < 128) return bits;
        }
    }
    /* istanbul ignore next */
    throw Error("invalid varint encoding");
}

Reader.prototype.bool = function read_bool() {
    return this.uint32() !== 0;
};

function readFixed32_end(buf, end) {
    // note that this uses `end`, not `pos`
    return (buf[end - 4] | buf[end - 3] << 8 | buf[end - 2] << 16 | buf[end - 1] << 24) >>> 0;
}

Reader.prototype.fixed32 = function read_fixed32() {

    /* istanbul ignore if */
    if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);

    return readFixed32_end(this.buf, this.pos += 4);
};

Reader.prototype.sfixed32 = function read_sfixed32() {

    /* istanbul ignore if */
    if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);

    return readFixed32_end(this.buf, this.pos += 4) | 0;
};

/* eslint-disable no-invalid-this */

function readFixed64() /* this: Reader */{

    /* istanbul ignore if */
    if (this.pos + 8 > this.len) throw indexOutOfRange(this, 8);

    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));
}

Reader.prototype.float = function read_float() {

    /* istanbul ignore if */
    if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);

    var value = util.float.readFloatLE(this.buf, this.pos);
    this.pos += 4;
    return value;
};

Reader.prototype.double = function read_double() {

    /* istanbul ignore if */
    if (this.pos + 8 > this.len) throw indexOutOfRange(this, 4);

    var value = util.float.readDoubleLE(this.buf, this.pos);
    this.pos += 8;
    return value;
};

Reader.prototype.bytes = function read_bytes() {
    var length = this.uint32(),
        start = this.pos,
        end = this.pos + length;

    /* istanbul ignore if */
    if (end > this.len) throw indexOutOfRange(this, length);
    this.pos += length;
    if (Array.isArray(this.buf)) // plain array
        return this.buf.slice(start, end);
    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1
    ? new this.buf.constructor(0) : this._slice.call(this.buf, start, end);
};

Reader.prototype.string = function read_string() {
    var bytes = this.bytes();
    return utf8.read(bytes, 0, bytes.length);
};

Reader.prototype.skip = function skip(length) {
    if (typeof length === "number") {
        /* istanbul ignore if */
        if (this.pos + length > this.len) throw indexOutOfRange(this, length);
        this.pos += length;
    } else {
        do {
            /* istanbul ignore if */
            if (this.pos >= this.len) throw indexOutOfRange(this);
        } while (this.buf[this.pos++] & 128);
    }
    return this;
};

Reader.prototype.skipType = function (wireType) {
    switch (wireType) {
        case 0:
            this.skip();
            break;
        case 1:
            this.skip(8);
            break;
        case 2:
            this.skip(this.uint32());
            break;
        case 3:
            do {
                // eslint-disable-line no-constant-condition
                if ((wireType = this.uint32() & 7) === 4) break;
                this.skipType(wireType);
            } while (true);
            break;
        case 5:
            this.skip(4);
            break;

        /* istanbul ignore next */
        default:
            throw Error("invalid wire type " + wireType + " at offset " + this.pos);
    }
    return this;
};

//这部分可能用不到
Reader._configure = function () {

    //util       = require('./util');
    LongBits = __webpack_require__(97);
    utf8 = __webpack_require__(66);

    var fn = util.Long ? "toLong" : /* istanbul ignore next */"toNumber";
    util.merge(Reader.prototype, {

        int64: function read_int64() {
            return readLongVarint.call(this)[fn](false);
        },

        uint64: function read_uint64() {
            return readLongVarint.call(this)[fn](true);
        },

        sint64: function read_sint64() {
            return readLongVarint.call(this).zzDecode()[fn](false);
        },

        fixed64: function read_fixed64() {
            return readFixed64.call(this)[fn](true);
        },

        sfixed64: function read_sfixed64() {
            return readFixed64.call(this)[fn](false);
        }

    });
};

/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = __webpack_require__(10);

var _typeof3 = _interopRequireDefault(_typeof2);

var _keys = __webpack_require__(7);

var _keys2 = _interopRequireDefault(_keys);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Created by zhangmiao on 2018/3/14.
 */
module.exports = verifier;

var Enum;
var util;

function invalid(field, expected) {
    return field.name + ": " + expected + (field.repeated && expected !== "array" ? "[]" : field.map && expected !== "object" ? "{k:" + field.keyType + "}" : "") + " expected";
}

function verifyValue(field, fieldIndex, ref, options) {
    var _types = options.types;
    if (field.resolvedType) {
        if (field.resolvedType instanceof Enum) {
            var keys = (0, _keys2.default)(field.resolvedType.values);
            if (keys.indexOf(ref) < 0) {
                //没有找到时候
                return invalid(field, "enum value");
            }
        } else {
            var e = _types[fieldIndex].verify(ref);
            if (e) return field.name + "." + e;
        }
    } else {
        switch (field.type) {
            case "int32":
            case "uint32":
            case "sint32":
            case "fixed32":
            case "sfixed32":
                if (!util.isInteger(ref)) return invalid(field, "integer");
                break;
            case "int64":
            case "uint64":
            case "sint64":
            case "fixed64":
            case "sfixed64":
                if (!util.isInteger(ref) && !(ref && util.isInteger(ref.low) && util.isInteger(ref.high))) return invalid(field, "integer|Long");
                break;
            case "float":
            case "double":
                if (typeof ref !== "number") return invalid(field, "number");
                break;
            case "bool":
                if (typeof ref !== "boolean") return invalid(field, "boolean");
                break;
            case "string":
                if (!util.isString(ref)) return invalid(field, "string");
                break;
            case "bytes":
                if (!(ref && typeof ref.length === "number" || util.isString(ref))) return invalid(field, "buffer");
                break;
        }
    }
}

function verifyKey(field, ref) {
    switch (field.keyType) {
        case "int32":
        case "uint32":
        case "sint32":
        case "fixed32":
        case "sfixed32":
            if (!util.key32Re.test(ref)) return invalid(field, "integer key");
            break;
        case "int64":
        case "uint64":
        case "sint64":
        case "fixed64":
        case "sfixed64":
            if (!util.key64Re.test(ref)) return invalid(field, "integer|Long key");
            break;
        case "bool":
            if (!util.key2Re.test(ref)) return invalid(field, "boolean key");
            break;
    }
}

function verifier(mtype) {
    return function (options) {
        return function (m) {
            var invalidDes;
            if ((typeof m === "undefined" ? "undefined" : (0, _typeof3.default)(m)) !== 'object' || m === null) return "object expected";

            var oneofs = mtype.oneofsArray,
                seenFirstField = {};
            var p;
            if (oneofs.length) p = {};
            for (var i = 0; i < mtype.fieldsArray.length; ++i) {
                var field = mtype._fieldsArray[i].resolve(),
                    ref = m[field.name];
                if (!field.optional || ref != null && m.hasOwnProperty(field.name)) {
                    var _i;
                    if (field.map) {
                        if (!util.isObject(ref)) return invalid(field, "object");
                        var k = (0, _keys2.default)(ref);
                        for (_i = 0; _i < k.length; ++_i) {
                            //检查key值的合法性
                            invalidDes = verifyKey(field, k[_i]);
                            if (invalidDes) {
                                return invalidDes;
                            }
                            //检查value值的合法性
                            invalidDes = verifyValue(field, i, ref[k[_i]], options);
                            if (invalidDes) {
                                return invalidDes;
                            }
                        }
                    } else if (field.repeated) {
                        if (!Array.isArray(ref)) {
                            return invalid(field, "array");
                        }

                        for (_i = 0; _i < ref.length; ++_i) {
                            invalidDes = verifyValue(field, i, ref[_i], options);
                            if (invalidDes) {
                                return invalidDes;
                            }
                        }
                    } else {
                        if (field.partOf) {
                            var oneofPropName = field.partOf.name;
                            if (seenFirstField[field.partOf.name] === 1) if (p[oneofPropName] === 1) return field.partOf.name + ": multiple values";
                            p[oneofPropName] = 1;
                        }
                        invalidDes = verifyValue(field, i, ref, options);
                        if (invalidDes) {
                            return invalidDes;
                        }
                    }
                }
            }
        };
    };
}

verifier._configure = function () {
    Enum = __webpack_require__(13);
    util = __webpack_require__(1);
};

/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _keys = __webpack_require__(7);

var _keys2 = _interopRequireDefault(_keys);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Created by zhangmiao on 2018/3/13.
 * 改写原来的googleProtocolBuffer的encode,请不要告我侵犯版权;/(ㄒoㄒ)/~~
 */
var Enum;
var types;

//得到一个编码过程
function encoder(mtype) {
    return function (options) {
        var Writer = options.Writer;
        var _types = options.types;
        var util = options.util;
        return function (message, writer) {
            writer = writer || Writer.create();
            var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);
            for (var i = 0; i < fields.length; i++) {
                var field = fields[i];
                var index = mtype._fieldsArray.indexOf(field);

                var type = field.resolvedType instanceof Enum ? 'uint32' : field.type;
                var wireType = types.basic[type];
                var ref = message[field.name];
                //此处增加枚举型替换,有可能外界传入的枚举是string,转换成number
                if (field.resolvedType instanceof Enum && typeof ref === 'string') {
                    ref = _types[index]['values'][ref];
                }

                //正式进行序列化
                if (field.map) {
                    //有待验证
                    if (ref != null && message.hasOwnProperty(field.name)) {
                        for (var ks = (0, _keys2.default)(ref), l = 0; l < ks.length; ++l) {
                            writer.uint32((field.id << 3 | 2) >>> 0).fork().uint32(8 | types.mapKey[field.keyType])[field.keyType](ks[l]);
                            if (wireType === undefined) {
                                _types[index].encode(ref[ks[l]], writer.uint32(18).fork()).ldelim().ldelim();
                            } else {
                                writer.uint32(16 | wireType)[type](ref[ks[l]]).ldelim();
                            }
                        }
                    }
                } else if (field.repeated) {
                    if (ref && ref.length) {
                        if (field.packed && types.packed[type] !== undefined) {
                            //如果数据可以被packed的话
                            writer.uint32((field.id << 3 | 2) >>> 0).fork();
                            for (var j = 0; j < ref.length; j++) {
                                writer[type](ref[j]);
                            }
                            writer.ldelim();
                        } else {
                            //数据不能packed的话
                            for (var k = 0; k < ref.length; k++) {
                                if (wireType === undefined) {
                                    //如果是一个自定义的数据类型
                                    if (field.resolvedType.group) {
                                        _types[index].encode(ref[k], writer.uint32((field.id << 3 | 3) >>> 0)).uint32((field.id << 3 | 4) >>> 0);
                                    } else {
                                        _types[index].encode(ref[k], writer.uint32((field.id << 3 | 2) >>> 0).fork()).ldelim();
                                    }
                                } else {
                                    //如果是string 或者 bytes
                                    writer.uint32((field.id << 3 | wireType) >>> 0)[type](ref[k]);
                                }
                            }
                        }
                    }
                } else {
                    if (!field.optional || ref != null && message.hasOwnProperty(field.name) /*|| field.partOf*/) {
                        if (!field.optional && (ref == null || !message.hasOwnProperty(field.name))) {
                            console.warn('注意啦!!!很大概率会报错 类型:', message.$type ? message.$type.name : "不晓得", '没有设置对应的属性:', field.name, '检查是不是proto文件属性设置为了required');
                        }
                        if (wireType === undefined) {
                            if (field.resolvedType.group) {
                                _types[index].encode(ref, writer.uint32((field.id << 3 | 3) >>> 0)).uint32((field.id << 3 | 4) >>> 0);
                            } else {
                                _types[index].encode(ref, writer.uint32((field.id << 3 | 2) >>> 0).fork()).ldelim();
                            }
                        } else {
                            writer.uint32((field.id << 3 | wireType) >>> 0)[type](ref);
                        }
                    }
                }
            }
            return writer;
        };
    };
}

module.exports = encoder;

encoder._configure = function () {
    Enum = __webpack_require__(13);
    types = __webpack_require__(38);
};

/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = __webpack_require__(10);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Created by zhangmiao on 2018/3/13.
 */

var Enum, types, util;

function missing(field) {
    return "missing required '" + field.name + "'";
}

function decoder(mtype) {
    return function (options) {
        var Reader = options.Reader;
        var _types = options.types;
        var _util = options.util;
        return function (r, l) {
            if (!(r instanceof Reader)) r = Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l,
                m = new this.ctor();
            var k;
            while (r.pos < c) {
                var t = r.uint32();
                if (mtype.group) {
                    if ((t & 7) === 4) break;
                }
                var fieldId = t >>> 3;
                var i = 0;
                var find = false;
                for (; i < mtype.fieldsArray.length; ++i) {
                    var field = mtype._fieldsArray[i].resolve(),
                        name = field.name,
                        type = field.resolvedType instanceof Enum ? "int32" : field.type;
                    //ref   = m[field.name];
                    if (fieldId != field.id) continue;
                    find = true;
                    if (field.map) {
                        r.skip().pos++;
                        if (m[name] === _util.emptyObject) m[name] = {};
                        k = r[field.keyType]();
                        r.pos++;
                        if (types.long[field.keyType] != undefined) {
                            if (types.basic[type] == undefined) {
                                m[name][(typeof k === "undefined" ? "undefined" : (0, _typeof3.default)(k)) === 'object' ? _util.longToHash(k) : k] = _types[i].decode(r, r.uint32());
                            } else {
                                m[name][(typeof k === "undefined" ? "undefined" : (0, _typeof3.default)(k)) === 'object' ? _util.longToHash(k) : k] = r[type]();
                            }
                        } else {
                            if (types.basic[type] == undefined) {
                                m[name] = _types[i].decode(r, r.uint32());
                            } else {
                                m[name] = r[type]();
                            }
                        }
                    } else if (field.repeated) {
                        if (!(m[name] && m[name].length)) {
                            m[name] = [];
                        }

                        if (types.packed[type] != undefined && (t & 7) === 2) {
                            var c2 = r.uint32() + r.pos;
                            while (r.pos < c2) {
                                m[name].push(r[type]());
                            }
                        } else {
                            if (types.basic[type] == undefined) {
                                field.resolvedType.group ? m[name].push(_types[i].decode(r)) : m[name].push(_types[i].decode(r, r.uint32()));
                            } else {
                                m[name].push(r[type]());
                            }
                        }
                    } else if (types.basic[type] == undefined) {
                        if (field.resolvedType.group) {
                            m[name] = _types[i].decode(r);
                        } else {
                            m[name] = _types[i].decode(r, r.uint32());
                        }
                    } else {
                        //console.log("m",JSON.stringify(m),"type",type,"field",field);
                        m[name] = r[type]();
                    }
                    break;
                }

                if (!find) {
                    console.log("t", t);
                    r.skipType(t & 7);
                }
            }

            for (i = 0; i < mtype._fieldsArray.length; ++i) {
                var rfield = mtype._fieldsArray[i];
                if (rfield.required) {
                    if (!m.hasOwnProperty(rfield.name)) {
                        throw util.ProtocolError(missing(rfield), { instance: m });
                    }
                }
            }
            //mtype.fieldsArray.filter(function(field) { return field.map; }).length
            return m;
        };
    };
}

module.exports = decoder;
decoder._configure = function () {
    Enum = __webpack_require__(13);
    types = __webpack_require__(38);
    util = __webpack_require__(1);
};

/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var wrappers = exports;

var Message;

/**
 * From object converter part of an {@link IWrapper}.
 * @typedef WrapperFromObjectConverter
 * @type {function}
 * @param {Object.<string,*>} object Plain object
 * @returns {Message<{}>} Message instance
 * @this Type
 */

/**
 * To object converter part of an {@link IWrapper}.
 * @typedef WrapperToObjectConverter
 * @type {function}
 * @param {Message<{}>} message Message instance
 * @param {IConversionOptions} [options] Conversion options
 * @returns {Object.<string,*>} Plain object
 * @this Type
 */

/**
 * Common type wrapper part of {@link wrappers}.
 * @interface IWrapper
 * @property {WrapperFromObjectConverter} [fromObject] From object converter
 * @property {WrapperToObjectConverter} [toObject] To object converter
 */

// Custom wrapper for Any
wrappers[".google.protobuf.Any"] = {

    fromObject: function fromObject(object) {

        // unwrap value type if mapped
        if (object && object["@type"]) {
            var type = this.lookup(object["@type"]);
            /* istanbul ignore else */
            if (type) {
                // type_url does not accept leading "."
                var type_url = object["@type"].charAt(0) === "." ? object["@type"].substr(1) : object["@type"];
                // type_url prefix is optional, but path seperator is required
                return this.create({
                    type_url: "/" + type_url,
                    value: type.encode(type.fromObject(object)).finish()
                });
            }
        }

        return this.fromObject(object);
    },

    toObject: function toObject(message, options) {

        // decode value if requested and unmapped
        if (options && options.json && message.type_url && message.value) {
            // Only use fully qualified type name after the last '/'
            var name = message.type_url.substring(message.type_url.lastIndexOf("/") + 1);
            var type = this.lookup(name);
            /* istanbul ignore else */
            if (type) message = type.decode(message.value);
        }

        // wrap value if unmapped
        if (!(message instanceof this.ctor) && message instanceof Message) {
            var object = message.$type.toObject(message, options);
            object["@type"] = message.$type.fullName;
            return object;
        }

        return this.toObject(message, options);
    }
};

wrappers._configure = function () {
    Message = __webpack_require__(100);
};

/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = __webpack_require__(10);

var _typeof3 = _interopRequireDefault(_typeof2);

var _keys = __webpack_require__(7);

var _keys2 = _interopRequireDefault(_keys);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Created by zhangmiao on 2018/3/14.
 * 写这个,有点难;有错误请指出 ,微信中不能Function.Apply 和evl,所以去掉其中所有的gen()
 */
var converter = module.exports;

var Enum, util;

converter._configure = function () {
    Enum = __webpack_require__(13);
    util = __webpack_require__(1);
};

function valuePartial_fromObject(field, fieldIndex, propName, options) {
    var m = options['m'];
    var d = options['d'];
    var _types = options['types'];
    var ksi = options['ksi'];
    var ksiFlag = typeof ksi != 'undefined';
    if (field.resolvedType) {
        if (field.resolvedType instanceof Enum) {
            var prop = ksiFlag ? d[propName][ksi] : d[propName];
            var values = field.resolvedType.values,
                keys = (0, _keys2.default)(values);
            for (var i = 0; i < keys.length; i++) {
                if (field.repeated && values[keys[i]] === field.typeDefault) {
                    continue;
                }
                if (keys[i] == prop || values[keys[i]] == prop) {
                    ksiFlag ? m[propName][ksi] = values[keys[i]] : m[propName] = values[keys[i]];
                    break;
                }
            }
        } else {
            if ((0, _typeof3.default)(ksiFlag ? d[propName][ksi] : d[propName]) !== 'object') throw TypeError(field.fullName + ": object expected");
            ksiFlag ? m[propName][ksi] = _types[fieldIndex].fromObject(d[propName][ksi]) : m[propName] = _types[fieldIndex].fromObject(d[propName]);
        }
    } else {
        var isUnsigned = false;
        switch (field.type) {
            case "double":
            case "float":
                ksiFlag ? m[propName][ksi] = Number(d[propName][ksi]) : m[propName] = Number(d[propName]);
                break;
            case "uint32":
            case "fixed32":
                ksiFlag ? m[propName][ksi] = d[propName][ksi] >>> 0 : m[propName] = d[propName] >>> 0;
                break;
            case "int32":
            case "sint32":
            case "sfixed32":
                ksiFlag ? m[propName][ksi] = d[propName][ksi] | 0 : m[propName] = d[propName] | 0;
                break;
            case "uint64":
                isUnsigned = true;
            // eslint-disable-line no-fallthrough
            case "int64":
            case "sint64":
            case "fixed64":
            case "sfixed64":
                if (util.Long) ksiFlag ? m[propName][ksi] = util.Long.fromValue(d[propName][ksi]).unsigned = isUnsigned : m[propName] = util.Long.fromValue(d[propName]).unsigned = isUnsigned;else if (typeof (ksiFlag ? d[propName][ksi] : d[propName]) === 'string') ksiFlag ? m[propName][ksi] = parseInt(d[propName][ksi], 10) : m[propName] = parseInt(d[propName], 10);else if (typeof (ksiFlag ? d[propName][ksi] : d[propName]) === 'number') ksiFlag ? m[propName][ksi] = d[propName][ksi] : m[propName] = d[propName];else if ((0, _typeof3.default)(ksiFlag ? d[propName][ksi] : d[propName]) === 'object') ksiFlag ? m[propName][ksi] = new util.LongBits(d[propName][ksi].low >>> 0, d[propName][ksi].high >>> 0).toNumber(isUnsigned) : m[propName] = new util.LongBits(d[propName].low >>> 0, d[propName].high >>> 0).toNumber(isUnsigned);
                break;
            case "bytes":
                if (typeof (ksiFlag ? d[propName][ksi] : d[propName]) === "string") ksiFlag ? util.base64.decode(d[propName][ksi], m[propName][ksi] = util.newBuffer(util.base64.length(d[propName][ksi])), 0) : util.base64.decode(d[propName], m[propName] = util.newBuffer(util.base64.length(d[propName])), 0);else if ((ksiFlag ? d[propName][ksi] : d[propName]).length) ksiFlag ? m[propName][ksi] = d[propName][ksi] : m[propName] = d[propName];
                break;
            case "string":
                ksiFlag ? m[propName][ksi] = String(d[propName][ksi]) : m[propName] = String(d[propName]);
                break;
            case "bool":
                ksiFlag ? m[propName][ksi] = Boolean(d[propName][ksi]) : m[propName] = Boolean(d[propName]);
                break;
        }
    }
}

/*
* @param {Type} mtype Message type
* @returns {Function} Function instance
*/
converter.fromObject = function fromObject(mtype) {
    var fields = mtype.fieldsArray;
    return function (options) {
        return function (d) {
            if (d instanceof this.ctor) return d;
            if (!fields.length) return new this.ctor();

            var m = new this.ctor();
            for (var i = 0; i < fields.length; ++i) {
                var field = fields[i].resolve();
                var propName = field.name;
                var _i;
                if (field.map) {
                    if (d[propName]) {
                        if ((0, _typeof3.default)(d[propName]) !== 'object') throw TypeError(field.fullName + ": object expected");
                        m[propName] = {};
                    }
                    var ks = (0, _keys2.default)(d[propName]);
                    for (_i = 0; _i < ks.length; ++_i) {
                        valuePartial_fromObject(field, i, propName, util.merge(util.copy(options), { m: m, d: d, ksi: ks[_i] }));
                    }
                } else if (field.repeated) {
                    if (d[propName]) {
                        if (!Array.isArray(d[propName])) throw TypeError(field.fullName + ": array expected");
                        m[propName] = [];
                        for (_i = 0; _i < d[propName].length; ++_i) {
                            valuePartial_fromObject(field, i, propName, util.merge(util.copy(options), {
                                m: m,
                                d: d,
                                ksi: _i
                            }));
                        }
                    }
                } else {
                    if (field.resolvedType instanceof Enum || d[propName] != null) {
                        valuePartial_fromObject(field, i, propName, util.merge(util.copy(options), { m: m, d: d }));
                    }
                }
            }
            return m;
        };
    };
};

function valuePartial_toObject(field, fieldIndex, propName, options) {
    var m = options['m'];
    var d = options['d'];
    var _types = options['types'];
    var ksi = options['ksi'];
    var o = options['o'];
    var ksiFlag = typeof ksi != 'undefined';
    if (field.resolvedType) {
        if (field.resolvedType instanceof Enum) ksiFlag ? d[propName][ksi] = o.enums === String ? _types[fieldIndex].values[m[propName][ksi]] : m[propName][ksi] : d[propName] = o.enums === String ? _types[fieldIndex].values[m[propName]] : m[propName];else ksiFlag ? d[propName][ksi] = _types[fieldIndex].toObject(m[propName][ksi], o) : d[propName] = _types[fieldIndex].toObject(m[propName], o);
    } else {
        var isUnsigned = false;
        switch (field.type) {
            case "double":
            case "float":
                ksiFlag ? d[propName][ksi] = o.json && !isFinite(m[propName][ksi]) ? String(m[propName][ksi]) : m[propName][ksi] : d[propName] = o.json && !isFinite(m[propName]) ? String(m[propName]) : m[propName];
                break;
            case "uint64":
                isUnsigned = true;
            // eslint-disable-line no-fallthrough
            case "int64":
            case "sint64":
            case "fixed64":
            case "sfixed64":
                if (typeof m[propName][ksi] === 'number') ksiFlag ? d[propName][ksi] = o.longs === String ? String(m[propName][ksi]) : m[propName][ksi] : d[propName] = o.longs === String ? String(m[propName]) : m[propName];else ksiFlag ? d[propName][ksi] = o.longs === String ? util.Long.prototype.toString.call(m[propName][ksi]) : o.longs === Number ? new util.LongBits(m[propName][ksi].low >>> 0, m[propName][ksi].high >>> 0).toNumber(isUnsigned) : m[propName][ksi] : d[propName] = o.longs === String ? util.Long.prototype.toString.call(m[propName]) : o.longs === Number ? new util.LongBits(m[propName].low >>> 0, m[propName].high >>> 0).toNumber(isUnsigned) : m[propName];
                break;
            case "bytes":
                ksiFlag ? d[propName][ksi] = o.bytes === String ? util.base64.encode(m[propName][ksi], 0, m[propName][ksi].length) : o.bytes === Array ? Array.prototype.slice.call(m[propName][ksi]) : m[propName][ksi] : d[propName] = o.bytes === String ? util.base64.encode(m[propName], 0, m[propName].length) : o.bytes === Array ? Array.prototype.slice.call(m[propName]) : m[propName];
                break;
            default:
                ksiFlag ? d[propName][ksi] = m[propName][ksi] : d[propName] = m[propName];
                break;
        }
    }
}

converter.toObject = function toObject(mtype) {
    var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);
    return function (options) {
        if (!fields.length) return function () {
            return {};
        };
        return function (m, o) {
            o = o || {};
            var d = {};
            var repeatedFields = [],
                mapFields = [],
                normalFields = [],
                field,
                propName,
                i = 0;
            for (; i < fields.length; ++i) {
                if (!fields[i].partOf) (fields[i].resolve().repeated ? repeatedFields : fields[i].map ? mapFields : normalFields).push(fields[i]);
            }if (repeatedFields.length) {
                if (o.arrays || o.defaults) {
                    for (i = 0; i < repeatedFields.length; ++i) {
                        d[repeatedFields[i].name] = [];
                    }
                }
            }

            if (mapFields.length) {
                if (o.objects || o.defaults) {
                    for (i = 0; i < mapFields.length; ++i) {
                        d[mapFields[i].name] = {};
                    }
                }
            }

            if (normalFields.length) {
                if (o.defaults) {
                    for (i = 0; i < normalFields.length; ++i) {
                        field = normalFields[i], propName = field.name;
                        if (field.resolvedType instanceof Enum) d[propName] = o.enums = String ? field.resolvedType.valuesById[field.typeDefault] : field.typeDefault;else if (field.long) {
                            if (util.Long) {
                                var n = new util.Long(field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned);
                                d[propName] = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
                            } else {
                                d[propName] = o.longs === String ? field.typeDefault.toString() : field.typeDefault.toNumber();
                            }
                        } else if (field.bytes) {
                            d[propName] = o.bytes === String ? String.fromCharCode.apply(String, field.typeDefault) : Array.prototype.slice.call(field.typeDefault).join('*..*').split("*..*");
                        } else {
                            d[propName] = field.typeDefault;
                        }
                    }
                }
            }
            var hasKs2 = false;
            for (i = 0; i < fields.length; ++i) {
                field = fields[i];
                propName = field.name;
                var index = mtype._fieldsArray.indexOf(field);
                var ks2;
                var j;
                if (field.map) {
                    if (!hasKs2) {
                        hasKs2 = true;
                    }
                    if (m[propName] && (ks2 = (0, _keys2.default)(m[propName]).length)) {
                        d[propName] = {};
                        for (j = 0; j < ks2.length; ++j) {
                            valuePartial_toObject(field, index, propName, util.merge(util.copy(options), { m: m, d: d, ksi: ks2[j], o: o }));
                        }
                    }
                } else if (field.repeated) {
                    if (m[propName] && m[propName].length) {
                        d[propName] = [];
                        for (j = 0; j < m[propName].length; ++j) {
                            valuePartial_toObject(field, index, propName, util.merge(util.copy(options), { m: m, d: d, ksi: j, o: o }));
                        }
                    }
                } else {
                    if (m[propName] != null && m.hasOwnProperty(propName) /*|| field.partOf*/) {
                        valuePartial_toObject(field, index, propName, util.merge(util.copy(options), { m: m, d: d, o: o }));
                    }
                    if (field.partOf) {
                        if (o.oneofs) d[field.partOf.name] = propName;
                    }
                }
            }
            return d;
        };
    };
};

/***/ }),
/* 179 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__179__;

/***/ }),
/* 180 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__180__;

/***/ }),
/* 181 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__181__;

/***/ }),
/* 182 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__182__;

/***/ }),
/* 183 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__183__;

/***/ }),
/* 184 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__184__;

/***/ }),
/* 185 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__185__;

/***/ }),
/* 186 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__186__;

/***/ }),
/* 187 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__187__;

/***/ }),
/* 188 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__188__;

/***/ }),
/* 189 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__189__;

/***/ }),
/* 190 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__190__;

/***/ }),
/* 191 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__191__;

/***/ }),
/* 192 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__192__;

/***/ }),
/* 193 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__193__;

/***/ }),
/* 194 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__194__;

/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Note: adler32 takes 12% for level 0 and 2% for level 6.
// It isn't worth it to make additional optimizations as in original.
// Small size is preferable.

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function adler32(adler, buf, len, pos) {
  var s1 = (adler & 0xffff) |0,
      s2 = ((adler >>> 16) & 0xffff) |0,
      n = 0;

  while (len !== 0) {
    // Set limit ~ twice less than 5552, to keep
    // s2 in 31-bits, because we force signed ints.
    // in other case %= will fail.
    n = len > 2000 ? 2000 : len;
    len -= n;

    do {
      s1 = (s1 + buf[pos++]) |0;
      s2 = (s2 + s1) |0;
    } while (--n);

    s1 %= 65521;
    s2 %= 65521;
  }

  return (s1 | (s2 << 16)) |0;
}


module.exports = adler32;


/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Note: we can't get significant speed boost here.
// So write code to minimize size - no pregenerated tables
// and array tools dependencies.

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

// Use ordinary array, since untyped makes no boost here
function makeTable() {
  var c, table = [];

  for (var n = 0; n < 256; n++) {
    c = n;
    for (var k = 0; k < 8; k++) {
      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
    }
    table[n] = c;
  }

  return table;
}

// Create table on load. Just 255 signed longs. Not a problem.
var crcTable = makeTable();


function crc32(crc, buf, len, pos) {
  var t = crcTable,
      end = pos + len;

  crc ^= -1;

  for (var i = pos; i < end; i++) {
    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
  }

  return (crc ^ (-1)); // >>> 0;
}


module.exports = crc32;


/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// String encode/decode helpers



var utils = __webpack_require__(25);


// Quick check if we can use fast array to bin string conversion
//
// - apply(Array) can fail on Android 2.2
// - apply(Uint8Array) can fail on iOS 5.1 Safari
//
var STR_APPLY_OK = true;
var STR_APPLY_UIA_OK = true;

try { String.fromCharCode.apply(null, [ 0 ]); } catch (__) { STR_APPLY_OK = false; }
try { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }


// Table with utf8 lengths (calculated by first byte of sequence)
// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
// because max possible codepoint is 0x10ffff
var _utf8len = new utils.Buf8(256);
for (var q = 0; q < 256; q++) {
  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);
}
_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start


// convert string to array (typed, when possible)
exports.string2buf = function (str) {
  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;

  // count binary size
  for (m_pos = 0; m_pos < str_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
  }

  // allocate buffer
  buf = new utils.Buf8(buf_len);

  // convert
  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    if (c < 0x80) {
      /* one byte */
      buf[i++] = c;
    } else if (c < 0x800) {
      /* two bytes */
      buf[i++] = 0xC0 | (c >>> 6);
      buf[i++] = 0x80 | (c & 0x3f);
    } else if (c < 0x10000) {
      /* three bytes */
      buf[i++] = 0xE0 | (c >>> 12);
      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
      buf[i++] = 0x80 | (c & 0x3f);
    } else {
      /* four bytes */
      buf[i++] = 0xf0 | (c >>> 18);
      buf[i++] = 0x80 | (c >>> 12 & 0x3f);
      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
      buf[i++] = 0x80 | (c & 0x3f);
    }
  }

  return buf;
};

// Helper (used in 2 places)
function buf2binstring(buf, len) {
  // On Chrome, the arguments in a function call that are allowed is `65534`.
  // If the length of the buffer is smaller than that, we can use this optimization,
  // otherwise we will take a slower path.
  if (len < 65534) {
    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {
      return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));
    }
  }

  var result = '';
  for (var i = 0; i < len; i++) {
    result += String.fromCharCode(buf[i]);
  }
  return result;
}


// Convert byte array to binary string
exports.buf2binstring = function (buf) {
  return buf2binstring(buf, buf.length);
};


// Convert binary string (typed, when possible)
exports.binstring2buf = function (str) {
  var buf = new utils.Buf8(str.length);
  for (var i = 0, len = buf.length; i < len; i++) {
    buf[i] = str.charCodeAt(i);
  }
  return buf;
};


// convert array to string
exports.buf2string = function (buf, max) {
  var i, out, c, c_len;
  var len = max || buf.length;

  // Reserve max possible length (2 words per char)
  // NB: by unknown reasons, Array is significantly faster for
  //     String.fromCharCode.apply than Uint16Array.
  var utf16buf = new Array(len * 2);

  for (out = 0, i = 0; i < len;) {
    c = buf[i++];
    // quick process ascii
    if (c < 0x80) { utf16buf[out++] = c; continue; }

    c_len = _utf8len[c];
    // skip 5 & 6 byte codes
    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }

    // apply mask on first byte
    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
    // join the rest
    while (c_len > 1 && i < len) {
      c = (c << 6) | (buf[i++] & 0x3f);
      c_len--;
    }

    // terminated by end of string?
    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }

    if (c < 0x10000) {
      utf16buf[out++] = c;
    } else {
      c -= 0x10000;
      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
      utf16buf[out++] = 0xdc00 | (c & 0x3ff);
    }
  }

  return buf2binstring(utf16buf, out);
};


// Calculate max possible position in utf8 buffer,
// that will not break sequence. If that's not possible
// - (very small limits) return max size as is.
//
// buf[] - utf8 bytes array
// max   - length limit (mandatory);
exports.utf8border = function (buf, max) {
  var pos;

  max = max || buf.length;
  if (max > buf.length) { max = buf.length; }

  // go back from last position, until start of sequence found
  pos = max - 1;
  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }

  // Very small and broken sequence,
  // return max, because we should return something anyway.
  if (pos < 0) { return max; }

  // If we came to start of buffer - that means buffer is too small,
  // return max too.
  if (pos === 0) { return max; }

  return (pos + _utf8len[buf[pos]] > max) ? pos : max;
};


/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function ZStream() {
  /* next input byte */
  this.input = null; // JS specific, because we have no pointers
  this.next_in = 0;
  /* number of bytes available at input */
  this.avail_in = 0;
  /* total number of input bytes read so far */
  this.total_in = 0;
  /* next output byte should be put there */
  this.output = null; // JS specific, because we have no pointers
  this.next_out = 0;
  /* remaining free space at output */
  this.avail_out = 0;
  /* total number of bytes output so far */
  this.total_out = 0;
  /* last error message, NULL if no error */
  this.msg = ''/*Z_NULL*/;
  /* not visible by applications */
  this.state = null;
  /* best guess about the data type: binary or text */
  this.data_type = 2/*Z_UNKNOWN*/;
  /* adler32 value of the uncompressed data */
  this.adler = 0;
}

module.exports = ZStream;


/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

module.exports = {

  /* Allowed flush values; see deflate() and inflate() below for details */
  Z_NO_FLUSH:         0,
  Z_PARTIAL_FLUSH:    1,
  Z_SYNC_FLUSH:       2,
  Z_FULL_FLUSH:       3,
  Z_FINISH:           4,
  Z_BLOCK:            5,
  Z_TREES:            6,

  /* Return codes for the compression/decompression functions. Negative values
  * are errors, positive values are used for special but normal events.
  */
  Z_OK:               0,
  Z_STREAM_END:       1,
  Z_NEED_DICT:        2,
  Z_ERRNO:           -1,
  Z_STREAM_ERROR:    -2,
  Z_DATA_ERROR:      -3,
  //Z_MEM_ERROR:     -4,
  Z_BUF_ERROR:       -5,
  //Z_VERSION_ERROR: -6,

  /* compression levels */
  Z_NO_COMPRESSION:         0,
  Z_BEST_SPEED:             1,
  Z_BEST_COMPRESSION:       9,
  Z_DEFAULT_COMPRESSION:   -1,


  Z_FILTERED:               1,
  Z_HUFFMAN_ONLY:           2,
  Z_RLE:                    3,
  Z_FIXED:                  4,
  Z_DEFAULT_STRATEGY:       0,

  /* Possible values of the data_type field (though see inflate()) */
  Z_BINARY:                 0,
  Z_TEXT:                   1,
  //Z_ASCII:                1, // = Z_TEXT (deprecated)
  Z_UNKNOWN:                2,

  /* The deflate compression method */
  Z_DEFLATED:               8
  //Z_NULL:                 null // Use -1 or null inline, depending on var type
};


/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.WfcImpl = undefined;

var _promise = __webpack_require__(69);

var _promise2 = _interopRequireDefault(_promise);

var _regenerator = __webpack_require__(216);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = __webpack_require__(219);

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getIterator2 = __webpack_require__(118);

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _assign = __webpack_require__(119);

var _assign2 = _interopRequireDefault(_assign);

var _stringify = __webpack_require__(85);

var _stringify2 = _interopRequireDefault(_stringify);

var _toConsumableArray2 = __webpack_require__(86);

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _map = __webpack_require__(121);

var _map2 = _interopRequireDefault(_map);

var _classCallCheck2 = __webpack_require__(60);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(128);

var _createClass3 = _interopRequireDefault(_createClass2);

var _long = __webpack_require__(130);

var _long2 = _interopRequireDefault(_long);

var _longUtil = __webpack_require__(131);

var _aes = __webpack_require__(48);

var _connect2 = __webpack_require__(243);

var _messageConfig = __webpack_require__(179);

var _messageConfig2 = _interopRequireDefault(_messageConfig);

var _mediaMessageContent = __webpack_require__(180);

var _mediaMessageContent2 = _interopRequireDefault(_mediaMessageContent);

var _message = __webpack_require__(362);

var _message2 = _interopRequireDefault(_message);

var _messageContentType = __webpack_require__(363);

var _messageContentType2 = _interopRequireDefault(_messageContentType);

var _messageStatus = __webpack_require__(181);

var _messageStatus2 = _interopRequireDefault(_messageStatus);

var _recallMessageNotification = __webpack_require__(364);

var _recallMessageNotification2 = _interopRequireDefault(_recallMessageNotification);

var _persistFlag = __webpack_require__(182);

var _persistFlag2 = _interopRequireDefault(_persistFlag);

var _channelInfo = __webpack_require__(183);

var _channelInfo2 = _interopRequireDefault(_channelInfo);

var _chatRoomMemberInfo = __webpack_require__(365);

var _chatRoomMemberInfo2 = _interopRequireDefault(_chatRoomMemberInfo);

var _conversation = __webpack_require__(184);

var _conversation2 = _interopRequireDefault(_conversation);

var _conversationType = __webpack_require__(185);

var _conversationType2 = _interopRequireDefault(_conversationType);

var _friendRequest = __webpack_require__(366);

var _friendRequest2 = _interopRequireDefault(_friendRequest);

var _groupInfo = __webpack_require__(186);

var _groupInfo2 = _interopRequireDefault(_groupInfo);

var _groupMember = __webpack_require__(367);

var _groupMember2 = _interopRequireDefault(_groupMember);

var _groupMemberType = __webpack_require__(187);

var _groupMemberType2 = _interopRequireDefault(_groupMemberType);

var _nullGroupInfo = __webpack_require__(188);

var _nullGroupInfo2 = _interopRequireDefault(_nullGroupInfo);

var _nullUserInfo = __webpack_require__(189);

var _nullUserInfo2 = _interopRequireDefault(_nullUserInfo);

var _userInfo = __webpack_require__(190);

var _userInfo2 = _interopRequireDefault(_userInfo);

var _userSettingScope = __webpack_require__(191);

var _userSettingScope2 = _interopRequireDefault(_userSettingScope);

var _wfcEvent = __webpack_require__(368);

var _wfcEvent2 = _interopRequireDefault(_wfcEvent);

var _wfc_store = __webpack_require__(369);

var _wfc_store2 = _interopRequireDefault(_wfc_store);

var _connectionStatus = __webpack_require__(381);

var _connectionStatus2 = _interopRequireDefault(_connectionStatus);

var _userSettingEntry = __webpack_require__(382);

var _userSettingEntry2 = _interopRequireDefault(_userSettingEntry);

var _config = __webpack_require__(95);

var _config2 = _interopRequireDefault(_config);

var _pako = __webpack_require__(383);

var _pako2 = _interopRequireDefault(_pako);

var _errorCode = __webpack_require__(392);

var _errorCode2 = _interopRequireDefault(_errorCode);

var _friendInfo = __webpack_require__(193);

var _friendInfo2 = _interopRequireDefault(_friendInfo);

var _chatRoomInfo = __webpack_require__(393);

var _chatRoomInfo2 = _interopRequireDefault(_chatRoomInfo);

var _NullChannelInfo = __webpack_require__(194);

var _NullChannelInfo2 = _interopRequireDefault(_NullChannelInfo);

var _conversationInfo = __webpack_require__(192);

var _conversationInfo2 = _interopRequireDefault(_conversationInfo);

var _readEntry = __webpack_require__(394);

var _readEntry2 = _interopRequireDefault(_readEntry);

var _fileRecord = __webpack_require__(395);

var _fileRecord2 = _interopRequireDefault(_fileRecord);

var _base = __webpack_require__(396);

var _markUnreadMessageContent = __webpack_require__(397);

var _markUnreadMessageContent2 = _interopRequireDefault(_markUnreadMessageContent);

var _userOnlineState = __webpack_require__(398);

var _userOnlineState2 = _interopRequireDefault(_userOnlineState);

var _userClientState = __webpack_require__(399);

var _userClientState2 = _interopRequireDefault(_userClientState);

var _userCustomState = __webpack_require__(400);

var _userCustomState2 = _interopRequireDefault(_userCustomState);

var _channelMenu = __webpack_require__(401);

var _channelMenu2 = _interopRequireDefault(_channelMenu);

var _compositeMessageContent = __webpack_require__(402);

var _compositeMessageContent2 = _interopRequireDefault(_compositeMessageContent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var protobuf = __webpack_require__(163); /*
                                                        * Copyright (c) 2020 WildFireChat. All rights reserved.
                                                        */

protobuf.util.Long = _long2.default;
protobuf.configure();
var protocol = __webpack_require__(403);
var protocolRoot = protobuf.Root.fromJSON(protocol);

var AddFriendRequest = protocolRoot.lookupType("AddFriendRequest");
var AddGroupMemberRequest = protocolRoot.lookupType("AddGroupMemberRequest");
var BlackUserRequest = protocolRoot.lookupType("BlackUserRequest");
var ConnectAckPayload = protocolRoot.lookupType("ConnectAckPayload");
var PbConversation = protocolRoot.lookupType("Conversation");
var CreateGroupRequest = protocolRoot.lookupType("CreateGroupRequest");
var DismissGroupRequest = protocolRoot.lookupType("DismissGroupRequest");
var GetFriendRequestResult = protocolRoot.lookupType("GetFriendRequestResult");
var GetFriendsResult = protocolRoot.lookupType("GetFriendsResult");
var GetUploadTokenResult = protocolRoot.lookupType("GetUploadTokenResult");
var GetUploadTokenRequest = protocolRoot.lookupType("GetUploadTokenRequest");
var GetUserSettingResult = protocolRoot.lookupType("GetUserSettingResult");
var PbGroup = protocolRoot.lookupType("Group");
var PbGroupInfo = protocolRoot.lookupType("GroupInfo");
var PbGroupMember = protocolRoot.lookupType("GroupMember");
var HandleFriendRequest = protocolRoot.lookupType("HandleFriendRequest");
var IDBuf = protocolRoot.lookupType("IDBuf");
var IDListBuf = protocolRoot.lookupType("IDListBuf");
var IMHttpWrapper = protocolRoot.lookupType("IMHttpWrapper");
var INT64Buf = protocolRoot.lookupType("INT64Buf");
var LoadRemoteMessages = protocolRoot.lookupType("LoadRemoteMessages");
var LoadLineMessages = protocolRoot.lookupType("LoadLineMessages");
var PbMessage = protocolRoot.lookupType("Message");
var PbMessageContent = protocolRoot.lookupType("MessageContent");
var ModifyGroupInfoRequest = protocolRoot.lookupType("ModifyGroupInfoRequest");
var ModifyGroupMemberAlias = protocolRoot.lookupType("ModifyGroupMemberAlias");
var ModifyGroupMemberExtra = protocolRoot.lookupType('ModifyGroupMemberExtra');
var ModifyUserSettingReq = protocolRoot.lookupType("ModifyUserSettingReq");
var NotifyMessage = protocolRoot.lookupType("NotifyMessage");
var PullGroupInfoResult = protocolRoot.lookupType("PullGroupInfoResult");
var PullGroupMemberRequest = protocolRoot.lookupType("PullGroupMemberRequest");
var PullGroupMemberResult = protocolRoot.lookupType("PullGroupMemberResult");
var PullMessageRequest = protocolRoot.lookupType("PullMessageRequest");
var PullMessageResult = protocolRoot.lookupType("PullMessageResult");
var PullUserRequest = protocolRoot.lookupType("PullUserRequest");
var PullUserResult = protocolRoot.lookupType("PullUserResult");
var QuitGroupRequest = protocolRoot.lookupType("QuitGroupRequest");
var RemoveGroupMemberRequest = protocolRoot.lookupType("RemoveGroupMemberRequest");
var RouteRequest = protocolRoot.lookupType("RouteRequest");
var RouteResponse = protocolRoot.lookupType("RouteResponse");
var SearchUserRequest = protocolRoot.lookupType("SearchUserRequest");
var SearchUserResult = protocolRoot.lookupType("SearchUserResult");
var SetGroupManagerRequest = protocolRoot.lookupType("SetGroupManagerRequest");
var TransferGroupRequest = protocolRoot.lookupType("TransferGroupRequest");
var UserRequest = protocolRoot.lookupType("UserRequest");
// var UserSettingEntry = protocolRoot.lookupType("UserSettingEntry");
var Version = protocolRoot.lookupType("Version");
var ModifyMyInfoRequest = protocolRoot.lookupType("ModifyMyInfoRequest");
var NotifyRecallMessage = protocolRoot.lookupType("NotifyRecallMessage");
var PbChatRoomInfo = protocolRoot.lookupType("ChatroomInfo");
var PbChatRoomMemberInfo = protocolRoot.lookupType("ChatroomMemberInfo");
var GetChatroomInfoRequest = protocolRoot.lookupType("GetChatroomInfoRequest");
var GetChatroomMemberInfoRequest = protocolRoot.lookupType("GetChatroomMemberInfoRequest");
var ModifyChannelInfo = protocolRoot.lookupType("ModifyChannelInfo");
var TransferChannel = protocolRoot.lookupType("TransferChannel");
var ListenChannel = protocolRoot.lookupType("ListenChannel");
var PullChannelInfo = protocolRoot.lookupType("PullChannelInfo");
var SearchChannelResult = protocolRoot.lookupType("SearchChannelResult");
var PullDeliveryResult = protocolRoot.lookupType("PullDeliveryResult");
var PullReadResult = protocolRoot.lookupType("PullReadResult");
var LoadFileRecordReq = protocolRoot.lookupType("LoadFileRecordReq");
var SearchFileRecordReq = protocolRoot.lookupType("SearchFileRecordReq");
var LoadFileRecordRes = protocolRoot.lookupType("LoadFileRecordRes");
var UploadDeviceTokenRequest = protocolRoot.lookupType("UploadDeviceTokenRequest");
var PresenceWatchRequest = protocolRoot.lookupType("PresenceWatchRequest");
var PresenceWatchResult = protocolRoot.lookupType("PresenceWatchResult");
var LockRequest = protocolRoot.lookupType("LockRequest");
var PullGroupConvRequest = protocolRoot.lookupType("PullGroupConvRequest");
var PullGroupConvResult = protocolRoot.lookupType("PullGroupConvResult");
var PullGroupMessageRequest = protocolRoot.lookupType("PullGroupMessageRequest");
var PullGroupMessageRequests = protocolRoot.lookupType("PullGroupMessageRequests");
var GroupMessage = protocolRoot.lookupType("GroupMessage");
var PullGroupMessageResult = protocolRoot.lookupType("PullGroupMessageResult");
var PullGroupMessageResults = protocolRoot.lookupType("PullGroupMessageResults");
var MessageList = protocolRoot.lookupType("MessageList");
var NotifyGroupMessage = protocolRoot.lookupType("NotifyGroupMessage");
var GroupConv = protocolRoot.lookupType("GroupConv");

// Attention 如果是node环境的话，需要打开下面的注释
// var XMLHttpRequest = require('xmlhttprequest').XMLHttpRequest

// 其实就是imclient，后续可能需要改下名字

var WfcImpl = exports.WfcImpl = function () {
    function WfcImpl() {
        (0, _classCallCheck3.default)(this, WfcImpl);
        this.initialized = false;
        this.connectionStatus = 0;
        this.platformName = '';
        this.userId = '';
        this.token = '';
        this.clientId = '';
        this.chatRoomMsgHead = _long2.default.ZERO;
        this.privateSecret = '';
        this.store = new _wfc_store2.default(this);
        this.isReceiptEnable = false;
        this.isUserOnlineStateEnable = false;
        this.serverConfigs = {};
        this.isClearGroupMsgWhenKickoff = false;
        this.isGlobalDisableDraftSync = false;
        this.isConnecting = false;
        this.isUserDisconnected = false;
        this.isPullingSetting = false;
        this.isPullingMsg = false;
        this.isPullingChatroomMsg = false;
        this.isPullingRecv = false;
        this.isPullingRead = false;
        this.isPullingGroupMsg = false;
        this.isConversationTargetPreloaded = false;
        this.isFriendPreloaded = false;
        this.isFriendRequestPreloaded = false;
        this.settingHead = _long2.default.ZERO;
        this.friendHead = _long2.default.ZERO;
        this.friendRequestHead = _long2.default.ZERO;
        this.recvHead = _long2.default.ZERO;
        this.readHead = _long2.default.ZERO;
        this.groupHead = _long2.default.ZERO;
        this.deltaTime = 0;
        this.lastActiveTime = 0;
        this.backupAddressStrategy = 1;
        this.backupHost = '';
        this.backupPort = 80;
        this.pendingMN = false;
        this.pendingGMN = false;
        this.uploadingMap = new _map2.default();
    } // long object


    // 94, pc登录请求通知


    (0, _createClass3.default)(WfcImpl, [{
        key: 'resetMqtt',
        value: function resetMqtt() {
            var _this = this;

            if (this.mqttClientInstance) {
                this.mqttClientInstance.removeAllListeners();
                this.mqttClientInstance.end(true, {}, function () {
                    _this.log('mqtt client ended');
                });
                this.mqttClientInstance = null;
            }
            this.isConnecting = false;
        }
    }, {
        key: 'reset',
        value: function reset() {
            this.resetMqtt();
            this.connectionStatus = _connectionStatus2.default.ConnectionStatusLogout;
            this.isConnecting = false;
            this.userId = '';
            this.token = '';
            this.clientId = '';
            this.msgHead = _long2.default.ZERO; // long object

            this.privateSecret = '';

            this.store = new _wfc_store2.default(this);

            this.isReceiptEnable = false;
            this.isGlobalDisableDraftSync = false;
            this.isConnecting = false;
            this.isUserDisconnected = false;
            this.isPullingSetting = false;
            this.isPullingRecv = false;
            this.isPullingRead = false;
            this.isConversationTargetPreloaded = false;
            this.isFriendPreloaded = false;
            this.isFriendRequestPreloaded = false;
            this.settingHead = _long2.default.ZERO;
            this.friendHead = _long2.default.ZERO;
            this.friendRequestHead = _long2.default.ZERO;
            this.recvHead = _long2.default.ZERO;
            this.readHead = _long2.default.ZERO;
            this.groupHead = _long2.default.ZERO;
            this.deltaTime = 0;
            this.lastActiveTime = 0;
            if (this.reconnectTimer) {
                clearInterval(this.reconnectTimer);
                this.reconnectTimer = 0;
            }
        }
    }, {
        key: 'onConnectionChanged',
        value: function onConnectionChanged(status) {
            if (this.connectionStatus === status) {
                return;
            }

            if (status === _connectionStatus2.default.ConnectionStatusConnected) {
                this._pullUnreadMessages();
            }

            if (_config2.default.ENABLE_INFO_PERSISTENCE && (!_config2.default.MESSAGE_ROAMING && status === _connectionStatus2.default.ConnectionStatusConnected || _config2.default.MESSAGE_ROAMING && status === _connectionStatus2.default.ConnectionStatusReceiveing)) {
                this.store.loadPersistGroups();
            }
            this.connectionStatus = status;
            this.eventEmitter.emit(_wfcEvent2.default.ConnectionStatusChanged, status);
            this.log('connection status changed', status);
        }

        // /**
        //  *
        //  * @param {function} listener
        //  */
        // setOnReceiveMessageListener(listener) {
        //     if (typeof listener !== 'function') {
        //         this.log('listener should be a function');
        //         return;
        //     }
        //     self.onReceiveMessageListeners.forEach(l => {
        //         l === listener
        //         return
        //     });
        //     self.onReceiveMessageListeners.push(listener);
        // }

        // removeOnReceiMessageListener(listener) {
        //     if (typeof listener !== 'function') {
        //         this.log('listener should be a function');
        //         return;
        //     }
        //     self.onReceiveMessageListeners.splice(self.onReceiveMessageListeners.indexOf(listener), 1);
        // }

    }, {
        key: '_isGroupNotificationTargetsIncludeCurrentUser',
        value: function _isGroupNotificationTargetsIncludeCurrentUser(binaryContent) {}
    }, {
        key: 'onConferenceEvent',
        value: function onConferenceEvent(event) {
            this.eventEmitter.emit(_wfcEvent2.default.ConferenceEvent, event);
        }
    }, {
        key: 'onReceiveMessage',
        value: function onReceiveMessage(messages) {
            var pullSettings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            var _this2 = this;

            var saveToStore = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
            var superGroupMessage = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

            var needUpdateGroups = [];
            var needUpdateGroupMembers = [];

            this.log('onReceiveMessage length: ' + messages.length + ', pullSettings: ' + pullSettings + ' saveToStore ' + saveToStore);
            messages.forEach(function (m, index) {
                if (WfcImpl.pcNotSupportMessageTypes.indexOf(m.content.type) > -1) {
                    return;
                }
                var msg = _message2.default.fromProtoMessage(m);
                var hasMore = index < messages.length - 1;
                if (msg) {
                    _this2._handleGroupNotificationMessage(msg, hasMore, needUpdateGroups, needUpdateGroupMembers);
                    // 处理通过server api删除消息
                    if (msg.content.type === 81) {
                        _this2.log('delete', msg.content, _long2.default.fromValue(atob(msg.content.binaryContent)), _long2.default.fromValue(atob(msg.content.binaryContent)).toString());
                        var messageUid = _long2.default.fromValue(atob(msg.content.binaryContent));
                        var message = _this2.store.getMessageByUid(messageUid);
                        if (message && message.messageId > 0) {
                            _this2.store.deleteMessageByUid(messageUid);
                            _this2.onRemoteMessageDeleted(message.messageUid);
                        }
                        return;
                    }

                    var flag = _messageConfig2.default.getMessageContentPersitFlag(msg.content.type);
                    if (flag === -1) {
                        flag = msg.content.persistFlag;
                    }
                    if (msg.messageContent.type === _messageContentType2.default.RecallMessage_Notification) {
                        _this2.onRecallMessage(msg.messageContent.operatorId, msg.messageContent.messageUid);
                    }
                    if (saveToStore && (flag === _persistFlag2.default.Persist || flag === _persistFlag2.default.Persist_And_Count)) {
                        if (msg.conversation.type === _conversationType2.default.ChatRoom) {
                            msg.messageId = _this2.store.genChatRoomMessageId();
                        } else {
                            msg.messageId = _this2.store.genNormalMessageId();
                        }
                        if (_this2.store.saveMessage(msg)) {
                            _this2.store.updateConversationLastMessage(msg);
                            _this2.eventEmitter.emit(_wfcEvent2.default.ConversationInfoUpdate, _this2.store.getConversationInfo(msg.conversation));
                            if (!superGroupMessage && (!pullSettings || _config2.default.ENABLE_ROAMING_MESSAGE_RECEIVING_NOTIFICATION)) {
                                _this2.eventEmitter.emit(_wfcEvent2.default.ReceiveMessage, msg, hasMore);
                            }
                        }
                    } else {
                        if (_config2.default.ENABLE_GENERATE_CONVERSATION_FOR_TRANSPARENT_MESSAGE) {
                            _this2.store.genAndSaveDefaultConversationInfo(msg.conversation);
                        }
                        if (_config2.default.ENABLE_ROAMING_TRANSPARENT_MESSAGE_RECEIVING_NOTIFICATION) {
                            _this2.eventEmitter.emit(_wfcEvent2.default.ReceiveMessage, msg, hasMore);
                        }

                        if (msg.messageContent instanceof _markUnreadMessageContent2.default && msg.from === _this2.userId) {
                            var markMsg = msg.messageContent;
                            var conversation = msg.conversation;
                            _this2.store.setLastReceivedMessageUnread(conversation, markMsg.messageUid, markMsg.timestamp);
                        }
                        if (!superGroupMessage && !pullSettings) {
                            _this2.eventEmitter.emit(_wfcEvent2.default.ReceiveMessage, msg, hasMore);
                        }
                    }
                }
            });

            needUpdateGroups.forEach(function (groupId) {
                // this.getGroupInfo(groupId, true);
                _this2._reloadGroupInfosFromRemote(groupId);
            });
            needUpdateGroupMembers.forEach(function (groupId) {
                //this.getGroupMembers(groupId, true);
                _this2._reloadGroupMembersFromRemote(groupId, _this2.store.getGroupMemberMaxDt(groupId));
            });
        }
    }, {
        key: '_handleGroupNotificationMessage',
        value: function _handleGroupNotificationMessage(msg, hasMore, needUpdateGroups, needUpdateGroupMembers) {
            var _this3 = this;

            var messageTypes = [_messageContentType2.default.CreateGroup_Notification, _messageContentType2.default.AddGroupMember_Notification, _messageContentType2.default.KickOffGroupMember_Notification, _messageContentType2.default.TransferGroupOwner_Notification, _messageContentType2.default.ModifyGroupExtra_Notification, _messageContentType2.default.ModifyGroupAlias_Notification];
            if (messageTypes.indexOf(msg.content.type) > -1) {
                needUpdateGroups.push(msg.conversation.target);
                needUpdateGroupMembers.push(msg.conversation.target);

                if (msg.content.type === _messageContentType2.default.KickOffGroupMember_Notification) {
                    var kicked = msg.messageContent.kickedMembers.find(function (memberId) {
                        return memberId === _this3.getUserId();
                    });
                    this.log('kickoff', msg.conversation.target, this.isClearGroupMsgWhenKickoff);
                    if (kicked === this.getUserId() && this.isClearGroupMsgWhenKickoff) {
                        // this.store.removeGroupAndMembers(msg.conversation.target);
                        this.store.removeConversation(msg.conversation, true);
                    }
                } else if (msg.content.type === _messageContentType2.default.AddGroupMember_Notification) {
                    // 如果之前被踢，并保留了会话，需要删除本地的历史消息，然后通过加载历史消息的方式去加载，不然被踢到重新加入这期间的消息会缺失
                    if (!this.isClearGroupMsgWhenKickoff) {
                        this.store.clearConversationMessagesBeforeMessageUid(msg.conversation, msg.messageUid);
                    }
                }
            }

            messageTypes = [_messageContentType2.default.SetGroupManager_Notification, _messageContentType2.default.MuteGroupMember_Notification, _messageContentType2.default.AllowGroupMember_Notification, _messageContentType2.default.ModifyGroupMemberExtra_Notification];
            if (messageTypes.indexOf(msg.content.type) > -1) {
                needUpdateGroupMembers.push(msg.conversation.target);
            }

            messageTypes = [_messageContentType2.default.ChangeGroupName_Notification, _messageContentType2.default.ChangeGroupPortrait_Notification, _messageContentType2.default.MuteGroup_Notification, _messageContentType2.default.ChangeJoinType_Notification, _messageContentType2.default.ChangePrivateChat_Notification, _messageContentType2.default.ChangeSearchable_Notification, _messageContentType2.default.ModifyGroupExtra_Notification];
            if (messageTypes.indexOf(msg.content.type) > -1) {
                needUpdateGroups.push(msg.conversation.target);
            }

            messageTypes = [_messageContentType2.default.QuitGroup_Notification];
            if (messageTypes.indexOf(msg.content.type) > -1) {
                if (msg.from === this.getUserId()) {
                    this.store.removeGroupAndMembers(msg.conversation.target);
                    this.store.removeFavGroup(msg.conversation.target);
                    this.store.removeConversation(msg.conversation, true);
                    this.eventEmitter.emit(_wfcEvent2.default.ReceiveMessage, msg, hasMore);
                    return;
                } else {
                    needUpdateGroups.push(msg.conversation.target);
                    needUpdateGroupMembers.push(msg.conversation.target);
                }
            }

            messageTypes = [_messageContentType2.default.DismissGroup_Notification];
            if (messageTypes.indexOf(msg.content.type) > -1) {
                this.store.removeGroupAndMembers(msg.conversation.target);
                this.store.removeFavGroup(msg.conversation.target);
                if (!this.serverConfigs.isKeepMsgAfterDismiss) {
                    this.store.removeConversation(msg.conversation, true);
                }

                var gs = needUpdateGroups.filter(function (groupId) {
                    return groupId !== msg.conversation.target;
                });
                var gms = needUpdateGroupMembers.filter(function (groupId) {
                    return groupId !== msg.conversation.target;
                });

                needUpdateGroups.length = 0;
                needUpdateGroups.push.apply(needUpdateGroups, (0, _toConsumableArray3.default)(gs));
                needUpdateGroupMembers.length = 0;
                needUpdateGroupMembers.push.apply(needUpdateGroupMembers, (0, _toConsumableArray3.default)(gms));
                this.eventEmitter.emit(_wfcEvent2.default.ReceiveMessage, msg, hasMore);
            }
        }
    }, {
        key: 'onGroupInfoUpdate',
        value: function onGroupInfoUpdate(groupListIds) {
            // TODO
        }
    }, {
        key: 'onChannelInfoUpdate',
        value: function onChannelInfoUpdate(channelListIds) {
            // TODO

        }
    }, {
        key: 'onSettingUpdate',
        value: function onSettingUpdate(updatedSettings) {
            this.eventEmitter.emit(_wfcEvent2.default.SettingUpdate);
        }
    }, {
        key: 'onRecallMessage',
        value: function onRecallMessage(operatorUid, messageUid) {
            // 更新消息
            var msg = this.store.getMessageByUid(messageUid);
            if (!msg || msg.messageId === 0) {
                return;
            }
            var oriMessageContent = msg.messageContent;
            if (operatorUid === this.userId) {
                var obj = {};
                obj["s"] = msg.from;
                obj["ts"] = (0, _longUtil.numberValue)(msg.timestamp);
                var payload = msg.content;
                if (!payload || !payload.hasOwnProperty('type')) {
                    payload = msg.messageContent.encode();
                }
                obj["t"] = payload.type;
                obj["sc"] = payload.searchableContent ? payload.searchableContent : '';
                obj["c"] = payload.content ? payload.content : '';
                obj["e"] = payload.extra ? payload.content : '';
                msg.extra = (0, _stringify2.default)(obj);
            }

            var content = new _recallMessageNotification2.default(operatorUid, messageUid);
            content.fromSelf = true;
            content.setExtra(msg.extra);
            msg.messageContent = content;
            this.store.updateMessageById(msg);

            var conversationInfo = this.getConversationInfo(msg.conversation);
            if (msg.direction === 1 && _messageConfig2.default.getMessageContentFlag(oriMessageContent.type) === _persistFlag2.default.Persist_And_Count) {
                if (msg.status === _messageStatus2.default.Unread) {
                    conversationInfo.unreadCount.unread -= 1;
                } else if (msg.status === _messageStatus2.default.Mentioned) {
                    conversationInfo.unreadCount.unreadMention -= 1;
                } else if (msg.status === _messageStatus2.default.AllMentioned) {
                    conversationInfo.unreadCount.unreadMentionAll -= 1;
                }
            }

            this.eventEmitter.emit(_wfcEvent2.default.RecallMessage, operatorUid, messageUid);
        }
    }, {
        key: 'onRemoteMessageDeleted',
        value: function onRemoteMessageDeleted(messageUid) {
            this.log('onRemoteMessageDeleted', messageUid);
            this.store.deleteMessageByUid(messageUid);
            this.eventEmitter.emit(_wfcEvent2.default.MessageDeleted, messageUid);
        }
    }, {
        key: 'onMessageDeleted',
        value: function onMessageDeleted(messageId) {
            this.log('onMessageDeleted', messageId);
            this.eventEmitter.emit(_wfcEvent2.default.DeleteMessage, messageId);
        }
    }, {
        key: 'onUserInfoUpdate',
        value: function onUserInfoUpdate(userIds) {
            var _this4 = this;

            this.log('userInfo update, ids', userIds);
            var userIdA = JSON.parse(userIds);
            userIdA.map(function (userId) {
                _this4._reloadUserInfosFromRemote([userId]);
            });
        }
    }, {
        key: 'onFriendListUpdate',
        value: function onFriendListUpdate(friendListIds) {
            this.log('friendList update, ids', friendListIds);
            this.eventEmitter.emit(_wfcEvent2.default.FriendListUpdate, friendListIds);
        }
    }, {
        key: 'onFriendRequestUpdate',
        value: function onFriendRequestUpdate(newFriendRequests) {
            this.eventEmitter.emit(_wfcEvent2.default.FriendRequestUpdate, newFriendRequests);
        }

        /**
         *
         * @param {messagecontent} content
         */

    }, {
        key: 'registerMessageContent',
        value: function registerMessageContent(name, flag, type, contentClazz) {
            _messageConfig2.default.registerMessageContent(name, flag, type, contentClazz);
        }
    }, {
        key: 'getHost',
        value: function getHost() {
            return (0, _connect2.host)();
        }

        //* @param {string} platformName  小程序平台名称，可选值为：ali、wx、qq、tt、bd、uni，分别对应支付宝小程序、微信小程序、QQ小程序、今日头条小程序、百度小程序、uni app

    }, {
        key: 'getClientId',
        value: function getClientId() {
            var platformName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'wx';

            if (['ali', 'wx', 'qq', 'tt', 'bd', 'uni'].indexOf(platformName) < 0) {
                console.error('platformName must be one of [ali、wx、qq、tt、bd、uni]');
                return '';
            }
            var options = this._platformOptions(platformName);
            if (this.clientId === '') {
                try {
                    this.clientId = options.mp.getStorageSync('clientId');
                } catch (e) {}
                if (!this.clientId) {
                    this.clientId = this.uuid();
                    try {
                        options.mp.setStorage({
                            key: "clientId",
                            data: this.clientId
                        });
                    } catch (e) {}
                }
            }

            this.log('clientId', this.clientId);
            return this.clientId;
        }
    }, {
        key: 'getEncodedClientId',
        value: function getEncodedClientId() {
            var platformName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'wx';

            var clientId = this.getClientId(platformName);
            return (0, _aes.AESEncrypt)(clientId, '');
        }

        /**
         *
         * @param {string} data data to encode
         * @returns {string} string in base64 format
         */

    }, {
        key: 'encodeData',
        value: function encodeData(data) {
            return (0, _aes.AESEncrypt)(data, this.privateSecret);
        }

        /**
         *
         * @param {string} encodedData  data in base64 format to decode
         * @returns {null | string}
         */

    }, {
        key: 'decodeData',
        value: function decodeData(encodedData) {
            return this._Utf8ArrayToStr((0, _aes.AESDecrypt)(encodedData, this.privateSecret, false));
        }
    }, {
        key: '_Utf8ArrayToStr',
        value: function _Utf8ArrayToStr(array) {
            var out, i, len, c;
            var char2, char3;

            out = "";
            len = array.length;
            i = 0;
            while (i < len) {
                c = array[i++];
                switch (c >> 4) {
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                        // 0xxxxxxx
                        out += String.fromCharCode(c);
                        break;
                    case 12:
                    case 13:
                        // 110x xxxx   10xx xxxx
                        char2 = array[i++];
                        out += String.fromCharCode((c & 0x1F) << 6 | char2 & 0x3F);
                        break;
                    case 14:
                        // 1110 xxxx  10xx xxxx  10xx xxxx
                        char2 = array[i++];
                        char3 = array[i++];
                        out += String.fromCharCode((c & 0x0F) << 12 | (char2 & 0x3F) << 6 | (char3 & 0x3F) << 0);
                        break;
                }
            }
            return out;
        }
    }, {
        key: 'uuid',
        value: function uuid() {
            var s = [];
            var hexDigits = "0123456789abcdef";
            for (var i = 0; i < 36; i++) {
                s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);
            }
            s[14] = "4"; // bits 12-15 of the time_hi_and_version field to 0010
            s[19] = hexDigits.substr(s[19] & 0x3 | 0x8, 1); // bits 6-7 of the clock_seq_hi_and_reserved to 01
            s[8] = s[13] = s[18] = s[23] = "-";

            var id = s.join("");
            return id;
        }
    }, {
        key: 'init',
        value: function init(args) {
            this.initialized = true;
            if (args && args.length > 0) {
                _config2.default.config(args[0]);
            }
        }
    }, {
        key: 'onForeground',
        value: function onForeground() {
            this.log('onForeground');
            if (this.connectionStatus !== _connectionStatus2.default.ConnectionStatusConnected) {
                this._reconnect();
            } else {
                var now = new Date().getTime();
                var timeout = _config2.default.KEEP_ALIVE_TIMEOUT > _config2.default.KEEP_ALIVE_INTERNAL ? _config2.default.KEEP_ALIVE_TIMEOUT : _config2.default.KEEP_ALIVE_INTERNAL;
                if (now - this.lastActiveTime > timeout * 1000) {
                    this.log('keep alive timeout, reconnect...');
                    this._reconnect(true);
                } else {
                    this.log('already connected');
                }
            }
        }

        //* @param {string} platformName  小程序平台名称，可选值为：ali、wx、qq、tt、bd、uni，分别对应支付宝小程序、微信小程序、QQ小程序、今日头条小程序、百度小程序、uni-app

    }, {
        key: 'connect',
        value: function connect(userId, token) {
            var _this5 = this;

            var platformName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'wx';

            if (!this.initialized) {
                this.error('请先调用 wfc.init 进行初始化');
                return;
            }
            this.log('connect', WfcImpl.version, userId, token);
            if (['ali', 'wx', 'qq', 'tt', 'bd', 'uni'].indexOf(platformName) < 0) {
                console.error('platformName must be one of [ali、wx、qq、tt、bd、uni]');
                return;
            }
            this.log('platform', this._platformOptions(platformName));
            this.platformName = platformName;
            this.store._setInfoDataSource(this._platformOptions(platformName).mp);

            this.isUserDisconnected = false;

            if (!userId || !token) {
                this.log('userId or token error');
                return;
            }
            if (typeof userId !== 'string' || typeof token !== 'string') {
                this.error('userId and token must be string type');
                return;
            }
            if (this.mqttClientInstance && (this.isConnecting || this.connectionStatus === _connectionStatus2.default.ConnectionStatusConnected) && this.userId === userId && this.token === token) {
                this.log('connect 0', this.isConnecting, this.connectionStatus, this.userId, this.token);
                return;
            }
            if (this.userId !== '' && this.userId !== userId) {
                this.reset();
            }

            this.onConnectionChanged(_connectionStatus2.default.ConnectionStatusConnecting);

            if (!this.reconnectTimer) {
                this.reconnectTimer = setInterval(function () {
                    if (_this5.connectionStatus === _connectionStatus2.default.ConnectionStatusUnconnected && _this5.userId !== '' && _this5.token !== '') {
                        if (!_this5.isConnecting) {
                            _this5.log('reconnect', _this5.userId, _this5.clientId, _this5.token, new Date().valueOf());
                            _this5.resetMqtt();
                            _this5.connect(_this5.userId, _this5.token);
                        }
                    }
                }, WfcImpl.connectionTimeout);
            }

            this.userId = userId;
            this.token = token;
            this.isConnecting = true;
            this.log('connect', new Date().getTime(), new Error().stack);
            (0, _connect2.connect)(userId, this.getClientId(), token, function (errorCode, client, privateSecret, connectTime, serverConfigs) {
                _this5.log('connect/route error', errorCode, new Date().valueOf());
                if (errorCode === -1 && _this5.connectionStatus === _connectionStatus2.default.ConnectionStatusConnected && _this5.mqttClientInstance) {
                    // do nothing
                    _this5.isConnecting = false;
                    return;
                }
                if (errorCode !== 0) {
                    var newStatus = _connectionStatus2.default.ConnectionStatusUnconnected;
                    if (errorCode === _errorCode2.default.kEcServerTokenIncorrect) {
                        newStatus = _connectionStatus2.default.ConnectionStatusTokenIncorrect;
                    } else if (errorCode === _errorCode2.default.kEcServerUserIsBlocked) {
                        newStatus = _connectionStatus2.default.ConnectionStatusRejected;
                    } else if (errorCode === _errorCode2.default.kEcServerSecrectKeyMismatch) {
                        newStatus = _connectionStatus2.default.ConnectionStatusSecretKeyMismatch;
                    } else if (errorCode === _errorCode2.default.kConnectionStatusKickedOff) {
                        newStatus = _connectionStatus2.default.ConnectionStatusKickedOff;
                    } else if (errorCode === _errorCode2.default.kEcServerNotLicensed) {
                        newStatus = _connectionStatus2.default.ConnectionStatusNotLicensed;
                    } else if (errorCode === _errorCode2.default.kEcServerTimeInconsistent) {
                        newStatus = _connectionStatus2.default.ConnectionStatusTimeInconsistent;
                    }
                    _this5.onConnectionChanged(newStatus);

                    if (client) {
                        client.removeAllListeners();
                        client.end(true, {}, function () {
                            _this5.log('mqtt client ended');
                        });
                    }
                    return;
                }

                _this5.mqttClientInstance = client;
                _this5.privateSecret = privateSecret;
                _this5.serverConfigs = serverConfigs ? serverConfigs : {};
                _this5.isReceiptEnable = serverConfigs.isReceiptEnable;
                _this5.isUserOnlineStateEnable = serverConfigs.isUserOnlineStateEnable;
                _this5.isClearGroupMsgWhenKickoff = serverConfigs.isClearGroupMsgWhenKickoff;
                _this5.isGlobalDisableDraftSync = serverConfigs.isGlobalDisableDraftSync;

                _this5.mqttClientInstance.on('connect', function (packet) {
                    _this5.isConnecting = false;
                    _this5.isPullingMsg = false;
                    _this5.isPullingChatroomMsg = false;
                    _this5.lastActiveTime = new Date().getTime();

                    var ack = ConnectAckPayload.decode(packet.payload);
                    _this5.log('connect ack', ack, _this5.msgHead);

                    _this5._pullFriends(ack.friendHead);
                    _this5._pullFriendRequest(ack.friendRqHead);

                    // why?
                    // mqtt over websocket publish ack的时序和 publish 的时序不严格一致， 会出现后publish的response比先publish的response提前收到

                    if (_this5.msgHead) {
                        var pullSettings = _this5.settingHead.compare(ack.settingHead) < 0;
                        _this5._pullMessages(ack.msgHead, 0, pullSettings, ack.recvHead, ack.readHead, ack.groupConvHead, true);
                    } else {
                        if (_config2.default.MESSAGE_ROAMING) {
                            _this5.msgHead = _long2.default.ZERO;
                            _this5.log('pull roaming message', _this5.msgHead.toString(), ack.msgHead.toString());
                            _this5.onConnectionChanged(_connectionStatus2.default.ConnectionStatusReceiveing);
                            _this5._pullMessages(_long2.default.MAX_VALUE, 0, true, ack.recvHead, ack.readHead, ack.groupConvHead, true);
                        } else {
                            _this5.msgHead = ack.msgHead;
                            _this5._pullUserSettings(ack.settingHead);
                        }
                    }

                    var cur = new Date().getTime();
                    _this5.deltaTime = Number(ack.serverTime) - cur - (cur - connectTime) / 2;

                    // connected, for testing your code
                    // this.test();
                });
                _this5.mqttClientInstance.on('reconnect', function () {
                    _this5.isConnecting = false;
                    _this5.log('------reconnect--------', _this5.clientId);
                });
                _this5.mqttClientInstance.on('offline', function () {
                    // 应当不会走到这儿
                    _this5.log('------offline--------');
                    _this5.isConnecting = false;
                    _this5.connectionStatus = _connectionStatus2.default.ConnectionStatusUnconnected;
                    !_this5.isUserDisconnected && _this5._reconnect();
                });
                _this5.mqttClientInstance.on('close', function () {
                    // mqtt的自动重连好像有些问题，已取消自动重连，改为此处控制重连
                    _this5.log('------close--------', _this5.clientId);
                    _this5.isConnecting = false;
                    _this5.connectionStatus = _connectionStatus2.default.ConnectionStatusUnconnected;
                    !_this5.isUserDisconnected && _this5._reconnect();
                });
                _this5.mqttClientInstance.on('disconnect', function () {
                    _this5.log('------disconnect--------');
                });

                _this5.mqttClientInstance.on('error', function (err) {
                    _this5.log('------error--------', err);
                    _this5.isConnecting = false;
                    _this5.connectionStatus = _connectionStatus2.default.ConnectionStatusUnconnected;
                    !_this5.isUserDisconnected && _this5._reconnect();
                });

                _this5.mqttClientInstance.on('pingresp', function (respTime) {
                    console.log('pingresp', new Date().getTime());
                    _this5.lastActiveTime = new Date().getTime();
                });

                // 这儿来的数据未加密
                _this5.mqttClientInstance.on('message', function (topic, message, packet) {
                    _this5.lastActiveTime = new Date().getTime();
                    _this5.log('on push', topic);
                    if (topic === 'MS') {
                        var msg = PbMessage.decode(message);
                        var msgs = [];
                        msgs.push(msg);
                        _this5.onReceiveMessage(msgs, false, false);
                    } else if (topic === 'MN') {
                        var notifyMessage = NotifyMessage.decode(message);
                        _this5._pullMessages(notifyMessage.head, notifyMessage.type, false, false, false, false, true);
                    } else if (topic === 'GMN') {
                        var notifyGroupMessage = NotifyGroupMessage.decode(message);
                        _this5._pullGroupConvs(notifyGroupMessage.head, notifyGroupMessage.target, notifyGroupMessage.line, true);
                    } else if (topic === 'FN') {
                        if (message.length === 8) {
                            var head = _this5._getLongFromBuffer(message);
                            _this5._pullFriends(head);
                        }
                    } else if (topic === 'FRN') {
                        if (message.length === 8) {
                            var _head = _this5._getLongFromBuffer(message);
                            _this5._pullFriendRequest(_head);
                        }
                    } else if (topic === 'UN') {
                        if (message.length === 8) {
                            var _head2 = _this5._getLongFromBuffer(message);
                            _this5._pullUserSettings(_head2);
                        }
                    } else if (topic === 'RMN') {
                        var recall = NotifyRecallMessage.decode(message);
                        _this5.onRecallMessage(recall.fromUser, recall.id);
                    } else if (topic === 'RCN') {
                        if (message.length === 8) {
                            var _head3 = _this5._getLongFromBuffer(message);
                            _this5._pullRecv(_head3);
                        }
                    } else if (topic === 'RDN') {
                        if (message.length === 8) {
                            var _head4 = _this5._getLongFromBuffer(message);
                            _this5._pullRead(_head4);
                        }
                    } else if (topic === 'CONFN') {
                        var info = IDBuf.decode(message);
                        _this5.onConferenceEvent(info.id);
                    } else if (topic === 'ROFL') {
                        _this5._reconnect(true);
                    } else if (topic === 'UIN') {
                        _this5.getUserInfo(_this5.userId, true);
                    } else if (topic === 'POSN') {
                        _this5._onlineStateNotify(message);
                    }
                });
            }, this._platformOptions(platformName));
        }
    }, {
        key: '_reconnect',
        value: function _reconnect() {
            var _this6 = this;

            var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            if (force) {
                this.log('force reconnect');
                this.resetMqtt();
                this.connect(this.userId, this.token);
                return;
            }
            if (this.isConnecting || !this.userId || !this.token) {
                return;
            }
            setTimeout(function () {
                if (_this6.connectionStatus !== _connectionStatus2.default.ConnectionStatusUnconnected || _this6.isConnecting) {
                    return;
                }
                _this6.resetMqtt();
                _this6.connect(_this6.userId, _this6.token);
            }, WfcImpl.connectionTimeout);
        }
    }, {
        key: '_getLongFromBuffer',
        value: function _getLongFromBuffer(buffer) {
            return _long2.default.fromBytesBE(buffer.slice(0, 8));
        }
    }, {
        key: '_getStringFromBuffer',
        value: function _getStringFromBuffer(buffer) {
            return buffer.toString();
        }
    }, {
        key: '_pullMessages',
        value: function _pullMessages(head) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            var pullSettings = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
            var recvHead = arguments[3];
            var readHead = arguments[4];
            var groupConvHead = arguments[5];

            var _this7 = this;

            var syncRead = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;
            var mn = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : false;

            this.log('to pull user messages', head, type, pullSettings);
            // 非chatroom
            if (type !== 1) {
                if (mn) {
                    this.pendingMN = true;
                }
                if (this.isPullingMsg || this.msgHead.compare(head) >= 0 && !this.pendingMN) {
                    this.log('local message is up to date', head, this.msgHead, pullSettings, recvHead, readHead, syncRead);
                    if (pullSettings || syncRead) {
                        this._pullUserSettings(_long2.default.MAX_VALUE);
                        if (this.isReceiptEnable) {
                            this._pullRecv(recvHead);
                            this._pullRead(readHead);
                            if (syncRead) {
                                this._syncRead();
                            }
                        }
                        this._pullGroupConvs(groupConvHead);
                    } else {
                        if (this.connectionStatus !== _connectionStatus2.default.ConnectionStatusConnected) {
                            this.onConnectionChanged(_connectionStatus2.default.ConnectionStatusConnected);
                        }
                    }
                    return;
                }
                this.isPullingMsg = true;
                this.pendingMN = false;
            } else {
                if (!this.currentChatRoomId) {
                    return;
                }
                if (this.isPullingChatroomMsg || (0, _longUtil.gte)(this.chatRoomMsgHead, head)) {
                    return;
                }
                this.isPullingChatroomMsg = true;
            }

            var pullMessageRequest = PullMessageRequest.encode({
                'id': type !== 1 ? this.msgHead : this.chatRoomMsgHead,
                'type': type
            }).finish();

            this.log('pull user messages, type: ' + type + ', head: ' + (0, _longUtil.stringValue)(head) + ', msgHead: ' + (0, _longUtil.stringValue)(this.msgHead) + ', chatroomMsgHead: ' + (0, _longUtil.stringValue)(this.chatRoomMsgHead));
            this._publish("MP", pullMessageRequest, function (errorCode, data) {
                _this7.log('pull user messages response', errorCode);
                if (errorCode !== 0 || !data) {
                    _this7.log('pull message error', errorCode);
                    if (type !== 1) {
                        _this7.isPullingMsg = false;
                    } else {
                        _this7.isPullingChatroomMsg = false;
                    }
                    if (pullSettings) {
                        _this7._pullUserSettings(_this7.settingHead);
                    }
                    return;
                }
                var pr = PullMessageResult.decode(data);
                if (type === 0) {
                    _this7.msgHead = pr.current;
                    _this7.isPullingMsg = false;
                    _this7.log('pull message result', (0, _longUtil.stringValue)(pr.current), pr.message.length);
                } else if (type === 1) {
                    _this7.log('pull chatroom message result', (0, _longUtil.stringValue)(pr.current), pr.message.length);
                    _this7.isPullingChatroomMsg = false;
                    if (pr.message.length > 0 && pr.message[0].conversation.target !== _this7.currentChatRoomId) {
                        _this7.log('user not in chatroom now, drop message');
                        return;
                    }
                    _this7.chatRoomMsgHead = pr.current;
                }
                _this7.onReceiveMessage(pr.message, pullSettings);
                _this7._pullMessages(pr.head, type, pullSettings, recvHead, readHead, groupConvHead, syncRead);
            });
        }
    }, {
        key: '_pullRecv',
        value: function _pullRecv(head) {
            var _this8 = this;

            if (!head || this.isPullingRecv || this.recvHead.compare(head) >= 0) {
                return;
            }
            this.isPullingRecv = true;
            var version = Version.create();
            version.version = this.recvHead;
            var request = Version.encode(version).finish();

            this.log('pull recv', this.recvHead);
            this._publish("RCP", request, function (errorCode, data) {
                _this8.isPullingRecv = false;
                if (errorCode === 0 && data) {
                    var pullResult = PullDeliveryResult.decode(data);
                    _this8.log('pull recv result', pullResult);
                    _this8.recvHead = pullResult.current;
                    _this8.store.updateDeliveries(pullResult.delivery);
                    var result = new _map2.default();
                    pullResult.delivery.forEach(function (d) {
                        result.set(d.fromUser, d.receiveTime);
                    });
                    _this8.eventEmitter.emit(_wfcEvent2.default.MessageReceived, result);
                    _this8._pullRecv(pullResult.head);
                }
            });
        }
    }, {
        key: '_pullRead',
        value: function _pullRead(head) {
            var _this9 = this;

            if (!head || this.isPullingRead || this.readHead.compare(head) >= 0) {
                return;
            }
            this.isPullingRead = true;
            var version = Version.create();
            version.version = this.readHead;
            var request = Version.encode(version).finish();

            this.log('pull read', this.readHead);
            this._publish("RDP", request, function (errorCode, data) {
                _this9.isPullingRead = false;
                if (errorCode === 0 && data) {
                    var pullResult = PullReadResult.decode(data);
                    _this9.log('pull read result', pullResult);
                    _this9.readHead = pullResult.current;
                    _this9.store.updateReads(pullResult.read);

                    var result = [];
                    pullResult.read.forEach(function (r) {
                        var readEntry = new _readEntry2.default();
                        readEntry.userId = r.fromUser;
                        readEntry.readTime = r.readTime;
                        if (r.conversation.type === 0) {
                            r.conversation.target = r.fromUser;
                        }
                        readEntry.conversation = (0, _assign2.default)(new _conversation2.default(), r.conversation);
                        readEntry.conversation.conversationType = readEntry.conversation.type;
                        result.push(readEntry);
                    });

                    _this9.eventEmitter.emit(_wfcEvent2.default.MessageRead, result);
                    _this9._pullRead(pullResult.head);
                }
            });
        }
    }, {
        key: '_pullGroupConvs',
        value: function _pullGroupConvs(head, target, line, gmn) {
            var _this10 = this;

            if (!gmn && (0, _longUtil.gte)(this.groupHead, head)) {
                return;
            }
            if (this.isPullingGroupMsg) {
                this.pendingGMN = true;
                return;
            }
            this.isPullingGroupMsg = true;
            var request = PullGroupConvRequest.create();
            request.head = this.groupHead;
            if (target) {
                request.target = target;
                request.line = line;
                request.messageId = this.store.getGroupMessageHead(target, line);
            }
            request = PullGroupConvRequest.encode(request).finish();
            this.log('pull groupConvs', this.groupHead);
            this._publish("GCP", request, function (errorCode, data) {
                _this10.isPullingGroupMsg = false;
                if (errorCode === 0 && data) {
                    var result = PullGroupConvResult.decode(data);
                    _this10.log('pull groupConvs result', result);
                    _this10._onPullGroupConvSuccess(target, line, result);
                } else {
                    //this.onConnectionChanged(ConnectionStatus.ConnectionStatusUnconnected);
                }
            });
        }
    }, {
        key: '_onPullGroupConvSuccess',
        value: function _onPullGroupConvSuccess(target, line, result) {
            this.groupHead = result.current;
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = (0, _getIterator3.default)(result.conv), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var conv = _step.value;

                    this.store.setGroupMessageServerHead(conv.groupId, conv.line, conv.msgHead);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            var messageResult = result.groupMessage;
            if (target && (messageResult.msg.length > 0 || messageResult.message.length > 0)) {
                var pulledMsgs = messageResult.msg;
                var pulledGroupMsgs = messageResult.message;
                var filledGroupMsgs = this._fillGroupMessage(messageResult.groupId, messageResult.line, pulledGroupMsgs);
                var msgs = pulledMsgs.concat(filledGroupMsgs);
                this._onPullGroupMessages(msgs, [messageResult]);
            }

            this.isPullingGroupMsg = false;
            this._pullGroupMessages();
            if (this.pendingGMN) {
                this.pendingGMN = false;
                this._pullGroupConvs(_long2.default.MAX_VALUE, '', 0, false);
            }
        }
    }, {
        key: '_pullGroupMessages',
        value: function _pullGroupMessages() {
            var _this11 = this;

            if (this.isPullingGroupMsg) {
                return;
            }
            var heads = this.store.getGroupMessageHeads();
            var requests = [];
            if (heads.length > 0) {
                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                    for (var _iterator2 = (0, _getIterator3.default)(heads), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                        var head = _step2.value;

                        var req = PullGroupMessageRequest.create();
                        req.groupId = head.target;
                        req.line = head.line;
                        req.id = head.head;
                        requests.push(req);
                    }
                } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion2 && _iterator2.return) {
                            _iterator2.return();
                        }
                    } finally {
                        if (_didIteratorError2) {
                            throw _iteratorError2;
                        }
                    }
                }
            }
            if (requests.length > 0) {
                // this.onConnectionChanged(ConnectionStatus.ConnectionStatusReceiveing);
                this.isPullingGroupMsg = true;
                var _req = PullGroupMessageRequests.create();
                _req.request = requests;
                this.log('_pullGroupMessages', _req, requests);
                _req = PullGroupMessageRequests.encode(_req).finish();
                this._publish("GMP", _req, function (errorCode, data) {
                    _this11.isPullingGroupMsg = false;
                    if (errorCode === 0 && data) {
                        var results = PullGroupMessageResults.decode(data);
                        _this11.log('_pullGroupMessages result', results);
                        _this11._onPullGroupMessagesSuccess(results);
                    } else {
                        // this.onConnectionChanged(ConnectionStatus.ConnectionStatusUnconnected);
                    }
                });
            }
        }
    }, {
        key: '_onPullGroupMessagesSuccess',
        value: function _onPullGroupMessagesSuccess(results) {
            if (results.result.length) {
                var msgs = [];
                var _iteratorNormalCompletion3 = true;
                var _didIteratorError3 = false;
                var _iteratorError3 = undefined;

                try {
                    for (var _iterator3 = (0, _getIterator3.default)(results.result), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                        var r = _step3.value;

                        var pulledMsgs = r.msg;
                        var pulledGroupMsgs = r.message;
                        var filledGroupMsgs = this._fillGroupMessage(r.groupId, r.line, pulledGroupMsgs);
                        msgs = msgs.concat(pulledMsgs.concat(filledGroupMsgs));
                    }
                } catch (err) {
                    _didIteratorError3 = true;
                    _iteratorError3 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion3 && _iterator3.return) {
                            _iterator3.return();
                        }
                    } finally {
                        if (_didIteratorError3) {
                            throw _iteratorError3;
                        }
                    }
                }

                this._onPullGroupMessages(msgs, results.result);
            }
            this.isPullingGroupMsg = false;
            // this.onConnectionChanged(ConnectionStatus.ConnectionStatusConnected);
            this._pullGroupMessages();
            if (this.pendingGMN) {
                this.pendingGMN = false;
                this._pullGroupConvs(_long2.default.MAX_VALUE, '', 0, false);
            }
        }
    }, {
        key: '_onPullGroupMessages',
        value: function _onPullGroupMessages(messages, results) {
            console.log('_onPullGroupMessages', messages, results);
            this.onReceiveMessage(messages, false, true, messages.length > 50);
            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
                for (var _iterator4 = (0, _getIterator3.default)(results), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                    var r = _step4.value;

                    var key = _conversationType2.default.Group + '-' + r.line + '-' + r.groupId;
                    var syncSetting = this.getUserSetting(_userSettingScope2.default.Conversation_Sync, key);

                    if (syncSetting && (0, _longUtil.gt)(syncSetting, 0)) {
                        //TODO 清消息未读状态
                    }

                    this.store.setGroupMessageHead(r.groupId, r.line, r.current);
                    this.store.setGroupMessageServerHead(r.groupId, r.line, r.head);
                }
            } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion4 && _iterator4.return) {
                        _iterator4.return();
                    }
                } finally {
                    if (_didIteratorError4) {
                        throw _iteratorError4;
                    }
                }
            }
        }
    }, {
        key: '_parseGroupMessageFlag',
        value: function _parseGroupMessageFlag(flag) {
            return {
                contentType: flag >> 8 & 0x7FF,
                persistFlag: flag >> 4 & 0xF,
                mentionedType: flag >> 1 & 7,
                send: (flag & 1) > 0
            };
        }
    }, {
        key: '_messageId2Time',
        value: function _messageId2Time(messageId) {
            // messageId >>= 21;
            // messageId += 1514736000000L;
            var timestamp = messageId.shiftRight(21);
            timestamp = timestamp.add(1514736000000);
            return timestamp;
        }
    }, {
        key: '_fillGroupMessage',
        value: function _fillGroupMessage(groupId, line, groupMsgs) {
            var msgs = [];
            var _iteratorNormalCompletion5 = true;
            var _didIteratorError5 = false;
            var _iteratorError5 = undefined;

            try {
                for (var _iterator5 = (0, _getIterator3.default)(groupMsgs), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                    var gmsg = _step5.value;

                    var pbMsg = PbMessage.create();
                    var flag = this._parseGroupMessageFlag(gmsg.flag);

                    pbMsg.messageId = gmsg.messageId;
                    pbMsg.conversation = PbConversation.create();
                    pbMsg.conversation.type = _conversationType2.default.Group;
                    pbMsg.conversation.target = groupId;
                    pbMsg.conversation.line = line;
                    pbMsg.content = PbMessageContent.create();
                    pbMsg.content.type = flag.contentType;
                    pbMsg.content.persistFlag = flag.persistFlag;
                    pbMsg.content.mentionedType = flag.mentionedType;
                    pbMsg.content.__notLoaded = true;

                    if (pbMsg.content.mentionedType > 0 && pbMsg.content.mentionedType !== 2) {
                        pbMsg.content.mentionedTarget.push(this.userId);
                    }

                    pbMsg.fromUser = gmsg.fromUser;
                    // msg.serverTimestamp = messageId2Time(it->messageId);
                    pbMsg.serverTimestamp = this._messageId2Time(gmsg.messageId);
                    msgs.push(pbMsg);
                }
            } catch (err) {
                _didIteratorError5 = true;
                _iteratorError5 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion5 && _iterator5.return) {
                        _iterator5.return();
                    }
                } finally {
                    if (_didIteratorError5) {
                        throw _iteratorError5;
                    }
                }
            }

            return msgs;
        }
    }, {
        key: 'isReceiptEnabled',
        value: function isReceiptEnabled() {
            return this.isReceiptEnable;
        }
    }, {
        key: 'getConversationDelivery',
        value: function getConversationDelivery(conversation) {
            return this.store.getConversationDelivery(conversation);
        }
    }, {
        key: 'getConversationRead',
        value: function getConversationRead(conversation) {
            return this.store.getConversationRead(conversation);
        }
    }, {
        key: 'setDeviceToken',
        value: function setDeviceToken(pushType, token) {
            var _this12 = this;

            if (!(pushType > 5) || !token) {
                this.error('setDeviceToken error, invalid parameters', pushType, token);
                return;
            }
            var request = UploadDeviceTokenRequest.create();
            request.pushType = pushType;
            request.appName = 'wfc.wx';
            request.deviceToken = token;
            request.platform = 5; // web
            this._publish('UDT', UploadDeviceTokenRequest.encode(request).finish(), function (err, data) {
                if (!err) {
                    _this12.log('setDeviceToken error', err);
                }
            });
        }
    }, {
        key: 'getAuthCode',
        value: function getAuthCode(applicationId, type, host, successCB, failCB) {
            var request = AuthCodeRequest.create();
            request.targetId = applicationId;
            request.type = type;
            request.host = host;

            this._publish('ATR', AuthCodeRequest.encode(request).finish(), function (err, data) {
                if (err === 0) {
                    var resp = null;
                    if (data) {
                        var info = IDBuf.decode(data);
                        resp = info.id;
                    }
                    successCB && successCB(resp);
                } else {
                    failCB && failCB(err);
                }
            });
        }
    }, {
        key: '_pullUnreadMessages',
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
                var conversationList, MAX_TO_LOAD_UNREAD_MESSAGE_CONVERSATION_COUNT, i, conversation, oldestMsg;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                conversationList = this.getConversationList([0, 1], [0]);
                                MAX_TO_LOAD_UNREAD_MESSAGE_CONVERSATION_COUNT = 200;
                                i = 0;

                            case 3:
                                if (!(i < conversationList.length && i < MAX_TO_LOAD_UNREAD_MESSAGE_CONVERSATION_COUNT)) {
                                    _context.next = 19;
                                    break;
                                }

                                conversation = conversationList[i].conversation;
                                oldestMsg = this.store.getConversationOldestMessage(conversation);

                                if (!oldestMsg) {
                                    oldestMsg = {
                                        timestamp: _long2.default.MAX_VALUE,
                                        messageUid: _long2.default.MAX_VALUE
                                    };
                                }
                                _context.next = 9;
                                return this._pullConversationUnreadMessages(conversation, oldestMsg);

                            case 9:
                                oldestMsg = _context.sent;

                            case 10:
                                if (!oldestMsg) {
                                    _context.next = 16;
                                    break;
                                }

                                _context.next = 13;
                                return this._pullConversationUnreadMessages(conversation, oldestMsg);

                            case 13:
                                oldestMsg = _context.sent;
                                _context.next = 10;
                                break;

                            case 16:
                                i++;
                                _context.next = 3;
                                break;

                            case 19:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function _pullUnreadMessages() {
                return _ref.apply(this, arguments);
            }

            return _pullUnreadMessages;
        }()

        /**
         *
         * 拉取会话未读消息
         * @param conversation
         * @param {Message} oldestMsg 最旧的一条消息
         * @return {Promise<Message>} 拉取到的最旧消息，为 null 表示所有未读消息已全部拉取
         * @private
         */

    }, {
        key: '_pullConversationUnreadMessages',
        value: function () {
            var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(conversation, oldestMsg) {
                var _this13 = this;

                var count, msgs, key, syncSetting, silentSetting, p;
                return _regenerator2.default.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                count = _config2.default.MAX_TO_LOAD_UNREAD_COUNT_PER_CONVERSATION;

                                if (!count) {
                                    _context2.next = 6;
                                    break;
                                }

                                msgs = this.store.getConversationMessages(conversation);

                                if (!(msgs.length > count)) {
                                    _context2.next = 6;
                                    break;
                                }

                                console.log('Up to ' + count + ' unread messages can be loaded.', conversation);
                                return _context2.abrupt('return', null);

                            case 6:
                                key = conversation.type + '-' + conversation.line + '-' + conversation.target;
                                syncSetting = this.getUserSetting(_userSettingScope2.default.Conversation_Sync, key);
                                silentSetting = this.getUserSetting(_userSettingScope2.default.ConversationSilent, key);
                                p = new _promise2.default(function (resolve, reject) {
                                    if ((!silentSetting || silentSetting.value !== '0') && syncSetting) {
                                        if ((0, _longUtil.gt)(oldestMsg.timestamp, syncSetting.value)) {
                                            _this13.loadRemoteMessages(conversation, [], oldestMsg.messageUid, 50, function (remoteMsgs) {
                                                console.log('load conversation unread msgs', key, (0, _longUtil.stringValue)(oldestMsg.messageUid), remoteMsgs.length);
                                                _this13.store.updateConversationUnreadStatus(conversation, syncSetting.value);
                                                if (remoteMsgs.length > 0) {
                                                    resolve(remoteMsgs[0]);
                                                } else {
                                                    resolve(null);
                                                }
                                            }, function (errorCode) {
                                                resolve(null);
                                            }, false);
                                        } else {
                                            resolve(null);
                                        }
                                    } else {
                                        resolve(null);
                                    }
                                });
                                return _context2.abrupt('return', p);

                            case 11:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            function _pullConversationUnreadMessages(_x12, _x13) {
                return _ref2.apply(this, arguments);
            }

            return _pullConversationUnreadMessages;
        }()
    }, {
        key: '_pullUserSettings',
        value: function _pullUserSettings(head) {
            var _this14 = this;

            this.log('pull user setting...', head);
            if (this.isPullingSetting) {
                return;
            }
            if (this.settingHead.compare(_long2.default.ZERO) > 0 && this.settingHead.compare(head) >= 0) {
                if (this.connectionStatus !== _connectionStatus2.default.ConnectionStatusConnected) {
                    this.onConnectionChanged(_connectionStatus2.default.ConnectionStatusConnected);
                }
                return;
            }

            this.isPullingSetting = true;
            var version = Version.create();
            version.version = this.settingHead;
            var request = Version.encode(version).finish();

            this._publish("UG", request, function (errorCode, data) {
                _this14.log('pull user setting response');
                _this14.isPullingSetting = false;
                if (errorCode !== 0 || !data) {
                    if (_this14.connectionStatus !== _connectionStatus2.default.ConnectionStatusConnected) {
                        if (errorCode === 0) {
                            _this14.onConnectionChanged(_connectionStatus2.default.ConnectionStatusConnected);
                        } else {
                            _this14.onConnectionChanged(_connectionStatus2.default.ConnectionStatusUnconnected);
                        }
                        _this14.log('pull user setting error', errorCode);
                    }
                    return;
                }
                var ur = GetUserSettingResult.decode(data);
                var pulledHead = _this14.settingHead;
                if (ur.entry.length > 0) {
                    ur.entry.forEach(function (e) {
                        pulledHead = (0, _longUtil.gt)(e.updateDt, pulledHead) ? e.updateDt : pulledHead;
                    });
                } else {
                    pulledHead = head;
                }
                _this14.store.updateUserSettings(ur.entry);
                _this14._preloadConversationTargetInfos();

                if (_this14.connectionStatus !== _connectionStatus2.default.ConnectionStatusConnected) {
                    _this14.onConnectionChanged(_connectionStatus2.default.ConnectionStatusConnected);
                }
                _this14.onSettingUpdate(ur.entry);
                _this14.settingHead = pulledHead;
                if ((0, _longUtil.gt)(head, pulledHead)) {
                    _this14._pullUserSettings(head);
                }
            });
        }
    }, {
        key: '_preloadConversationTargetInfos',
        value: function _preloadConversationTargetInfos() {
            if (this.isConversationTargetPreloaded) {
                return;
            }
            this.isConversationTargetPreloaded = true;
            var conversationInfos = this.store._getConversationInfos();
            var userIds = [];
            var groupIds = [];
            conversationInfos.forEach(function (c) {
                if (c.conversation.type === _conversationType2.default.Single) {
                    userIds.push(c.conversation.target);
                } else if (c.conversation.type === _conversationType2.default.Group) {
                    groupIds.push(c.conversation.target);
                }
            });

            if (userIds.indexOf(this.getUserId()) < 0) {
                userIds.push(this.getUserId());
            }
            this.getGroupInfos(groupIds);
            this.getUserInfos(userIds);
        }
    }, {
        key: '_preloadFiendsUserInfo',
        value: function _preloadFiendsUserInfo() {
            if (this.isFriendPreloaded) {
                return;
            }
            this.isFriendPreloaded = true;
            var friends = this.store.getFriendIds();
            this.getUserInfos(friends);
        }
    }, {
        key: '_preloadFirendRequsetUserInfo',
        value: function _preloadFirendRequsetUserInfo() {
            if (this.isFriendRequestPreloaded) {
                return;
            }
            // TODO
        }
    }, {
        key: '_updateUserSetting',
        value: function _updateUserSetting(scope, key, value, successCB, failCB) {
            var _this15 = this;

            var modifySettingReq = ModifyUserSettingReq.create();
            modifySettingReq.scope = scope;
            modifySettingReq.key = key;
            modifySettingReq.value = value + '';

            var requestData = ModifyUserSettingReq.encode(modifySettingReq).finish();

            this._publish("UP", requestData, function (errorCode, data) {
                if (errorCode === 0) {
                    var setting = new _userSettingEntry2.default();
                    setting.scope = scope;
                    setting.key = key;
                    setting.value = value;
                    setting.updateDt = new Date().getTime();
                    _this15.store.updateUserSettings([setting]);
                    if (successCB) {
                        successCB();
                    }
                } else {
                    if (failCB) {
                        failCB(errorCode);
                    }
                }
            });
        }
    }, {
        key: '_pullFriends',
        value: function _pullFriends(head) {
            var _this16 = this;

            if (this.friendHead.compare(head) >= 0) {
                return 0;
            }
            var version = Version.create();
            version.version = this.friendHead;
            var requet = Version.encode(version).finish();
            this._publish('FP', requet, function (errorCode, data) {
                if (errorCode !== 0 || !data) {
                    _this16.log('pull friend error', errorCode);
                    return;
                }
                var fr = GetFriendsResult.decode(data);
                _this16.log('fr', fr);
                var uids = [];
                var pulledHead = 0;
                fr.entry.map(function (e) {
                    if (e.state === 0) {
                        uids.push(e.uid);
                    }
                    _this16.store.insertFriend((0, _assign2.default)(new _friendInfo2.default(), e));

                    pulledHead = (0, _longUtil.gt)(e.updateDt, pulledHead) ? e.updateDt : pulledHead;
                });
                _this16.friendHead = pulledHead;
                if ((0, _longUtil.gt)(head, _this16.friendHead)) {
                    _this16._pullFriends(head);
                }
                _this16._preloadFiendsUserInfo();
                _this16.onFriendListUpdate(uids);
            });
        }
    }, {
        key: '_pullFriendRequest',
        value: function _pullFriendRequest(head) {
            this.log('_pullFriendRequest', head);
            if (this.friendRequestHead.compare(head) >= 0) {
                return;
            }
            var friendRequestMaxDt = this.store.getFriendRequestMaxDt();
            this.loadFriendRequestFromRemote(friendRequestMaxDt);
        }
    }, {
        key: 'disconnect',
        value: function disconnect() {
            this.onConnectionChanged(_connectionStatus2.default.ConnectionStatusLogout);
            this.reset();
            this.isUserDisconnected = true;
        }
    }, {
        key: 'getProtoRevision',
        value: function getProtoRevision() {
            return WfcImpl.version;
        }
    }, {
        key: 'getUserId',
        value: function getUserId() {
            return this.userId;
        }
    }, {
        key: 'getServerDeltaTime',
        value: function getServerDeltaTime() {
            return parseInt(this.deltaTime);
        }
    }, {
        key: 'isLogin',
        value: function isLogin() {
            return this.token && this.token.length > 0;
        }
    }, {
        key: 'getConnectionStatus',
        value: function getConnectionStatus() {
            return this.connectionStatus;
        }
    }, {
        key: 'useEncryptSM4',
        value: function useEncryptSM4() {
            console.log('use encryptSM4');
            (0, _aes.useEncryptSM4)();
        }
    }, {
        key: 'getMyGroupList',
        value: function getMyGroupList() {
            var groupIds = this.store.getFavGroups();
            if (!groupIds || groupIds.length === 0) {
                return [];
            }
            return this.getGroupInfos(groupIds);
        }
    }, {
        key: '_publish',
        value: function _publish(topic, data, cb) {
            var _this17 = this;

            var encryptData = this._encrypt(data);
            if (!this.mqttClientInstance) {
                this.log('the connect is reset, reconnecting');
                if (cb) {
                    cb(-1);
                }
                return;
            }

            var timer = setTimeout(function () {
                _this17.log('publish not response after ' + _config2.default.SEND_MESSAGE_TIMEOUT + 's, reset');
                if (cb) {
                    cb(-1);
                }
                _this17.connectionStatus = _connectionStatus2.default.ConnectionStatusUnconnected;
                _this17._reconnect();
            }, (_config2.default.SEND_MESSAGE_TIMEOUT ? _config2.default.SEND_MESSAGE_TIMEOUT : 20) * 1000);
            this.mqttClientInstance.publish(topic, encryptData, { qos: 1, retain: true, dup: true }, function (err, packet) {
                clearTimeout(timer);
                if (!cb) {
                    _this17.log('publish, cb is null, drop');
                    return;
                }
                if (err) {
                    _this17.log('publish error', topic, err);
                    cb(-1);
                    if (err.message === 'Connection closed') {
                        _this17.connectionStatus = _connectionStatus2.default.ConnectionStatusUnconnected;
                        _this17._reconnect();
                    }
                    return;
                }
                _this17.lastActiveTime = new Date().getTime();
                _this17.log('publish response');
                if (!packet || !packet.payload || packet.payload.length < 1) {
                    _this17.log('publish response error', packet);
                    cb && cb(-1);
                    return;
                }
                var errorCode = packet.payload[0];
                if (errorCode === 0 || errorCode === 255 || errorCode === 5) {
                    _this17.log('publish error code ', topic, errorCode);
                    var decryptData = null;
                    if (packet.payload && packet.payload.length > 1) {
                        decryptData = _this17._decryptPublishResponse(packet);
                        if (errorCode === 255) {
                            _this17.log('publish response compressed');
                            try {
                                decryptData = _pako2.default.inflate(decryptData);
                            } catch (err) {
                                _this17.log('decompress response error', err);
                            }
                        }
                        cb(0, decryptData);
                    } else {
                        _this17.log('publish response is empty');
                        cb(0, null);
                    }
                } else {
                    _this17.log('publish error', topic, errorCode);
                    cb(errorCode);
                    if (errorCode === _errorCode2.default.kEcServerTokenIncorrect || errorCode === _errorCode2.default.kEcServerUserIsBlocked || errorCode === _errorCode2.default.kEcServerSecrectKeyMismatch) {
                        // 由于web端，不持久化消息、用户信息等，且每次连接之前，都已经进行了route操作，
                        // 故如果走到了这儿，重新route解决解决不了问题
                        // this.resetMqtt();
                        // this.connect(this.userId, this.token);
                    }
                }
            });
        }
    }, {
        key: '_reloadUserInfosFromRemote',
        value: function () {
            var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(userIds) {
                return _regenerator2.default.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                this._reloadUserInfosFromRemoteEx(null, null, userIds);

                            case 1:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));

            function _reloadUserInfosFromRemote(_x14) {
                return _ref3.apply(this, arguments);
            }

            return _reloadUserInfosFromRemote;
        }()
    }, {
        key: '_reloadUserInfosFromRemoteEx',
        value: function () {
            var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(success, fail, userIds) {
                var _this18 = this;

                var pullUserRequest;
                return _regenerator2.default.wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                if (userIds.length > 2000) {
                                    this.warn('to reloadUserInfos too large', userIds.length);
                                    userIds = userIds.slice(0, 2000);
                                }
                                pullUserRequest = PullUserRequest.create();

                                userIds.forEach(function (userId) {
                                    if (!userId) {
                                        return;
                                    }
                                    if (_this18.store.loadingUsers.has(userId)) {
                                        return;
                                    } else {
                                        _this18.store.loadingUsers.add(userId);
                                    }
                                    var userRequest = UserRequest.create();
                                    userRequest.uid = userId;
                                    var localUserInfo = _this18.store.getUser(userId);
                                    userRequest.updateDt = localUserInfo ? localUserInfo.updateDt : _long2.default.ZERO;
                                    pullUserRequest.request.push(userRequest);
                                });

                                if (!(pullUserRequest.request.length < 1)) {
                                    _context4.next = 5;
                                    break;
                                }

                                return _context4.abrupt('return');

                            case 5:
                                this.log('reload userInfo from remote', userIds);
                                this._publish("UPUI", PullUserRequest.encode(pullUserRequest).finish(), function (errorCode, data) {
                                    userIds.forEach(function (userId) {
                                        _this18.store.loadingUsers.delete(userId);
                                    });
                                    if (errorCode !== 0 || !data) {
                                        _this18.log('reloadUserInfoFromRemote error', errorCode, userIds);
                                        fail && fail(errorCode !== 0 ? errorCode : -1);
                                        return;
                                    }
                                    var result = PullUserResult.decode(data).result;
                                    if (result.length > 0) {
                                        var userInfos = [];
                                        _this18.log('load userInfo from remote', result);
                                        result.forEach(function (ur) {
                                            if (ur.code !== 0) {
                                                return;
                                            }
                                            var userInfo = (0, _assign2.default)(new _userInfo2.default(), ur.user);
                                            if (_config2.default.urlRedirect) {
                                                userInfo.portrait = _config2.default.urlRedirect(userInfo.portrait);
                                            }
                                            _this18.store.setUser(userInfo);
                                            userInfos.push(_this18.store.getUser(userInfo.uid, ''));
                                        });
                                        success && success(userInfos);
                                        if (userInfos.length > 0) {
                                            _this18.eventEmitter.emit(_wfcEvent2.default.UserInfosUpdate, userInfos);
                                        }
                                    } else {
                                        _this18.log('reload userInfo from remote response empty');
                                        fail && fail(-1);
                                    }
                                });

                            case 7:
                            case 'end':
                                return _context4.stop();
                        }
                    }
                }, _callee4, this);
            }));

            function _reloadUserInfosFromRemoteEx(_x15, _x16, _x17) {
                return _ref4.apply(this, arguments);
            }

            return _reloadUserInfosFromRemoteEx;
        }()
    }, {
        key: '_reloadUserInfoFromRemote',
        value: function () {
            var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5(userId, updateDt, successCB, failCB) {
                var _this19 = this;

                var pullUserRequest, userRequest;
                return _regenerator2.default.wrap(function _callee5$(_context5) {
                    while (1) {
                        switch (_context5.prev = _context5.next) {
                            case 0:
                                pullUserRequest = PullUserRequest.create();
                                userRequest = UserRequest.create();

                                userRequest.uid = userId;
                                userRequest.updateDt = _long2.default.fromValue(updateDt);
                                pullUserRequest.request.push(userRequest);
                                this.log('reload userInfo from remote', userId);
                                this._publish("UPUI", PullUserRequest.encode(pullUserRequest).finish(), function (errorCode, data) {
                                    if (errorCode !== 0 || !data) {
                                        failCB && failCB(errorCode === 0 ? -1 : errorCode);
                                        _this19.log('reloadUserInfoFromRemote error', errorCode, userId);
                                        return;
                                    }
                                    var result = PullUserResult.decode(data).result;
                                    if (result.length > 0) {
                                        var userInfos = [];
                                        _this19.log('load userInfo from remote', result);
                                        result.forEach(function (ur) {
                                            var userInfo = (0, _assign2.default)(new _userInfo2.default(), ur.user);
                                            if (_config2.default.urlRedirect) {
                                                userInfo.portrait = _config2.default.urlRedirect(userInfo.portrait);
                                            }
                                            _this19.store.setUser(userInfo);
                                            userInfos.push(_this19.store.getUser(userInfo.uid, ''));
                                        });
                                        successCB && successCB(userInfos[0]);
                                    } else {
                                        failCB && failCB(-1);
                                    }
                                });

                            case 7:
                            case 'end':
                                return _context5.stop();
                        }
                    }
                }, _callee5, this);
            }));

            function _reloadUserInfoFromRemote(_x18, _x19, _x20, _x21) {
                return _ref5.apply(this, arguments);
            }

            return _reloadUserInfoFromRemote;
        }()
    }, {
        key: 'getUserInfo',
        value: function getUserInfo(userId) {
            var refresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            var groupId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

            var userInfo = this.store.getUser(userId, groupId);

            if (refresh || userInfo instanceof _nullUserInfo2.default) {
                this._reloadUserInfosFromRemote([userId]);
            }
            return userInfo;
        }
    }, {
        key: 'getUserInfoEx',
        value: function getUserInfoEx(userId, refresh, success, fail) {
            var userInfo = this.store.getUser(userId);
            if (!(userInfo instanceof _nullUserInfo2.default)) {
                success && success(userInfo);
            }
            if (refresh || userInfo instanceof _nullUserInfo2.default) {
                this._reloadUserInfosFromRemoteEx(function (users) {
                    success && success(users[0]);
                }, fail, [userId]);
            }
        }
    }, {
        key: 'getUserInfos',
        value: function getUserInfos() {
            var _this20 = this;

            var userIds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
            var groupId = arguments[1];

            var userInfos = [];
            var toLoadUids = [];
            userIds.forEach(function (userId) {
                var userInfo = _this20.store.getUser(userId, groupId);
                if (userInfo instanceof _nullUserInfo2.default) {
                    toLoadUids.push(userId);
                }
                userInfos.push(userInfo);
            });
            if (toLoadUids.length > 0) {
                this._reloadUserInfosFromRemote(toLoadUids);
            }
            return userInfos;
        }
    }, {
        key: 'searchUser',
        value: function () {
            var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6(keyword, searchType, page, successCB, failCB) {
                var request;
                return _regenerator2.default.wrap(function _callee6$(_context6) {
                    while (1) {
                        switch (_context6.prev = _context6.next) {
                            case 0:
                                request = SearchUserRequest.create();

                                request.fuzzy = searchType;
                                request.keyword = keyword;
                                request.page = page;
                                this._publish('US', SearchUserRequest.encode(request).finish(), function () {
                                    var errorCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -2;
                                    var data = arguments[1];

                                    if (errorCode === 0 && data) {
                                        if (successCB) {
                                            var result = SearchUserResult.decode(data);
                                            // let userInfo = Object.assign(new UserInfo(), ur.user);
                                            successCB(keyword, result.entry);
                                        }
                                    } else {
                                        if (failCB) {
                                            failCB(errorCode);
                                        }
                                    }
                                });

                            case 5:
                            case 'end':
                                return _context6.stop();
                        }
                    }
                }, _callee6, this);
            }));

            function searchUser(_x25, _x26, _x27, _x28, _x29) {
                return _ref6.apply(this, arguments);
            }

            return searchUser;
        }()
    }, {
        key: 'searchFriends',
        value: function searchFriends(keyword) {
            return this.store.searchFriends(keyword);
        }
    }, {
        key: 'searchGroups',
        value: function searchGroups(keyword) {
            return this.store.searchGroups(keyword);
        }
    }, {
        key: 'getIncommingFriendRequest',
        value: function getIncommingFriendRequest() {
            return this.store.getIncommingFriendRequest();
        }
    }, {
        key: 'getOutgoingFriendRequest',
        value: function getOutgoingFriendRequest() {
            return this.store.getOutgoingFriendRequest();
        }
    }, {
        key: 'getOneFriendRequest',
        value: function getOneFriendRequest(userId, incoming) {
            return this.store.getOneFriendRequest(userId, incoming);
        }
    }, {
        key: 'loadFriendRequestFromRemote',
        value: function loadFriendRequestFromRemote(head) {
            var _this21 = this;

            var request = Version.create();
            request.version = head;

            this._publish('FRP', Version.encode(request).finish(), function (errorCode, data) {
                if (errorCode === 0 && data) {
                    var pulledHead = 0;
                    var result = GetFriendRequestResult.decode(data);
                    _this21.log('load friend request result', result);
                    var newFriendRequests = [];
                    result.entry.forEach(function (request) {
                        var friendRequest = new _friendRequest2.default();
                        friendRequest.status = request.status;
                        friendRequest.reason = request.reason;
                        friendRequest.extra = request.extra;
                        if (request.fromUid === _this21.getUserId()) {
                            friendRequest.direction = 0;
                            friendRequest.target = request.toUid;
                            friendRequest.readStatus = request.fromReadStatus ? 1 : 0;
                        } else {
                            friendRequest.direction = 1;
                            friendRequest.target = request.fromUid;
                            friendRequest.readStatus = request.toReadStatus ? 1 : 0;
                            if (friendRequest.readStatus === 0) {
                                newFriendRequests.push(friendRequest.target);
                            }
                        }
                        friendRequest.timestamp = request.updateDt;
                        if ((0, _longUtil.gt)(request.updateDt, pulledHead)) {
                            pulledHead = request.updateDt;
                        }
                        _this21.store.insertOrReplaceFriendRequest(friendRequest);
                    });
                    _this21.friendRequestHead = pulledHead;
                    if ((0, _longUtil.gt)(head, pulledHead)) {
                        _this21.loadFriendRequestFromRemote(pulledHead);
                    }
                    _this21.onFriendRequestUpdate(newFriendRequests);
                }
            });
        }
    }, {
        key: 'getUnreadFriendRequestCount',
        value: function getUnreadFriendRequestCount() {
            return this.store.getUnreadFriendRequestCount();
        }
    }, {
        key: 'clearUnreadFriendRequestStatus',
        value: function clearUnreadFriendRequestStatus() {
            var maxDt = this.store.getUnreadFriendRequestMaxDt();
            if (_long2.default.ZERO.compare(maxDt) === 0) {
                return;
            }
            var count = this.store.clearUnreadFriendRequestStatus();
            if (count > 0) {
                var request = Version.create();
                request.version = maxDt;
                this._publish('FRUS', Version.encode(request).finish(), function (errorCode, data) {
                    // do nothing now
                });
            }
        }
    }, {
        key: 'deleteFriend',
        value: function () {
            var _ref7 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee7(userId, successCB, failCB) {
                var _this22 = this;

                var request;
                return _regenerator2.default.wrap(function _callee7$(_context7) {
                    while (1) {
                        switch (_context7.prev = _context7.next) {
                            case 0:
                                request = IDBuf.create();

                                request.id = userId;
                                this._publish('FDL', IDBuf.encode(request).finish(), function () {
                                    var errorCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -2;
                                    var data = arguments[1];

                                    if (errorCode === 0) {
                                        _this22.store.deleteFriend(userId);
                                        if (successCB) {
                                            successCB();
                                        }
                                    } else {
                                        failCB(errorCode);
                                    }
                                });

                            case 3:
                            case 'end':
                                return _context7.stop();
                        }
                    }
                }, _callee7, this);
            }));

            function deleteFriend(_x31, _x32, _x33) {
                return _ref7.apply(this, arguments);
            }

            return deleteFriend;
        }()
    }, {
        key: 'handleFriendRequest',
        value: function () {
            var _ref8 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee8(userId, accept, extra, successCB, failCB) {
                var _this23 = this;

                var request;
                return _regenerator2.default.wrap(function _callee8$(_context8) {
                    while (1) {
                        switch (_context8.prev = _context8.next) {
                            case 0:
                                request = HandleFriendRequest.create();

                                request.status = accept ? 1 : 2;
                                request.targetUid = userId;
                                request.extra = extra;
                                this._publish('FHR', HandleFriendRequest.encode(request).finish(), function (errorCode, data) {
                                    if (errorCode === 0) {
                                        _this23.store.updateFriendRequestStatus(userId, request.status);
                                        if (successCB) {
                                            successCB();
                                        }
                                    } else {
                                        if (failCB) {
                                            failCB(errorCode);
                                        }
                                    }
                                });

                            case 5:
                            case 'end':
                                return _context8.stop();
                        }
                    }
                }, _callee8, this);
            }));

            function handleFriendRequest(_x35, _x36, _x37, _x38, _x39) {
                return _ref8.apply(this, arguments);
            }

            return handleFriendRequest;
        }()
    }, {
        key: 'isBlackListed',
        value: function isBlackListed(userId) {
            this.store.isBlackListed(userId);
        }
    }, {
        key: 'getBlackList',
        value: function getBlackList() {
            return this.store.getBlackList();
        }
    }, {
        key: 'setBlackList',
        value: function setBlackList(userId, block, successCB, failCB) {
            var _this24 = this;

            var request = BlackUserRequest.create();
            request.status = block ? 2 : 1;
            request.uid = userId;
            this._publish('BLU', BlackUserRequest.encode(request).finish(), function (errorCode, data) {
                if (errorCode === 0) {
                    _this24.store.setBlackList(userId, block);
                    if (successCB) {
                        successCB();
                    }
                } else {
                    if (failCB) {
                        failCB();
                    }
                }
            });
        }
    }, {
        key: 'getMyFriendList',
        value: function getMyFriendList() {
            var fresh = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            var uids = this.store.getFriendIds();
            if (fresh || uids.length === 0) {
                this._getMyFriendListFromRemote();
            }
            return uids;
        }
    }, {
        key: 'getFriendList',
        value: function getFriendList() {
            var fresh = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            var friends = this.store.getFriends();
            if (friends.length === 0 || fresh) {
                this._getMyFriendListFromRemote();
            }
            return friends;
        }
    }, {
        key: 'getFriendAlias',
        value: function getFriendAlias(userId) {
            return this.store.getFriendAlias(userId);
        }
    }, {
        key: 'getFriendExtra',
        value: function getFriendExtra(userId) {
            return this.store.getFriendExtra(userId);
        }
    }, {
        key: 'setFriendAlias',
        value: function () {
            var _ref9 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee9(userId, alias, successCB, failCB) {
                var request;
                return _regenerator2.default.wrap(function _callee9$(_context9) {
                    while (1) {
                        switch (_context9.prev = _context9.next) {
                            case 0:
                                request = AddFriendRequest.create();

                                request.targetUid = userId;
                                request.reason = alias;
                                this._publish("FALS", AddFriendRequest.encode(request).finish(), function (errorCode, data) {
                                    if (errorCode === 0) {
                                        successCB();
                                    } else {
                                        failCB(errorCode);
                                    }
                                });

                            case 4:
                            case 'end':
                                return _context9.stop();
                        }
                    }
                }, _callee9, this);
            }));

            function setFriendAlias(_x42, _x43, _x44, _x45) {
                return _ref9.apply(this, arguments);
            }

            return setFriendAlias;
        }()
    }, {
        key: '_getMyFriendListFromRemote',
        value: function () {
            var _ref10 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee10() {
                return _regenerator2.default.wrap(function _callee10$(_context10) {
                    while (1) {
                        switch (_context10.prev = _context10.next) {
                            case 0:
                                this._pullFriends(_long2.default.MAX_VALUE);

                            case 1:
                            case 'end':
                                return _context10.stop();
                        }
                    }
                }, _callee10, this);
            }));

            function _getMyFriendListFromRemote() {
                return _ref10.apply(this, arguments);
            }

            return _getMyFriendListFromRemote;
        }()
    }, {
        key: 'createGroup',
        value: function () {
            var _ref11 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee11(groupId, groupType, name, portrait, groupExtra) {
                var memberIds = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];
                var memberExtra = arguments[6];
                var lines = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : [0];
                var notifyContent = arguments[8];

                var _this25 = this;

                var successCB = arguments[9];
                var failCB = arguments[10];
                var myUid, pbGroup, pbGroupInfo, groupInfo, groupMembers, member, createGroupReq;
                return _regenerator2.default.wrap(function _callee11$(_context11) {
                    while (1) {
                        switch (_context11.prev = _context11.next) {
                            case 0:
                                groupId = !groupId ? '' : groupId;
                                myUid = this.getUserId();
                                pbGroup = PbGroup.create();
                                pbGroupInfo = PbGroupInfo.create();

                                pbGroupInfo.targetId = groupId;
                                pbGroupInfo.type = groupType;
                                pbGroupInfo.name = name;
                                pbGroupInfo.portrait = portrait;
                                pbGroupInfo.extra = groupExtra ? groupExtra : '';
                                pbGroup.groupInfo = pbGroupInfo;

                                groupInfo = new _groupInfo2.default();

                                groupInfo.target = groupId;
                                groupInfo.type = groupType;
                                groupInfo.name = name;
                                groupInfo.portrait = portrait;
                                groupInfo.extra = pbGroupInfo.extra;

                                groupMembers = [];

                                if (!memberIds.includes(myUid)) {
                                    memberIds.push(myUid);
                                }

                                member = void 0;

                                memberIds.forEach(function (memberId) {
                                    var pbMember = PbGroupMember.create();
                                    pbMember.memberId = memberId;
                                    pbMember.type = _groupMemberType2.default.Normal;

                                    member = new _groupMember2.default();
                                    member.groupId = groupId;
                                    member.memberId = memberId;
                                    member.type = _groupMemberType2.default.Normal;
                                    if (memberId === myUid) {
                                        pbMember.type = _groupMemberType2.default.Owner;
                                        member.type = _groupMemberType2.default.Owner;
                                    }
                                    pbGroup.members.push(pbMember);
                                    groupMembers.push(member);
                                });

                                createGroupReq = CreateGroupRequest.create();

                                createGroupReq.group = pbGroup;
                                createGroupReq.toLine = lines;
                                createGroupReq.memberExtra = memberExtra ? memberExtra : '';
                                createGroupReq.notifyContent = this._toProtoMessageContent(notifyContent);

                                this._publish('GC', CreateGroupRequest.encode(createGroupReq).finish(), function () {
                                    var errorCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -2;
                                    var data = arguments[1];

                                    if (errorCode === 0 && data) {
                                        var _groupId = data.toString();
                                        groupInfo.target = _groupId;
                                        var conversation = new _conversation2.default(_conversationType2.default.Group, _groupId, 0);
                                        _this25.store.genAndSaveDefaultConversationInfo(conversation);

                                        _this25.store.setGroupInfo(groupInfo);
                                        _this25.store.setGroupMembers(_groupId, groupMembers);

                                        if (notifyContent) {
                                            var message = new _message2.default(conversation, notifyContent);
                                            _this25.store.updateConversationLastMessage(message);
                                        }

                                        if (successCB) {
                                            successCB(_groupId);
                                        }
                                        _this25.log('create group success', _groupId);
                                    } else {
                                        _this25.log('create group error', errorCode);
                                        if (failCB) {
                                            failCB(errorCode);
                                        }
                                    }
                                });

                            case 26:
                            case 'end':
                                return _context11.stop();
                        }
                    }
                }, _callee11, this);
            }));

            function createGroup(_x46, _x47, _x48, _x49, _x50) {
                return _ref11.apply(this, arguments);
            }

            return createGroup;
        }()
    }, {
        key: 'setGroupManager',
        value: function () {
            var _ref12 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee12(groupId, isSet, memberIds, lines, notifyMessageContent, successCB, failCB) {
                var _this26 = this;

                var setGroupManagerRequest;
                return _regenerator2.default.wrap(function _callee12$(_context12) {
                    while (1) {
                        switch (_context12.prev = _context12.next) {
                            case 0:
                                setGroupManagerRequest = SetGroupManagerRequest.create();

                                setGroupManagerRequest.type = isSet ? 1 : 0;
                                setGroupManagerRequest.groupId = groupId;
                                setGroupManagerRequest.userId = memberIds;
                                setGroupManagerRequest.toLine = lines;
                                setGroupManagerRequest.notifyContent = this._toProtoMessageContent(notifyMessageContent);

                                this._publish('GSM', SetGroupManagerRequest.encode(setGroupManagerRequest).finish(), function (errorCode, data) {
                                    if (errorCode === 0) {
                                        if (successCB) {
                                            successCB();
                                        }
                                        _this26.log('set group manager success', groupId);
                                    } else {
                                        _this26.log('set group manager error', errorCode);
                                        if (failCB) {
                                            failCB(errorCode);
                                        }
                                    }
                                });

                            case 7:
                            case 'end':
                                return _context12.stop();
                        }
                    }
                }, _callee12, this);
            }));

            function setGroupManager(_x54, _x55, _x56, _x57, _x58, _x59, _x60) {
                return _ref12.apply(this, arguments);
            }

            return setGroupManager;
        }()
    }, {
        key: '_reloadGroupInfosFromRemote',
        value: function () {
            var _ref13 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee13() {
                for (var _len = arguments.length, groupIds = Array(_len), _key = 0; _key < _len; _key++) {
                    groupIds[_key] = arguments[_key];
                }

                return _regenerator2.default.wrap(function _callee13$(_context13) {
                    while (1) {
                        switch (_context13.prev = _context13.next) {
                            case 0:
                                this._reloadGroupInfosFromRemoteEx(null, null, groupIds);

                            case 1:
                            case 'end':
                                return _context13.stop();
                        }
                    }
                }, _callee13, this);
            }));

            function _reloadGroupInfosFromRemote() {
                return _ref13.apply(this, arguments);
            }

            return _reloadGroupInfosFromRemote;
        }()
    }, {
        key: '_reloadGroupInfosFromRemoteEx',
        value: function () {
            var _ref14 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee14(success, fail, groupIds) {
                var _this27 = this;

                var pullUserRequest;
                return _regenerator2.default.wrap(function _callee14$(_context14) {
                    while (1) {
                        switch (_context14.prev = _context14.next) {
                            case 0:
                                pullUserRequest = PullUserRequest.create();

                                groupIds.forEach(function (groupId) {
                                    if (!success && _this27.store.loadingGroups.has(groupId)) {
                                        return;
                                    } else {
                                        _this27.store.loadingGroups.add(groupId);
                                    }
                                    var userRequest = UserRequest.create();
                                    userRequest.uid = groupId;
                                    var localGroupInfo = _this27.store.getGroupInfo(groupId);
                                    userRequest.updateDt = localGroupInfo ? localGroupInfo.updateDt : _long2.default.ZERO;
                                    pullUserRequest.request.push(userRequest);
                                });

                                if (!(pullUserRequest.request.length < 1)) {
                                    _context14.next = 5;
                                    break;
                                }

                                fail && fail(-1);
                                return _context14.abrupt('return');

                            case 5:

                                this.log('reload groupInfo from remote', groupIds);
                                this._publish('GPGI', PullUserRequest.encode(pullUserRequest).finish(), function (errorCode, data) {
                                    groupIds.forEach(function (groupId) {
                                        _this27.store.loadingGroups.delete(groupId);
                                    });
                                    if (errorCode !== 0 || !data) {
                                        _this27.log('reloadGroupInfoFromRemote error', errorCode, data, groupIds);
                                        fail && fail(errorCode !== 0 ? errorCode : -1);
                                        return;
                                    }
                                    var result = PullGroupInfoResult.decode(data).info;
                                    _this27.log('reload groupInfo from remote result', result);
                                    if (result.length > 0) {
                                        var groupInfos = [];
                                        result.forEach(function (info) {
                                            var groupInfo = (0, _assign2.default)(new _groupInfo2.default(), info);
                                            groupInfo.target = info.targetId;
                                            delete groupInfo.targetId;
                                            if (_config2.default.urlRedirect) {
                                                groupInfo.portrait = _config2.default.urlRedirect(groupInfo.portrait);
                                            }
                                            _this27.store.setGroupInfo(groupInfo);
                                            groupInfos.push(groupInfo);
                                        });
                                        success && success(groupInfos);
                                        _this27.eventEmitter.emit(_wfcEvent2.default.GroupInfosUpdate, groupInfos);
                                    }
                                });

                            case 7:
                            case 'end':
                                return _context14.stop();
                        }
                    }
                }, _callee14, this);
            }));

            function _reloadGroupInfosFromRemoteEx(_x61, _x62, _x63) {
                return _ref14.apply(this, arguments);
            }

            return _reloadGroupInfosFromRemoteEx;
        }()
    }, {
        key: '_reloadGroupMembersFromRemote',
        value: function () {
            var _ref15 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee15(groupId, updateDt) {
                return _regenerator2.default.wrap(function _callee15$(_context15) {
                    while (1) {
                        switch (_context15.prev = _context15.next) {
                            case 0:
                                this._reloadGroupMembersFromRemoteEx(groupId, updateDt, null, null);

                            case 1:
                            case 'end':
                                return _context15.stop();
                        }
                    }
                }, _callee15, this);
            }));

            function _reloadGroupMembersFromRemote(_x64, _x65) {
                return _ref15.apply(this, arguments);
            }

            return _reloadGroupMembersFromRemote;
        }()
    }, {
        key: '_reloadGroupMembersFromRemoteEx',
        value: function () {
            var _ref16 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee16(groupId, updateDt, successCB, failCB) {
                var _this28 = this;

                var requet;
                return _regenerator2.default.wrap(function _callee16$(_context16) {
                    while (1) {
                        switch (_context16.prev = _context16.next) {
                            case 0:
                                if (!(!successCB && this.store.loadingGroupMembers.has(groupId))) {
                                    _context16.next = 4;
                                    break;
                                }

                                return _context16.abrupt('return');

                            case 4:
                                this.store.loadingGroupMembers.add(groupId);

                            case 5:
                                requet = PullGroupMemberRequest.create();

                                requet.target = groupId;
                                requet.head = _long2.default.fromValue(updateDt);
                                this._publish('GPGM', PullGroupMemberRequest.encode(requet).finish(), function (errorCode, data) {
                                    _this28.store.loadingGroupMembers.delete(groupId);
                                    if (errorCode !== 0 || !data) {
                                        _this28.log('reloadGroupMembersFromRemote error', groupId, errorCode);
                                        // 不存在，删除对应会话
                                        if (errorCode === 253) {
                                            var conversation = new _conversation2.default(_conversationType2.default.Group, groupId, 0);
                                            _this28.store.removeConversation(conversation, true);
                                            // this.eventEmitter.emit(EventType.SettingUpdate, '');
                                            console.log('remove conversation', conversation);
                                        }
                                        failCB && failCB(errorCode !== 0 ? errorCode : -1);
                                        return;
                                    }

                                    var result = PullGroupMemberResult.decode(data).member;
                                    var groupMembers = [];
                                    var selfDeleted = false;
                                    result.forEach(function (member) {
                                        var groupMember = new _groupMember2.default();
                                        groupMember.groupId = groupId;
                                        groupMember.alias = member.alias;
                                        groupMember.extra = member.extra;
                                        groupMember.type = member.type;
                                        groupMember.memberId = member.memberId;
                                        groupMember.updateDt = member.updateDt;
                                        groupMember.createDt = member.createDt;
                                        groupMembers.push(groupMember);
                                        var oldGroupMember = _this28.store.getGroupMember(groupId, _this28.userId);
                                        if (groupMember.memberId === _this28.userId && oldGroupMember && oldGroupMember.type === _groupMemberType2.default.Removed) {
                                            selfDeleted = true;
                                        }
                                    });

                                    _this28.log('loadGroupMembersFromRemote', groupId, groupMembers.length);
                                    _this28.store.updateGroupMembers(groupId, groupMembers);
                                    groupMembers = _this28.store.getGroupMembers(groupId);
                                    successCB && successCB(groupMembers);
                                    if (!selfDeleted && groupMembers.length > 0) {
                                        _this28.eventEmitter.emit(_wfcEvent2.default.GroupMembersUpdate, groupId, groupMembers);
                                        _this28.log('emit groupMembersUpdate', groupId, groupMembers);
                                    } else {
                                        _this28.log('self deleted', groupId);
                                    }
                                });

                            case 9:
                            case 'end':
                                return _context16.stop();
                        }
                    }
                }, _callee16, this);
            }));

            function _reloadGroupMembersFromRemoteEx(_x66, _x67, _x68, _x69) {
                return _ref16.apply(this, arguments);
            }

            return _reloadGroupMembersFromRemoteEx;
        }()
    }, {
        key: 'getGroupInfo',
        value: function getGroupInfo(groupId) {
            var refresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            var groupInfo = this.store.getGroupInfo(groupId);

            if (refresh || groupInfo instanceof _nullGroupInfo2.default) {
                this._reloadGroupInfosFromRemote(groupId);
            }
            if (groupInfo instanceof _nullGroupInfo2.default) {
                this._reloadGroupMembersFromRemote(groupId, this.store.getGroupMemberMaxDt(groupId));
            }

            return groupInfo;
        }
    }, {
        key: 'getGroupInfoEx',
        value: function getGroupInfoEx(groupId) {
            var refresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            var successCB = arguments[2];
            var failCB = arguments[3];

            var groupInfo = this.store.getGroupInfo(groupId);

            if (!(groupInfo instanceof _nullGroupInfo2.default)) {
                successCB && successCB(groupInfo);
            }
            if (refresh || groupInfo instanceof _nullGroupInfo2.default) {
                this._reloadGroupInfosFromRemoteEx(function (groupInfos) {
                    successCB && successCB(groupInfos[0]);
                }, failCB, [groupId]);
            }
            if (groupInfo instanceof _nullGroupInfo2.default) {
                this._reloadGroupMembersFromRemote(groupId, this.store.getGroupMemberMaxDt(groupId));
            }
        }
    }, {
        key: 'getGroupInfos',
        value: function getGroupInfos() {
            var _this29 = this;

            var groupIds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
            var refresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            var groupInfos = [];
            var toLoadUids = [];
            groupIds.forEach(function (groupId) {
                var groupInfo = _this29.store.getGroupInfo(groupId);
                if (groupInfo instanceof _nullGroupInfo2.default || refresh) {
                    toLoadUids.push(groupId);
                }
                groupInfos.push(groupInfo);
            });
            if (toLoadUids.length > 0) {
                this._reloadGroupInfosFromRemote.apply(this, toLoadUids);
                if (toLoadUids.length <= 50) {
                    var _iteratorNormalCompletion6 = true;
                    var _didIteratorError6 = false;
                    var _iteratorError6 = undefined;

                    try {
                        for (var _iterator6 = (0, _getIterator3.default)(toLoadUids), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                            var groupId = _step6.value;

                            this._reloadGroupMembersFromRemote(groupId, this.store.getGroupMemberMaxDt(groupId));
                        }
                    } catch (err) {
                        _didIteratorError6 = true;
                        _iteratorError6 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion6 && _iterator6.return) {
                                _iterator6.return();
                            }
                        } finally {
                            if (_didIteratorError6) {
                                throw _iteratorError6;
                            }
                        }
                    }
                }
            }
            return groupInfos;
        }
    }, {
        key: 'addGroupMembers',
        value: function addGroupMembers(groupId, memberIds, extra, notifyLines, notifyMessageContent, successCB, failCB) {
            var _this30 = this;

            if (!groupId || !memberIds || memberIds.length === 0 || !notifyLines || notifyLines.length === 0) {
                this.log('addGroupMembers params invalid');
                failCB && failCB(-1);
                return;
            }
            var request = AddGroupMemberRequest.create();
            request.groupId = groupId;
            memberIds.forEach(function (memberId) {
                var member = PbGroupMember.create();
                member.memberId = memberId;
                member.type = _groupMemberType2.default.Normal;
                request.addedMember.push(member);
            });
            request.toLine = notifyLines;
            request.extra = extra;
            request.notifyContent = this._toProtoMessageContent(notifyMessageContent);
            this._publish('GAM', AddGroupMemberRequest.encode(request).finish(), function (errorCode, data) {
                if (errorCode === 0) {
                    var groupMembers = [];
                    var now = new Date().getTime();
                    memberIds.forEach(function (memberId) {
                        var groupMember = new _groupMember2.default();
                        groupMember.groupId = groupId;
                        groupMember.type = _groupMemberType2.default.Normal;
                        groupMember.memberId = memberId;
                        groupMember.updateDt = now;
                        groupMember.createDt = now;
                        groupMembers.push(groupMember);
                    });

                    _this30.store.updateGroupMembers(groupId, groupMembers);
                }
                _this30._generalOperationCallback(errorCode, successCB, failCB);
            });
        }
    }, {
        key: 'getGroupMemberIds',
        value: function getGroupMemberIds(groupId) {
            var fresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            var memberIds = this.store.getGroupMemberIds(groupId, fresh);
            if (memberIds.length === 0 || fresh) {
                this._reloadGroupMembersFromRemote(groupId, this.store.getGroupMemberMaxDt(groupId));
            }
            return memberIds;
        }
    }, {
        key: 'getGroupMembers',
        value: function getGroupMembers(groupId) {
            var fresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            var groupInfo = this.store.getGroupInfo(groupId);
            var groupMemberMaxDt = this.store.getGroupMemberMaxDt(groupId);
            if (groupInfo instanceof _nullGroupInfo2.default) {
                this._reloadGroupInfosFromRemote(groupId);
                this._reloadGroupMembersFromRemote(groupId, groupMemberMaxDt);
                return null;
            }

            var members = this.store.getGroupMembers(groupId);
            if (members.length === 0 || fresh) {
                this._reloadGroupMembersFromRemote(groupId, groupMemberMaxDt);
            }
            return members.sort(this._compareGroupMember);
        }
    }, {
        key: 'getGroupMembersByType',
        value: function getGroupMembersByType(groupId, memberType) {
            var members = this.getGroupMembers(groupId);
            if (members.length === 0) {
                this._reloadGroupMembersFromRemote(groupId, _long2.default.ZERO);
            }
            return members.filter(function (m) {
                return m.type === memberType;
            });
        }
    }, {
        key: '_compareGroupMember',
        value: function _compareGroupMember(m1, m2) {
            if (m1.type === m2.type) {
                return (0, _longUtil.numberValue)(m1.updateDt) - (0, _longUtil.numberValue)(m2.updateDt);
            }

            if (m1.type === 4) {
                return -1;
            }

            if (m2.type === 4) {
                return 1;
            }

            return m2.type - m1.type;
        }
    }, {
        key: 'getGroupMembersEx',
        value: function getGroupMembersEx(groupId) {
            var fresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            var successCB = arguments[2];
            var failCB = arguments[3];

            var members = this.store.getGroupMembers(groupId);
            var updateDt = this.store.getGroupMemberMaxDt(groupId);
            if (members.length === 0 || fresh) {
                this._reloadGroupMembersFromRemoteEx(groupId, updateDt, successCB, failCB);
            } else {
                successCB && successCB(members.sort(this._compareGroupMember));
                fresh && this._reloadGroupMembersFromRemoteEx(groupId, updateDt);
            }
        }
    }, {
        key: 'getGroupMember',
        value: function getGroupMember(groupId, memberId) {
            var groupInfo = this.store.getGroupInfo(groupId);
            if (groupInfo instanceof _nullGroupInfo2.default) {
                this._reloadGroupInfosFromRemote(groupId);
                this._reloadGroupMembersFromRemote(groupId, this.store.getGroupMemberMaxDt(groupId));
                return null;
            }
            var member = this.store.getGroupMember(groupId, memberId);
            if (!member) {
                this._reloadGroupMembersFromRemote(groupId, this.store.getGroupMemberMaxDt(groupId));
            }
            return member;
        }
    }, {
        key: 'kickoffGroupMembers',
        value: function kickoffGroupMembers(groupId, memberIds, notifyLines, notifyContent, successCB, failCB) {
            var _this31 = this;

            var request = RemoveGroupMemberRequest.create();
            request.groupId = groupId;
            request.removedMember = memberIds;
            request.toLine = notifyLines;
            request.notifyContent = this._toProtoMessageContent(notifyContent);

            this._publish('GKM', RemoveGroupMemberRequest.encode(request).finish(), function (errorCode, data) {
                if (errorCode === 0) {
                    _this31.store.removeGroupMembers(groupId, memberIds);
                }
                _this31._generalOperationCallback(errorCode, successCB, failCB);
            });
        }
    }, {
        key: 'muteOrAllowGroupMembers',
        value: function muteOrAllowGroupMembers(groupId, setOrDelete, isAllow, memberIds, notifyLines, notifyContent, successCB, failCB) {
            var _this32 = this;

            var setGroupManagerRequest = SetGroupManagerRequest.create();
            setGroupManagerRequest.type = setOrDelete ? 1 : 0;
            setGroupManagerRequest.groupId = groupId;
            setGroupManagerRequest.userId = memberIds;
            setGroupManagerRequest.toLine = notifyLines;
            setGroupManagerRequest.notifyContent = this._toProtoMessageContent(notifyContent);

            this._publish(isAllow ? 'GMAL' : 'GMM', SetGroupManagerRequest.encode(setGroupManagerRequest).finish(), function (errorCode, data) {
                if (errorCode === 0) {
                    _this32.store.updateGroupMemberMuteOrAllow(groupId, memberIds, setOrDelete, isAllow);
                    if (successCB) {
                        successCB();
                    }
                    _this32.log('mute group member success', groupId, memberIds);
                } else {
                    _this32.log('mute group member error', errorCode);
                    if (failCB) {
                        failCB(errorCode);
                    }
                }
            });
        }
    }, {
        key: 'quitGroup',
        value: function () {
            var _ref17 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee17(groupId, lines, notifyMessageContent, successCB, failCB) {
                var _this33 = this;

                var request;
                return _regenerator2.default.wrap(function _callee17$(_context17) {
                    while (1) {
                        switch (_context17.prev = _context17.next) {
                            case 0:
                                request = QuitGroupRequest.create();

                                request.groupId = groupId;
                                request.toLine = lines;
                                request.notifyContent = this._toProtoMessageContent(notifyMessageContent);

                                this._publish('GQ', QuitGroupRequest.encode(request).finish(), function (errorCode, data) {
                                    if (errorCode === 0) {
                                        _this33.store.removeGroupAndMembers(groupId);
                                        _this33.store.removeFavGroup(groupId);
                                    }
                                    _this33._generalOperationCallback(errorCode, successCB, failCB);
                                });

                            case 5:
                            case 'end':
                                return _context17.stop();
                        }
                    }
                }, _callee17, this);
            }));

            function quitGroup(_x77, _x78, _x79, _x80, _x81) {
                return _ref17.apply(this, arguments);
            }

            return quitGroup;
        }()
    }, {
        key: 'dismissGroup',
        value: function () {
            var _ref18 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee18(groupId, lines, notifyMessageContent, successCB, failCB) {
                var _this34 = this;

                var request;
                return _regenerator2.default.wrap(function _callee18$(_context18) {
                    while (1) {
                        switch (_context18.prev = _context18.next) {
                            case 0:
                                request = DismissGroupRequest.create();

                                request.groupId = groupId;
                                request.toLine = lines;
                                request.notifyContent = this._toProtoMessageContent(notifyMessageContent);

                                this._publish('GD', DismissGroupRequest.encode(request).finish(), function (errorCode, data) {
                                    if (errorCode === 0) {
                                        _this34.store.removeGroupAndMembers(groupId);
                                        _this34.store.removeFavGroup(groupId);
                                        if (!_this34.serverConfigs.isKeepMsgAfterDismiss) {
                                            _this34.store.removeConversation(new _conversation2.default(_conversationType2.default.Group, groupId, 0), true);
                                        }
                                        successCB && successCB();
                                    } else {
                                        failCB && failCB(errorCode);
                                    }
                                });

                            case 5:
                            case 'end':
                                return _context18.stop();
                        }
                    }
                }, _callee18, this);
            }));

            function dismissGroup(_x82, _x83, _x84, _x85, _x86) {
                return _ref18.apply(this, arguments);
            }

            return dismissGroup;
        }()
    }, {
        key: 'modifyGroupInfo',
        value: function () {
            var _ref19 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee19(groupId, type, newValue, lines, notifyMessageContent, successCB, failCB) {
                var _this35 = this;

                var request;
                return _regenerator2.default.wrap(function _callee19$(_context19) {
                    while (1) {
                        switch (_context19.prev = _context19.next) {
                            case 0:
                                request = ModifyGroupInfoRequest.create();

                                request.groupId = groupId;
                                request.toLine = lines;
                                request.type = type;
                                request.value = newValue + '';
                                request.notifyContent = this._toProtoMessageContent(notifyMessageContent);

                                this._publish('GMI', ModifyGroupInfoRequest.encode(request).finish(), function (errorCode, data) {
                                    _this35._generalOperationCallback(errorCode, successCB, failCB);
                                });

                            case 7:
                            case 'end':
                                return _context19.stop();
                        }
                    }
                }, _callee19, this);
            }));

            function modifyGroupInfo(_x87, _x88, _x89, _x90, _x91, _x92, _x93) {
                return _ref19.apply(this, arguments);
            }

            return modifyGroupInfo;
        }()
    }, {
        key: 'modifyGroupAlias',
        value: function () {
            var _ref20 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee20(groupId, alias, lines, notifyMessageContent, successCB, failCB) {
                var _this36 = this;

                var request;
                return _regenerator2.default.wrap(function _callee20$(_context20) {
                    while (1) {
                        switch (_context20.prev = _context20.next) {
                            case 0:
                                request = ModifyGroupMemberAlias.create();

                                request.groupId = groupId;
                                request.alias = alias;
                                request.toLine = lines;
                                request.notifyContent = this._toProtoMessageContent(notifyMessageContent);

                                this._publish('GMA', ModifyGroupMemberAlias.encode(request).finish(), function (errorCode, data) {
                                    _this36._generalOperationCallback(errorCode, successCB, failCB);
                                });

                            case 6:
                            case 'end':
                                return _context20.stop();
                        }
                    }
                }, _callee20, this);
            }));

            function modifyGroupAlias(_x94, _x95, _x96, _x97, _x98, _x99) {
                return _ref20.apply(this, arguments);
            }

            return modifyGroupAlias;
        }()
    }, {
        key: 'modifyGroupMemberAlias',
        value: function () {
            var _ref21 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee21(groupId, memberId, alias, lines, notifyMessageContent, successCB, failCB) {
                var _this37 = this;

                var request;
                return _regenerator2.default.wrap(function _callee21$(_context21) {
                    while (1) {
                        switch (_context21.prev = _context21.next) {
                            case 0:
                                request = ModifyGroupMemberAlias.create();

                                request.groupId = groupId;
                                request.memberId = memberId;
                                request.alias = alias;
                                request.toLine = lines;
                                request.notifyContent = this._toProtoMessageContent(notifyMessageContent);

                                this._publish('GMMA', ModifyGroupMemberAlias.encode(request).finish(), function (errorCode, data) {
                                    if (errorCode === 0) {
                                        _this37.store.updateGroupMemberAlias(groupId, memberId, alias);
                                    }
                                    _this37._generalOperationCallback(errorCode, successCB, failCB);
                                });

                            case 7:
                            case 'end':
                                return _context21.stop();
                        }
                    }
                }, _callee21, this);
            }));

            function modifyGroupMemberAlias(_x100, _x101, _x102, _x103, _x104, _x105, _x106) {
                return _ref21.apply(this, arguments);
            }

            return modifyGroupMemberAlias;
        }()
    }, {
        key: 'modifyGroupMemberExtra',
        value: function () {
            var _ref22 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee22(groupId, memberId, extra, lines, notifyMessageContent, successCB, failCB) {
                var _this38 = this;

                var request;
                return _regenerator2.default.wrap(function _callee22$(_context22) {
                    while (1) {
                        switch (_context22.prev = _context22.next) {
                            case 0:
                                request = ModifyGroupMemberExtra.create();

                                request.groupId = groupId;
                                request.memberId = memberId;
                                request.extra = extra;
                                request.toLine = lines;
                                request.notifyContent = this._toProtoMessageContent(notifyMessageContent);

                                this._publish('GMME', ModifyGroupMemberExtra.encode(request).finish(), function (errorCode, data) {
                                    if (errorCode === 0) {
                                        _this38.store.updateGroupMemberExtra(groupId, memberId, extra);
                                    }
                                    _this38._generalOperationCallback(errorCode, successCB, failCB);
                                });

                            case 7:
                            case 'end':
                                return _context22.stop();
                        }
                    }
                }, _callee22, this);
            }));

            function modifyGroupMemberExtra(_x107, _x108, _x109, _x110, _x111, _x112, _x113) {
                return _ref22.apply(this, arguments);
            }

            return modifyGroupMemberExtra;
        }()
    }, {
        key: 'transferGroup',
        value: function transferGroup(groupId, newOwner, lines, notifyMessageContent, successCB, failCB) {
            var _this39 = this;

            var request = TransferGroupRequest.create();
            request.groupId = groupId;
            request.newOwner = newOwner;
            request.toLine = lines;
            request.notifyContent = this._toProtoMessageContent(notifyMessageContent);
            this._publish('GTG', TransferGroupRequest.encode(request).finish(), function (errorCode, data) {
                _this39._generalOperationCallback(errorCode, successCB, failCB);
            });
        }
    }, {
        key: 'setGroupRemark',
        value: function setGroupRemark(groupId, remark, successCB, failCB) {
            var _this40 = this;

            this.setUserSetting(_userSettingScope2.default.GroupRemark, groupId, remark, function () {
                successCB && successCB();
                var setting = new _userSettingEntry2.default();
                setting.scope = _userSettingScope2.default.GroupRemark;
                setting.key = groupId;
                setting.value = remark;
                setting.updateDt = new Date().getTime();
                _this40.store.settings.push(setting);
                _this40.onSettingUpdate([setting]);
            }, failCB);
        }
    }, {
        key: 'getGroupRemark',
        value: function getGroupRemark(groupId) {
            return this.getUserSetting(_userSettingScope2.default.GroupRemark, groupId);
        }
    }, {
        key: 'getFavGroups',
        value: function getFavGroups() {
            return this.store.getFavGroups();
        }
    }, {
        key: 'isFavGroup',
        value: function isFavGroup(groupId) {
            return this.store.isFavGroup(groupId);
        }
    }, {
        key: 'setFavGroup',
        value: function setFavGroup(groupId, fav, successCB, failCB) {
            this._updateUserSetting(_userSettingScope2.default.FavoriteGroup, groupId, fav ? '1' : '0', successCB, failCB);
        }
    }, {
        key: 'getMyGroups',
        value: function getMyGroups(successCB, failCB) {
            var _this41 = this;

            this._publish('GMGS', null, function (errorCode, data) {
                _this41._generalStringListCallback(errorCode, data, successCB, failCB);
            });
        }
    }, {
        key: 'getCommonGroups',
        value: function getCommonGroups(userId, successCB, failCB) {
            var _this42 = this;

            var request = IDBuf.create();
            request.id = userId;
            this._publish('GCGS', IDBuf.encode(request).finish(), function (errorCode, data) {
                _this42._generalStringListCallback(errorCode, data, successCB, failCB);
            });
        }
    }, {
        key: 'getFavUsers',
        value: function getFavUsers() {
            return this.store.getFavUsers();
        }
    }, {
        key: 'isFavUser',
        value: function isFavUser(userId) {
            return this.store.isFavUser(userId);
        }
    }, {
        key: 'setFavUser',
        value: function setFavUser(userId, fav, successCB, failCB) {
            this._updateUserSetting(_userSettingScope2.default.FavoriteUser, userId, fav ? '1' : '0', successCB, failCB);
        }
    }, {
        key: 'getUserSetting',
        value: function getUserSetting(scope, key) {
            return this.store.getUserSetting(scope, key);
        }
    }, {
        key: 'getUserSettings',
        value: function getUserSettings(scope) {
            return this.store.getUserSettings(scope);
        }
    }, {
        key: 'setUserSetting',
        value: function setUserSetting(scope, key, value, successCB, failCB) {
            this._updateUserSetting(scope, key, value, successCB, failCB);
        }
    }, {
        key: 'modifyMyInfo',
        value: function modifyMyInfo(entries, successCB, failCB) {
            var _this43 = this;

            var request = ModifyMyInfoRequest.create();
            request.entry = entries;

            this._publish('MMI', ModifyMyInfoRequest.encode(request).finish(), function (errorCode, data) {
                _this43._generalOperationCallback(errorCode, successCB, failCB);
            });
        }
    }, {
        key: 'isGlobalSlient',
        value: function isGlobalSlient() {
            var setting = this.store.getUserSetting(_userSettingScope2.default.GlobalSilent, '');
            return setting ? setting.value === '1' : false;
        }
    }, {
        key: 'setGlobalSlient',
        value: function setGlobalSlient(silent, successCB, failCB) {
            this._updateUserSetting(_userSettingScope2.default.GlobalSilent, '', silent ? '1' : '0', function () {
                if (successCB) {
                    successCB();
                }
            }, function (errorCode) {
                if (failCB) {
                    failCB(errorCode);
                }
            });
        }
    }, {
        key: 'isHiddenNotificationDetail',
        value: function isHiddenNotificationDetail() {
            var setting = this.store.getUserSetting(_userSettingScope2.default.HiddenNotificationDetail, '');
            return setting ? setting.value === '1' : false;
        }
    }, {
        key: 'setHiddenNotificationDetail',
        value: function () {
            var _ref23 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee23(hide, successCB, failCB) {
                return _regenerator2.default.wrap(function _callee23$(_context23) {
                    while (1) {
                        switch (_context23.prev = _context23.next) {
                            case 0:
                                this._updateUserSetting(_userSettingScope2.default.HiddenNotificationDetail, '', hide ? '1' : '0', function () {
                                    if (successCB) {
                                        successCB();
                                    }
                                }, function (errorCode) {
                                    if (failCB) {
                                        failCB(errorCode);
                                    }
                                });

                            case 1:
                            case 'end':
                                return _context23.stop();
                        }
                    }
                }, _callee23, this);
            }));

            function setHiddenNotificationDetail(_x114, _x115, _x116) {
                return _ref23.apply(this, arguments);
            }

            return setHiddenNotificationDetail;
        }()
    }, {
        key: 'isHiddenGroupMemberName',
        value: function isHiddenGroupMemberName(groupId) {
            var setting = this.store.getUserSetting(_userSettingScope2.default.GroupHideNickname, groupId);
            return setting ? setting.value === '1' : false;
        }
    }, {
        key: 'setHiddenGroupMemberName',
        value: function () {
            var _ref24 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee24(groupId, hide, successCB, failCB) {
                return _regenerator2.default.wrap(function _callee24$(_context24) {
                    while (1) {
                        switch (_context24.prev = _context24.next) {
                            case 0:
                                this._updateUserSetting(_userSettingScope2.default.GroupHideNickname, groupId, hide ? '1' : '0', function () {
                                    if (successCB) {
                                        successCB();
                                    }
                                }, function (errorCode) {
                                    if (failCB) {
                                        failCB(errorCode);
                                    }
                                });

                            case 1:
                            case 'end':
                                return _context24.stop();
                        }
                    }
                }, _callee24, this);
            }));

            function setHiddenGroupMemberName(_x117, _x118, _x119, _x120) {
                return _ref24.apply(this, arguments);
            }

            return setHiddenGroupMemberName;
        }()
    }, {
        key: 'joinChatroom',
        value: function () {
            var _ref25 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee25(chatroomId, successCB, failCB) {
                var _this44 = this;

                var request;
                return _regenerator2.default.wrap(function _callee25$(_context25) {
                    while (1) {
                        switch (_context25.prev = _context25.next) {
                            case 0:
                                request = IDBuf.create();

                                request.id = chatroomId;
                                this._publish('CRJ', IDBuf.encode(request).finish(), function () {
                                    var errorCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -2;
                                    var data = arguments[1];

                                    if (errorCode === 0) {
                                        _this44.chatRoomMsgHead = _long2.default.ZERO;
                                        _this44.currentChatRoomId = chatroomId;
                                        if (successCB) {
                                            successCB();
                                        }
                                        _this44._pullMessages(_long2.default.MAX_VALUE, 1, false);
                                    } else if (failCB) {
                                        failCB(errorCode);
                                    }
                                });

                            case 3:
                            case 'end':
                                return _context25.stop();
                        }
                    }
                }, _callee25, this);
            }));

            function joinChatroom(_x121, _x122, _x123) {
                return _ref25.apply(this, arguments);
            }

            return joinChatroom;
        }()
    }, {
        key: 'quitChatroom',
        value: function () {
            var _ref26 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee26(chatroomId, successCB, failCB) {
                var request;
                return _regenerator2.default.wrap(function _callee26$(_context26) {
                    while (1) {
                        switch (_context26.prev = _context26.next) {
                            case 0:
                                request = IDBuf.create();

                                request.id = chatroomId;
                                this.currentChatRoomId = '';
                                this._publish('CRQ', IDBuf.encode(request).finish(), function () {
                                    var errorCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -2;
                                    var data = arguments[1];

                                    if (errorCode === 0) {
                                        if (successCB) {
                                            successCB();
                                        }
                                    } else if (failCB) {
                                        failCB(errorCode);
                                    }
                                });

                            case 4:
                            case 'end':
                                return _context26.stop();
                        }
                    }
                }, _callee26, this);
            }));

            function quitChatroom(_x125, _x126, _x127) {
                return _ref26.apply(this, arguments);
            }

            return quitChatroom;
        }()
    }, {
        key: 'getChatroomInfo',
        value: function () {
            var _ref27 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee27(chatroomId, updateDt, successCB, failCB) {
                var _this45 = this;

                var request;
                return _regenerator2.default.wrap(function _callee27$(_context27) {
                    while (1) {
                        switch (_context27.prev = _context27.next) {
                            case 0:
                                request = GetChatroomInfoRequest.create();

                                request.chatroomId = chatroomId;
                                request.updateDt = _long2.default.fromValue(updateDt);
                                this._publish('CRI', GetChatroomInfoRequest.encode(request).finish(), function () {
                                    var errorCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -2;
                                    var data = arguments[1];

                                    if (errorCode === 0 && data) {
                                        if (successCB) {
                                            var result = PbChatRoomInfo.decode(data);
                                            _this45.log('getChatroomInfo result', result);
                                            var chatRoomInfo = (0, _assign2.default)(new _chatRoomInfo2.default(), result);
                                            if (_config2.default.urlRedirect) {
                                                chatRoomInfo.portrait = _config2.default.urlRedirect(chatRoomInfo.portrait);
                                            }
                                            successCB(chatRoomInfo);
                                        }
                                    } else if (failCB) {
                                        failCB(errorCode);
                                    }
                                });

                            case 4:
                            case 'end':
                                return _context27.stop();
                        }
                    }
                }, _callee27, this);
            }));

            function getChatroomInfo(_x129, _x130, _x131, _x132) {
                return _ref27.apply(this, arguments);
            }

            return getChatroomInfo;
        }()
    }, {
        key: 'getChatroomMemberInfo',
        value: function () {
            var _ref28 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee28(chatroomId, maxCount, successCB, failCB) {
                var _this46 = this;

                var request;
                return _regenerator2.default.wrap(function _callee28$(_context28) {
                    while (1) {
                        switch (_context28.prev = _context28.next) {
                            case 0:
                                request = GetChatroomMemberInfoRequest.create();

                                request.chatroomId = chatroomId;
                                request.maxCount = maxCount ? maxCount : 10;
                                this._publish('CRMI', GetChatroomMemberInfoRequest.encode(request).finish(), function () {
                                    var errorCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -2;
                                    var data = arguments[1];

                                    if (errorCode === 0 && data) {
                                        if (successCB) {
                                            var result = PbChatRoomMemberInfo.decode(data);
                                            _this46.log('getChatroomMemberInfo result', result);
                                            var chatRoomMemberInfo = (0, _assign2.default)(new _chatRoomMemberInfo2.default(), result);
                                            successCB(chatRoomMemberInfo);
                                        }
                                    } else if (failCB) {
                                        failCB(errorCode);
                                    }
                                });

                            case 4:
                            case 'end':
                                return _context28.stop();
                        }
                    }
                }, _callee28, this);
            }));

            function getChatroomMemberInfo(_x134, _x135, _x136, _x137) {
                return _ref28.apply(this, arguments);
            }

            return getChatroomMemberInfo;
        }()
    }, {
        key: 'createChannel',
        value: function createChannel(name, portrait, status, desc, extra, successCB, failCB) {
            var request = PbChannelInfo.create();
            request.name = name;
            request.portrait = portrait;
            request.desc = desc;
            request.extra = extra;
            this._publish('CHC', PbChannelInfo.encode(request).finish(), function () {
                var errorCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -2;
                var data = arguments[1];

                if (errorCode === 0) {
                    if (successCB) {
                        successCB();
                    }
                } else if (failCB) {
                    failCB(errorCode);
                }
            });
        }
    }, {
        key: 'getChannelInfo',
        value: function getChannelInfo(channelId, refresh) {
            var info = this.store.getChannelInfo(channelId);
            if (info instanceof _NullChannelInfo2.default || refresh) {
                this._reloadChannelInfo(channelId, info.updateDt);
            }
            return info;
        }
    }, {
        key: '_reloadChannelInfo',
        value: function () {
            var _ref29 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee29(channelId) {
                var _this47 = this;

                var updateDt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                var request;
                return _regenerator2.default.wrap(function _callee29$(_context29) {
                    while (1) {
                        switch (_context29.prev = _context29.next) {
                            case 0:
                                request = PullChannelInfo.create();

                                request.channelId = channelId;
                                request.head = _long2.default.fromValue(updateDt);
                                this._publish('CHP', PullChannelInfo.encode(request).finish(), function () {
                                    var errorCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -2;
                                    var data = arguments[1];

                                    if (errorCode === 0 && data) {
                                        var pbChannel = PbChannelInfo.decode(data);
                                        var chaneInfo = (0, _assign2.default)(new _channelInfo2.default(), pbChannel);
                                        if (_config2.default.urlRedirect) {
                                            chaneInfo.portrait = _config2.default.urlRedirect(chaneInfo.portrait);
                                        }
                                        if (chaneInfo.menu) {
                                            chaneInfo.menus = chaneInfo.menu.map(function (menu) {
                                                menu = (0, _assign2.default)(new _channelMenu2.default(), menu);
                                                if (menu.subMenu) {
                                                    menu.subMenus = menu.subMenu.map(function (sm) {
                                                        return (0, _assign2.default)(new _channelMenu2.default(), sm);
                                                    });
                                                    delete menu.subMenu;
                                                }
                                                return menu;
                                            });
                                            delete chaneInfo.menu;
                                        }
                                        chaneInfo.channelId = pbChannel.targetId;
                                        delete chaneInfo.targetId;
                                        _this47.store.setChannelInfo(chaneInfo);
                                        _this47.eventEmitter.emit(_wfcEvent2.default.ChannelInfosUpdate, [chaneInfo]);
                                    }
                                });

                            case 4:
                            case 'end':
                                return _context29.stop();
                        }
                    }
                }, _callee29, this);
            }));

            function _reloadChannelInfo(_x140) {
                return _ref29.apply(this, arguments);
            }

            return _reloadChannelInfo;
        }()
    }, {
        key: 'modifyChannelInfo',
        value: function () {
            var _ref30 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee30(channelId, type, newValue, successCB, failCB) {
                var _this48 = this;

                var request;
                return _regenerator2.default.wrap(function _callee30$(_context30) {
                    while (1) {
                        switch (_context30.prev = _context30.next) {
                            case 0:
                                request = ModifyChannelInfo.create();

                                request.channelId = channelId;
                                request.type = type;
                                request.value = newValue;
                                this._publish('CHMI', ModifyChannelInfo.encode(request).finish(), function () {
                                    var errorCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -2;
                                    var data = arguments[1];

                                    if (errorCode === 0) {
                                        // TODO update local channelInfo
                                        _this48._reloadChannelInfo(channelId);
                                        if (successCB) {
                                            successCB();
                                        }
                                    } else if (failCB) {
                                        failCB(errorCode);
                                    }
                                });

                            case 5:
                            case 'end':
                                return _context30.stop();
                        }
                    }
                }, _callee30, this);
            }));

            function modifyChannelInfo(_x143, _x144, _x145, _x146, _x147) {
                return _ref30.apply(this, arguments);
            }

            return modifyChannelInfo;
        }()
    }, {
        key: 'searchChannel',
        value: function searchChannel(keyword, fuzzy, successCB, failCB) {
            var request = SearchUserRequest.create();
            request.keyword = keyword;
            request.fuzzy = fuzzy;
            request.page = 0;
            this._publish('CHS', SearchUserRequest.encode(request).finish(), function () {
                var errorCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -2;
                var data = arguments[1];

                if (errorCode === 0 && data) {
                    if (successCB) {
                        var result = SearchChannelResult.decode(data);
                        successCB(keyword, result.entry);
                    }
                } else {
                    if (failCB) {
                        failCB(errorCode);
                    }
                }
            });
        }
    }, {
        key: 'isListenedChannel',
        value: function isListenedChannel(channelId) {
            var entry = this.store.getUserSetting(_userSettingScope2.default.Listened_Channel, channelId);
            return entry && entry.value === '1';
        }
    }, {
        key: 'listenChannel',
        value: function () {
            var _ref31 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee31(channelId, listen, successCB, failCB) {
                var request;
                return _regenerator2.default.wrap(function _callee31$(_context31) {
                    while (1) {
                        switch (_context31.prev = _context31.next) {
                            case 0:
                                request = ListenChannel.create();

                                request.channelId = channelId;
                                request.listen = listen;
                                this._publish('CHL', ListenChannel.encode(request).finish(), function () {
                                    var errorCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -2;
                                    var data = arguments[1];

                                    if (errorCode === 0) {
                                        if (successCB) {
                                            successCB();
                                        }
                                    } else {
                                        if (failCB) {
                                            failCB(errorCode);
                                        }
                                    }
                                });

                            case 4:
                            case 'end':
                                return _context31.stop();
                        }
                    }
                }, _callee31, this);
            }));

            function listenChannel(_x150, _x151, _x152, _x153) {
                return _ref31.apply(this, arguments);
            }

            return listenChannel;
        }()

        // return channelIds

    }, {
        key: 'getMyChannels',
        value: function getMyChannels() {
            return this.store.getUserSettings(_userSettingScope2.default.My_Channel).filter(function (e) {
                return e.value === '1';
            }).map(function (e) {
                return e.key;
            });
        }

        // 废弃

    }, {
        key: 'getListenedChannels',
        value: function getListenedChannels() {
            return this.store.getUserSettings(_userSettingScope2.default.Listened_Channel).filter(function (e) {
                return e.value === '1';
            }).map(function (e) {
                return e.key;
            });
        }
    }, {
        key: 'getRemoteListenedChannels',
        value: function getRemoteListenedChannels(successCB, failCB) {
            var _this49 = this;

            this._publish('CHLL', '', function () {
                var errorCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -2;
                var data = arguments[1];

                _this49._generalStringListCallback(errorCode, data, successCB, failCB);
            });
        }
    }, {
        key: 'destroyChannel',
        value: function () {
            var _ref32 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee32(channelId, successCB, failCB) {
                var request;
                return _regenerator2.default.wrap(function _callee32$(_context32) {
                    while (1) {
                        switch (_context32.prev = _context32.next) {
                            case 0:
                                request = IDBuf.create();

                                request.id = channelId;
                                this._publish('CHD', ListenChannel.encode(request).finish(), function () {
                                    var errorCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -2;
                                    var data = arguments[1];

                                    if (errorCode === 0) {
                                        if (successCB) {
                                            successCB();
                                        }
                                    } else {
                                        if (failCB) {
                                            failCB(errorCode);
                                        }
                                    }
                                });

                            case 3:
                            case 'end':
                                return _context32.stop();
                        }
                    }
                }, _callee32, this);
            }));

            function destroyChannel(_x156, _x157, _x158) {
                return _ref32.apply(this, arguments);
            }

            return destroyChannel;
        }()
    }, {
        key: 'getConversationList',
        value: function getConversationList(types, lines) {
            // TODO 第一次等从服务端拉取
            return this.store.getConversationList(types, lines);
        }
    }, {
        key: 'getConversationInfo',
        value: function getConversationInfo(conversation) {
            var info = this.store.getConversationInfo(conversation);
            if (!info) {
                info = new _conversationInfo2.default();
                info.conversation = conversation;
            }
            return info;
        }
    }, {
        key: 'searchConversation',
        value: function searchConversation(keyword) {
            var types = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 1, 2];
            var lines = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [0, 1];

            return this.store.searchConversation(keyword, types, lines);
        }
    }, {
        key: 'removeConversation',
        value: function () {
            var _ref33 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee33(conversation, clearMsg) {
                var conversationInfo, now;
                return _regenerator2.default.wrap(function _callee33$(_context33) {
                    while (1) {
                        switch (_context33.prev = _context33.next) {
                            case 0:
                                conversationInfo = this.getConversationInfo(conversation);

                                if (conversationInfo) {
                                    _context33.next = 3;
                                    break;
                                }

                                return _context33.abrupt('return');

                            case 3:
                                this.store.removeConversation(conversation, clearMsg);
                                now = new Date().getTime();

                                if (!conversationInfo.timestamp || (0, _longUtil.gt)(conversationInfo.timestamp, now + 2 * 60 * 60 * 1000) || (0, _longUtil.lte)(conversationInfo.timestamp, now - 2 * 60 * 1000)) {
                                    conversationInfo.timestamp = _long2.default.fromValue(now);
                                }
                                this._syncConversationReadDt(conversation, conversationInfo.timestamp.neg());

                            case 7:
                            case 'end':
                                return _context33.stop();
                        }
                    }
                }, _callee33, this);
            }));

            function removeConversation(_x162, _x163) {
                return _ref33.apply(this, arguments);
            }

            return removeConversation;
        }()
    }, {
        key: 'setConversationTop',
        value: function setConversationTop(conversation, top, successCB, failCB) {
            var _this50 = this;

            var scope = _userSettingScope2.default.ConversationTop;
            var key = conversation.type + '-' + conversation.line + '-' + conversation.target;
            var value = (top > 0 ? top : 0) + '';
            this._updateUserSetting(scope, key, value, function () {
                var conversationInfo = _this50.getConversationInfo(conversation);
                _this50.eventEmitter.emit(_wfcEvent2.default.ConversationInfoUpdate, conversationInfo);
                _this50.store.setConversationTop(conversation, top);
                if (successCB) {
                    successCB();
                }
            }, function (errorCode) {
                if (failCB) {
                    failCB(errorCode);
                }
            });
        }
    }, {
        key: 'setConversationSlient',
        value: function setConversationSlient(conversation, silent, successCB, failCB) {
            var _this51 = this;

            var scope = _userSettingScope2.default.ConversationSilent;
            var key = conversation.type + '-' + conversation.line + '-' + conversation.target;
            var value = silent ? '1' : '0';
            this._updateUserSetting(scope, key, value, function () {
                _this51.store.setConversationSilent(conversation, silent);
                if (successCB) {
                    successCB();
                }
                var conversationInfo = _this51.getConversationInfo(conversation);
                _this51.eventEmitter.emit(_wfcEvent2.default.ConversationInfoUpdate, conversationInfo);
            }, function (errorCode) {
                if (failCB) {
                    failCB(errorCode);
                }
            });
        }
    }, {
        key: 'setConversationDraft',
        value: function setConversationDraft(conversation) {
            var draft = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
            var syncRemote = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

            if (!conversation) {
                return;
            }
            draft = draft ? draft : '';
            var conversationInfo = this.getConversationInfo(conversation);
            if (conversationInfo.draft === draft) {
                return;
            }
            this.store.setConversationDraft(conversation, draft);
            this.eventEmitter.emit(_wfcEvent2.default.ConversationInfoUpdate, conversationInfo);
            if (syncRemote && !this.isGlobalDisableDraftSync && !this.isDisableSyncDraft()) {
                this._syncDraft(conversation, draft);
            }
        }
    }, {
        key: '_syncDraft',
        value: function _syncDraft(conversation, draft) {
            var key = conversation.type + '-' + conversation.line + '-' + conversation.target;
            var setting = this.getUserSetting(_userSettingScope2.default.DisableSyncDraft, key);
            var disableSync = setting ? setting.value === '1' : false;
            if (!disableSync) {
                var value = this.clientId + '@@@' + draft;
                this._updateUserSetting(_userSettingScope2.default.ConversationDraft, key, value);
            }
        }
    }, {
        key: 'setConversationTimestamp',
        value: function setConversationTimestamp(conversation, timestamp) {
            var info = this.store.getConversationInfo(conversation);
            if (!info) {
                info = this.store.genAndSaveDefaultConversationInfo(conversation);
            }
            var now = new Date().getTime();
            if ((0, _longUtil.gt)(timestamp, now + 2 * 60 * 60 * 1000)) {
                timestamp = now;
            }
            info.timestamp = _long2.default.fromValue(timestamp);
            this.eventEmitter.emit(_wfcEvent2.default.ConversationInfoUpdate, info);
        }
    }, {
        key: 'getUnreadCount',
        value: function getUnreadCount() {
            var types = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
            var lines = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0];

            return this.store.getUnreadCount(types, lines);
        }
    }, {
        key: 'getConversationUnreadCount',
        value: function getConversationUnreadCount(conversation) {
            return this.store.getConversationUnreadCount(conversation);
        }
    }, {
        key: 'sendConferenceRequest',
        value: function sendConferenceRequest(sessionId, roomId, crequest, data, advance, callback) {
            var request = ConferenceRequest.create();
            request.sessionId = sessionId;
            request.roomId = roomId;
            request.request = crequest;
            request.advance = advance ? 1 : 0;
            request.data = data;
            this._publish('CONF', ConferenceRequest.encode(request).finish(), function () {
                var errorCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -2;
                var data = arguments[1];

                if (errorCode === 0) {
                    var resp = null;
                    if (data) {
                        var info = IDBuf.decode(data);
                        resp = info.id;
                    }
                    if (callback) {
                        callback(0, resp);
                    }
                } else {
                    if (callback) {
                        callback(errorCode);
                    }
                }
            });
        }
    }, {
        key: 'clearConversationUnreadStatus',
        value: function () {
            var _ref34 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee34(conversation) {
                var senders, count, conversationInfo, maxDt;
                return _regenerator2.default.wrap(function _callee34$(_context34) {
                    while (1) {
                        switch (_context34.prev = _context34.next) {
                            case 0:
                                senders = [];

                                if (this.isReceiptEnable && this.isUserReceiptEnabled()) {
                                    senders = this.store.getUnreadMsgSenders(conversation);
                                }
                                count = this.store.clearConversationUnreadStatus(conversation);

                                if (count > 0) {
                                    conversationInfo = this.getConversationInfo(conversation);

                                    this.eventEmitter.emit(_wfcEvent2.default.ConversationInfoUpdate, conversationInfo);

                                    maxDt = this.store.getConversationReadMaxDt(conversation);

                                    if (maxDt.compare(_long2.default.ZERO) > 0) {
                                        this._syncConversationReadDt(conversation, maxDt, senders);
                                    }
                                }

                            case 4:
                            case 'end':
                                return _context34.stop();
                        }
                    }
                }, _callee34, this);
            }));

            function clearConversationUnreadStatus(_x169) {
                return _ref34.apply(this, arguments);
            }

            return clearConversationUnreadStatus;
        }()
    }, {
        key: 'clearMessageUnreadStatus',
        value: function clearMessageUnreadStatus(messageId) {
            var cleared = this.store.clearMessageUnreadStatus(messageId);
            if (cleared) {
                var info = this.getConversationInfo(this.getMessageById(messageId).conversation);
                this.eventEmitter.emit(_wfcEvent2.default.ConversationInfoUpdate, info);
            }
        }
    }, {
        key: '_syncConversationReadDt',
        value: function _syncConversationReadDt(conversation, dt, senders, syncId) {
            var _this52 = this;

            if (!_long2.default.isLong(dt)) {
                this.log('_syncConversationReadDt invalid dt', dt);
                return;
            }
            var key = conversation.type + '-' + conversation.line + '-' + conversation.target;
            var modifySettingReq = ModifyUserSettingReq.create();
            modifySettingReq.scope = _userSettingScope2.default.Conversation_Sync;
            modifySettingReq.key = key;
            modifySettingReq.value = dt.toString();
            modifySettingReq.target = senders;

            var requestData = ModifyUserSettingReq.encode(modifySettingReq).finish();

            // 先存，成功之后在删，是为尽可能保证sync成功
            if (!syncId) {
                syncId = this.store.saveSyncReadEntry(conversation.type, conversation.target, conversation.line, dt, senders);
            }

            this._publish("UP", requestData, function (errorCode, data) {
                if (errorCode === 0) {
                    var setting = new _userSettingEntry2.default();
                    setting.scope = _userSettingScope2.default.Conversation_Sync;
                    setting.key = key;
                    setting.value = dt.toString();
                    setting.updateDt = new Date().getTime();
                    _this52.store.updateUserSettings([setting]);
                    _this52.store.deleteSyncReadEntry(syncId);
                    _this52._syncRead();
                } else {
                    _this52.log('syncConversationReadDt error', errorCode);
                }
            });
        }
    }, {
        key: '_syncRead',
        value: function _syncRead() {
            var entry = this.store.loadSyncReadEntry();
            if (entry) {
                var conversation = new _conversation2.default(entry.type, entry.target, entry.line);
                this._syncConversationReadDt(conversation, entry.readDt, entry.senders, entry.id);
            }
        }
    }, {
        key: 'clearAllUnreadStatus',
        value: function () {
            var _ref35 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee35() {
                var count;
                return _regenerator2.default.wrap(function _callee35$(_context35) {
                    while (1) {
                        switch (_context35.prev = _context35.next) {
                            case 0:
                                count = this.store.clearAllUnreadStatus();

                                if (count > 0) {
                                    // TODO sync all conversation
                                }

                            case 2:
                            case 'end':
                                return _context35.stop();
                        }
                    }
                }, _callee35, this);
            }));

            function clearAllUnreadStatus() {
                return _ref35.apply(this, arguments);
            }

            return clearAllUnreadStatus;
        }()
    }, {
        key: 'setMediaMessagePlayed',
        value: function setMediaMessagePlayed(messageId) {
            var count = this.store.setMediaMessagePlayed(messageId);
            if (count > 0) {
                var msg = this.store.getMessageById(messageId);
                this.eventEmitter.emit(_wfcEvent2.default.MessageStatusUpdate, msg);
            }
        }
    }, {
        key: 'isMyFriend',
        value: function isMyFriend(userId) {
            return this.store.isMyFriend(userId);
        }
    }, {
        key: 'sendFriendRequest',
        value: function () {
            var _ref36 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee36(userId, reason, extra, successCB, failCB) {
                var request;
                return _regenerator2.default.wrap(function _callee36$(_context36) {
                    while (1) {
                        switch (_context36.prev = _context36.next) {
                            case 0:
                                request = AddFriendRequest.create();

                                request.targetUid = userId;
                                request.reason = reason;
                                request.extra = extra;
                                this._publish('FAR', AddFriendRequest.encode(request).finish(), function (errorCode, data) {
                                    if (errorCode === 0) {
                                        if (successCB) {
                                            successCB();
                                        }
                                    } else {
                                        if (failCB) {
                                            failCB(errorCode);
                                        }
                                    }
                                });

                            case 5:
                            case 'end':
                                return _context36.stop();
                        }
                    }
                }, _callee36, this);
            }));

            function sendFriendRequest(_x170, _x171, _x172, _x173, _x174) {
                return _ref36.apply(this, arguments);
            }

            return sendFriendRequest;
        }()

        /**
         *
         * @param {Conversation} conversation
         * @param {number} fromIndex
         * @param {boolean} before
         * @param {number} count
         * @param {string} withUser
         */

    }, {
        key: 'getMessages',
        value: function getMessages(conversation, fromIndex) {
            var before = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
            var count = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 20;
            var withUser = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';

            return this.store.getConversationMessages(conversation, fromIndex, before, count, withUser);
        }
    }, {
        key: '_callbackOrLoadFromRemoteMessages',
        value: function _callbackOrLoadFromRemoteMessages(messages, successCB, failCB) {
            var _this53 = this;

            var notLoadedMsgs = [];
            var loadedMsgs = [];
            var _iteratorNormalCompletion7 = true;
            var _didIteratorError7 = false;
            var _iteratorError7 = undefined;

            try {
                for (var _iterator7 = (0, _getIterator3.default)(messages), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                    var msg = _step7.value;

                    if (msg.messageContent.__notLoaded) {
                        notLoadedMsgs.push(msg.messageUid);
                    } else {
                        loadedMsgs.push(msg);
                    }
                }
            } catch (err) {
                _didIteratorError7 = true;
                _iteratorError7 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion7 && _iterator7.return) {
                        _iterator7.return();
                    }
                } finally {
                    if (_didIteratorError7) {
                        throw _iteratorError7;
                    }
                }
            }

            if (notLoadedMsgs.length > 0) {
                var request = INT64ListBuf.create();
                request.id = notLoadedMsgs;
                console.log('loadSuperGroupMessages request', request);
                this._publish('MGS', INT64ListBuf.encode(request).finish(), function () {
                    var errorCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -2;
                    var data = arguments[1];

                    if (errorCode === 0 && data) {
                        var ml = MessageList.decode(data);
                        _this53.log('loadSuperGroupMessages result data', ml);
                        if (ml && ml.message) {
                            ml.message.forEach(function (m) {
                                if (WfcImpl.pcNotSupportMessageTypes.indexOf(m.content.type) > -1) {
                                    return;
                                }
                                var msg = _message2.default.fromProtoMessage(m);
                                var localMsg = _this53.store.getMessageByUid(msg.messageUid);
                                msg.messageId = localMsg.messageId;
                                _this53.store.updateMessageById(msg);
                                loadedMsgs.push(msg);
                            });

                            loadedMsgs.sort(function (m1, m2) {
                                if (!(0, _longUtil.eq)(m1.timestamp, m2.timestamp)) {
                                    return (0, _longUtil.compare)(m1.timestamp, m2.timestamp);
                                } else {
                                    return (0, _longUtil.compare)(m1.messageUid, m2.messageUid);
                                }
                            });
                        }
                        successCB && successCB(loadedMsgs);
                    } else {
                        failCB && failCB(errorCode !== 0 ? errorCode : -1);
                    }
                });
            } else {
                successCB && successCB(messages);
            }
        }
    }, {
        key: 'getMessagesV2',
        value: function getMessagesV2(conversation, fromIndex) {
            var before = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
            var count = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 20;
            var withUser = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';
            var successCB = arguments[5];
            var failCB = arguments[6];

            var msgs = this.store.getConversationMessages(conversation, fromIndex, before, count, withUser);
            this._callbackOrLoadFromRemoteMessages(msgs, successCB, failCB);
        }
    }, {
        key: 'getMessagesEx',
        value: function getMessagesEx(conversationTypes, lines, contentTypes, fromIndex, before, count, withUser) {
            return this.store.getMessagesEx(conversationTypes, lines, contentTypes, withUser);
        }
    }, {
        key: 'getMessagesExV2',
        value: function getMessagesExV2(conversationTypes, lines, contentTypes, fromIndex, before, count, withUser, successCB, failCB) {
            var msgs = this.store.getMessagesEx(conversationTypes, lines, contentTypes, withUser);
            this._callbackOrLoadFromRemoteMessages(msgs, successCB, failCB);
        }
    }, {
        key: 'getMessagesEx2',
        value: function getMessagesEx2(conversationTypes, lines, messageStatus, fromIndex, before, count, withUser) {
            return this.store.getMessagesEx2(conversationTypes, lines, messageStatus, withUser);
        }
    }, {
        key: 'getMessagesEx2V2',
        value: function getMessagesEx2V2(conversationTypes, lines, messageStatus, fromIndex, before, count, withUser, successCB, failCB) {
            var msgs = this.store.getMessagesEx2(conversationTypes, lines, messageStatus, withUser);
            this._callbackOrLoadFromRemoteMessages(msgs, successCB, failCB);
        }
    }, {
        key: 'getUserMessages',
        value: function getUserMessages(userId, conversation, fromIndex) {
            var before = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
            var count = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 20;
            var withUser = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : '';

            var msgs = this.store.getConversationMessages(conversation, fromIndex, before, count, withUser);
            return msgs.filter(function (msg) {
                return msg.from === userId;
            });
        }
    }, {
        key: 'getUserMessagesV2',
        value: function getUserMessagesV2(userId, conversation, fromIndex) {
            var before = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
            var count = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 20;
            var withUser = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : '';
            var successCB = arguments[6];
            var failCB = arguments[7];

            var msgs = this.store.getConversationMessages(conversation, fromIndex, before, count, withUser);
            msgs = msgs.filter(function (msg) {
                return msg.from === userId;
            });
            this._callbackOrLoadFromRemoteMessages(msgs, successCB, failCB);
        }
    }, {
        key: 'getUserMessagesEx',
        value: function getUserMessagesEx(userId, conversationTypes, lines, fromIndex) {
            var before = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
            var count = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 20;
            var contentTypes = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : [];

            var msgs = this.store.getMessagesEx(conversationTypes, lines, contentTypes, '');
            return msgs.filter(function (msg) {
                return msg.from === userId;
            });
        }
    }, {
        key: 'getUserMessagesExV2',
        value: function getUserMessagesExV2(userId, conversationTypes, lines, fromIndex) {
            var before = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
            var count = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 20;
            var contentTypes = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : [];
            var successCB = arguments[7];
            var failCB = arguments[8];

            var msgs = this.store.getMessagesEx(conversationTypes, lines, contentTypes, '');
            msgs = msgs.filter(function (msg) {
                return msg.from === userId;
            });
            this._callbackOrLoadFromRemoteMessages(msgs, successCB, failCB);
        }
    }, {
        key: 'getFirstUnreadMessageUid',
        value: function getFirstUnreadMessageUid(conversation) {
            return this.store.getFirstUnreadMessage(conversation);
        }
    }, {
        key: '_convertAndSaveProtoMessage',
        value: function _convertAndSaveProtoMessage(m, saveToDb) {
            var msg = _message2.default.fromProtoMessage(m);
            if (msg) {
                var flag = _messageConfig2.default.getMessageContentPersitFlag(msg.content.type);
                if (saveToDb) {
                    if (msg.type === 81) {
                        var message = this.store.getMessageByUid(_long2.default.fromValue(msg.content.binaryContent));
                        if (message && message.messageId > 0) {
                            this.store.deleteMessageByUid(_long2.default.from(msg.content.binaryContent));
                            this.onRemoteMessageDeleted(message.messageUid);
                        }
                    }
                    if (msg.type === 80) {
                        this.onRecallMessage(msg.content.operatorId, msg.content.messageUid);
                    }

                    if (flag === _persistFlag2.default.Persist || flag === _persistFlag2.default.Persist_And_Count) {
                        if (msg.conversation.type === _conversationType2.default.ChatRoom) {
                            msg.messageId = this.store.genChatRoomMessageId();
                        } else {
                            msg.messageId = this.store.genNormalMessageId();
                        }
                        this.store.saveMessage(msg);
                    } else {
                        msg.messageId = 0;
                    }
                } else {
                    if (flag === -1) {
                        if ((m.content.persistFlag & 0x01) === 1) {
                            flag = 1;
                        }
                    }

                    if ((flag & 0x1) === 1 && flag > 0) {
                        msg.messageId = -1;
                    } else {
                        msg.messageId = 0;
                    }
                }
            }
            return msg;
        }
    }, {
        key: '_loadRemoteMessagePublishCallback',
        value: function _loadRemoteMessagePublishCallback() {
            var errorCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;
            var data = arguments[1];
            var saveToDb = arguments[2];
            var updateConversation = arguments[3];
            var successCB = arguments[4];

            var _this54 = this;

            var failCB = arguments[5];
            var filterLocalMessage = arguments[6];

            this.log('loadRemoteMessages result', errorCode, saveToDb, updateConversation);
            if (errorCode === 0 && data) {
                var pr = PullMessageResult.decode(data);
                this.log('loadRemoteMessages result data', pr);
                var msgs = [];
                if (pr && pr.message) {
                    pr.message.forEach(function (m) {
                        if (WfcImpl.pcNotSupportMessageTypes.indexOf(m.content.type) > -1) {
                            return;
                        }
                        var lm = _this54.store.getMessageByUid(m.messageId);
                        var msg = _this54._convertAndSaveProtoMessage(m, saveToDb);
                        if (msg && (!lm || !filterLocalMessage)) {
                            msgs.push(msg);
                        }
                    });

                    if (updateConversation && msgs.length > 0) {
                        for (var i = 0; i < msgs.length; i++) {
                            var msg = msgs[i];
                            var flag = _messageConfig2.default.getMessageContentPersitFlag(msg.messageContent.type);
                            if (flag === _persistFlag2.default.Persist || flag === _persistFlag2.default.Persist_And_Count) {
                                var conversation = msg.conversation;
                                var conversationInfo = this.store.getConversationInfo(conversation);
                                if (!conversationInfo) {
                                    conversationInfo = this.store.genAndSaveDefaultConversationInfo(conversation);
                                }
                                if (!conversationInfo.lastMessage || !conversationInfo.lastMessage.timestamp || (0, _longUtil.gt)(msg.timestamp, conversationInfo.lastMessage.timestamp)) {
                                    conversationInfo.lastMessage = msg;
                                    conversationInfo.timestamp = msg.timestamp;
                                    this.eventEmitter.emit(_wfcEvent2.default.ConversationInfoUpdate, conversationInfo);
                                }
                                break;
                            }
                        }
                    }

                    if (successCB) {
                        msgs = msgs.reverse();
                        successCB(msgs, pr.message.length > 0);
                    }
                } else {
                    if (failCB) {
                        failCB(-1);
                    }
                }
            } else {
                if (failCB) {
                    failCB(errorCode);
                }
            }
        }
    }, {
        key: 'loadRemoteLineMessages',
        value: function loadRemoteLineMessages(line, contentTypes) {
            var beforeUid = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
            var count = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 20;

            var _this55 = this;

            var successCB = arguments[4];
            var failCB = arguments[5];

            var beforeUidLong = _long2.default.fromValue(beforeUid);
            if (beforeUidLong.eq(_long2.default.ZERO)) {
                beforeUidLong = _long2.default.MAX_VALUE;
            }

            var request = LoadLineMessages.create();
            request.line = line;
            request.count = count;
            request.beforeUid = beforeUidLong;
            if (!contentTypes) {
                contentTypes = [];
            }
            request.contentType = contentTypes;

            this._publish('LLM', LoadLineMessages.encode(request).finish(), function () {
                var errorCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -2;
                var data = arguments[1];

                _this55._loadRemoteMessagePublishCallback(errorCode, data, false, false, successCB, failCB);
            });
        }
    }, {
        key: 'loadRemoteMessages',
        value: function loadRemoteMessages(conversation, contentTypes) {
            var beforeUid = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
            var count = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 20;
            var successCB = arguments[4];

            var _this56 = this;

            var failCB = arguments[5];
            var filterLocalMessage = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : true;

            var beforeUidLong = _long2.default.fromValue(beforeUid);
            if (beforeUidLong.eq(_long2.default.ZERO)) {
                beforeUidLong = _long2.default.MAX_VALUE;
            }
            var info = this.store.getConversationInfo(conversation);
            if (info && info.lastMessage && info.lastMessage.messageUid && beforeUidLong.neq(_long2.default.MAX_VALUE) && _long2.default.fromValue(info.lastMessage.messageUid).compare(beforeUidLong) < 0) {
                this.log('the start message is exits', info.lastMessage.toString(), beforeUidLong.toString());
                failCB && failCB(-2);
                return;
            }

            var request = LoadRemoteMessages.create();
            request.conversation = this._toProtoConversation(conversation);
            if (!contentTypes) {
                contentTypes = [];
            }
            request.contentType = contentTypes;
            request.beforeUid = beforeUidLong;
            request.count = count;
            this.log('loadRemoteMessages request', conversation, beforeUidLong.toString(), request);
            this._publish('LRM', LoadRemoteMessages.encode(request).finish(), function () {
                var errorCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -2;
                var data = arguments[1];

                _this56._loadRemoteMessagePublishCallback(errorCode, data, contentTypes.length === 0, contentTypes.length === 0, successCB, failCB, filterLocalMessage);
            });
        }
    }, {
        key: 'loadRemoteMessage',
        value: function loadRemoteMessage(messageUid, successCB, failCB) {
            var _this57 = this;

            if (!messageUid) {
                failCB && failCB(-1);
                return;
            }
            var request = INT64Buf.create();
            request.id = _long2.default.fromValue(messageUid);
            this._publish('LROM', INT64Buf.encode(request).finish(), function () {
                var errorCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -2;
                var data = arguments[1];

                _this57._loadRemoteMessagePublishCallback(errorCode, data, false, false, successCB, failCB);
            });
        }
    }, {
        key: 'getMessageById',
        value: function getMessageById(messageId) {
            return this.store.getMessageById(messageId);
        }
    }, {
        key: 'getMessageByUid',
        value: function getMessageByUid(messageUid) {
            return this.store.getMessageByUid(messageUid);
        }
    }, {
        key: 'searchMessage',
        value: function searchMessage(conversation, keyword, withUser) {
            return this.store.searchConversationMessage(conversation, keyword, withUser);
        }
    }, {
        key: 'sendConversationMessage',
        value: function sendConversationMessage(conversation, messageContent, toUsers, preparedCB, progressCB, successCB, failCB) {
            var message = new _message2.default();
            if (conversation instanceof _conversation2.default) {
                message.conversation = conversation;
            } else {
                message.conversation = new _conversation2.default(conversation.type, conversation.target, conversation.line);
            }
            message.messageContent = messageContent;
            this.sendMessageEx(message, toUsers, preparedCB, progressCB, successCB, failCB);
        }
    }, {
        key: 'sendSavedMessage',
        value: function sendSavedMessage(message, expireDuration, successCB, failCB) {
            var messageId = message.messageId;
            message = this.store.getMessageById(messageId);
            if (!message) {
                this.error('saved message not found', messageId);
                failCB && failCB(-1);
                return;
            }

            this._sendMessageInternal(message, [], successCB, failCB);
        }
    }, {
        key: 'sendMessage',
        value: function sendMessage(message, preparedCB, progressCB, successCB, failCB) {
            this.sendMessageEx(message, [], preparedCB, progressCB, successCB, failCB);
        }

        // toUsers 用来实现定向消息

    }, {
        key: 'sendMessageEx',
        value: function sendMessageEx(message) {
            var toUsers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
            var preparedCB = arguments[2];
            var progressCB = arguments[3];

            var _this58 = this;

            var successCB = arguments[4];
            var failCB = arguments[5];


            // prepared
            // insert message
            var msgId = void 0;
            var saveTimestamp = _long2.default.fromValue(new Date().getTime() + this.getServerDeltaTime());
            message.status = _messageStatus2.default.Sending;
            message.from = this.userId;
            message.timestamp = saveTimestamp;
            message.content = message.messageContent.encode();
            var flag = _messageConfig2.default.getMessageContentPersitFlag(message.messageContent.type);
            if (flag === _persistFlag2.default.No_Persist || flag === _persistFlag2.default.Transparent) {
                msgId = 0;
                message.messageId = msgId;
            } else {
                if (message.conversation.type === _conversationType2.default.ChatRoom) {
                    msgId = this.store.genChatRoomMessageId();
                } else {
                    msgId = this.store.genNormalMessageId();
                }
                message.messageId = msgId;
                this.store.saveMessage(message);
                this.log('message prepared', msgId, saveTimestamp, message);
                this.store.updateConversationLastMessage(message);
            }

            this.eventEmitter.emit(_wfcEvent2.default.SendMessage, message);
            if (preparedCB) {
                this.log('onPrepared', this.getMessageById(msgId));
                preparedCB(msgId, saveTimestamp);
            }
            if (message.messageContent instanceof _mediaMessageContent2.default) {
                if (message.messageContent.file || message.messageContent.localPath) {
                    this._uploadMedia(message.messageId, message.messageContent.name, message.messageContent.file || message.messageContent.localPath, message.messageContent.mediaType, function (remoteMediaUrl) {
                        message.messageContent.remotePath = remoteMediaUrl;
                        _this58.log('remote Url', remoteMediaUrl);
                        _this58.eventEmitter.emit(_wfcEvent2.default.MessageStatusUpdate, message);
                        _this58._sendMessageInternal(message, toUsers, successCB, failCB);
                    }, function (errorCode) {
                        message.status = _messageStatus2.default.SendFailure;
                        _this58.store.updateMessageById(message);
                        _this58.store.updateConversationLastMessage(message);

                        _this58.eventEmitter.emit(_wfcEvent2.default.MessageStatusUpdate, message);

                        if (failCB) {
                            failCB(errorCode);
                        }
                    }, function (uploaded, total) {
                        // TODO progress update
                        // this.eventEmitter.emit(EventType.MessageStatusUpdate, message);

                        if (progressCB) {
                            progressCB(uploaded, total);
                        }
                    });
                } else if (message.messageContent.remotePath !== '') {
                    this._sendMessageInternal(message, toUsers, successCB, failCB);
                } else {
                    if (message.messageContent instanceof _compositeMessageContent2.default) {
                        // 组合消息比较特殊，可能真没什么需要上传的
                        this._sendMessageInternal(message, toUsers, successCB, failCB);
                    } else {
                        this.log('send media message error, file，localPath and remoteUrl are null');
                        message.status = _messageStatus2.default.SendFailure;
                        this.store.updateMessageById(message);
                        this.store.updateConversationLastMessage(message);
                        this.eventEmitter.emit(_wfcEvent2.default.MessageStatusUpdate, message);

                        if (failCB) {
                            failCB(-1);
                        }
                    }
                }
            } else {
                this._sendMessageInternal(message, toUsers, successCB, failCB);
            }
        }
    }, {
        key: '_sendMessageInternal',
        value: function _sendMessageInternal(message) {
            var toUsers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

            var _this59 = this;

            var successCB = arguments[2];
            var failCB = arguments[3];

            var pbMsg = this._toProtoMessage(message);
            pbMsg.to = toUsers;
            this.log('_sendMessageInternal', this.connectionStatus);
            var data = PbMessage.encode(pbMsg).finish();
            if (data.byteLength > 15 * 1024) {
                this.log('\u8B66\u544A\uFF01\uFF01\uFF01\u6D88\u606F\u5185\u5BB9\u5927\u5C0F\u662F: ' + data.byteLength + '\uFF0C\u5927\u5C0F\u8D85\u8FC715K\u4E86\uFF0C\u5EFA\u8BAE\u4E0D\u8981\u8D85\u8FC715K\uFF0C\u5982\u679C\u5927\u6D88\u606F\u8FC7\u591A\u4F1A\u5F71\u54CD\u63A5\u53D7\u4F53\u9A8C\uFF0C\u5EFA\u8BAE\u5927\u6587\u4EF6\u4F7F\u7528\u5A92\u4F53\u6D88\u606F\u7C7B\u578B!!!');
            }
            if (data.byteLength > 100 * 1024) {
                this.error('\u6D88\u606F\u5185\u5BB9\u592A\u5927\uFF0C\u53D1\u9001\u5931\u8D25!');
                failCB && failCB(-1);
                return;
            }

            this._publish('MS', data, function () {
                var errorCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -2;
                var data = arguments[1];

                _this59.log('_sendMessageInternal result', errorCode);
                if (errorCode !== 0 || !data) {
                    _this59.log('send message error', errorCode);
                    message.status = _messageStatus2.default.SendFailure;
                    _this59.store.updateMessageById(message);
                    _this59.store.updateConversationLastMessage(message);
                    _this59.eventEmitter.emit(_wfcEvent2.default.MessageStatusUpdate, message);
                    if (failCB) {
                        failCB(errorCode);
                    }
                    return;
                } else {
                    // parse data
                    // messageUid + timestamp
                    var messageUid = new _long2.default(0);
                    var timestamp = new _long2.default(0);
                    if (data.length === 16) {
                        messageUid = _long2.default.fromBytesBE(data.slice(0, 8), true);
                        timestamp = _long2.default.fromBytesBE(data.slice(8, 16), true);
                        message.messageUid = messageUid;
                        message.timestamp = timestamp;
                        message.status = _messageStatus2.default.Sent;
                        message.direction = 0;
                        message.from = _this59.userId;
                        _this59.store.updateMessageById(message);
                        _this59.store.updateConversationLastMessage(message);

                        _this59.eventEmitter.emit(_wfcEvent2.default.MessageStatusUpdate, message);
                        if (successCB) {
                            successCB(messageUid, timestamp);
                        }
                    } else {
                        message.status = _messageStatus2.default.SendFailure;
                        _this59.store.updateMessageById(message);
                        _this59.store.updateConversationLastMessage(message);
                        _this59.log('ms reponse length error');

                        _this59.eventEmitter.emit(_wfcEvent2.default.MessageStatusUpdate, message);
                        if (failCB) {
                            failCB(-100001);
                        }
                    }
                }
            });
        }
    }, {
        key: 'cancelSendingMessage',
        value: function cancelSendingMessage(messageId) {
            if (messageId <= 0) {
                return false;
            }
            var task = this.uploadingMap.get(messageId);
            if (task) {
                try {
                    task.abort();
                } catch (e) {
                    this.log(e);
                }
                return true;
            }

            return false;
        }
    }, {
        key: 'recallMessage',
        value: function () {
            var _ref37 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee37(messageUid, successCB, failCB) {
                var _this60 = this;

                var request;
                return _regenerator2.default.wrap(function _callee37$(_context37) {
                    while (1) {
                        switch (_context37.prev = _context37.next) {
                            case 0:
                                request = INT64Buf.create();

                                request.id = _long2.default.fromValue(messageUid);
                                this._publish('MR', INT64Buf.encode(request).finish(), function (errorCode, data) {
                                    if (errorCode === 0) {
                                        if (successCB) {
                                            successCB();
                                        }
                                        _this60.onRecallMessage(_this60.getUserId(), messageUid);
                                    } else {
                                        if (failCB) {
                                            failCB(errorCode);
                                        }
                                    }
                                });

                            case 3:
                            case 'end':
                                return _context37.stop();
                        }
                    }
                }, _callee37, this);
            }));

            function recallMessage(_x206, _x207, _x208) {
                return _ref37.apply(this, arguments);
            }

            return recallMessage;
        }()
    }, {
        key: 'deleteMessageById',
        value: function deleteMessageById(messageId) {
            var result = this.store.deleteMessageById(messageId);
            if (result) {
                this.onMessageDeleted(messageId);
            }
            return result;
        }
    }, {
        key: 'deleteRemoteMessage',
        value: function deleteRemoteMessage(messageUid, successCB, failCB) {
            var _this61 = this;

            var request = INT64Buf.create();
            request.id = _long2.default.fromValue(messageUid);
            this._publish('MD', INT64Buf.encode(request).finish(), function (errorCode, data) {
                if (errorCode === 0) {
                    successCB && successCB();
                    _this61.onRemoteMessageDeleted(messageUid);
                } else {
                    if (failCB) {
                        failCB(errorCode);
                    }
                }
            });
        }
    }, {
        key: 'clearMessages',
        value: function () {
            var _ref38 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee38(conversation, dt) {
                var conversationInfo;
                return _regenerator2.default.wrap(function _callee38$(_context38) {
                    while (1) {
                        switch (_context38.prev = _context38.next) {
                            case 0:
                                if (dt === undefined) {
                                    dt = _long2.default.MAX_VALUE;
                                }
                                this.store.clearConversationMessages(conversation, dt);
                                conversationInfo = this.getConversationInfo(conversation);

                                this.eventEmitter.emit(_wfcEvent2.default.ConversationInfoUpdate, conversationInfo);

                            case 4:
                            case 'end':
                                return _context38.stop();
                        }
                    }
                }, _callee38, this);
            }));

            function clearMessages(_x209, _x210) {
                return _ref38.apply(this, arguments);
            }

            return clearMessages;
        }()
    }, {
        key: 'clearRemoteConversationMessages',
        value: function () {
            var _ref39 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee39(conversation, successCB, failCB) {
                var _this62 = this;

                var pbConversation;
                return _regenerator2.default.wrap(function _callee39$(_context39) {
                    while (1) {
                        switch (_context39.prev = _context39.next) {
                            case 0:
                                pbConversation = this._toProtoConversation(conversation);

                                this._publish('CMD', PbConversation.encode(pbConversation).finish(), function (errorCode, data) {
                                    if (errorCode === 0) {
                                        _this62.clearMessages(conversation);
                                        successCB && successCB();
                                    } else {
                                        failCB && failCB(errorCode === 0 ? -1 : errorCode);
                                    }
                                });

                            case 2:
                            case 'end':
                                return _context39.stop();
                        }
                    }
                }, _callee39, this);
            }));

            function clearRemoteConversationMessages(_x211, _x212, _x213) {
                return _ref39.apply(this, arguments);
            }

            return clearRemoteConversationMessages;
        }()

        /**
         *
         * @param {Conversation} conversation
         * @param {MessageContent} messageContent
         * @param {number} status 可选值参考{@link MessageStatus}
         * @param {boolean} notify 是否触发onReceiveMessage
         * @param {Number} serverTime 服务器时间，精度到毫秒
         */

    }, {
        key: 'insertMessage',
        value: function insertMessage(conversation, messageContent) {
            var status = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _messageStatus2.default.Sent;
            var notify = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
            var serverTime = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;

            var msg = new _message2.default(conversation, messageContent);
            msg.status = status;
            msg.direction = 0;
            if (status >= _messageStatus2.default.Mentioned) {
                msg.direction = 1;
                if (conversation.type === _conversationType2.default.Single) {
                    msg.from = conversation.target;
                } else {
                    msg.from = this.userId;
                }
            } else {
                msg.from = this.userId;
            }
            msg.timestamp = _long2.default.fromValue(serverTime ? serverTime : new Date().getTime());
            switch (conversation.type) {
                case _conversationType2.default.ChatRoom:
                    msg.messageId = this.store.genChatRoomMessageId();
                    break;
                default:
                    msg.messageId = this.store.genNormalMessageId();
                    break;
            }
            this.store.insertConversationMessages([msg]);
            if (notify) {
                this.eventEmitter.emit(_wfcEvent2.default.ReceiveMessage, msg);
            }
            return msg;
            // proto.insertMessage(JSON.stringify(conversation), this.userId, JSON.stringify(messageContent), status, notify, serverTime);
        }
    }, {
        key: 'isUserReceiptEnabled',
        value: function isUserReceiptEnabled() {
            var value = this.getUserSetting(_userSettingScope2.default.DisableReceipt, "");
            return "1" !== value;
        }
    }, {
        key: 'isGlobalDisableSyncDraft',
        value: function isGlobalDisableSyncDraft() {
            return this.isGlobalDisableDraftSync;
        }
    }, {
        key: 'setDisableSyncDraft',
        value: function setDisableSyncDraft(disable, successCB, failCB) {
            this._updateUserSetting(_userSettingScope2.default.DisableSyncDraft, "", disable ? "1" : "0", successCB, failCB);
        }
    }, {
        key: 'isDisableSyncDraft',
        value: function isDisableSyncDraft() {
            var value = this.getUserSetting(_userSettingScope2.default.DisableSyncDraft, "");
            return "1" !== value;
        }
    }, {
        key: 'setUserEnableReceipt',
        value: function setUserEnableReceipt(enable, successCB, failCB) {
            this._updateUserSetting(_userSettingScope2.default.DisableReceipt, "", enable ? "0" : "1", successCB, failCB);
        }
    }, {
        key: 'updateMessageStatus',
        value: function updateMessageStatus(messageId, status) {
            var msg = this.store.getMessageById(messageId);
            if (msg.messageId === 0) {
                return;
            }
            msg.status = status;
            this.store.updateMessageById(msg);
        }
    }, {
        key: 'updateMessageContent',
        value: function updateMessageContent(messageId, messageContent) {
            var msg = this.store.getMessageById(messageId);
            if (msg.messageId === 0) {
                return;
            }
            msg.messageContent = messageContent;
            this.store.updateMessageById(msg);
        }
    }, {
        key: 'updateMessageContentByUid',
        value: function updateMessageContentByUid(messageUid, messageContent) {
            var msg = this.store.getMessageByUid(messageUid);
            if (!msg || msg.messageId === 0) {
                return;
            }
            msg.messageContent = messageContent;
            this.store.updateMessageById(msg);
        }
    }, {
        key: 'updateRemoteMessageContent',
        value: function updateRemoteMessageContent(msgUid, messageContent, distribute, updateLocal, successCB, failCB) {
            var _this63 = this;

            var request = UpdateMessageContent.create();
            request.messageId = _long2.default.fromValue(msgUid);
            request.content = this._toProtoMessageContent(messageContent);
            request.distribute = distribute;
            this._publish('MCU', UpdateMessageContent.encode(request).finish(), function (errorCode, data) {
                if (errorCode === 0) {
                    if (updateLocal) {
                        _this63.updateMessageContentByUid(msgUid, messageContent);
                    }
                    successCB && successCB();
                } else {
                    if (failCB) {
                        failCB(errorCode);
                    }
                }
            });
        }
    }, {
        key: '_uploadXMLHttpRequest',
        value: function _uploadXMLHttpRequest(message, fileName, remoteUrl, progressCB, successCB, failCB) {
            var _this64 = this;

            var xhr = new XMLHttpRequest();
            xhr.upload.onprogress = function (e) {
                // this.log('upload.onprogress', Math.ceil(e.loaded / e.total * 100))
                var progress = e.loaded;
                var total = e.total;
                progressCB(progress, total);
            };
            xhr.onreadystatechange = function (e) {
                _this64.log('onr', xhr.readyState, xhr.status, e);
                if (xhr.readyState === 4) {
                    if (xhr.status === 200) {
                        _this64.log('upload file success', fileName, remoteUrl);
                        successCB(remoteUrl);
                    } else {
                        _this64.log('upload file error', xhr.status);
                        failCB && failCB(-1);
                    }
                    _this64.uploadingMap.delete(message.messageId);
                }
            };
            xhr.onerror = function (e) {
                _this64.log('upload file error', e);
                failCB && failCB(-1);
                _this64.uploadingMap.delete(message.messageId);
            };

            if (message.messageId > 0) {
                this.uploadingMap.set(message.messageId, xhr);
            }

            return xhr;
        }

        // 大文件上传

    }, {
        key: '_uploadFile',
        value: function _uploadFile(message, blob, fileName, mediaType, progressCB, successCB, failCB) {
            var _this65 = this;

            var originalFileName = void 0;
            var randomStr12 = (Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15)).substring(0, 12);
            if (!fileName || fileName === '') {
                fileName = randomStr12;
                originalFileName = fileName;
            } else {
                originalFileName = fileName;
                fileName = randomStr12;
            }

            if (fileName.indexOf('.') === -1) {
                switch (mediaType) {
                    case 1:
                    case 5:
                        fileName += '.jpg';
                        break;
                    case 2:
                        // 小程序平台，voice默认为mp3格式
                        fileName += '.mp3';
                        break;
                    case 3:
                        fileName += '.mp4';
                        break;
                    default:
                        break;
                }
            }

            this.log('upload fileName', fileName, mediaType);
            var ext = fileName.substring(fileName.lastIndexOf("."));
            if (originalFileName.indexOf(".") === -1) {
                originalFileName += ext;
            }
            this.getUploadMediaUrl(fileName, mediaType, 'application/octet-stream', function (uploadUrl, remoteUrl, backUploadUrl, serverType) {
                var xhr = void 0;
                if (serverType === 0) {
                    // 内置存储，不支持大文件上传
                } else if (serverType === 1) {
                    // qiniu
                    var ss = uploadUrl.split('?');
                    var url = ss[0];
                    var token = ss[1];
                    var key = ss[2];
                    xhr = _this65._uploadXMLHttpRequest(message, fileName, remoteUrl, progressCB, successCB, failCB);

                    var formData = new FormData();
                    formData.append('key', key);
                    formData.append('token', token);
                    formData.append('file', blob);
                    xhr.open('POST', url);
                    xhr.setRequestHeader("content-disposition", 'attachment; filename="' + encodeURI(originalFileName) + '"');
                    xhr.send(formData);
                } else {
                    // 野火专业存储或阿里云
                    xhr = _this65._uploadXMLHttpRequest(message, fileName, remoteUrl, progressCB, successCB, failCB);
                    xhr.open('PUT', uploadUrl);

                    xhr.setRequestHeader("content-type", 'application/octet-stream');
                    xhr.send(blob);
                }
            }, function (e) {
                _this65.log('getUploadMediaUrl e', e);
            });
        }
    }, {
        key: 'uploadMedia',
        value: function uploadMedia(fileName, fileOrDataUri, mediaType, successCB, failCB, progressCB) {
            this._uploadMedia(0, fileName, fileOrDataUri, mediaType, successCB, failCB, progressCB);
        }

        //  原始协议栈上传，有加密

    }, {
        key: '_uploadMedia',
        value: function _uploadMedia(messageId, fileName, fileOrDataUri, mediaType, successCB, failCB, progressCB) {
            var _this66 = this;

            var originalFileName = void 0;
            var randomStr12 = (Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15)).substring(0, 12);
            if (!fileName || fileName === '') {
                fileName = randomStr12;
                originalFileName = fileName;
            } else {
                originalFileName = encodeURIComponent(fileName);
                fileName = randomStr12;
            }

            if (fileName.indexOf('.') === -1) {
                switch (mediaType) {
                    case 1:
                    case 5:
                        fileName += '.jpg';
                        break;
                    case 2:
                        // 小程序平台，voice默认为mp3格式
                        fileName += '.mp3';
                        break;
                    case 3:
                        fileName += '.mp4';
                        break;
                    default:
                        break;
                }
            }

            this.log('upload fileName', fileName, mediaType);
            var ext = fileName.substring(fileName.lastIndexOf("."));
            if (originalFileName.indexOf(".") === -1) {
                originalFileName += ext;
            }

            var key = (0, _base.btoa)(this.userId) + '-' + mediaType + '-' + Math.round(new Date().valueOf() / 1000) + '-' + fileName;

            var request = GetUploadTokenRequest.create();
            request.mediaType = mediaType;
            request.mediaPath = key;
            this._publish('GMUT', GetUploadTokenRequest.encode(request).finish(), function (errorCode, data) {
                _this66.log('get upload token', errorCode, data);
                if (errorCode === 0) {
                    var tokenResult = GetUploadTokenResult.decode(data);
                    _this66.log('getUploadToken result', tokenResult);

                    var cgi = void 0;
                    if (tokenResult.type === 0 || tokenResult.type === 4) {
                        cgi = "/fs";
                    } else if (tokenResult.type === 3) {
                        var tempKey = tokenResult.path + "/" + key;
                        tempKey = (0, _aes.AESEncrypt)(tempKey);
                        cgi = "/fs/" + tempKey;
                    } else {
                        if (tokenResult.type === 2) {
                            key = encodeURI(key);
                        }
                        cgi = "/" + key;
                    }
                    _this66.log('upload media cgi', cgi, tokenResult);

                    var server = void 0;
                    var port = void 0;
                    var sPort = void 0;
                    // 1 主网络；2 备选网络
                    if (_this66.backupAddressStrategy === 2 && tokenResult.backupServer) {
                        server = tokenResult.backupServer;
                        sPort = tokenResult.backupSslPort;
                        sPort = sPort === 443 ? '' : ':' + sPort;

                        port = tokenResult.backupPort;
                        port = port === 80 ? '' : ':' + port;
                    } else {
                        server = tokenResult.server;
                        sPort = '';
                        // sslPort是新增的，需要兼容就版本
                        if (tokenResult.sslPort && tokenResult.sslPort !== 443) {
                            sPort = ":" + tokenResult.sslPort;
                        }
                        port = tokenResult.port !== 80 ? ':' + tokenResult.port : '';
                    }

                    var url = void 0;
                    if (_config2.default.USE_WSS) {
                        url = "https://" + server + sPort + cgi;
                    } else {
                        url = "http://" + server + port + cgi;
                    }

                    _this66.log('media server', url);

                    var mp = _this66._platformOptions(_this66.platformName).mp;
                    if (tokenResult.type < 2) {
                        var task = mp.uploadFile({
                            url: url,
                            filePath: fileOrDataUri,
                            name: 'file',
                            formData: {
                                'token': tokenResult.token,
                                'key': fileName
                            },
                            header: {
                                'content-disposition': 'attachment; filename="' + encodeURI(originalFileName) + '"'
                            },
                            success: function success(res) {
                                var data = res.data;
                                var uploadResult = JSON.parse(data);
                                if (successCB) {
                                    successCB(tokenResult.domain + '/' + uploadResult.key);
                                }
                            },
                            fail: function fail() {
                                failCB(-1);
                            }
                        });
                        task.onProgressUpdate(function (res) {
                            if (progressCB) {
                                progressCB(res.totalBytesSent, res.totalBytesExpectedToSend);
                            }
                        });
                        self.uploadingMap.set(messageId, task);
                    } else {
                        var token = _config2.default.USE_WSS ? tokenResult.sslToken ? tokenResult.sslToken : tokenResult.token : tokenResult.token;
                        var header = {
                            'Authorization': token,
                            'content-disposition': 'attachment; filename="' + encodeURI(originalFileName) + '"'
                        };
                        if (tokenResult.type === 2) {
                            header['Content-Type'] = 'application/octet-stream';
                            header['x-oss-date'] = tokenResult.date;
                        } else {
                            var type = void 0;
                            var suffix = fileName.split('.').pop();
                            if (mediaType === 1) {
                                type = 'image/jpeg';
                            } else if (mediaType === 2) {
                                type = 'audio/amr';
                            } else if (mediaType === 3) {
                                type = 'video/mp4';
                            } else if (suffix) {
                                switch (suffix) {
                                    case 'jpg':
                                    case 'jpeg':
                                        type = 'image/jpeg';
                                        break;
                                    case 'gif':
                                        type = 'image/gif';
                                        break;
                                    case 'png':
                                        type = 'image/png';
                                        break;
                                    case 'mp3':
                                        type = 'audio/mpeg';
                                        break;
                                    case 'mp4':
                                        type = 'video/mp4';
                                        break;
                                    case 'doc':
                                    case 'docx':
                                        type = 'application/vnd.ms-word';
                                        break;
                                    case 'xls':
                                    case 'xlsx':
                                        type = 'application/vnd.ms-xls';
                                        break;
                                    case 'ppt':
                                    case 'pptx':
                                        type = 'application/vnd.ms-powerpoint';
                                        break;
                                    case 'pps':
                                        type = 'application/vnd.ms-powerpoint';
                                        break;
                                    case 'pdf':
                                        type = '"application/pdf';
                                        break;
                                    case 'xml':
                                        type = 'application/vnd.ms-xml';
                                        break;
                                    default:
                                        type = 'application/octet-stream';
                                        break;
                                }
                            } else {
                                type = 'application/octet-stream';
                            }

                            header['Content-Type'] = type;
                            header["x-amz-date"] = tokenResult.date;
                            header["x-wfc-cid"] = (0, _aes.AESEncrypt)(_this66.clientId);
                            header["x-wfc-uid"] = (0, _aes.AESEncrypt)(_this66.userId);
                        }

                        var log = _this66.log;
                        mp.getFileSystemManager().readFile({
                            filePath: fileOrDataUri,
                            success: function success(res) {
                                var data = void 0;
                                log('read file success', res);
                                if (tokenResult.type === 3) {
                                    if (res.data.size > 100 * 1024 * 1024) {
                                        if (failCB) {
                                            log('upload media size too large', res.data.size);
                                            failCB(-1);
                                        }
                                        return;
                                    }
                                    var array = new Uint8Array(res.data);
                                    data = new Buffer((0, _aes.AESEncrypt)(array, self.privateSecret), 'base64');
                                    header['x-wfc-size'] = res.data.byteLength;
                                    data = data.buffer;
                                    log('encrypt success', data);
                                } else {
                                    data = res.data;
                                }
                                log('upload header', header);

                                var task = mp.request({
                                    url: url,
                                    method: 'PUT',
                                    data: data,
                                    header: header,
                                    timeout: 200000,
                                    success: function success(res) {
                                        log('upload ', res);
                                        if (successCB) {
                                            successCB(tokenResult.domain + '/' + key);
                                        }
                                    },
                                    fail: function fail(err) {
                                        log('upload fail', err);
                                    }
                                });

                                task.onProgressUpdate(function (res) {
                                    if (progressCB) {
                                        progressCB(res.totalBytesSent, res.totalBytesExpectedToSend);
                                    }
                                });

                                self.uploadingMap.set(messageId, task);
                            },
                            fail: function fail(msg) {
                                log('read file fail', msg);
                            }
                        });
                    }
                } else {
                    if (failCB) {
                        failCB(errorCode);
                    }
                }
            });

            this.log('upload-----------');
        }
    }, {
        key: 'getAuthorizedMediaUrl',
        value: function getAuthorizedMediaUrl(messageUid, mediaType, mediaPath, successCB, failCB) {
            var request = GetUploadTokenRequest.create();
            request.mediaType = mediaType;
            request.mediaPath = mediaPath;
            request.messageId = messageUid;

            this._publish('GMDT', GetUploadTokenRequest.encode(request).finish(), function (errorCode, data) {
                if (errorCode === 0 && data) {
                    var idBuf = IDBuf.decode(data);
                    successCB && successCB(idBuf.id);
                } else {
                    failCB && failCB(errorCode === 0 ? -1 : errorCode);
                }
            });
        }
    }, {
        key: 'isSupportBigFilesUpload',
        value: function isSupportBigFilesUpload() {
            return this.serverConfigs.isSupportBigFileUpload;
        }
    }, {
        key: 'getUploadMediaUrl',
        value: function getUploadMediaUrl(fileName, mediaType, contentType, successCB, failCB) {
            var request = GetUploadTokenRequest.create();
            var key = this.userId + '-' + mediaType + '-' + Math.round(new Date().valueOf() / 1000) + '-' + Math.round(Math.random() * 100000000);
            var index = fileName.lastIndexOf('.');
            fileName = encodeURIComponent(fileName);
            if (index > 0) {
                key += fileName.substring(index);
            }
            request.type = mediaType;
            request.mediaPath = key;
            request.contentType = !contentType ? 'application/octet-stream' : contentType;
            this._publish('GMPU', GetUploadTokenRequest.encode(request).finish(), function (errorCode, data) {
                if (errorCode === 0 && data) {
                    var result = GetPresignedUrlResult.decode(data);
                    successCB && successCB(result.presignedUrl, result.mediaUrl, result.backupPresignedUrl, result.type);
                } else {
                    failCB && failCB(errorCode === 0 ? -1 : errorCode);
                }
            });
        }
    }, {
        key: '_getContentType',
        value: function _getContentType(mediaType, fileName) {
            if (mediaType === 1) {
                return "image/jpeg";
            } else if (mediaType === 2) {
                return "audio/amr";
            } else if (mediaType === 3) {
                return "video/mp4";
            } else {
                if (fileName) {
                    var suffix = fileName.substring(fileName.lastIndexOf('.') + 1);
                    if (suffix === "jpg" || suffix === "jpeg") {
                        return "image/jpeg";
                    } else if (suffix === "gif") {
                        return "image/gif";
                    } else if (suffix === "png") {
                        return "image/png";
                    } else if (suffix === "mp3") {
                        return "audio/mpeg";
                    } else if (suffix === "mp4") {
                        return "video/mp4";
                    } else if (suffix === "doc" || suffix === "docx") {
                        return "application/vnd.ms-word";
                    } else if (suffix === "xls" || suffix === "xlsx") {
                        return "application/vnd.ms-xls";
                    } else if (suffix === "ppt" || suffix === "pptx") {
                        return "application/vnd.ms-powerpoint";
                    } else if (suffix === "pps") {
                        return "application/vnd.ms-powerpoint";
                    } else if (suffix === "pdf") {
                        return "application/pdf";
                    } else if (suffix === "xml") {
                        return "application/vnd.ms-xml";
                    } else {
                        return "application/octet-stream";
                    }
                }
            }
            return "application/octet-stream";
        }
    }, {
        key: '_getFileRecordsCallback',
        value: function _getFileRecordsCallback(errorCode, data, successCB, failCB) {
            if (errorCode === 0 && data) {
                var result = LoadFileRecordRes.decode(data);
                var records = [];
                result.record.forEach(function (r) {
                    var record = new _fileRecord2.default();
                    record.conversation = new _conversation2.default(r.conversation.type, r.conversation.target, r.conversation.line);
                    record.messageUid = r.messageId;
                    record.name = r.name;
                    record.url = r.url;
                    if (_config2.default.urlRedirect) {
                        record.url = _config2.default.urlRedirect(r.url);
                    }
                    record.size = r.size;
                    record.downloadCount = r.downloadCount;
                    record.userId = r.fromUser;
                    record.timestamp = r.dt;
                    records.push(record);
                });

                successCB && successCB(records);
            } else {
                if (failCB) {
                    failCB(errorCode === 0 ? -1 : errorCode);
                }
            }
        }
    }, {
        key: 'getConversationFileRecords',
        value: function getConversationFileRecords(conversation, fromUser, beforeMessageUid, order, count, successCB, failCB) {
            var _this67 = this;

            var request = LoadFileRecordReq.create();
            request.conversation = this._toProtoConversation(conversation);
            request.messageId = _long2.default.fromValue(beforeMessageUid);
            request.from = fromUser;
            request.order = order;
            request.count = count;
            this._publish('LFR', LoadFileRecordReq.encode(request).finish(), function (errorCode, data) {
                _this67._getFileRecordsCallback(errorCode, data, successCB, failCB);
            });
        }
    }, {
        key: 'getMyFileRecords',
        value: function getMyFileRecords(beforeMessageUid, order, count, successCB, failCB) {
            var _this68 = this;

            var request = LoadFileRecordReq.create();
            request.messageId = _long2.default.fromValue(beforeMessageUid);
            request.order = order;
            request.count = count;
            this._publish('LFR', LoadFileRecordReq.encode(request).finish(), function (errorCode, data) {
                _this68._getFileRecordsCallback(errorCode, data, successCB, failCB);
            });
        }
    }, {
        key: 'searchFiles',
        value: function searchFiles(keyword, conversation, fromUser, beforeMessageUid, order, count, successCB, failCB) {
            var _this69 = this;

            var request = SearchFileRecordReq.create();
            request.keyword = keyword;
            request.conversation = this._toProtoConversation(conversation);
            request.from = fromUser;
            request.messageId = _long2.default.fromValue(beforeMessageUid);
            request.order = order;
            request.count = count;
            this._publish('SFR', SearchFileRecordReq.encode(request).finish(), function (errorCode, data) {
                _this69._getFileRecordsCallback(errorCode, data, successCB, failCB);
            });
        }
    }, {
        key: 'searchMyFiles',
        value: function searchMyFiles(keyword, beforeMessageUid, order, count, successCB, failCB) {
            var _this70 = this;

            var request = SearchFileRecordReq.create();
            request.keyword = keyword;
            request.messageId = _long2.default.fromValue(beforeMessageUid);
            request.order = order;
            request.count = count;
            this._publish('SFR', SearchFileRecordReq.encode(request).finish(), function (errorCode, data) {
                _this70._getFileRecordsCallback(errorCode, data, successCB, failCB);
            });
        }
    }, {
        key: 'deleteFileRecord',
        value: function deleteFileRecord(messageUid, successCB, failCB) {
            var request = INT64Buf.create();
            request.id = _long2.default.fromValue(messageUid);
            this._publish('DFR', INT64Buf.encode(request).finish(), function (errorCode, data) {
                if (errorCode === 0) {
                    if (successCB) {
                        successCB();
                    }
                } else {
                    if (failCB) {
                        failCB(errorCode);
                    }
                }
            });
        }
    }, {
        key: 'markConversationAsUnread',
        value: function markConversationAsUnread(conversation, syncToOtherClient) {
            var msgUid = this.store.setLastReceivedMessageUnread(conversation, '0', '0');
            if (msgUid && (0, _longUtil.gt)(msgUid, 0) && syncToOtherClient) {
                var content = new _markUnreadMessageContent2.default(msgUid);
                var msg = this.store.getMessageByUid(msgUid);
                content.timestamp = msg.timestamp;
                this.sendConversationMessage(conversation, content);
                return true;
            }
            return false;
        }
    }, {
        key: 'getVersion',
        value: function getVersion() {
            return WfcImpl.version;
        }
    }, {
        key: 'isUserOnlineStateEnabled',
        value: function isUserOnlineStateEnabled() {
            return this.isUserOnlineStateEnable;
        }
    }, {
        key: 'watchOnlineState',
        value: function watchOnlineState(conversationType, targets, duration, successCB, failCB) {
            this._watchOnlineState(conversationType, targets, duration, true, successCB, failCB);
        }
    }, {
        key: '_watchOnlineState',
        value: function _watchOnlineState(type, targets, duration, isWatch, successCB, failCB) {
            if (!this.isUserOnlineStateEnable) {
                failCB && failCB(248);
                return;
            }

            var request = PresenceWatchRequest.create();
            request.type = type;
            request.target = targets;
            request.duration = duration;
            this._publish('PWT', PresenceWatchRequest.encode(request).finish(), function (errorCode, data) {
                if (errorCode === 0 && data) {
                    if (!isWatch) {
                        successCB && successCB();
                        return;
                    }
                    var result = PresenceWatchResult.decode(data);
                    var userStates = [];
                    result.notify.forEach(function (n) {
                        var userState = new _userOnlineState2.default();
                        userState.userId = n.userId;

                        userState.customState = new _userCustomState2.default();
                        userState.customState.state = n.customState;
                        userState.customState.text = n.customText;

                        var userClientStates = [];
                        n.state.forEach(function (s) {
                            var clientState = new _userClientState2.default();
                            clientState.platform = s.platform;
                            clientState.state = s.state;
                            clientState.lastSeen = s.lastSeen;
                            userClientStates.push(clientState);
                        });
                        userState.clientStates = userClientStates;

                        userStates.push(userState);
                    });

                    successCB && successCB(userStates);
                } else {
                    if (failCB) {
                        failCB(errorCode === 0 ? -1 : errorCode);
                    }
                }
            });
        }
    }, {
        key: 'unwatchOnlineState',
        value: function unwatchOnlineState(conversationType, targets, successCB, failCB) {
            this._watchOnlineState(conversationType, targets, 0, false, successCB, failCB);
        }
    }, {
        key: 'setMyCustomState',
        value: function setMyCustomState(customState, customText, successCB, failCB) {
            var csSetting = customState + '-' + customText;
            this.setUserSetting(_userSettingScope2.default.CustomState, "", csSetting, successCB, failCB);
        }
    }, {
        key: 'requireLock',
        value: function requireLock(lockId, duration, successCB, failCB) {
            var request = LockRequest.create();
            request.lockId = lockId;
            request.duration = _long2.default.fromValue(duration);
            this._publish('SLT', LockRequest.encode(request).finish(), function (errorCode, data) {
                if (errorCode === 0) {
                    successCB && successCB();
                } else {
                    failCB && failCB(errorCode);
                }
            });
        }
    }, {
        key: 'releaseLock',
        value: function releaseLock(lockId, successCB, failCB) {
            this.requireLock(lockId, 0, successCB, failCB);
        }
    }, {
        key: '_onlineStateNotify',
        value: function _onlineStateNotify(data) {
            var result = PresenceWatchResult.decode(data);
            var userStates = [];
            result.notify.forEach(function (n) {
                var userState = new _userOnlineState2.default();
                userState.userId = n.userId;

                userState.customState = new _userCustomState2.default();
                userState.customState.state = n.customState;
                userState.customState.text = n.customText;

                var userClientStates = [];
                n.state.forEach(function (s) {
                    var clientState = new _userClientState2.default();
                    clientState.platform = s.platform;
                    clientState.state = s.state;
                    clientState.lastSeen = s.lastSeen;
                    userClientStates.push(clientState);
                });
                userState.clientStates = userClientStates;

                userStates.push(userState);
            });

            this.eventEmitter.emit(_wfcEvent2.default.UserOnlineEvent, userStates);
        }
    }, {
        key: '_dataURItoBlob',
        value: function _dataURItoBlob(dataurl) {
            var arr = dataurl.split(','),
                mime = arr[0].match(/:(.*?);/)[1],
                bstr = atob(arr[1]),
                n = bstr.length,
                u8arr = new Uint8Array(n);
            while (n--) {
                u8arr[n] = bstr.charCodeAt(n);
            }
            this.log('-----------dataurltoblob', mime);
            return new Blob([u8arr], { type: mime });
        }

        // wx 小程序平台时，返回base64字符串

    }, {
        key: '_encrypt',
        value: function _encrypt(request) {
            if (!request) {
                return request;
            }
            var base64Data = (0, _aes.AESEncrypt)(request, this.privateSecret);
            return base64Data;
        }

        // wx

    }, {
        key: '_decrypt',
        value: function _decrypt(buf) {
            var data = (0, _aes.AESDecrypt)(buf.toString('base64'), this.privateSecret, true);
            return data;
        }

        // wx

    }, {
        key: '_decryptPublishResponse',
        value: function _decryptPublishResponse(packet) {
            var data = (0, _aes.AESDecrypt)(packet.payload.slice(1, packet.payload.length).toString('base64'), this.privateSecret, true);
            if (data) {
                return data;
            }
            return null;
        }
    }, {
        key: '_toProtoConversation',
        value: function _toProtoConversation(conversation) {
            if (!conversation) {
                return null;
            }
            var pbConversation = PbConversation.create();
            pbConversation.type = conversation.type;
            pbConversation.target = conversation.target;
            pbConversation.line = conversation.line;
            return pbConversation;
        }
    }, {
        key: '_toProtoMessage',
        value: function _toProtoMessage(msg) {
            var pbMsg = PbMessage.create();
            pbMsg.conversation = msg.conversation;
            pbMsg.fromUser = this.getUserId();
            pbMsg.content = this._toProtoMessageContent(msg.messageContent);

            return pbMsg;
        }
    }, {
        key: '_toProtoMessageContent',
        value: function _toProtoMessageContent(content) {
            if (!content) {
                return null;
            }
            var pbMsgContent = PbMessageContent.create();
            var payload = content.encode();
            pbMsgContent.content = payload.content;
            pbMsgContent.pushContent = payload.pushContent;
            pbMsgContent.pushData = payload.pushData;
            pbMsgContent.searchableContent = payload.searchableContent;
            pbMsgContent.data = payload.binaryContent;
            pbMsgContent.type = payload.type;
            pbMsgContent.mentionedType = payload.mentionedType;
            pbMsgContent.mentionedTarget = payload.mentionedTargets;
            pbMsgContent.mediaType = payload.mediaType;
            pbMsgContent.remoteMediaUrl = payload.remoteMediaUrl;
            pbMsgContent.persistFlag = _messageConfig2.default.getMessageContentPersitFlag(payload.type);
            pbMsgContent.extra = content.extra;

            return pbMsgContent;
        }
    }, {
        key: '_generalOperationCallback',
        value: function _generalOperationCallback(errorCode, successCB, failCB) {
            if (errorCode === 0) {
                if (successCB) {
                    successCB();
                }
            } else {
                if (failCB) {
                    failCB(errorCode);
                }
            }
        }
    }, {
        key: '_generalStringListCallback',
        value: function _generalStringListCallback(errorCode, data, successCB, failCB) {
            if (errorCode === 0) {
                var idList = IDListBuf.decode(data);
                successCB && successCB(idList.id);
            } else {
                failCB && failCB(errorCode);
            }
        }
    }, {
        key: '_getStore',
        value: function _getStore() {
            return this.store;
        }
    }, {
        key: '_platformOptions',
        value: function _platformOptions(name) {
            var options = {};
            switch (name) {
                case 'ali':
                    options.scheme = 'ali';
                    options.mp = my;
                    break;
                case 'wx':
                    options.scheme = 'wx';
                    options.mp = wx;
                    break;
                case 'bd':
                    options.scheme = 'bd';
                    options.mp = swan;
                    break;
                case 'tt':
                    options.scheme = 'tt';
                    options.mp = tt;
                    break;
                case 'qq':
                    options.scheme = 'qq';
                    options.mp = qq;
                    break;
                case 'uni':
                    options.scheme = 'uni';
                    options.mp = uni;
                    break;
                default:
                    break;
            }
            return options;
        }
    }, {
        key: 'log',
        value: function log(message) {
            if (!_config2.default.DISABLE_LOG) {
                var _console;

                for (var _len2 = arguments.length, optionalParams = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                    optionalParams[_key2 - 1] = arguments[_key2];
                }

                (_console = console).log.apply(_console, [message].concat(optionalParams));
            }
        }
    }, {
        key: 'warn',
        value: function warn(message) {
            if (!_config2.default.DISABLE_LOG) {
                var _console2;

                for (var _len3 = arguments.length, optionalParams = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
                    optionalParams[_key3 - 1] = arguments[_key3];
                }

                (_console2 = console).warn.apply(_console2, [message].concat(optionalParams));
            }
        }
    }, {
        key: 'error',
        value: function error(message) {
            if (!_config2.default.DISABLE_LOG) {
                var _console3;

                for (var _len4 = arguments.length, optionalParams = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
                    optionalParams[_key4 - 1] = arguments[_key4];
                }

                (_console3 = console).error.apply(_console3, [message].concat(optionalParams));
            }
        }
    }, {
        key: 'test',
        value: function test() {

            this.log('---------------test start----------------------');
            // let u = self.getUserInfo('uiuJuJccj', true);
            // u.hello();
            // this.log('user info', u);
            // self.getMessageById(200);

            // let g = self.getGroupInfo('PHPSPS22');
            // this.log(g);

            // let m = self.getGroupMembers('PHPSPS22');
            // this.log(m);

            // this.getMyGroupList();

            // this.log('localStorage', localStorage.getItem('test'));
            // localStorage.setItem('test', 'hello world');
            // this.log('localStorage', localStorage.getItem('test'));

            // this.log('atob', btoa('hello world'));
            // self.uploadMedia('hello world', MessageContentMediaType.Image,
            //     (remoteUrl) => {
            //         this.log('----------------upload success', remoteUrl);
            //     },
            //     (errorCode) => {
            //         this.log('-------------upload error', errorCode);
            //     },
            //     (current, total) => {

            //     });

            /*
            let id = 0;
            setInterval(() => {
                this.log('send message to uiuJuJcc');
                let conversation = new Conversation(ConversationType.Single, "uiuJuJcc", 0);
                let content = new TextMessageContent(id + "hello from wfc.js " + new Date().toString() + " " + id);
                // this.sendConversationMessage(conversation, content)
                // content = new ImageMessageContent(null, '/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjL/wAARCACgAHIDASIAAhEBAxEB/8QAHAAAAgIDAQEAAAAAAAAAAAAAAAYFBwIDBAgB/8QAUhAAAQMCAgUECREEBwkAAAAAAgABAwQFERIGEyEiMQcyQWEVQlFScYKRk7MUGCM2N1VicnOBg4SSobK00zNForEWF1Sk0eLwCCQ0NUNEwcLS/8QAGgEAAgMBAQAAAAAAAAAAAAAAAAQCAwUGAf/EADQRAAIBAwEEBwYGAwAAAAAAAAACAwEEEhEFIjIzExQhQlJy0RU0UXGisSMxQWFigkOBof/aAAwDAQACEQMRAD8A8/oQhAAhCEACEIQAIQhAAhCEACEIQAIQhAAhCEAfVM6L2Oo0l0loLNTk4HVSsJEw45A4kWHTgLO+HUodO/JCWTlQs5fLehNRdtErU9outdC+KTkx0OtdINOFmgnLKOaWp9lM3w47eHzYN1LVNoPooJvhYKBvoWTaUonsd8C75cErEZFlBzwdm2N3eC557mVm3WNOKJV4qCnJoXoyPCw0HmRXJJodo2L7LLQ+bZM0oyEOZozccmfh0d3wLnqqephjKSWnlEG5xnG7MyjSWfxMPJHF8FFaTRPR3Hds1H5tcsmjOj4/uil82mGeGoA5BenlYoxcjzA+wWwd8fAzt5WUVNJuPI77jOzO/Qzvjh/J/Ip9LL4mHooYG/RSKPRyx9raqX7DLnfR6ye9lL9hStQ0kExxTCccgcQNsHb5lgcE7VTU7wSNO7s2rIHz4vw2KfSSeIYWC28KkQdgs3vbTfYQ2jto49jaf7CmTtteISH6hqcIv2j6l9zZjt7mxxdfIxzAKl0ki94lSG2bhooiaWaMUFLapbhSRvBJC7OQs+YTxIW+biq+d8xP1q3tNY8NEa5/ielFVCtK0dmj1Y5ra8aJcaIunYa0IQmzKMk6clL5eUm1P8t6E0lpw5MXy8odrfrl9EahccpvkWQ8yh6VObbjisqOu1DZ3JgySsTk5sLH7GeAu77G2t96jXnFFPCFW0znHUyZHb/hwZy4P33g/wBbFzcGVJVxNuaJejbUnqyo1lPUtrwkEKWc8M4k/NZgLZ3Rxfx1qq56EtHJpqR4RF5QzHDHkfZIz5cGdixYfB3diXqOg7JSyHTBnBnfIBmwG7d3Dq3cfjKUs9NRSU9wGpjKMacX1xY45MOP8nWgkru28vEKNAkVOLh0JG5HBHaJJjOq9TRARxG058HHNiRaxs+3dZsfu2qA0HrJYqcImeQgnrcmDOGX9iT97j2rdzo62UbdKaw1MlPDaK6WWqmnaPLIJCAsXTzO7lXXNolZqioqLXSXGc7tDC0jxmO4XDq626dmbpU8nZ8qd3+RdSKJIao7Nvfx/L9yQ0plhuVbap6ae2lTGM2sqKnJJEIMUYu7Y7Mcdiiq64jebwFwtYUE0DzgDucQR1AG3MwIjByzZcRwfvmfhgo+26NWkrLBdbxXyUsNVI0dOIdHHnE7dReK3Hat8GhET6VS2yQpvU8cYyjNu7Q7nwXxzN4rupZO29jxFlI7eOmOXBr3f37fmT18vh19pOChqY2klikaoh1lOZwizdt7NgzYY7WzvvdCQISzRCp27aPWiOxtdbTWS1MAnkkzYNk24Y8Gfjhsw7bFL8JCIDgqblmZt4e2aiJE1I/toRGmvtPuH0fpGVPNzVb+mvtQr/E9KKqBuanLHlVMrbPvFPL6mtCEJwyDLtU2cnT5dPbY/wAr6I0p9qmnQB8um9uf5X0RqEnDUvt+cnzoX08/cXbZnYnqzKWeNhYP2U+pZ9/m+Hobw9GbFQ+fdXHMIkeZ1g8DZHUSQdJHiT7U2orfVElfXQgFW8J72fFtx3zmxbNmLu/V8FfLXPdKequ9Pb54JakDJnebHOZM77W6PL1JRqQDMI5R5q3W2mqKy4RU9GbhPI+AGz4Yd8+I9WZerLvLipFrPSNqs30jhU3SaKksFVcxhGs9VOxPJlB2B8Wd+rZkJ/mW6KnqKLTC6XmoYY6F6YR1pE3QwY7PEdK110S0hhI5amnmqmHd1oS6x3H4Lcf4VAV3ZGEWo6yWsAGESaGYjYWHtdhK5pHXiUpis45afhOu966jecE+k3J/aKWjGIpoJI45PZRwDIDhi/lEsvO2qeC90xac1NDrPZipIx73fZzLDrLCQX2dx1VFNUVdI5vTVc0GfLm1UpBmy99l+MsIhIJgMCITYs4kJbwlm5yFlLX2ZlkuW724/wCyybRYqiPRirtleYwtUFnyxjrTB3ccmOGzDc+/iOCTRDVSHHnCTI5DnAszP8IfgrUc1ZK5HJWTm5BqiI5XdyAujwfBWUAZQFRZsi23heNmZm4iI009qFf9H6RlULc1W9pt7Ua7xPxiqhbmrQsuUYm2OfTy+prQhCcMkybmpl0FfLpnb3+V9GSWm5qZNB/bjb/pfRkoPw1GLX3hPNQuvNmFaTLeJGbdXPKe8SxnU7FVNUolLLkAcxZUzcn9IT6SHLLC+WGAnA+hnxZuPDg7pOnrZYJSGM8uYd7dVhcmFc9aV0bVsGQYfLvqdrGlXp4hTajypbvpwjpUxVr1BzQuBMIOIRYvt3fJjm+5aGlugxM5UoZtSZFg+O/vZR2P4PKpJnEH7UfKy261u6H21raHJakLT2e21cD1dbaaJppHdzeSmHH58VV+lVuOG7PUBBTwUplhDHAzDg3WzM20ud238Kta+VsdJbCkM2EOceG3dHa6pPXzXKtlmkP9oecyzbo/65opO7airibmx0erVl17DNw3FlHzV0TgIDlY8y1RDupA28iB029qFd4npRVQNzVcWmvtPuHgj9ICp1uatO05Zzm1uevl9TWhCE2ZRk3NTHoR7cKH6T0ZJcbmph0MfDS6hf4/4CUH4KjFp7wnzoXG55RXBUT5cy2HLuqOqSLeWUyncqhsits10knKKopo9QLEbSkeOG3bsZ9jYbX6275WJyYWya0SXWOqmhM5tVkGLP2ubHnC3fCq9sdjvF6rKh7XVBSnGG/Iczx5s3Rs29r/AAq5dF7VJaLHBTVlUVVXMTnLOZGe8/QOZ8WZhfDo4Y4bUzap3jE2vdUWNoMuLu/USjlKA5WI8vwSWGtqejXfxLokYZRxdhJ+jg/88FzyDUBuhu96OpL/ANSTpzQu8o05U+izSazIZBlwLi+JBmb7OZVJTXIwDVNkIc2bKQp/5VyMtFqMj57VYfgNVJCZZlmXe851mxkXq39hsCXMO0lviLMKhoJSUhTy7qWH2QjdNvafcPBH6QFTzc1W/poWbQ6v+i9IyqBuatO05RzO1+evl9TWhCE2ZJmzYOyndDnw0movH/ASg3bY6e+RuEKjlVs0UosYE1QziTYs7aiRRrvU0LYZOikV/hUcnLMuyjtkFfA76+QZGfejCEX2d3jzVZ9x5PrLVm0sLSUh4kXsJPld36n4eBsFBVHJtcIDAqKvhN9uYjZ4nb4uGKSe3c6tNs20i9lcWFWCx1dOTzW6rmapbDBiDVYt9rL3Nin7Pp9U0jFT3SPIQbr7r4eDLxFapNDdJmfVtHJMAPiLtUjh82YlFVVgu+tMai3V0h9JakzzeMqF6WLhPX6rcrpK61+5ZVNpDa60M+fV5u2AsWJb5ZYSESgqIpfillJVF/Rq6xHnp6C5xH3wQGP/AIXTTU2lVGYZYbkQMW3/AHVyPL8YmTC3Ld5TLl2TF/ilUYuVWoglsdupjnEZTqmJnLHaLA4u/wDG32knw2+10dtOqY4p4mHB5iFjJy3cAEOaO7jztvdwTI9XdJJc01pvYjh2lOf4Voulj0l0jGIqaz1MNNG5PlqDGMjfrFy8njd1eSrStc6b39S+xkrDSkMldKfHJRTrK+GqMtTRNFvkWtzbxD8Xm/iWUJ7iZ6Tkx0hmizyDS0748ySXb9zEyZaPkppgAvVl0nkd+GpjaPDy5kt1eV97Q0ZdpWUVMc8v+lRaXSZ9Fq0X7ofjFVM/Fep+VOwWuzckl9OhpI4jLUYltcsNfFszPtw2cF5ZbwLRt4qxJjU5e/u1upc1oYIQhXiQKwORL3XrH9Y/LyKv1YHIl7r1j+sfl5EAevkIQgDnnqYKUGKeaOJnfBnMmZaOzFub/vqbzrKvLlVz1ldNNNnY8XEQPtB7iLbDTSTudUbNDG2c9rtu5upn8GXZmxZZvXqs+Kqans2ix9I7Fhdl7d019M/0rI7MWzouFM30jJToLTR1QzxNhKYlG7OMj7ovh22DY4ti/DguGsoKWnq6sQ1ZNFMbA05uIf8AT2Ys/RrC2v1Kzp5MctKFS2sNWwyqPPZy1Pt7JUnnh/xXzs9aHf8A5nR+fH/FVX6lkalk1kJ6/W5IQzZHl2PwZ+senDHDBtqh3lIlDrjr3R+PY8cmWMhfjYO3FZJD5OayWooqykkLGKBwIMejHNi3g2fe6eseKejfNMjHuYGt5Wib9BC5bfchvv1f8xGvIC9f8tvuQ336v+YjXkBTKQQhCABWByJe69Y/rH5eRV+pOx3aosV7obpSEwz0cwzBjjg+D8Hwfg/B+pAHutCpqm/2i9GXpY3qrXdo5nBtYEQRmLF04FnbFvFZbvXGaH+9988zF+qgB4ueiYV9SU8NRqCPabZMWJ+6uB9AzL96/wB3/wAyVfXE6I/2C9+Zi/UR64nRH+wXvzMX6iXa0hauVaDUd7cRrirfYZv6BTtky3ghyFnHCHgXd53Uy1loBUu0wvfpMsxYyNqX9kfjt39qXvXF6Ie9978zF+oj1xeiHvfe/MxfqI6rD4SftK5+P0r6E9/VtJkIOzG6T4u3qf8AzrH+rM/fX+7N/wDSg/XF6Ie9988zF+qj1xeiHvffPMxfqo6pD4Sz2teeP6V9CyLFY6exUeop8Sd3zSSFxN1LNhgqh9cToe2zsffPMxfqo9cVoe37vvnmYv1VdRaUppQQZmeuT/mMHLb7kN9+r/mI15AVzcpvLNSaW2ArFZqCohpZyAp5qrIxOwlmyMI5ukQfNm6MMFTKkRBCEIAEIQgAQhCABCEIAEIQgAQhCABCEIAEIQgAQhCAP//Z');
                this.sendConversationMessage(conversation, content, [], (messageId, timestamp) => {
                    id = messageId;
                    // prepared
                    this.log('send prepared', messageId);
                    // this.log('send msg prepared', this.store.getConversationInfos(), this.store.getConversationInfo(conversation));
                 }, null, (messageUid, timestamp) => {
                    // sucess
                    this.log('send success', messageUid);
                    // this.log('send msg success', this.store.getConversationInfos(), this.store.getConversationInfo(conversation));
                    // this.recallMessage(messageUid, () => {
                    //     this.log('recall s');
                    // }, (errorCode) => {
                    //     this.log('recall error', errorCode);
                    // });
                 });
            }, 100);
            */

            // this.setConversationTop(conversation, true, () => {
            //     this.log('set conversation top success');
            //     let info = this.getConversationInfo(conversation);
            //     this.log('conversation info', info);
            // }, (errorCode) => {
            //     this.log('set conversation top failed', errorCode);

            // });

            // let notifyContent = new CreateGroupNotification(this.getUserId(), 'test group Name');
            // let notifyContent = new ImageMessageContent(null, '/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjL/wAARCACgAHIDASIAAhEBAxEB/8QAHAAAAgIDAQEAAAAAAAAAAAAAAAYFBwIDBAgB/8QAUhAAAQMCAgUECREEBwkAAAAAAgABAwQFERIGEyEiMQcyQWEVQlFScYKRk7MUGCM2N1VicnOBg4SSobK00zNForEWF1Sk0eLwCCQ0NUNEwcLS/8QAGgEAAgMBAQAAAAAAAAAAAAAAAAQCAwUGAf/EADQRAAIBAwEEBwYGAwAAAAAAAAACAwEEEhEFIjIzExQhQlJy0RU0UXGisSMxQWFigkOBof/aAAwDAQACEQMRAD8A8/oQhAAhCEACEIQAIQhAAhCEACEIQAIQhAAhCEAfVM6L2Oo0l0loLNTk4HVSsJEw45A4kWHTgLO+HUodO/JCWTlQs5fLehNRdtErU9outdC+KTkx0OtdINOFmgnLKOaWp9lM3w47eHzYN1LVNoPooJvhYKBvoWTaUonsd8C75cErEZFlBzwdm2N3eC557mVm3WNOKJV4qCnJoXoyPCw0HmRXJJodo2L7LLQ+bZM0oyEOZozccmfh0d3wLnqqephjKSWnlEG5xnG7MyjSWfxMPJHF8FFaTRPR3Hds1H5tcsmjOj4/uil82mGeGoA5BenlYoxcjzA+wWwd8fAzt5WUVNJuPI77jOzO/Qzvjh/J/Ip9LL4mHooYG/RSKPRyx9raqX7DLnfR6ye9lL9hStQ0kExxTCccgcQNsHb5lgcE7VTU7wSNO7s2rIHz4vw2KfSSeIYWC28KkQdgs3vbTfYQ2jto49jaf7CmTtteISH6hqcIv2j6l9zZjt7mxxdfIxzAKl0ki94lSG2bhooiaWaMUFLapbhSRvBJC7OQs+YTxIW+biq+d8xP1q3tNY8NEa5/ielFVCtK0dmj1Y5ra8aJcaIunYa0IQmzKMk6clL5eUm1P8t6E0lpw5MXy8odrfrl9EahccpvkWQ8yh6VObbjisqOu1DZ3JgySsTk5sLH7GeAu77G2t96jXnFFPCFW0znHUyZHb/hwZy4P33g/wBbFzcGVJVxNuaJejbUnqyo1lPUtrwkEKWc8M4k/NZgLZ3Rxfx1qq56EtHJpqR4RF5QzHDHkfZIz5cGdixYfB3diXqOg7JSyHTBnBnfIBmwG7d3Dq3cfjKUs9NRSU9wGpjKMacX1xY45MOP8nWgkru28vEKNAkVOLh0JG5HBHaJJjOq9TRARxG058HHNiRaxs+3dZsfu2qA0HrJYqcImeQgnrcmDOGX9iT97j2rdzo62UbdKaw1MlPDaK6WWqmnaPLIJCAsXTzO7lXXNolZqioqLXSXGc7tDC0jxmO4XDq626dmbpU8nZ8qd3+RdSKJIao7Nvfx/L9yQ0plhuVbap6ae2lTGM2sqKnJJEIMUYu7Y7Mcdiiq64jebwFwtYUE0DzgDucQR1AG3MwIjByzZcRwfvmfhgo+26NWkrLBdbxXyUsNVI0dOIdHHnE7dReK3Hat8GhET6VS2yQpvU8cYyjNu7Q7nwXxzN4rupZO29jxFlI7eOmOXBr3f37fmT18vh19pOChqY2klikaoh1lOZwizdt7NgzYY7WzvvdCQISzRCp27aPWiOxtdbTWS1MAnkkzYNk24Y8Gfjhsw7bFL8JCIDgqblmZt4e2aiJE1I/toRGmvtPuH0fpGVPNzVb+mvtQr/E9KKqBuanLHlVMrbPvFPL6mtCEJwyDLtU2cnT5dPbY/wAr6I0p9qmnQB8um9uf5X0RqEnDUvt+cnzoX08/cXbZnYnqzKWeNhYP2U+pZ9/m+Hobw9GbFQ+fdXHMIkeZ1g8DZHUSQdJHiT7U2orfVElfXQgFW8J72fFtx3zmxbNmLu/V8FfLXPdKequ9Pb54JakDJnebHOZM77W6PL1JRqQDMI5R5q3W2mqKy4RU9GbhPI+AGz4Yd8+I9WZerLvLipFrPSNqs30jhU3SaKksFVcxhGs9VOxPJlB2B8Wd+rZkJ/mW6KnqKLTC6XmoYY6F6YR1pE3QwY7PEdK110S0hhI5amnmqmHd1oS6x3H4Lcf4VAV3ZGEWo6yWsAGESaGYjYWHtdhK5pHXiUpis45afhOu966jecE+k3J/aKWjGIpoJI45PZRwDIDhi/lEsvO2qeC90xac1NDrPZipIx73fZzLDrLCQX2dx1VFNUVdI5vTVc0GfLm1UpBmy99l+MsIhIJgMCITYs4kJbwlm5yFlLX2ZlkuW724/wCyybRYqiPRirtleYwtUFnyxjrTB3ccmOGzDc+/iOCTRDVSHHnCTI5DnAszP8IfgrUc1ZK5HJWTm5BqiI5XdyAujwfBWUAZQFRZsi23heNmZm4iI009qFf9H6RlULc1W9pt7Ua7xPxiqhbmrQsuUYm2OfTy+prQhCcMkybmpl0FfLpnb3+V9GSWm5qZNB/bjb/pfRkoPw1GLX3hPNQuvNmFaTLeJGbdXPKe8SxnU7FVNUolLLkAcxZUzcn9IT6SHLLC+WGAnA+hnxZuPDg7pOnrZYJSGM8uYd7dVhcmFc9aV0bVsGQYfLvqdrGlXp4hTajypbvpwjpUxVr1BzQuBMIOIRYvt3fJjm+5aGlugxM5UoZtSZFg+O/vZR2P4PKpJnEH7UfKy261u6H21raHJakLT2e21cD1dbaaJppHdzeSmHH58VV+lVuOG7PUBBTwUplhDHAzDg3WzM20ud238Kta+VsdJbCkM2EOceG3dHa6pPXzXKtlmkP9oecyzbo/65opO7airibmx0erVl17DNw3FlHzV0TgIDlY8y1RDupA28iB029qFd4npRVQNzVcWmvtPuHgj9ICp1uatO05Zzm1uevl9TWhCE2ZRk3NTHoR7cKH6T0ZJcbmph0MfDS6hf4/4CUH4KjFp7wnzoXG55RXBUT5cy2HLuqOqSLeWUyncqhsits10knKKopo9QLEbSkeOG3bsZ9jYbX6275WJyYWya0SXWOqmhM5tVkGLP2ubHnC3fCq9sdjvF6rKh7XVBSnGG/Iczx5s3Rs29r/AAq5dF7VJaLHBTVlUVVXMTnLOZGe8/QOZ8WZhfDo4Y4bUzap3jE2vdUWNoMuLu/USjlKA5WI8vwSWGtqejXfxLokYZRxdhJ+jg/88FzyDUBuhu96OpL/ANSTpzQu8o05U+izSazIZBlwLi+JBmb7OZVJTXIwDVNkIc2bKQp/5VyMtFqMj57VYfgNVJCZZlmXe851mxkXq39hsCXMO0lviLMKhoJSUhTy7qWH2QjdNvafcPBH6QFTzc1W/poWbQ6v+i9IyqBuatO05RzO1+evl9TWhCE2ZJmzYOyndDnw0movH/ASg3bY6e+RuEKjlVs0UosYE1QziTYs7aiRRrvU0LYZOikV/hUcnLMuyjtkFfA76+QZGfejCEX2d3jzVZ9x5PrLVm0sLSUh4kXsJPld36n4eBsFBVHJtcIDAqKvhN9uYjZ4nb4uGKSe3c6tNs20i9lcWFWCx1dOTzW6rmapbDBiDVYt9rL3Nin7Pp9U0jFT3SPIQbr7r4eDLxFapNDdJmfVtHJMAPiLtUjh82YlFVVgu+tMai3V0h9JakzzeMqF6WLhPX6rcrpK61+5ZVNpDa60M+fV5u2AsWJb5ZYSESgqIpfillJVF/Rq6xHnp6C5xH3wQGP/AIXTTU2lVGYZYbkQMW3/AHVyPL8YmTC3Ld5TLl2TF/ilUYuVWoglsdupjnEZTqmJnLHaLA4u/wDG32knw2+10dtOqY4p4mHB5iFjJy3cAEOaO7jztvdwTI9XdJJc01pvYjh2lOf4Voulj0l0jGIqaz1MNNG5PlqDGMjfrFy8njd1eSrStc6b39S+xkrDSkMldKfHJRTrK+GqMtTRNFvkWtzbxD8Xm/iWUJ7iZ6Tkx0hmizyDS0748ySXb9zEyZaPkppgAvVl0nkd+GpjaPDy5kt1eV97Q0ZdpWUVMc8v+lRaXSZ9Fq0X7ofjFVM/Fep+VOwWuzckl9OhpI4jLUYltcsNfFszPtw2cF5ZbwLRt4qxJjU5e/u1upc1oYIQhXiQKwORL3XrH9Y/LyKv1YHIl7r1j+sfl5EAevkIQgDnnqYKUGKeaOJnfBnMmZaOzFub/vqbzrKvLlVz1ldNNNnY8XEQPtB7iLbDTSTudUbNDG2c9rtu5upn8GXZmxZZvXqs+Kqans2ix9I7Fhdl7d019M/0rI7MWzouFM30jJToLTR1QzxNhKYlG7OMj7ovh22DY4ti/DguGsoKWnq6sQ1ZNFMbA05uIf8AT2Ys/RrC2v1Kzp5MctKFS2sNWwyqPPZy1Pt7JUnnh/xXzs9aHf8A5nR+fH/FVX6lkalk1kJ6/W5IQzZHl2PwZ+senDHDBtqh3lIlDrjr3R+PY8cmWMhfjYO3FZJD5OayWooqykkLGKBwIMejHNi3g2fe6eseKejfNMjHuYGt5Wib9BC5bfchvv1f8xGvIC9f8tvuQ336v+YjXkBTKQQhCABWByJe69Y/rH5eRV+pOx3aosV7obpSEwz0cwzBjjg+D8Hwfg/B+pAHutCpqm/2i9GXpY3qrXdo5nBtYEQRmLF04FnbFvFZbvXGaH+9988zF+qgB4ueiYV9SU8NRqCPabZMWJ+6uB9AzL96/wB3/wAyVfXE6I/2C9+Zi/UR64nRH+wXvzMX6iXa0hauVaDUd7cRrirfYZv6BTtky3ghyFnHCHgXd53Uy1loBUu0wvfpMsxYyNqX9kfjt39qXvXF6Ie9978zF+oj1xeiHvfe/MxfqI6rD4SftK5+P0r6E9/VtJkIOzG6T4u3qf8AzrH+rM/fX+7N/wDSg/XF6Ie9988zF+qj1xeiHvffPMxfqo6pD4Sz2teeP6V9CyLFY6exUeop8Sd3zSSFxN1LNhgqh9cToe2zsffPMxfqo9cVoe37vvnmYv1VdRaUppQQZmeuT/mMHLb7kN9+r/mI15AVzcpvLNSaW2ArFZqCohpZyAp5qrIxOwlmyMI5ukQfNm6MMFTKkRBCEIAEIQgAQhCABCEIAEIQgAQhCABCEIAEIQgAQhCAP//Z');
            // this.createGroup(null, "test group namxxxxxxxxxxe", null, ['uiuJuJcc'], [0], notifyContent);


            // this.log('getUserInfo', self.getUserInfo('uiuJuJcc'));
            // this.log('getGroupInfo', self.getGroupInfo('-OWD-DAA'));
            // this.uploadMedia();
            var thisMsgHead = new _long2.default(-35650792, 34748344, false);
            var head = new _long2.default(-1415576788, 34740445, false);
            this.log('xxxoo', thisMsgHead.comp(head), thisMsgHead.toString(), head.toString());
            this.log('---------------test end----------------------');
        }
    }]);
    return WfcImpl;
}();

// const self = new WfcImpl();
// export default self;

// var username = 'GNMtGtZZ';
// // var username = '141b1boo'
// var token = 'PNvAMGi+CWGn4HXvkswJaCz8tjEU1Ylqf7mqTHvwy/YvccA/yWWxoT1aqHAK4QVFkv0oAnGKofTgYt9D+D5lsMr4sdz8qa1A2/fmL7ruxnDZS09XMblQMk6ND4OkCZF4GARARVQr+1jp+qt7CL5/WXLQFfUugibo8KsGLW17vdg=';
// // var token = 'vRHUDqbbowFr05lGQo3jOq5aUXgJKyUQttVcpOLA63+YcJZ8V8IGvYaMsds2K5GOPtrqC1LtjSQYnXE1iawoAxkojbOvHKH2808hfPI0nkTrWq/IakkJL92J3xzGavP/j+OQgOLD108q/nyQO4v+CkrEG1iwUqPZHFEXmXi/Bb4=';
// self.connect(username, token);


WfcImpl.connectionTimeout = 10 * 1000;
WfcImpl.version = 'WFCWebSDKVersion-2023-04-11-10000';
WfcImpl.pcNotSupportMessageTypes = [94];
var self = new WfcImpl();
// module.exports = self;
//window.wfc = self;
exports.default = self;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(11).Buffer))

/***/ }),
/* 201 */
/***/ (function(module, exports) {

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(54);
__webpack_require__(31);
__webpack_require__(46);
__webpack_require__(210);
__webpack_require__(214);
__webpack_require__(215);
module.exports = __webpack_require__(0).Promise;


/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(70);
var defined = __webpack_require__(71);
// true  -> String#at
// false -> String#codePointAt
module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};


/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var create = __webpack_require__(55);
var descriptor = __webpack_require__(41);
var setToStringTag = __webpack_require__(45);
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
__webpack_require__(22)(IteratorPrototype, __webpack_require__(5)('iterator'), function () { return this; });

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag(Constructor, NAME + ' Iterator');
};


/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

// false -> Array#indexOf
// true  -> Array#includes
var toIObject = __webpack_require__(32);
var toLength = __webpack_require__(56);
var toAbsoluteIndex = __webpack_require__(206);
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};


/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(70);
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};


/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = __webpack_require__(27);
var toObject = __webpack_require__(33);
var IE_PROTO = __webpack_require__(76)('IE_PROTO');
var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};


/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var addToUnscopables = __webpack_require__(209);
var step = __webpack_require__(109);
var Iterators = __webpack_require__(42);
var toIObject = __webpack_require__(32);

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = __webpack_require__(72)(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }
  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');


/***/ }),
/* 209 */
/***/ (function(module, exports) {

module.exports = function () { /* empty */ };


/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY = __webpack_require__(39);
var global = __webpack_require__(4);
var ctx = __webpack_require__(21);
var classof = __webpack_require__(79);
var $export = __webpack_require__(2);
var isObject = __webpack_require__(8);
var aFunction = __webpack_require__(40);
var anInstance = __webpack_require__(80);
var forOf = __webpack_require__(47);
var speciesConstructor = __webpack_require__(112);
var task = __webpack_require__(113).set;
var microtask = __webpack_require__(212)();
var newPromiseCapabilityModule = __webpack_require__(82);
var perform = __webpack_require__(114);
var userAgent = __webpack_require__(213);
var promiseResolve = __webpack_require__(115);
var PROMISE = 'Promise';
var TypeError = global.TypeError;
var process = global.process;
var versions = process && process.versions;
var v8 = versions && versions.v8 || '';
var $Promise = global[PROMISE];
var isNode = classof(process) == 'process';
var empty = function () { /* empty */ };
var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;

var USE_NATIVE = !!function () {
  try {
    // correct subclassing with @@species support
    var promise = $Promise.resolve(1);
    var FakePromise = (promise.constructor = {})[__webpack_require__(5)('species')] = function (exec) {
      exec(empty, empty);
    };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function')
      && promise.then(empty) instanceof FakePromise
      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
      // we can't detect it synchronously, so just check versions
      && v8.indexOf('6.6') !== 0
      && userAgent.indexOf('Chrome/66') === -1;
  } catch (e) { /* empty */ }
}();

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var notify = function (promise, isReject) {
  if (promise._n) return;
  promise._n = true;
  var chain = promise._c;
  microtask(function () {
    var value = promise._v;
    var ok = promise._s == 1;
    var i = 0;
    var run = function (reaction) {
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (promise._h == 2) onHandleUnhandled(promise);
            promise._h = 1;
          }
          if (handler === true) result = value;
          else {
            if (domain) domain.enter();
            result = handler(value); // may throw
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (e) {
        if (domain && !exited) domain.exit();
        reject(e);
      }
    };
    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if (isReject && !promise._h) onUnhandled(promise);
  });
};
var onUnhandled = function (promise) {
  task.call(global, function () {
    var value = promise._v;
    var unhandled = isUnhandled(promise);
    var result, handler, console;
    if (unhandled) {
      result = perform(function () {
        if (isNode) {
          process.emit('unhandledRejection', value, promise);
        } else if (handler = global.onunhandledrejection) {
          handler({ promise: promise, reason: value });
        } else if ((console = global.console) && console.error) {
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if (unhandled && result.e) throw result.v;
  });
};
var isUnhandled = function (promise) {
  return promise._h !== 1 && (promise._a || promise._c).length === 0;
};
var onHandleUnhandled = function (promise) {
  task.call(global, function () {
    var handler;
    if (isNode) {
      process.emit('rejectionHandled', promise);
    } else if (handler = global.onrejectionhandled) {
      handler({ promise: promise, reason: promise._v });
    }
  });
};
var $reject = function (value) {
  var promise = this;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if (!promise._a) promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function (value) {
  var promise = this;
  var then;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if (promise === value) throw TypeError("Promise can't be resolved itself");
    if (then = isThenable(value)) {
      microtask(function () {
        var wrapper = { _w: promise, _d: false }; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch (e) {
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch (e) {
    $reject.call({ _w: promise, _d: false }, e); // wrap
  }
};

// constructor polyfill
if (!USE_NATIVE) {
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor) {
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch (err) {
      $reject.call(this, err);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = __webpack_require__(83)($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected) {
      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if (this._a) this._a.push(reaction);
      if (this._s) notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject = ctx($reject, promise, 1);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === $Promise || C === Wrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
__webpack_require__(45)($Promise, PROMISE);
__webpack_require__(116)(PROMISE);
Wrapper = __webpack_require__(0)[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    var $$reject = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x) {
    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
  }
});
$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(117)(function (iter) {
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var values = [];
      var index = 0;
      var remaining = 1;
      forOf(iterable, false, function (promise) {
        var $index = index++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.e) reject(result.v);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      forOf(iterable, false, function (promise) {
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if (result.e) reject(result.v);
    return capability.promise;
  }
});


/***/ }),
/* 211 */
/***/ (function(module, exports) {

// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function (fn, args, that) {
  var un = that === undefined;
  switch (args.length) {
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return fn.apply(that, args);
};


/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(4);
var macrotask = __webpack_require__(113).set;
var Observer = global.MutationObserver || global.WebKitMutationObserver;
var process = global.process;
var Promise = global.Promise;
var isNode = __webpack_require__(44)(process) == 'process';

module.exports = function () {
  var head, last, notify;

  var flush = function () {
    var parent, fn;
    if (isNode && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (e) {
        if (head) notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if (parent) parent.enter();
  };

  // Node.js
  if (isNode) {
    notify = function () {
      process.nextTick(flush);
    };
  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
  } else if (Observer && !(global.navigator && global.navigator.standalone)) {
    var toggle = true;
    var node = document.createTextNode('');
    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (Promise && Promise.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    var promise = Promise.resolve(undefined);
    notify = function () {
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function () {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function (fn) {
    var task = { fn: fn, next: undefined };
    if (last) last.next = task;
    if (!head) {
      head = task;
      notify();
    } last = task;
  };
};


/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(4);
var navigator = global.navigator;

module.exports = navigator && navigator.userAgent || '';


/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// https://github.com/tc39/proposal-promise-finally

var $export = __webpack_require__(2);
var core = __webpack_require__(0);
var global = __webpack_require__(4);
var speciesConstructor = __webpack_require__(112);
var promiseResolve = __webpack_require__(115);

$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {
  var C = speciesConstructor(this, core.Promise || global.Promise);
  var isFunction = typeof onFinally == 'function';
  return this.then(
    isFunction ? function (x) {
      return promiseResolve(C, onFinally()).then(function () { return x; });
    } : onFinally,
    isFunction ? function (e) {
      return promiseResolve(C, onFinally()).then(function () { throw e; });
    } : onFinally
  );
} });


/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/proposal-promise-try
var $export = __webpack_require__(2);
var newPromiseCapability = __webpack_require__(82);
var perform = __webpack_require__(114);

$export($export.S, 'Promise', { 'try': function (callbackfn) {
  var promiseCapability = newPromiseCapability.f(this);
  var result = perform(callbackfn);
  (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
  return promiseCapability.promise;
} });


/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(217);


/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// This method of obtaining a reference to the global object needs to be
// kept identical to the way it is obtained in runtime.js
var g = (function() { return this })() || Function("return this")();

// Use `getOwnPropertyNames` because not all browsers support calling
// `hasOwnProperty` on the global `self` object in a worker. See #183.
var hadRuntime = g.regeneratorRuntime &&
  Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0;

// Save the old regeneratorRuntime in case it needs to be restored later.
var oldRuntime = hadRuntime && g.regeneratorRuntime;

// Force reevalutation of runtime.js.
g.regeneratorRuntime = undefined;

module.exports = __webpack_require__(218);

if (hadRuntime) {
  // Restore the original runtime.
  g.regeneratorRuntime = oldRuntime;
} else {
  // Remove the global property added by runtime.js.
  try {
    delete g.regeneratorRuntime;
  } catch(e) {
    g.regeneratorRuntime = undefined;
  }
}


/***/ }),
/* 218 */
/***/ (function(module, exports) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

!(function(global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  runtime.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration. If the Promise is rejected, however, the
          // result for this iteration will be rejected with the same
          // reason. Note that rejections of yielded Promises are not
          // thrown back into the generator function, as is the case
          // when an awaited Promise is rejected. This difference in
          // behavior between yield and await is important, because it
          // allows the consumer to decide what to do with the yielded
          // rejection (swallow it and continue, manually .throw it back
          // into the generator, abandon iteration, whatever). With
          // await, by contrast, there is no opportunity to examine the
          // rejection reason outside the generator function, so the
          // only option is to throw it from the await expression, and
          // let the generator function handle the exception.
          result.value = unwrapped;
          resolve(result);
        }, reject);
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  runtime.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        if (delegate.iterator.return) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };
})(
  // In sloppy mode, unbound `this` refers to the global object, fallback to
  // Function constructor if we're in global strict mode. That is sadly a form
  // of indirect eval which violates Content Security Policy.
  (function() { return this })() || Function("return this")()
);


/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _promise = __webpack_require__(69);

var _promise2 = _interopRequireDefault(_promise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (fn) {
  return function () {
    var gen = fn.apply(this, arguments);
    return new _promise2.default(function (resolve, reject) {
      function step(key, arg) {
        try {
          var info = gen[key](arg);
          var value = info.value;
        } catch (error) {
          reject(error);
          return;
        }

        if (info.done) {
          resolve(value);
        } else {
          return _promise2.default.resolve(value).then(function (value) {
            step("next", value);
          }, function (err) {
            step("throw", err);
          });
        }
      }

      return step("next");
    });
  };
};

/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(46);
__webpack_require__(31);
module.exports = __webpack_require__(221);


/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(18);
var get = __webpack_require__(81);
module.exports = __webpack_require__(0).getIterator = function (it) {
  var iterFn = get(it);
  if (typeof iterFn != 'function') throw TypeError(it + ' is not iterable!');
  return anObject(iterFn.call(it));
};


/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(223);
module.exports = __webpack_require__(0).Object.assign;


/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.1 Object.assign(target, source)
var $export = __webpack_require__(2);

$export($export.S + $export.F, 'Object', { assign: __webpack_require__(224) });


/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 19.1.2.1 Object.assign(target, source, ...)
var DESCRIPTORS = __webpack_require__(9);
var getKeys = __webpack_require__(43);
var gOPS = __webpack_require__(84);
var pIE = __webpack_require__(58);
var toObject = __webpack_require__(33);
var IObject = __webpack_require__(75);
var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || __webpack_require__(26)(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) { B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = gOPS.f;
  var isEnum = pIE.f;
  while (aLen > index) {
    var S = IObject(arguments[index++]);
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) {
      key = keys[j++];
      if (!DESCRIPTORS || isEnum.call(S, key)) T[key] = S[key];
    }
  } return T;
} : $assign;


/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

var core = __webpack_require__(0);
var $JSON = core.JSON || (core.JSON = { stringify: JSON.stringify });
module.exports = function stringify(it) { // eslint-disable-line no-unused-vars
  return $JSON.stringify.apply($JSON, arguments);
};


/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(31);
__webpack_require__(227);
module.exports = __webpack_require__(0).Array.from;


/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ctx = __webpack_require__(21);
var $export = __webpack_require__(2);
var toObject = __webpack_require__(33);
var call = __webpack_require__(110);
var isArrayIter = __webpack_require__(111);
var toLength = __webpack_require__(56);
var createProperty = __webpack_require__(228);
var getIterFn = __webpack_require__(81);

$export($export.S + $export.F * !__webpack_require__(117)(function (iter) { Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
    var O = toObject(arrayLike);
    var C = typeof this == 'function' ? this : Array;
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var index = 0;
    var iterFn = getIterFn(O);
    var length, result, step, iterator;
    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);
      for (result = new C(length); length > index; index++) {
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});


/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $defineProperty = __webpack_require__(12);
var createDesc = __webpack_require__(41);

module.exports = function (object, index, value) {
  if (index in object) $defineProperty.f(object, index, createDesc(0, value));
  else object[index] = value;
};


/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(54);
__webpack_require__(31);
__webpack_require__(46);
__webpack_require__(230);
__webpack_require__(234);
__webpack_require__(236);
__webpack_require__(237);
module.exports = __webpack_require__(0).Map;


/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var strong = __webpack_require__(122);
var validate = __webpack_require__(87);
var MAP = 'Map';

// 23.1 Map Objects
module.exports = __webpack_require__(123)(MAP, function (get) {
  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key) {
    var entry = strong.getEntry(validate(this, MAP), key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value) {
    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
  }
}, strong, true);


/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx = __webpack_require__(21);
var IObject = __webpack_require__(75);
var toObject = __webpack_require__(33);
var toLength = __webpack_require__(56);
var asc = __webpack_require__(232);
module.exports = function (TYPE, $create) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  var create = $create || asc;
  return function ($this, callbackfn, that) {
    var O = toObject($this);
    var self = IObject(O);
    var f = ctx(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var val, res;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      val = self[index];
      res = f(val, index, O);
      if (TYPE) {
        if (IS_MAP) result[index] = res;   // map
        else if (res) switch (TYPE) {
          case 3: return true;             // some
          case 5: return val;              // find
          case 6: return index;            // findIndex
          case 2: result.push(val);        // filter
        } else if (IS_EVERY) return false; // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};


/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = __webpack_require__(233);

module.exports = function (original, length) {
  return new (speciesConstructor(original))(length);
};


/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(8);
var isArray = __webpack_require__(124);
var SPECIES = __webpack_require__(5)('species');

module.exports = function (original) {
  var C;
  if (isArray(original)) {
    C = original.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
    if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return C === undefined ? Array : C;
};


/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export = __webpack_require__(2);

$export($export.P + $export.R, 'Map', { toJSON: __webpack_require__(125)('Map') });


/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

var forOf = __webpack_require__(47);

module.exports = function (iter, ITERATOR) {
  var result = [];
  forOf(iter, false, result.push, result, ITERATOR);
  return result;
};


/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-map.of
__webpack_require__(126)('Map');


/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-map.from
__webpack_require__(127)('Map');


/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(239);
var $Object = __webpack_require__(0).Object;
module.exports = function defineProperty(it, key, desc) {
  return $Object.defineProperty(it, key, desc);
};


/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(2);
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !__webpack_require__(9), 'Object', { defineProperty: __webpack_require__(12).f });


/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

/*! MIT License. Copyright 2015-2018 Richard Moore <me@ricmoo.com>. See LICENSE.txt. */
(function(root) {
    "use strict";

    function checkInt(value) {
        return (parseInt(value) === value);
    }

    function checkInts(arrayish) {
        if (!checkInt(arrayish.length)) { return false; }

        for (var i = 0; i < arrayish.length; i++) {
            if (!checkInt(arrayish[i]) || arrayish[i] < 0 || arrayish[i] > 255) {
                return false;
            }
        }

        return true;
    }

    function coerceArray(arg, copy) {

        // ArrayBuffer view
        if (arg.buffer && arg.name === 'Uint8Array') {

            if (copy) {
                if (arg.slice) {
                    arg = arg.slice();
                } else {
                    arg = Array.prototype.slice.call(arg);
                }
            }

            return arg;
        }

        // It's an array; check it is a valid representation of a byte
        if (Array.isArray(arg)) {
            if (!checkInts(arg)) {
                throw new Error('Array contains invalid value: ' + arg);
            }

            return new Uint8Array(arg);
        }

        // Something else, but behaves like an array (maybe a Buffer? Arguments?)
        if (checkInt(arg.length) && checkInts(arg)) {
            return new Uint8Array(arg);
        }

        throw new Error('unsupported array-like object');
    }

    function createArray(length) {
        return new Uint8Array(length);
    }

    function copyArray(sourceArray, targetArray, targetStart, sourceStart, sourceEnd) {
        if (sourceStart != null || sourceEnd != null) {
            if (sourceArray.slice) {
                sourceArray = sourceArray.slice(sourceStart, sourceEnd);
            } else {
                sourceArray = Array.prototype.slice.call(sourceArray, sourceStart, sourceEnd);
            }
        }
        targetArray.set(sourceArray, targetStart);
    }



    var convertUtf8 = (function() {
        function toBytes(text) {
            var result = [], i = 0;
            text = encodeURI(text);
            while (i < text.length) {
                var c = text.charCodeAt(i++);

                // if it is a % sign, encode the following 2 bytes as a hex value
                if (c === 37) {
                    result.push(parseInt(text.substr(i, 2), 16))
                    i += 2;

                // otherwise, just the actual byte
                } else {
                    result.push(c)
                }
            }

            return coerceArray(result);
        }

        function fromBytes(bytes) {
            var result = [], i = 0;

            while (i < bytes.length) {
                var c = bytes[i];

                if (c < 128) {
                    result.push(String.fromCharCode(c));
                    i++;
                } else if (c > 191 && c < 224) {
                    result.push(String.fromCharCode(((c & 0x1f) << 6) | (bytes[i + 1] & 0x3f)));
                    i += 2;
                } else {
                    result.push(String.fromCharCode(((c & 0x0f) << 12) | ((bytes[i + 1] & 0x3f) << 6) | (bytes[i + 2] & 0x3f)));
                    i += 3;
                }
            }

            return result.join('');
        }

        return {
            toBytes: toBytes,
            fromBytes: fromBytes,
        }
    })();

    var convertHex = (function() {
        function toBytes(text) {
            var result = [];
            for (var i = 0; i < text.length; i += 2) {
                result.push(parseInt(text.substr(i, 2), 16));
            }

            return result;
        }

        // http://ixti.net/development/javascript/2011/11/11/base64-encodedecode-of-utf8-in-browser-with-js.html
        var Hex = '0123456789abcdef';

        function fromBytes(bytes) {
                var result = [];
                for (var i = 0; i < bytes.length; i++) {
                    var v = bytes[i];
                    result.push(Hex[(v & 0xf0) >> 4] + Hex[v & 0x0f]);
                }
                return result.join('');
        }

        return {
            toBytes: toBytes,
            fromBytes: fromBytes,
        }
    })();


    // Number of rounds by keysize
    var numberOfRounds = {16: 10, 24: 12, 32: 14}

    // Round constant words
    var rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91];

    // S-box and Inverse S-box (S is for Substitution)
    var S = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16];
    var Si =[0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d];

    // Transformations for encryption
    var T1 = [0xc66363a5, 0xf87c7c84, 0xee777799, 0xf67b7b8d, 0xfff2f20d, 0xd66b6bbd, 0xde6f6fb1, 0x91c5c554, 0x60303050, 0x02010103, 0xce6767a9, 0x562b2b7d, 0xe7fefe19, 0xb5d7d762, 0x4dababe6, 0xec76769a, 0x8fcaca45, 0x1f82829d, 0x89c9c940, 0xfa7d7d87, 0xeffafa15, 0xb25959eb, 0x8e4747c9, 0xfbf0f00b, 0x41adadec, 0xb3d4d467, 0x5fa2a2fd, 0x45afafea, 0x239c9cbf, 0x53a4a4f7, 0xe4727296, 0x9bc0c05b, 0x75b7b7c2, 0xe1fdfd1c, 0x3d9393ae, 0x4c26266a, 0x6c36365a, 0x7e3f3f41, 0xf5f7f702, 0x83cccc4f, 0x6834345c, 0x51a5a5f4, 0xd1e5e534, 0xf9f1f108, 0xe2717193, 0xabd8d873, 0x62313153, 0x2a15153f, 0x0804040c, 0x95c7c752, 0x46232365, 0x9dc3c35e, 0x30181828, 0x379696a1, 0x0a05050f, 0x2f9a9ab5, 0x0e070709, 0x24121236, 0x1b80809b, 0xdfe2e23d, 0xcdebeb26, 0x4e272769, 0x7fb2b2cd, 0xea75759f, 0x1209091b, 0x1d83839e, 0x582c2c74, 0x341a1a2e, 0x361b1b2d, 0xdc6e6eb2, 0xb45a5aee, 0x5ba0a0fb, 0xa45252f6, 0x763b3b4d, 0xb7d6d661, 0x7db3b3ce, 0x5229297b, 0xdde3e33e, 0x5e2f2f71, 0x13848497, 0xa65353f5, 0xb9d1d168, 0x00000000, 0xc1eded2c, 0x40202060, 0xe3fcfc1f, 0x79b1b1c8, 0xb65b5bed, 0xd46a6abe, 0x8dcbcb46, 0x67bebed9, 0x7239394b, 0x944a4ade, 0x984c4cd4, 0xb05858e8, 0x85cfcf4a, 0xbbd0d06b, 0xc5efef2a, 0x4faaaae5, 0xedfbfb16, 0x864343c5, 0x9a4d4dd7, 0x66333355, 0x11858594, 0x8a4545cf, 0xe9f9f910, 0x04020206, 0xfe7f7f81, 0xa05050f0, 0x783c3c44, 0x259f9fba, 0x4ba8a8e3, 0xa25151f3, 0x5da3a3fe, 0x804040c0, 0x058f8f8a, 0x3f9292ad, 0x219d9dbc, 0x70383848, 0xf1f5f504, 0x63bcbcdf, 0x77b6b6c1, 0xafdada75, 0x42212163, 0x20101030, 0xe5ffff1a, 0xfdf3f30e, 0xbfd2d26d, 0x81cdcd4c, 0x180c0c14, 0x26131335, 0xc3ecec2f, 0xbe5f5fe1, 0x359797a2, 0x884444cc, 0x2e171739, 0x93c4c457, 0x55a7a7f2, 0xfc7e7e82, 0x7a3d3d47, 0xc86464ac, 0xba5d5de7, 0x3219192b, 0xe6737395, 0xc06060a0, 0x19818198, 0x9e4f4fd1, 0xa3dcdc7f, 0x44222266, 0x542a2a7e, 0x3b9090ab, 0x0b888883, 0x8c4646ca, 0xc7eeee29, 0x6bb8b8d3, 0x2814143c, 0xa7dede79, 0xbc5e5ee2, 0x160b0b1d, 0xaddbdb76, 0xdbe0e03b, 0x64323256, 0x743a3a4e, 0x140a0a1e, 0x924949db, 0x0c06060a, 0x4824246c, 0xb85c5ce4, 0x9fc2c25d, 0xbdd3d36e, 0x43acacef, 0xc46262a6, 0x399191a8, 0x319595a4, 0xd3e4e437, 0xf279798b, 0xd5e7e732, 0x8bc8c843, 0x6e373759, 0xda6d6db7, 0x018d8d8c, 0xb1d5d564, 0x9c4e4ed2, 0x49a9a9e0, 0xd86c6cb4, 0xac5656fa, 0xf3f4f407, 0xcfeaea25, 0xca6565af, 0xf47a7a8e, 0x47aeaee9, 0x10080818, 0x6fbabad5, 0xf0787888, 0x4a25256f, 0x5c2e2e72, 0x381c1c24, 0x57a6a6f1, 0x73b4b4c7, 0x97c6c651, 0xcbe8e823, 0xa1dddd7c, 0xe874749c, 0x3e1f1f21, 0x964b4bdd, 0x61bdbddc, 0x0d8b8b86, 0x0f8a8a85, 0xe0707090, 0x7c3e3e42, 0x71b5b5c4, 0xcc6666aa, 0x904848d8, 0x06030305, 0xf7f6f601, 0x1c0e0e12, 0xc26161a3, 0x6a35355f, 0xae5757f9, 0x69b9b9d0, 0x17868691, 0x99c1c158, 0x3a1d1d27, 0x279e9eb9, 0xd9e1e138, 0xebf8f813, 0x2b9898b3, 0x22111133, 0xd26969bb, 0xa9d9d970, 0x078e8e89, 0x339494a7, 0x2d9b9bb6, 0x3c1e1e22, 0x15878792, 0xc9e9e920, 0x87cece49, 0xaa5555ff, 0x50282878, 0xa5dfdf7a, 0x038c8c8f, 0x59a1a1f8, 0x09898980, 0x1a0d0d17, 0x65bfbfda, 0xd7e6e631, 0x844242c6, 0xd06868b8, 0x824141c3, 0x299999b0, 0x5a2d2d77, 0x1e0f0f11, 0x7bb0b0cb, 0xa85454fc, 0x6dbbbbd6, 0x2c16163a];
    var T2 = [0xa5c66363, 0x84f87c7c, 0x99ee7777, 0x8df67b7b, 0x0dfff2f2, 0xbdd66b6b, 0xb1de6f6f, 0x5491c5c5, 0x50603030, 0x03020101, 0xa9ce6767, 0x7d562b2b, 0x19e7fefe, 0x62b5d7d7, 0xe64dabab, 0x9aec7676, 0x458fcaca, 0x9d1f8282, 0x4089c9c9, 0x87fa7d7d, 0x15effafa, 0xebb25959, 0xc98e4747, 0x0bfbf0f0, 0xec41adad, 0x67b3d4d4, 0xfd5fa2a2, 0xea45afaf, 0xbf239c9c, 0xf753a4a4, 0x96e47272, 0x5b9bc0c0, 0xc275b7b7, 0x1ce1fdfd, 0xae3d9393, 0x6a4c2626, 0x5a6c3636, 0x417e3f3f, 0x02f5f7f7, 0x4f83cccc, 0x5c683434, 0xf451a5a5, 0x34d1e5e5, 0x08f9f1f1, 0x93e27171, 0x73abd8d8, 0x53623131, 0x3f2a1515, 0x0c080404, 0x5295c7c7, 0x65462323, 0x5e9dc3c3, 0x28301818, 0xa1379696, 0x0f0a0505, 0xb52f9a9a, 0x090e0707, 0x36241212, 0x9b1b8080, 0x3ddfe2e2, 0x26cdebeb, 0x694e2727, 0xcd7fb2b2, 0x9fea7575, 0x1b120909, 0x9e1d8383, 0x74582c2c, 0x2e341a1a, 0x2d361b1b, 0xb2dc6e6e, 0xeeb45a5a, 0xfb5ba0a0, 0xf6a45252, 0x4d763b3b, 0x61b7d6d6, 0xce7db3b3, 0x7b522929, 0x3edde3e3, 0x715e2f2f, 0x97138484, 0xf5a65353, 0x68b9d1d1, 0x00000000, 0x2cc1eded, 0x60402020, 0x1fe3fcfc, 0xc879b1b1, 0xedb65b5b, 0xbed46a6a, 0x468dcbcb, 0xd967bebe, 0x4b723939, 0xde944a4a, 0xd4984c4c, 0xe8b05858, 0x4a85cfcf, 0x6bbbd0d0, 0x2ac5efef, 0xe54faaaa, 0x16edfbfb, 0xc5864343, 0xd79a4d4d, 0x55663333, 0x94118585, 0xcf8a4545, 0x10e9f9f9, 0x06040202, 0x81fe7f7f, 0xf0a05050, 0x44783c3c, 0xba259f9f, 0xe34ba8a8, 0xf3a25151, 0xfe5da3a3, 0xc0804040, 0x8a058f8f, 0xad3f9292, 0xbc219d9d, 0x48703838, 0x04f1f5f5, 0xdf63bcbc, 0xc177b6b6, 0x75afdada, 0x63422121, 0x30201010, 0x1ae5ffff, 0x0efdf3f3, 0x6dbfd2d2, 0x4c81cdcd, 0x14180c0c, 0x35261313, 0x2fc3ecec, 0xe1be5f5f, 0xa2359797, 0xcc884444, 0x392e1717, 0x5793c4c4, 0xf255a7a7, 0x82fc7e7e, 0x477a3d3d, 0xacc86464, 0xe7ba5d5d, 0x2b321919, 0x95e67373, 0xa0c06060, 0x98198181, 0xd19e4f4f, 0x7fa3dcdc, 0x66442222, 0x7e542a2a, 0xab3b9090, 0x830b8888, 0xca8c4646, 0x29c7eeee, 0xd36bb8b8, 0x3c281414, 0x79a7dede, 0xe2bc5e5e, 0x1d160b0b, 0x76addbdb, 0x3bdbe0e0, 0x56643232, 0x4e743a3a, 0x1e140a0a, 0xdb924949, 0x0a0c0606, 0x6c482424, 0xe4b85c5c, 0x5d9fc2c2, 0x6ebdd3d3, 0xef43acac, 0xa6c46262, 0xa8399191, 0xa4319595, 0x37d3e4e4, 0x8bf27979, 0x32d5e7e7, 0x438bc8c8, 0x596e3737, 0xb7da6d6d, 0x8c018d8d, 0x64b1d5d5, 0xd29c4e4e, 0xe049a9a9, 0xb4d86c6c, 0xfaac5656, 0x07f3f4f4, 0x25cfeaea, 0xafca6565, 0x8ef47a7a, 0xe947aeae, 0x18100808, 0xd56fbaba, 0x88f07878, 0x6f4a2525, 0x725c2e2e, 0x24381c1c, 0xf157a6a6, 0xc773b4b4, 0x5197c6c6, 0x23cbe8e8, 0x7ca1dddd, 0x9ce87474, 0x213e1f1f, 0xdd964b4b, 0xdc61bdbd, 0x860d8b8b, 0x850f8a8a, 0x90e07070, 0x427c3e3e, 0xc471b5b5, 0xaacc6666, 0xd8904848, 0x05060303, 0x01f7f6f6, 0x121c0e0e, 0xa3c26161, 0x5f6a3535, 0xf9ae5757, 0xd069b9b9, 0x91178686, 0x5899c1c1, 0x273a1d1d, 0xb9279e9e, 0x38d9e1e1, 0x13ebf8f8, 0xb32b9898, 0x33221111, 0xbbd26969, 0x70a9d9d9, 0x89078e8e, 0xa7339494, 0xb62d9b9b, 0x223c1e1e, 0x92158787, 0x20c9e9e9, 0x4987cece, 0xffaa5555, 0x78502828, 0x7aa5dfdf, 0x8f038c8c, 0xf859a1a1, 0x80098989, 0x171a0d0d, 0xda65bfbf, 0x31d7e6e6, 0xc6844242, 0xb8d06868, 0xc3824141, 0xb0299999, 0x775a2d2d, 0x111e0f0f, 0xcb7bb0b0, 0xfca85454, 0xd66dbbbb, 0x3a2c1616];
    var T3 = [0x63a5c663, 0x7c84f87c, 0x7799ee77, 0x7b8df67b, 0xf20dfff2, 0x6bbdd66b, 0x6fb1de6f, 0xc55491c5, 0x30506030, 0x01030201, 0x67a9ce67, 0x2b7d562b, 0xfe19e7fe, 0xd762b5d7, 0xabe64dab, 0x769aec76, 0xca458fca, 0x829d1f82, 0xc94089c9, 0x7d87fa7d, 0xfa15effa, 0x59ebb259, 0x47c98e47, 0xf00bfbf0, 0xadec41ad, 0xd467b3d4, 0xa2fd5fa2, 0xafea45af, 0x9cbf239c, 0xa4f753a4, 0x7296e472, 0xc05b9bc0, 0xb7c275b7, 0xfd1ce1fd, 0x93ae3d93, 0x266a4c26, 0x365a6c36, 0x3f417e3f, 0xf702f5f7, 0xcc4f83cc, 0x345c6834, 0xa5f451a5, 0xe534d1e5, 0xf108f9f1, 0x7193e271, 0xd873abd8, 0x31536231, 0x153f2a15, 0x040c0804, 0xc75295c7, 0x23654623, 0xc35e9dc3, 0x18283018, 0x96a13796, 0x050f0a05, 0x9ab52f9a, 0x07090e07, 0x12362412, 0x809b1b80, 0xe23ddfe2, 0xeb26cdeb, 0x27694e27, 0xb2cd7fb2, 0x759fea75, 0x091b1209, 0x839e1d83, 0x2c74582c, 0x1a2e341a, 0x1b2d361b, 0x6eb2dc6e, 0x5aeeb45a, 0xa0fb5ba0, 0x52f6a452, 0x3b4d763b, 0xd661b7d6, 0xb3ce7db3, 0x297b5229, 0xe33edde3, 0x2f715e2f, 0x84971384, 0x53f5a653, 0xd168b9d1, 0x00000000, 0xed2cc1ed, 0x20604020, 0xfc1fe3fc, 0xb1c879b1, 0x5bedb65b, 0x6abed46a, 0xcb468dcb, 0xbed967be, 0x394b7239, 0x4ade944a, 0x4cd4984c, 0x58e8b058, 0xcf4a85cf, 0xd06bbbd0, 0xef2ac5ef, 0xaae54faa, 0xfb16edfb, 0x43c58643, 0x4dd79a4d, 0x33556633, 0x85941185, 0x45cf8a45, 0xf910e9f9, 0x02060402, 0x7f81fe7f, 0x50f0a050, 0x3c44783c, 0x9fba259f, 0xa8e34ba8, 0x51f3a251, 0xa3fe5da3, 0x40c08040, 0x8f8a058f, 0x92ad3f92, 0x9dbc219d, 0x38487038, 0xf504f1f5, 0xbcdf63bc, 0xb6c177b6, 0xda75afda, 0x21634221, 0x10302010, 0xff1ae5ff, 0xf30efdf3, 0xd26dbfd2, 0xcd4c81cd, 0x0c14180c, 0x13352613, 0xec2fc3ec, 0x5fe1be5f, 0x97a23597, 0x44cc8844, 0x17392e17, 0xc45793c4, 0xa7f255a7, 0x7e82fc7e, 0x3d477a3d, 0x64acc864, 0x5de7ba5d, 0x192b3219, 0x7395e673, 0x60a0c060, 0x81981981, 0x4fd19e4f, 0xdc7fa3dc, 0x22664422, 0x2a7e542a, 0x90ab3b90, 0x88830b88, 0x46ca8c46, 0xee29c7ee, 0xb8d36bb8, 0x143c2814, 0xde79a7de, 0x5ee2bc5e, 0x0b1d160b, 0xdb76addb, 0xe03bdbe0, 0x32566432, 0x3a4e743a, 0x0a1e140a, 0x49db9249, 0x060a0c06, 0x246c4824, 0x5ce4b85c, 0xc25d9fc2, 0xd36ebdd3, 0xacef43ac, 0x62a6c462, 0x91a83991, 0x95a43195, 0xe437d3e4, 0x798bf279, 0xe732d5e7, 0xc8438bc8, 0x37596e37, 0x6db7da6d, 0x8d8c018d, 0xd564b1d5, 0x4ed29c4e, 0xa9e049a9, 0x6cb4d86c, 0x56faac56, 0xf407f3f4, 0xea25cfea, 0x65afca65, 0x7a8ef47a, 0xaee947ae, 0x08181008, 0xbad56fba, 0x7888f078, 0x256f4a25, 0x2e725c2e, 0x1c24381c, 0xa6f157a6, 0xb4c773b4, 0xc65197c6, 0xe823cbe8, 0xdd7ca1dd, 0x749ce874, 0x1f213e1f, 0x4bdd964b, 0xbddc61bd, 0x8b860d8b, 0x8a850f8a, 0x7090e070, 0x3e427c3e, 0xb5c471b5, 0x66aacc66, 0x48d89048, 0x03050603, 0xf601f7f6, 0x0e121c0e, 0x61a3c261, 0x355f6a35, 0x57f9ae57, 0xb9d069b9, 0x86911786, 0xc15899c1, 0x1d273a1d, 0x9eb9279e, 0xe138d9e1, 0xf813ebf8, 0x98b32b98, 0x11332211, 0x69bbd269, 0xd970a9d9, 0x8e89078e, 0x94a73394, 0x9bb62d9b, 0x1e223c1e, 0x87921587, 0xe920c9e9, 0xce4987ce, 0x55ffaa55, 0x28785028, 0xdf7aa5df, 0x8c8f038c, 0xa1f859a1, 0x89800989, 0x0d171a0d, 0xbfda65bf, 0xe631d7e6, 0x42c68442, 0x68b8d068, 0x41c38241, 0x99b02999, 0x2d775a2d, 0x0f111e0f, 0xb0cb7bb0, 0x54fca854, 0xbbd66dbb, 0x163a2c16];
    var T4 = [0x6363a5c6, 0x7c7c84f8, 0x777799ee, 0x7b7b8df6, 0xf2f20dff, 0x6b6bbdd6, 0x6f6fb1de, 0xc5c55491, 0x30305060, 0x01010302, 0x6767a9ce, 0x2b2b7d56, 0xfefe19e7, 0xd7d762b5, 0xababe64d, 0x76769aec, 0xcaca458f, 0x82829d1f, 0xc9c94089, 0x7d7d87fa, 0xfafa15ef, 0x5959ebb2, 0x4747c98e, 0xf0f00bfb, 0xadadec41, 0xd4d467b3, 0xa2a2fd5f, 0xafafea45, 0x9c9cbf23, 0xa4a4f753, 0x727296e4, 0xc0c05b9b, 0xb7b7c275, 0xfdfd1ce1, 0x9393ae3d, 0x26266a4c, 0x36365a6c, 0x3f3f417e, 0xf7f702f5, 0xcccc4f83, 0x34345c68, 0xa5a5f451, 0xe5e534d1, 0xf1f108f9, 0x717193e2, 0xd8d873ab, 0x31315362, 0x15153f2a, 0x04040c08, 0xc7c75295, 0x23236546, 0xc3c35e9d, 0x18182830, 0x9696a137, 0x05050f0a, 0x9a9ab52f, 0x0707090e, 0x12123624, 0x80809b1b, 0xe2e23ddf, 0xebeb26cd, 0x2727694e, 0xb2b2cd7f, 0x75759fea, 0x09091b12, 0x83839e1d, 0x2c2c7458, 0x1a1a2e34, 0x1b1b2d36, 0x6e6eb2dc, 0x5a5aeeb4, 0xa0a0fb5b, 0x5252f6a4, 0x3b3b4d76, 0xd6d661b7, 0xb3b3ce7d, 0x29297b52, 0xe3e33edd, 0x2f2f715e, 0x84849713, 0x5353f5a6, 0xd1d168b9, 0x00000000, 0xeded2cc1, 0x20206040, 0xfcfc1fe3, 0xb1b1c879, 0x5b5bedb6, 0x6a6abed4, 0xcbcb468d, 0xbebed967, 0x39394b72, 0x4a4ade94, 0x4c4cd498, 0x5858e8b0, 0xcfcf4a85, 0xd0d06bbb, 0xefef2ac5, 0xaaaae54f, 0xfbfb16ed, 0x4343c586, 0x4d4dd79a, 0x33335566, 0x85859411, 0x4545cf8a, 0xf9f910e9, 0x02020604, 0x7f7f81fe, 0x5050f0a0, 0x3c3c4478, 0x9f9fba25, 0xa8a8e34b, 0x5151f3a2, 0xa3a3fe5d, 0x4040c080, 0x8f8f8a05, 0x9292ad3f, 0x9d9dbc21, 0x38384870, 0xf5f504f1, 0xbcbcdf63, 0xb6b6c177, 0xdada75af, 0x21216342, 0x10103020, 0xffff1ae5, 0xf3f30efd, 0xd2d26dbf, 0xcdcd4c81, 0x0c0c1418, 0x13133526, 0xecec2fc3, 0x5f5fe1be, 0x9797a235, 0x4444cc88, 0x1717392e, 0xc4c45793, 0xa7a7f255, 0x7e7e82fc, 0x3d3d477a, 0x6464acc8, 0x5d5de7ba, 0x19192b32, 0x737395e6, 0x6060a0c0, 0x81819819, 0x4f4fd19e, 0xdcdc7fa3, 0x22226644, 0x2a2a7e54, 0x9090ab3b, 0x8888830b, 0x4646ca8c, 0xeeee29c7, 0xb8b8d36b, 0x14143c28, 0xdede79a7, 0x5e5ee2bc, 0x0b0b1d16, 0xdbdb76ad, 0xe0e03bdb, 0x32325664, 0x3a3a4e74, 0x0a0a1e14, 0x4949db92, 0x06060a0c, 0x24246c48, 0x5c5ce4b8, 0xc2c25d9f, 0xd3d36ebd, 0xacacef43, 0x6262a6c4, 0x9191a839, 0x9595a431, 0xe4e437d3, 0x79798bf2, 0xe7e732d5, 0xc8c8438b, 0x3737596e, 0x6d6db7da, 0x8d8d8c01, 0xd5d564b1, 0x4e4ed29c, 0xa9a9e049, 0x6c6cb4d8, 0x5656faac, 0xf4f407f3, 0xeaea25cf, 0x6565afca, 0x7a7a8ef4, 0xaeaee947, 0x08081810, 0xbabad56f, 0x787888f0, 0x25256f4a, 0x2e2e725c, 0x1c1c2438, 0xa6a6f157, 0xb4b4c773, 0xc6c65197, 0xe8e823cb, 0xdddd7ca1, 0x74749ce8, 0x1f1f213e, 0x4b4bdd96, 0xbdbddc61, 0x8b8b860d, 0x8a8a850f, 0x707090e0, 0x3e3e427c, 0xb5b5c471, 0x6666aacc, 0x4848d890, 0x03030506, 0xf6f601f7, 0x0e0e121c, 0x6161a3c2, 0x35355f6a, 0x5757f9ae, 0xb9b9d069, 0x86869117, 0xc1c15899, 0x1d1d273a, 0x9e9eb927, 0xe1e138d9, 0xf8f813eb, 0x9898b32b, 0x11113322, 0x6969bbd2, 0xd9d970a9, 0x8e8e8907, 0x9494a733, 0x9b9bb62d, 0x1e1e223c, 0x87879215, 0xe9e920c9, 0xcece4987, 0x5555ffaa, 0x28287850, 0xdfdf7aa5, 0x8c8c8f03, 0xa1a1f859, 0x89898009, 0x0d0d171a, 0xbfbfda65, 0xe6e631d7, 0x4242c684, 0x6868b8d0, 0x4141c382, 0x9999b029, 0x2d2d775a, 0x0f0f111e, 0xb0b0cb7b, 0x5454fca8, 0xbbbbd66d, 0x16163a2c];

    // Transformations for decryption
    var T5 = [0x51f4a750, 0x7e416553, 0x1a17a4c3, 0x3a275e96, 0x3bab6bcb, 0x1f9d45f1, 0xacfa58ab, 0x4be30393, 0x2030fa55, 0xad766df6, 0x88cc7691, 0xf5024c25, 0x4fe5d7fc, 0xc52acbd7, 0x26354480, 0xb562a38f, 0xdeb15a49, 0x25ba1b67, 0x45ea0e98, 0x5dfec0e1, 0xc32f7502, 0x814cf012, 0x8d4697a3, 0x6bd3f9c6, 0x038f5fe7, 0x15929c95, 0xbf6d7aeb, 0x955259da, 0xd4be832d, 0x587421d3, 0x49e06929, 0x8ec9c844, 0x75c2896a, 0xf48e7978, 0x99583e6b, 0x27b971dd, 0xbee14fb6, 0xf088ad17, 0xc920ac66, 0x7dce3ab4, 0x63df4a18, 0xe51a3182, 0x97513360, 0x62537f45, 0xb16477e0, 0xbb6bae84, 0xfe81a01c, 0xf9082b94, 0x70486858, 0x8f45fd19, 0x94de6c87, 0x527bf8b7, 0xab73d323, 0x724b02e2, 0xe31f8f57, 0x6655ab2a, 0xb2eb2807, 0x2fb5c203, 0x86c57b9a, 0xd33708a5, 0x302887f2, 0x23bfa5b2, 0x02036aba, 0xed16825c, 0x8acf1c2b, 0xa779b492, 0xf307f2f0, 0x4e69e2a1, 0x65daf4cd, 0x0605bed5, 0xd134621f, 0xc4a6fe8a, 0x342e539d, 0xa2f355a0, 0x058ae132, 0xa4f6eb75, 0x0b83ec39, 0x4060efaa, 0x5e719f06, 0xbd6e1051, 0x3e218af9, 0x96dd063d, 0xdd3e05ae, 0x4de6bd46, 0x91548db5, 0x71c45d05, 0x0406d46f, 0x605015ff, 0x1998fb24, 0xd6bde997, 0x894043cc, 0x67d99e77, 0xb0e842bd, 0x07898b88, 0xe7195b38, 0x79c8eedb, 0xa17c0a47, 0x7c420fe9, 0xf8841ec9, 0x00000000, 0x09808683, 0x322bed48, 0x1e1170ac, 0x6c5a724e, 0xfd0efffb, 0x0f853856, 0x3daed51e, 0x362d3927, 0x0a0fd964, 0x685ca621, 0x9b5b54d1, 0x24362e3a, 0x0c0a67b1, 0x9357e70f, 0xb4ee96d2, 0x1b9b919e, 0x80c0c54f, 0x61dc20a2, 0x5a774b69, 0x1c121a16, 0xe293ba0a, 0xc0a02ae5, 0x3c22e043, 0x121b171d, 0x0e090d0b, 0xf28bc7ad, 0x2db6a8b9, 0x141ea9c8, 0x57f11985, 0xaf75074c, 0xee99ddbb, 0xa37f60fd, 0xf701269f, 0x5c72f5bc, 0x44663bc5, 0x5bfb7e34, 0x8b432976, 0xcb23c6dc, 0xb6edfc68, 0xb8e4f163, 0xd731dcca, 0x42638510, 0x13972240, 0x84c61120, 0x854a247d, 0xd2bb3df8, 0xaef93211, 0xc729a16d, 0x1d9e2f4b, 0xdcb230f3, 0x0d8652ec, 0x77c1e3d0, 0x2bb3166c, 0xa970b999, 0x119448fa, 0x47e96422, 0xa8fc8cc4, 0xa0f03f1a, 0x567d2cd8, 0x223390ef, 0x87494ec7, 0xd938d1c1, 0x8ccaa2fe, 0x98d40b36, 0xa6f581cf, 0xa57ade28, 0xdab78e26, 0x3fadbfa4, 0x2c3a9de4, 0x5078920d, 0x6a5fcc9b, 0x547e4662, 0xf68d13c2, 0x90d8b8e8, 0x2e39f75e, 0x82c3aff5, 0x9f5d80be, 0x69d0937c, 0x6fd52da9, 0xcf2512b3, 0xc8ac993b, 0x10187da7, 0xe89c636e, 0xdb3bbb7b, 0xcd267809, 0x6e5918f4, 0xec9ab701, 0x834f9aa8, 0xe6956e65, 0xaaffe67e, 0x21bccf08, 0xef15e8e6, 0xbae79bd9, 0x4a6f36ce, 0xea9f09d4, 0x29b07cd6, 0x31a4b2af, 0x2a3f2331, 0xc6a59430, 0x35a266c0, 0x744ebc37, 0xfc82caa6, 0xe090d0b0, 0x33a7d815, 0xf104984a, 0x41ecdaf7, 0x7fcd500e, 0x1791f62f, 0x764dd68d, 0x43efb04d, 0xccaa4d54, 0xe49604df, 0x9ed1b5e3, 0x4c6a881b, 0xc12c1fb8, 0x4665517f, 0x9d5eea04, 0x018c355d, 0xfa877473, 0xfb0b412e, 0xb3671d5a, 0x92dbd252, 0xe9105633, 0x6dd64713, 0x9ad7618c, 0x37a10c7a, 0x59f8148e, 0xeb133c89, 0xcea927ee, 0xb761c935, 0xe11ce5ed, 0x7a47b13c, 0x9cd2df59, 0x55f2733f, 0x1814ce79, 0x73c737bf, 0x53f7cdea, 0x5ffdaa5b, 0xdf3d6f14, 0x7844db86, 0xcaaff381, 0xb968c43e, 0x3824342c, 0xc2a3405f, 0x161dc372, 0xbce2250c, 0x283c498b, 0xff0d9541, 0x39a80171, 0x080cb3de, 0xd8b4e49c, 0x6456c190, 0x7bcb8461, 0xd532b670, 0x486c5c74, 0xd0b85742];
    var T6 = [0x5051f4a7, 0x537e4165, 0xc31a17a4, 0x963a275e, 0xcb3bab6b, 0xf11f9d45, 0xabacfa58, 0x934be303, 0x552030fa, 0xf6ad766d, 0x9188cc76, 0x25f5024c, 0xfc4fe5d7, 0xd7c52acb, 0x80263544, 0x8fb562a3, 0x49deb15a, 0x6725ba1b, 0x9845ea0e, 0xe15dfec0, 0x02c32f75, 0x12814cf0, 0xa38d4697, 0xc66bd3f9, 0xe7038f5f, 0x9515929c, 0xebbf6d7a, 0xda955259, 0x2dd4be83, 0xd3587421, 0x2949e069, 0x448ec9c8, 0x6a75c289, 0x78f48e79, 0x6b99583e, 0xdd27b971, 0xb6bee14f, 0x17f088ad, 0x66c920ac, 0xb47dce3a, 0x1863df4a, 0x82e51a31, 0x60975133, 0x4562537f, 0xe0b16477, 0x84bb6bae, 0x1cfe81a0, 0x94f9082b, 0x58704868, 0x198f45fd, 0x8794de6c, 0xb7527bf8, 0x23ab73d3, 0xe2724b02, 0x57e31f8f, 0x2a6655ab, 0x07b2eb28, 0x032fb5c2, 0x9a86c57b, 0xa5d33708, 0xf2302887, 0xb223bfa5, 0xba02036a, 0x5ced1682, 0x2b8acf1c, 0x92a779b4, 0xf0f307f2, 0xa14e69e2, 0xcd65daf4, 0xd50605be, 0x1fd13462, 0x8ac4a6fe, 0x9d342e53, 0xa0a2f355, 0x32058ae1, 0x75a4f6eb, 0x390b83ec, 0xaa4060ef, 0x065e719f, 0x51bd6e10, 0xf93e218a, 0x3d96dd06, 0xaedd3e05, 0x464de6bd, 0xb591548d, 0x0571c45d, 0x6f0406d4, 0xff605015, 0x241998fb, 0x97d6bde9, 0xcc894043, 0x7767d99e, 0xbdb0e842, 0x8807898b, 0x38e7195b, 0xdb79c8ee, 0x47a17c0a, 0xe97c420f, 0xc9f8841e, 0x00000000, 0x83098086, 0x48322bed, 0xac1e1170, 0x4e6c5a72, 0xfbfd0eff, 0x560f8538, 0x1e3daed5, 0x27362d39, 0x640a0fd9, 0x21685ca6, 0xd19b5b54, 0x3a24362e, 0xb10c0a67, 0x0f9357e7, 0xd2b4ee96, 0x9e1b9b91, 0x4f80c0c5, 0xa261dc20, 0x695a774b, 0x161c121a, 0x0ae293ba, 0xe5c0a02a, 0x433c22e0, 0x1d121b17, 0x0b0e090d, 0xadf28bc7, 0xb92db6a8, 0xc8141ea9, 0x8557f119, 0x4caf7507, 0xbbee99dd, 0xfda37f60, 0x9ff70126, 0xbc5c72f5, 0xc544663b, 0x345bfb7e, 0x768b4329, 0xdccb23c6, 0x68b6edfc, 0x63b8e4f1, 0xcad731dc, 0x10426385, 0x40139722, 0x2084c611, 0x7d854a24, 0xf8d2bb3d, 0x11aef932, 0x6dc729a1, 0x4b1d9e2f, 0xf3dcb230, 0xec0d8652, 0xd077c1e3, 0x6c2bb316, 0x99a970b9, 0xfa119448, 0x2247e964, 0xc4a8fc8c, 0x1aa0f03f, 0xd8567d2c, 0xef223390, 0xc787494e, 0xc1d938d1, 0xfe8ccaa2, 0x3698d40b, 0xcfa6f581, 0x28a57ade, 0x26dab78e, 0xa43fadbf, 0xe42c3a9d, 0x0d507892, 0x9b6a5fcc, 0x62547e46, 0xc2f68d13, 0xe890d8b8, 0x5e2e39f7, 0xf582c3af, 0xbe9f5d80, 0x7c69d093, 0xa96fd52d, 0xb3cf2512, 0x3bc8ac99, 0xa710187d, 0x6ee89c63, 0x7bdb3bbb, 0x09cd2678, 0xf46e5918, 0x01ec9ab7, 0xa8834f9a, 0x65e6956e, 0x7eaaffe6, 0x0821bccf, 0xe6ef15e8, 0xd9bae79b, 0xce4a6f36, 0xd4ea9f09, 0xd629b07c, 0xaf31a4b2, 0x312a3f23, 0x30c6a594, 0xc035a266, 0x37744ebc, 0xa6fc82ca, 0xb0e090d0, 0x1533a7d8, 0x4af10498, 0xf741ecda, 0x0e7fcd50, 0x2f1791f6, 0x8d764dd6, 0x4d43efb0, 0x54ccaa4d, 0xdfe49604, 0xe39ed1b5, 0x1b4c6a88, 0xb8c12c1f, 0x7f466551, 0x049d5eea, 0x5d018c35, 0x73fa8774, 0x2efb0b41, 0x5ab3671d, 0x5292dbd2, 0x33e91056, 0x136dd647, 0x8c9ad761, 0x7a37a10c, 0x8e59f814, 0x89eb133c, 0xeecea927, 0x35b761c9, 0xede11ce5, 0x3c7a47b1, 0x599cd2df, 0x3f55f273, 0x791814ce, 0xbf73c737, 0xea53f7cd, 0x5b5ffdaa, 0x14df3d6f, 0x867844db, 0x81caaff3, 0x3eb968c4, 0x2c382434, 0x5fc2a340, 0x72161dc3, 0x0cbce225, 0x8b283c49, 0x41ff0d95, 0x7139a801, 0xde080cb3, 0x9cd8b4e4, 0x906456c1, 0x617bcb84, 0x70d532b6, 0x74486c5c, 0x42d0b857];
    var T7 = [0xa75051f4, 0x65537e41, 0xa4c31a17, 0x5e963a27, 0x6bcb3bab, 0x45f11f9d, 0x58abacfa, 0x03934be3, 0xfa552030, 0x6df6ad76, 0x769188cc, 0x4c25f502, 0xd7fc4fe5, 0xcbd7c52a, 0x44802635, 0xa38fb562, 0x5a49deb1, 0x1b6725ba, 0x0e9845ea, 0xc0e15dfe, 0x7502c32f, 0xf012814c, 0x97a38d46, 0xf9c66bd3, 0x5fe7038f, 0x9c951592, 0x7aebbf6d, 0x59da9552, 0x832dd4be, 0x21d35874, 0x692949e0, 0xc8448ec9, 0x896a75c2, 0x7978f48e, 0x3e6b9958, 0x71dd27b9, 0x4fb6bee1, 0xad17f088, 0xac66c920, 0x3ab47dce, 0x4a1863df, 0x3182e51a, 0x33609751, 0x7f456253, 0x77e0b164, 0xae84bb6b, 0xa01cfe81, 0x2b94f908, 0x68587048, 0xfd198f45, 0x6c8794de, 0xf8b7527b, 0xd323ab73, 0x02e2724b, 0x8f57e31f, 0xab2a6655, 0x2807b2eb, 0xc2032fb5, 0x7b9a86c5, 0x08a5d337, 0x87f23028, 0xa5b223bf, 0x6aba0203, 0x825ced16, 0x1c2b8acf, 0xb492a779, 0xf2f0f307, 0xe2a14e69, 0xf4cd65da, 0xbed50605, 0x621fd134, 0xfe8ac4a6, 0x539d342e, 0x55a0a2f3, 0xe132058a, 0xeb75a4f6, 0xec390b83, 0xefaa4060, 0x9f065e71, 0x1051bd6e, 0x8af93e21, 0x063d96dd, 0x05aedd3e, 0xbd464de6, 0x8db59154, 0x5d0571c4, 0xd46f0406, 0x15ff6050, 0xfb241998, 0xe997d6bd, 0x43cc8940, 0x9e7767d9, 0x42bdb0e8, 0x8b880789, 0x5b38e719, 0xeedb79c8, 0x0a47a17c, 0x0fe97c42, 0x1ec9f884, 0x00000000, 0x86830980, 0xed48322b, 0x70ac1e11, 0x724e6c5a, 0xfffbfd0e, 0x38560f85, 0xd51e3dae, 0x3927362d, 0xd9640a0f, 0xa621685c, 0x54d19b5b, 0x2e3a2436, 0x67b10c0a, 0xe70f9357, 0x96d2b4ee, 0x919e1b9b, 0xc54f80c0, 0x20a261dc, 0x4b695a77, 0x1a161c12, 0xba0ae293, 0x2ae5c0a0, 0xe0433c22, 0x171d121b, 0x0d0b0e09, 0xc7adf28b, 0xa8b92db6, 0xa9c8141e, 0x198557f1, 0x074caf75, 0xddbbee99, 0x60fda37f, 0x269ff701, 0xf5bc5c72, 0x3bc54466, 0x7e345bfb, 0x29768b43, 0xc6dccb23, 0xfc68b6ed, 0xf163b8e4, 0xdccad731, 0x85104263, 0x22401397, 0x112084c6, 0x247d854a, 0x3df8d2bb, 0x3211aef9, 0xa16dc729, 0x2f4b1d9e, 0x30f3dcb2, 0x52ec0d86, 0xe3d077c1, 0x166c2bb3, 0xb999a970, 0x48fa1194, 0x642247e9, 0x8cc4a8fc, 0x3f1aa0f0, 0x2cd8567d, 0x90ef2233, 0x4ec78749, 0xd1c1d938, 0xa2fe8cca, 0x0b3698d4, 0x81cfa6f5, 0xde28a57a, 0x8e26dab7, 0xbfa43fad, 0x9de42c3a, 0x920d5078, 0xcc9b6a5f, 0x4662547e, 0x13c2f68d, 0xb8e890d8, 0xf75e2e39, 0xaff582c3, 0x80be9f5d, 0x937c69d0, 0x2da96fd5, 0x12b3cf25, 0x993bc8ac, 0x7da71018, 0x636ee89c, 0xbb7bdb3b, 0x7809cd26, 0x18f46e59, 0xb701ec9a, 0x9aa8834f, 0x6e65e695, 0xe67eaaff, 0xcf0821bc, 0xe8e6ef15, 0x9bd9bae7, 0x36ce4a6f, 0x09d4ea9f, 0x7cd629b0, 0xb2af31a4, 0x23312a3f, 0x9430c6a5, 0x66c035a2, 0xbc37744e, 0xcaa6fc82, 0xd0b0e090, 0xd81533a7, 0x984af104, 0xdaf741ec, 0x500e7fcd, 0xf62f1791, 0xd68d764d, 0xb04d43ef, 0x4d54ccaa, 0x04dfe496, 0xb5e39ed1, 0x881b4c6a, 0x1fb8c12c, 0x517f4665, 0xea049d5e, 0x355d018c, 0x7473fa87, 0x412efb0b, 0x1d5ab367, 0xd25292db, 0x5633e910, 0x47136dd6, 0x618c9ad7, 0x0c7a37a1, 0x148e59f8, 0x3c89eb13, 0x27eecea9, 0xc935b761, 0xe5ede11c, 0xb13c7a47, 0xdf599cd2, 0x733f55f2, 0xce791814, 0x37bf73c7, 0xcdea53f7, 0xaa5b5ffd, 0x6f14df3d, 0xdb867844, 0xf381caaf, 0xc43eb968, 0x342c3824, 0x405fc2a3, 0xc372161d, 0x250cbce2, 0x498b283c, 0x9541ff0d, 0x017139a8, 0xb3de080c, 0xe49cd8b4, 0xc1906456, 0x84617bcb, 0xb670d532, 0x5c74486c, 0x5742d0b8];
    var T8 = [0xf4a75051, 0x4165537e, 0x17a4c31a, 0x275e963a, 0xab6bcb3b, 0x9d45f11f, 0xfa58abac, 0xe303934b, 0x30fa5520, 0x766df6ad, 0xcc769188, 0x024c25f5, 0xe5d7fc4f, 0x2acbd7c5, 0x35448026, 0x62a38fb5, 0xb15a49de, 0xba1b6725, 0xea0e9845, 0xfec0e15d, 0x2f7502c3, 0x4cf01281, 0x4697a38d, 0xd3f9c66b, 0x8f5fe703, 0x929c9515, 0x6d7aebbf, 0x5259da95, 0xbe832dd4, 0x7421d358, 0xe0692949, 0xc9c8448e, 0xc2896a75, 0x8e7978f4, 0x583e6b99, 0xb971dd27, 0xe14fb6be, 0x88ad17f0, 0x20ac66c9, 0xce3ab47d, 0xdf4a1863, 0x1a3182e5, 0x51336097, 0x537f4562, 0x6477e0b1, 0x6bae84bb, 0x81a01cfe, 0x082b94f9, 0x48685870, 0x45fd198f, 0xde6c8794, 0x7bf8b752, 0x73d323ab, 0x4b02e272, 0x1f8f57e3, 0x55ab2a66, 0xeb2807b2, 0xb5c2032f, 0xc57b9a86, 0x3708a5d3, 0x2887f230, 0xbfa5b223, 0x036aba02, 0x16825ced, 0xcf1c2b8a, 0x79b492a7, 0x07f2f0f3, 0x69e2a14e, 0xdaf4cd65, 0x05bed506, 0x34621fd1, 0xa6fe8ac4, 0x2e539d34, 0xf355a0a2, 0x8ae13205, 0xf6eb75a4, 0x83ec390b, 0x60efaa40, 0x719f065e, 0x6e1051bd, 0x218af93e, 0xdd063d96, 0x3e05aedd, 0xe6bd464d, 0x548db591, 0xc45d0571, 0x06d46f04, 0x5015ff60, 0x98fb2419, 0xbde997d6, 0x4043cc89, 0xd99e7767, 0xe842bdb0, 0x898b8807, 0x195b38e7, 0xc8eedb79, 0x7c0a47a1, 0x420fe97c, 0x841ec9f8, 0x00000000, 0x80868309, 0x2bed4832, 0x1170ac1e, 0x5a724e6c, 0x0efffbfd, 0x8538560f, 0xaed51e3d, 0x2d392736, 0x0fd9640a, 0x5ca62168, 0x5b54d19b, 0x362e3a24, 0x0a67b10c, 0x57e70f93, 0xee96d2b4, 0x9b919e1b, 0xc0c54f80, 0xdc20a261, 0x774b695a, 0x121a161c, 0x93ba0ae2, 0xa02ae5c0, 0x22e0433c, 0x1b171d12, 0x090d0b0e, 0x8bc7adf2, 0xb6a8b92d, 0x1ea9c814, 0xf1198557, 0x75074caf, 0x99ddbbee, 0x7f60fda3, 0x01269ff7, 0x72f5bc5c, 0x663bc544, 0xfb7e345b, 0x4329768b, 0x23c6dccb, 0xedfc68b6, 0xe4f163b8, 0x31dccad7, 0x63851042, 0x97224013, 0xc6112084, 0x4a247d85, 0xbb3df8d2, 0xf93211ae, 0x29a16dc7, 0x9e2f4b1d, 0xb230f3dc, 0x8652ec0d, 0xc1e3d077, 0xb3166c2b, 0x70b999a9, 0x9448fa11, 0xe9642247, 0xfc8cc4a8, 0xf03f1aa0, 0x7d2cd856, 0x3390ef22, 0x494ec787, 0x38d1c1d9, 0xcaa2fe8c, 0xd40b3698, 0xf581cfa6, 0x7ade28a5, 0xb78e26da, 0xadbfa43f, 0x3a9de42c, 0x78920d50, 0x5fcc9b6a, 0x7e466254, 0x8d13c2f6, 0xd8b8e890, 0x39f75e2e, 0xc3aff582, 0x5d80be9f, 0xd0937c69, 0xd52da96f, 0x2512b3cf, 0xac993bc8, 0x187da710, 0x9c636ee8, 0x3bbb7bdb, 0x267809cd, 0x5918f46e, 0x9ab701ec, 0x4f9aa883, 0x956e65e6, 0xffe67eaa, 0xbccf0821, 0x15e8e6ef, 0xe79bd9ba, 0x6f36ce4a, 0x9f09d4ea, 0xb07cd629, 0xa4b2af31, 0x3f23312a, 0xa59430c6, 0xa266c035, 0x4ebc3774, 0x82caa6fc, 0x90d0b0e0, 0xa7d81533, 0x04984af1, 0xecdaf741, 0xcd500e7f, 0x91f62f17, 0x4dd68d76, 0xefb04d43, 0xaa4d54cc, 0x9604dfe4, 0xd1b5e39e, 0x6a881b4c, 0x2c1fb8c1, 0x65517f46, 0x5eea049d, 0x8c355d01, 0x877473fa, 0x0b412efb, 0x671d5ab3, 0xdbd25292, 0x105633e9, 0xd647136d, 0xd7618c9a, 0xa10c7a37, 0xf8148e59, 0x133c89eb, 0xa927eece, 0x61c935b7, 0x1ce5ede1, 0x47b13c7a, 0xd2df599c, 0xf2733f55, 0x14ce7918, 0xc737bf73, 0xf7cdea53, 0xfdaa5b5f, 0x3d6f14df, 0x44db8678, 0xaff381ca, 0x68c43eb9, 0x24342c38, 0xa3405fc2, 0x1dc37216, 0xe2250cbc, 0x3c498b28, 0x0d9541ff, 0xa8017139, 0x0cb3de08, 0xb4e49cd8, 0x56c19064, 0xcb84617b, 0x32b670d5, 0x6c5c7448, 0xb85742d0];

    // Transformations for decryption key expansion
    var U1 = [0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3];
    var U2 = [0x00000000, 0x0b0e090d, 0x161c121a, 0x1d121b17, 0x2c382434, 0x27362d39, 0x3a24362e, 0x312a3f23, 0x58704868, 0x537e4165, 0x4e6c5a72, 0x4562537f, 0x74486c5c, 0x7f466551, 0x62547e46, 0x695a774b, 0xb0e090d0, 0xbbee99dd, 0xa6fc82ca, 0xadf28bc7, 0x9cd8b4e4, 0x97d6bde9, 0x8ac4a6fe, 0x81caaff3, 0xe890d8b8, 0xe39ed1b5, 0xfe8ccaa2, 0xf582c3af, 0xc4a8fc8c, 0xcfa6f581, 0xd2b4ee96, 0xd9bae79b, 0x7bdb3bbb, 0x70d532b6, 0x6dc729a1, 0x66c920ac, 0x57e31f8f, 0x5ced1682, 0x41ff0d95, 0x4af10498, 0x23ab73d3, 0x28a57ade, 0x35b761c9, 0x3eb968c4, 0x0f9357e7, 0x049d5eea, 0x198f45fd, 0x12814cf0, 0xcb3bab6b, 0xc035a266, 0xdd27b971, 0xd629b07c, 0xe7038f5f, 0xec0d8652, 0xf11f9d45, 0xfa119448, 0x934be303, 0x9845ea0e, 0x8557f119, 0x8e59f814, 0xbf73c737, 0xb47dce3a, 0xa96fd52d, 0xa261dc20, 0xf6ad766d, 0xfda37f60, 0xe0b16477, 0xebbf6d7a, 0xda955259, 0xd19b5b54, 0xcc894043, 0xc787494e, 0xaedd3e05, 0xa5d33708, 0xb8c12c1f, 0xb3cf2512, 0x82e51a31, 0x89eb133c, 0x94f9082b, 0x9ff70126, 0x464de6bd, 0x4d43efb0, 0x5051f4a7, 0x5b5ffdaa, 0x6a75c289, 0x617bcb84, 0x7c69d093, 0x7767d99e, 0x1e3daed5, 0x1533a7d8, 0x0821bccf, 0x032fb5c2, 0x32058ae1, 0x390b83ec, 0x241998fb, 0x2f1791f6, 0x8d764dd6, 0x867844db, 0x9b6a5fcc, 0x906456c1, 0xa14e69e2, 0xaa4060ef, 0xb7527bf8, 0xbc5c72f5, 0xd50605be, 0xde080cb3, 0xc31a17a4, 0xc8141ea9, 0xf93e218a, 0xf2302887, 0xef223390, 0xe42c3a9d, 0x3d96dd06, 0x3698d40b, 0x2b8acf1c, 0x2084c611, 0x11aef932, 0x1aa0f03f, 0x07b2eb28, 0x0cbce225, 0x65e6956e, 0x6ee89c63, 0x73fa8774, 0x78f48e79, 0x49deb15a, 0x42d0b857, 0x5fc2a340, 0x54ccaa4d, 0xf741ecda, 0xfc4fe5d7, 0xe15dfec0, 0xea53f7cd, 0xdb79c8ee, 0xd077c1e3, 0xcd65daf4, 0xc66bd3f9, 0xaf31a4b2, 0xa43fadbf, 0xb92db6a8, 0xb223bfa5, 0x83098086, 0x8807898b, 0x9515929c, 0x9e1b9b91, 0x47a17c0a, 0x4caf7507, 0x51bd6e10, 0x5ab3671d, 0x6b99583e, 0x60975133, 0x7d854a24, 0x768b4329, 0x1fd13462, 0x14df3d6f, 0x09cd2678, 0x02c32f75, 0x33e91056, 0x38e7195b, 0x25f5024c, 0x2efb0b41, 0x8c9ad761, 0x8794de6c, 0x9a86c57b, 0x9188cc76, 0xa0a2f355, 0xabacfa58, 0xb6bee14f, 0xbdb0e842, 0xd4ea9f09, 0xdfe49604, 0xc2f68d13, 0xc9f8841e, 0xf8d2bb3d, 0xf3dcb230, 0xeecea927, 0xe5c0a02a, 0x3c7a47b1, 0x37744ebc, 0x2a6655ab, 0x21685ca6, 0x10426385, 0x1b4c6a88, 0x065e719f, 0x0d507892, 0x640a0fd9, 0x6f0406d4, 0x72161dc3, 0x791814ce, 0x48322bed, 0x433c22e0, 0x5e2e39f7, 0x552030fa, 0x01ec9ab7, 0x0ae293ba, 0x17f088ad, 0x1cfe81a0, 0x2dd4be83, 0x26dab78e, 0x3bc8ac99, 0x30c6a594, 0x599cd2df, 0x5292dbd2, 0x4f80c0c5, 0x448ec9c8, 0x75a4f6eb, 0x7eaaffe6, 0x63b8e4f1, 0x68b6edfc, 0xb10c0a67, 0xba02036a, 0xa710187d, 0xac1e1170, 0x9d342e53, 0x963a275e, 0x8b283c49, 0x80263544, 0xe97c420f, 0xe2724b02, 0xff605015, 0xf46e5918, 0xc544663b, 0xce4a6f36, 0xd3587421, 0xd8567d2c, 0x7a37a10c, 0x7139a801, 0x6c2bb316, 0x6725ba1b, 0x560f8538, 0x5d018c35, 0x40139722, 0x4b1d9e2f, 0x2247e964, 0x2949e069, 0x345bfb7e, 0x3f55f273, 0x0e7fcd50, 0x0571c45d, 0x1863df4a, 0x136dd647, 0xcad731dc, 0xc1d938d1, 0xdccb23c6, 0xd7c52acb, 0xe6ef15e8, 0xede11ce5, 0xf0f307f2, 0xfbfd0eff, 0x92a779b4, 0x99a970b9, 0x84bb6bae, 0x8fb562a3, 0xbe9f5d80, 0xb591548d, 0xa8834f9a, 0xa38d4697];
    var U3 = [0x00000000, 0x0d0b0e09, 0x1a161c12, 0x171d121b, 0x342c3824, 0x3927362d, 0x2e3a2436, 0x23312a3f, 0x68587048, 0x65537e41, 0x724e6c5a, 0x7f456253, 0x5c74486c, 0x517f4665, 0x4662547e, 0x4b695a77, 0xd0b0e090, 0xddbbee99, 0xcaa6fc82, 0xc7adf28b, 0xe49cd8b4, 0xe997d6bd, 0xfe8ac4a6, 0xf381caaf, 0xb8e890d8, 0xb5e39ed1, 0xa2fe8cca, 0xaff582c3, 0x8cc4a8fc, 0x81cfa6f5, 0x96d2b4ee, 0x9bd9bae7, 0xbb7bdb3b, 0xb670d532, 0xa16dc729, 0xac66c920, 0x8f57e31f, 0x825ced16, 0x9541ff0d, 0x984af104, 0xd323ab73, 0xde28a57a, 0xc935b761, 0xc43eb968, 0xe70f9357, 0xea049d5e, 0xfd198f45, 0xf012814c, 0x6bcb3bab, 0x66c035a2, 0x71dd27b9, 0x7cd629b0, 0x5fe7038f, 0x52ec0d86, 0x45f11f9d, 0x48fa1194, 0x03934be3, 0x0e9845ea, 0x198557f1, 0x148e59f8, 0x37bf73c7, 0x3ab47dce, 0x2da96fd5, 0x20a261dc, 0x6df6ad76, 0x60fda37f, 0x77e0b164, 0x7aebbf6d, 0x59da9552, 0x54d19b5b, 0x43cc8940, 0x4ec78749, 0x05aedd3e, 0x08a5d337, 0x1fb8c12c, 0x12b3cf25, 0x3182e51a, 0x3c89eb13, 0x2b94f908, 0x269ff701, 0xbd464de6, 0xb04d43ef, 0xa75051f4, 0xaa5b5ffd, 0x896a75c2, 0x84617bcb, 0x937c69d0, 0x9e7767d9, 0xd51e3dae, 0xd81533a7, 0xcf0821bc, 0xc2032fb5, 0xe132058a, 0xec390b83, 0xfb241998, 0xf62f1791, 0xd68d764d, 0xdb867844, 0xcc9b6a5f, 0xc1906456, 0xe2a14e69, 0xefaa4060, 0xf8b7527b, 0xf5bc5c72, 0xbed50605, 0xb3de080c, 0xa4c31a17, 0xa9c8141e, 0x8af93e21, 0x87f23028, 0x90ef2233, 0x9de42c3a, 0x063d96dd, 0x0b3698d4, 0x1c2b8acf, 0x112084c6, 0x3211aef9, 0x3f1aa0f0, 0x2807b2eb, 0x250cbce2, 0x6e65e695, 0x636ee89c, 0x7473fa87, 0x7978f48e, 0x5a49deb1, 0x5742d0b8, 0x405fc2a3, 0x4d54ccaa, 0xdaf741ec, 0xd7fc4fe5, 0xc0e15dfe, 0xcdea53f7, 0xeedb79c8, 0xe3d077c1, 0xf4cd65da, 0xf9c66bd3, 0xb2af31a4, 0xbfa43fad, 0xa8b92db6, 0xa5b223bf, 0x86830980, 0x8b880789, 0x9c951592, 0x919e1b9b, 0x0a47a17c, 0x074caf75, 0x1051bd6e, 0x1d5ab367, 0x3e6b9958, 0x33609751, 0x247d854a, 0x29768b43, 0x621fd134, 0x6f14df3d, 0x7809cd26, 0x7502c32f, 0x5633e910, 0x5b38e719, 0x4c25f502, 0x412efb0b, 0x618c9ad7, 0x6c8794de, 0x7b9a86c5, 0x769188cc, 0x55a0a2f3, 0x58abacfa, 0x4fb6bee1, 0x42bdb0e8, 0x09d4ea9f, 0x04dfe496, 0x13c2f68d, 0x1ec9f884, 0x3df8d2bb, 0x30f3dcb2, 0x27eecea9, 0x2ae5c0a0, 0xb13c7a47, 0xbc37744e, 0xab2a6655, 0xa621685c, 0x85104263, 0x881b4c6a, 0x9f065e71, 0x920d5078, 0xd9640a0f, 0xd46f0406, 0xc372161d, 0xce791814, 0xed48322b, 0xe0433c22, 0xf75e2e39, 0xfa552030, 0xb701ec9a, 0xba0ae293, 0xad17f088, 0xa01cfe81, 0x832dd4be, 0x8e26dab7, 0x993bc8ac, 0x9430c6a5, 0xdf599cd2, 0xd25292db, 0xc54f80c0, 0xc8448ec9, 0xeb75a4f6, 0xe67eaaff, 0xf163b8e4, 0xfc68b6ed, 0x67b10c0a, 0x6aba0203, 0x7da71018, 0x70ac1e11, 0x539d342e, 0x5e963a27, 0x498b283c, 0x44802635, 0x0fe97c42, 0x02e2724b, 0x15ff6050, 0x18f46e59, 0x3bc54466, 0x36ce4a6f, 0x21d35874, 0x2cd8567d, 0x0c7a37a1, 0x017139a8, 0x166c2bb3, 0x1b6725ba, 0x38560f85, 0x355d018c, 0x22401397, 0x2f4b1d9e, 0x642247e9, 0x692949e0, 0x7e345bfb, 0x733f55f2, 0x500e7fcd, 0x5d0571c4, 0x4a1863df, 0x47136dd6, 0xdccad731, 0xd1c1d938, 0xc6dccb23, 0xcbd7c52a, 0xe8e6ef15, 0xe5ede11c, 0xf2f0f307, 0xfffbfd0e, 0xb492a779, 0xb999a970, 0xae84bb6b, 0xa38fb562, 0x80be9f5d, 0x8db59154, 0x9aa8834f, 0x97a38d46];
    var U4 = [0x00000000, 0x090d0b0e, 0x121a161c, 0x1b171d12, 0x24342c38, 0x2d392736, 0x362e3a24, 0x3f23312a, 0x48685870, 0x4165537e, 0x5a724e6c, 0x537f4562, 0x6c5c7448, 0x65517f46, 0x7e466254, 0x774b695a, 0x90d0b0e0, 0x99ddbbee, 0x82caa6fc, 0x8bc7adf2, 0xb4e49cd8, 0xbde997d6, 0xa6fe8ac4, 0xaff381ca, 0xd8b8e890, 0xd1b5e39e, 0xcaa2fe8c, 0xc3aff582, 0xfc8cc4a8, 0xf581cfa6, 0xee96d2b4, 0xe79bd9ba, 0x3bbb7bdb, 0x32b670d5, 0x29a16dc7, 0x20ac66c9, 0x1f8f57e3, 0x16825ced, 0x0d9541ff, 0x04984af1, 0x73d323ab, 0x7ade28a5, 0x61c935b7, 0x68c43eb9, 0x57e70f93, 0x5eea049d, 0x45fd198f, 0x4cf01281, 0xab6bcb3b, 0xa266c035, 0xb971dd27, 0xb07cd629, 0x8f5fe703, 0x8652ec0d, 0x9d45f11f, 0x9448fa11, 0xe303934b, 0xea0e9845, 0xf1198557, 0xf8148e59, 0xc737bf73, 0xce3ab47d, 0xd52da96f, 0xdc20a261, 0x766df6ad, 0x7f60fda3, 0x6477e0b1, 0x6d7aebbf, 0x5259da95, 0x5b54d19b, 0x4043cc89, 0x494ec787, 0x3e05aedd, 0x3708a5d3, 0x2c1fb8c1, 0x2512b3cf, 0x1a3182e5, 0x133c89eb, 0x082b94f9, 0x01269ff7, 0xe6bd464d, 0xefb04d43, 0xf4a75051, 0xfdaa5b5f, 0xc2896a75, 0xcb84617b, 0xd0937c69, 0xd99e7767, 0xaed51e3d, 0xa7d81533, 0xbccf0821, 0xb5c2032f, 0x8ae13205, 0x83ec390b, 0x98fb2419, 0x91f62f17, 0x4dd68d76, 0x44db8678, 0x5fcc9b6a, 0x56c19064, 0x69e2a14e, 0x60efaa40, 0x7bf8b752, 0x72f5bc5c, 0x05bed506, 0x0cb3de08, 0x17a4c31a, 0x1ea9c814, 0x218af93e, 0x2887f230, 0x3390ef22, 0x3a9de42c, 0xdd063d96, 0xd40b3698, 0xcf1c2b8a, 0xc6112084, 0xf93211ae, 0xf03f1aa0, 0xeb2807b2, 0xe2250cbc, 0x956e65e6, 0x9c636ee8, 0x877473fa, 0x8e7978f4, 0xb15a49de, 0xb85742d0, 0xa3405fc2, 0xaa4d54cc, 0xecdaf741, 0xe5d7fc4f, 0xfec0e15d, 0xf7cdea53, 0xc8eedb79, 0xc1e3d077, 0xdaf4cd65, 0xd3f9c66b, 0xa4b2af31, 0xadbfa43f, 0xb6a8b92d, 0xbfa5b223, 0x80868309, 0x898b8807, 0x929c9515, 0x9b919e1b, 0x7c0a47a1, 0x75074caf, 0x6e1051bd, 0x671d5ab3, 0x583e6b99, 0x51336097, 0x4a247d85, 0x4329768b, 0x34621fd1, 0x3d6f14df, 0x267809cd, 0x2f7502c3, 0x105633e9, 0x195b38e7, 0x024c25f5, 0x0b412efb, 0xd7618c9a, 0xde6c8794, 0xc57b9a86, 0xcc769188, 0xf355a0a2, 0xfa58abac, 0xe14fb6be, 0xe842bdb0, 0x9f09d4ea, 0x9604dfe4, 0x8d13c2f6, 0x841ec9f8, 0xbb3df8d2, 0xb230f3dc, 0xa927eece, 0xa02ae5c0, 0x47b13c7a, 0x4ebc3774, 0x55ab2a66, 0x5ca62168, 0x63851042, 0x6a881b4c, 0x719f065e, 0x78920d50, 0x0fd9640a, 0x06d46f04, 0x1dc37216, 0x14ce7918, 0x2bed4832, 0x22e0433c, 0x39f75e2e, 0x30fa5520, 0x9ab701ec, 0x93ba0ae2, 0x88ad17f0, 0x81a01cfe, 0xbe832dd4, 0xb78e26da, 0xac993bc8, 0xa59430c6, 0xd2df599c, 0xdbd25292, 0xc0c54f80, 0xc9c8448e, 0xf6eb75a4, 0xffe67eaa, 0xe4f163b8, 0xedfc68b6, 0x0a67b10c, 0x036aba02, 0x187da710, 0x1170ac1e, 0x2e539d34, 0x275e963a, 0x3c498b28, 0x35448026, 0x420fe97c, 0x4b02e272, 0x5015ff60, 0x5918f46e, 0x663bc544, 0x6f36ce4a, 0x7421d358, 0x7d2cd856, 0xa10c7a37, 0xa8017139, 0xb3166c2b, 0xba1b6725, 0x8538560f, 0x8c355d01, 0x97224013, 0x9e2f4b1d, 0xe9642247, 0xe0692949, 0xfb7e345b, 0xf2733f55, 0xcd500e7f, 0xc45d0571, 0xdf4a1863, 0xd647136d, 0x31dccad7, 0x38d1c1d9, 0x23c6dccb, 0x2acbd7c5, 0x15e8e6ef, 0x1ce5ede1, 0x07f2f0f3, 0x0efffbfd, 0x79b492a7, 0x70b999a9, 0x6bae84bb, 0x62a38fb5, 0x5d80be9f, 0x548db591, 0x4f9aa883, 0x4697a38d];

    function convertToInt32(bytes) {
        var result = [];
        for (var i = 0; i < bytes.length; i += 4) {
            result.push(
                (bytes[i    ] << 24) |
                (bytes[i + 1] << 16) |
                (bytes[i + 2] <<  8) |
                 bytes[i + 3]
            );
        }
        return result;
    }

    var AES = function(key) {
        if (!(this instanceof AES)) {
            throw Error('AES must be instanitated with `new`');
        }

        Object.defineProperty(this, 'key', {
            value: coerceArray(key, true)
        });

        this._prepare();
    }


    AES.prototype._prepare = function() {

        var rounds = numberOfRounds[this.key.length];
        if (rounds == null) {
            throw new Error('invalid key size (must be 16, 24 or 32 bytes)');
        }

        // encryption round keys
        this._Ke = [];

        // decryption round keys
        this._Kd = [];

        for (var i = 0; i <= rounds; i++) {
            this._Ke.push([0, 0, 0, 0]);
            this._Kd.push([0, 0, 0, 0]);
        }

        var roundKeyCount = (rounds + 1) * 4;
        var KC = this.key.length / 4;

        // convert the key into ints
        var tk = convertToInt32(this.key);

        // copy values into round key arrays
        var index;
        for (var i = 0; i < KC; i++) {
            index = i >> 2;
            this._Ke[index][i % 4] = tk[i];
            this._Kd[rounds - index][i % 4] = tk[i];
        }

        // key expansion (fips-197 section 5.2)
        var rconpointer = 0;
        var t = KC, tt;
        while (t < roundKeyCount) {
            tt = tk[KC - 1];
            tk[0] ^= ((S[(tt >> 16) & 0xFF] << 24) ^
                      (S[(tt >>  8) & 0xFF] << 16) ^
                      (S[ tt        & 0xFF] <<  8) ^
                       S[(tt >> 24) & 0xFF]        ^
                      (rcon[rconpointer] << 24));
            rconpointer += 1;

            // key expansion (for non-256 bit)
            if (KC != 8) {
                for (var i = 1; i < KC; i++) {
                    tk[i] ^= tk[i - 1];
                }

            // key expansion for 256-bit keys is "slightly different" (fips-197)
            } else {
                for (var i = 1; i < (KC / 2); i++) {
                    tk[i] ^= tk[i - 1];
                }
                tt = tk[(KC / 2) - 1];

                tk[KC / 2] ^= (S[ tt        & 0xFF]        ^
                              (S[(tt >>  8) & 0xFF] <<  8) ^
                              (S[(tt >> 16) & 0xFF] << 16) ^
                              (S[(tt >> 24) & 0xFF] << 24));

                for (var i = (KC / 2) + 1; i < KC; i++) {
                    tk[i] ^= tk[i - 1];
                }
            }

            // copy values into round key arrays
            var i = 0, r, c;
            while (i < KC && t < roundKeyCount) {
                r = t >> 2;
                c = t % 4;
                this._Ke[r][c] = tk[i];
                this._Kd[rounds - r][c] = tk[i++];
                t++;
            }
        }

        // inverse-cipher-ify the decryption round key (fips-197 section 5.3)
        for (var r = 1; r < rounds; r++) {
            for (var c = 0; c < 4; c++) {
                tt = this._Kd[r][c];
                this._Kd[r][c] = (U1[(tt >> 24) & 0xFF] ^
                                  U2[(tt >> 16) & 0xFF] ^
                                  U3[(tt >>  8) & 0xFF] ^
                                  U4[ tt        & 0xFF]);
            }
        }
    }

    AES.prototype.encrypt = function(plaintext) {
        if (plaintext.length != 16) {
            throw new Error('invalid plaintext size (must be 16 bytes)');
        }

        var rounds = this._Ke.length - 1;
        var a = [0, 0, 0, 0];

        // convert plaintext to (ints ^ key)
        var t = convertToInt32(plaintext);
        for (var i = 0; i < 4; i++) {
            t[i] ^= this._Ke[0][i];
        }

        // apply round transforms
        for (var r = 1; r < rounds; r++) {
            for (var i = 0; i < 4; i++) {
                a[i] = (T1[(t[ i         ] >> 24) & 0xff] ^
                        T2[(t[(i + 1) % 4] >> 16) & 0xff] ^
                        T3[(t[(i + 2) % 4] >>  8) & 0xff] ^
                        T4[ t[(i + 3) % 4]        & 0xff] ^
                        this._Ke[r][i]);
            }
            t = a.slice();
        }

        // the last round is special
        var result = createArray(16), tt;
        for (var i = 0; i < 4; i++) {
            tt = this._Ke[rounds][i];
            result[4 * i    ] = (S[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;
            result[4 * i + 1] = (S[(t[(i + 1) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;
            result[4 * i + 2] = (S[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;
            result[4 * i + 3] = (S[ t[(i + 3) % 4]        & 0xff] ^  tt       ) & 0xff;
        }

        return result;
    }

    AES.prototype.decrypt = function(ciphertext) {
        if (ciphertext.length != 16) {
            throw new Error('invalid ciphertext size (must be 16 bytes)');
        }

        var rounds = this._Kd.length - 1;
        var a = [0, 0, 0, 0];

        // convert plaintext to (ints ^ key)
        var t = convertToInt32(ciphertext);
        for (var i = 0; i < 4; i++) {
            t[i] ^= this._Kd[0][i];
        }

        // apply round transforms
        for (var r = 1; r < rounds; r++) {
            for (var i = 0; i < 4; i++) {
                a[i] = (T5[(t[ i          ] >> 24) & 0xff] ^
                        T6[(t[(i + 3) % 4] >> 16) & 0xff] ^
                        T7[(t[(i + 2) % 4] >>  8) & 0xff] ^
                        T8[ t[(i + 1) % 4]        & 0xff] ^
                        this._Kd[r][i]);
            }
            t = a.slice();
        }

        // the last round is special
        var result = createArray(16), tt;
        for (var i = 0; i < 4; i++) {
            tt = this._Kd[rounds][i];
            result[4 * i    ] = (Si[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;
            result[4 * i + 1] = (Si[(t[(i + 3) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;
            result[4 * i + 2] = (Si[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;
            result[4 * i + 3] = (Si[ t[(i + 1) % 4]        & 0xff] ^  tt       ) & 0xff;
        }

        return result;
    }


    /**
     *  Mode Of Operation - Electonic Codebook (ECB)
     */
    var ModeOfOperationECB = function(key) {
        if (!(this instanceof ModeOfOperationECB)) {
            throw Error('AES must be instanitated with `new`');
        }

        this.description = "Electronic Code Block";
        this.name = "ecb";

        this._aes = new AES(key);
    }

    ModeOfOperationECB.prototype.encrypt = function(plaintext) {
        plaintext = coerceArray(plaintext);

        if ((plaintext.length % 16) !== 0) {
            throw new Error('invalid plaintext size (must be multiple of 16 bytes)');
        }

        var ciphertext = createArray(plaintext.length);
        var block = createArray(16);

        for (var i = 0; i < plaintext.length; i += 16) {
            copyArray(plaintext, block, 0, i, i + 16);
            block = this._aes.encrypt(block);
            copyArray(block, ciphertext, i);
        }

        return ciphertext;
    }

    ModeOfOperationECB.prototype.decrypt = function(ciphertext) {
        ciphertext = coerceArray(ciphertext);

        if ((ciphertext.length % 16) !== 0) {
            throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');
        }

        var plaintext = createArray(ciphertext.length);
        var block = createArray(16);

        for (var i = 0; i < ciphertext.length; i += 16) {
            copyArray(ciphertext, block, 0, i, i + 16);
            block = this._aes.decrypt(block);
            copyArray(block, plaintext, i);
        }

        return plaintext;
    }


    /**
     *  Mode Of Operation - Cipher Block Chaining (CBC)
     */
    var ModeOfOperationCBC = function(key, iv) {
        if (!(this instanceof ModeOfOperationCBC)) {
            throw Error('AES must be instanitated with `new`');
        }

        this.description = "Cipher Block Chaining";
        this.name = "cbc";

        if (!iv) {
            iv = createArray(16);

        } else if (iv.length != 16) {
            throw new Error('invalid initialation vector size (must be 16 bytes)');
        }

        this._lastCipherblock = coerceArray(iv, true);

        this._aes = new AES(key);
    }

    ModeOfOperationCBC.prototype.encrypt = function(plaintext) {
        plaintext = coerceArray(plaintext);

        if ((plaintext.length % 16) !== 0) {
            throw new Error('invalid plaintext size (must be multiple of 16 bytes)');
        }

        var ciphertext = createArray(plaintext.length);
        var block = createArray(16);

        for (var i = 0; i < plaintext.length; i += 16) {
            copyArray(plaintext, block, 0, i, i + 16);

            for (var j = 0; j < 16; j++) {
                block[j] ^= this._lastCipherblock[j];
            }

            this._lastCipherblock = this._aes.encrypt(block);
            copyArray(this._lastCipherblock, ciphertext, i);
        }

        return ciphertext;
    }

    ModeOfOperationCBC.prototype.decrypt = function(ciphertext) {
        ciphertext = coerceArray(ciphertext);

        if ((ciphertext.length % 16) !== 0) {
            throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');
        }

        var plaintext = createArray(ciphertext.length);
        var block = createArray(16);

        for (var i = 0; i < ciphertext.length; i += 16) {
            copyArray(ciphertext, block, 0, i, i + 16);
            block = this._aes.decrypt(block);

            for (var j = 0; j < 16; j++) {
                plaintext[i + j] = block[j] ^ this._lastCipherblock[j];
            }

            copyArray(ciphertext, this._lastCipherblock, 0, i, i + 16);
        }

        return plaintext;
    }


    /**
     *  Mode Of Operation - Cipher Feedback (CFB)
     */
    var ModeOfOperationCFB = function(key, iv, segmentSize) {
        if (!(this instanceof ModeOfOperationCFB)) {
            throw Error('AES must be instanitated with `new`');
        }

        this.description = "Cipher Feedback";
        this.name = "cfb";

        if (!iv) {
            iv = createArray(16);

        } else if (iv.length != 16) {
            throw new Error('invalid initialation vector size (must be 16 size)');
        }

        if (!segmentSize) { segmentSize = 1; }

        this.segmentSize = segmentSize;

        this._shiftRegister = coerceArray(iv, true);

        this._aes = new AES(key);
    }

    ModeOfOperationCFB.prototype.encrypt = function(plaintext) {
        if ((plaintext.length % this.segmentSize) != 0) {
            throw new Error('invalid plaintext size (must be segmentSize bytes)');
        }

        var encrypted = coerceArray(plaintext, true);

        var xorSegment;
        for (var i = 0; i < encrypted.length; i += this.segmentSize) {
            xorSegment = this._aes.encrypt(this._shiftRegister);
            for (var j = 0; j < this.segmentSize; j++) {
                encrypted[i + j] ^= xorSegment[j];
            }

            // Shift the register
            copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
            copyArray(encrypted, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
        }

        return encrypted;
    }

    ModeOfOperationCFB.prototype.decrypt = function(ciphertext) {
        if ((ciphertext.length % this.segmentSize) != 0) {
            throw new Error('invalid ciphertext size (must be segmentSize bytes)');
        }

        var plaintext = coerceArray(ciphertext, true);

        var xorSegment;
        for (var i = 0; i < plaintext.length; i += this.segmentSize) {
            xorSegment = this._aes.encrypt(this._shiftRegister);

            for (var j = 0; j < this.segmentSize; j++) {
                plaintext[i + j] ^= xorSegment[j];
            }

            // Shift the register
            copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
            copyArray(ciphertext, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
        }

        return plaintext;
    }

    /**
     *  Mode Of Operation - Output Feedback (OFB)
     */
    var ModeOfOperationOFB = function(key, iv) {
        if (!(this instanceof ModeOfOperationOFB)) {
            throw Error('AES must be instanitated with `new`');
        }

        this.description = "Output Feedback";
        this.name = "ofb";

        if (!iv) {
            iv = createArray(16);

        } else if (iv.length != 16) {
            throw new Error('invalid initialation vector size (must be 16 bytes)');
        }

        this._lastPrecipher = coerceArray(iv, true);
        this._lastPrecipherIndex = 16;

        this._aes = new AES(key);
    }

    ModeOfOperationOFB.prototype.encrypt = function(plaintext) {
        var encrypted = coerceArray(plaintext, true);

        for (var i = 0; i < encrypted.length; i++) {
            if (this._lastPrecipherIndex === 16) {
                this._lastPrecipher = this._aes.encrypt(this._lastPrecipher);
                this._lastPrecipherIndex = 0;
            }
            encrypted[i] ^= this._lastPrecipher[this._lastPrecipherIndex++];
        }

        return encrypted;
    }

    // Decryption is symetric
    ModeOfOperationOFB.prototype.decrypt = ModeOfOperationOFB.prototype.encrypt;


    /**
     *  Counter object for CTR common mode of operation
     */
    var Counter = function(initialValue) {
        if (!(this instanceof Counter)) {
            throw Error('Counter must be instanitated with `new`');
        }

        // We allow 0, but anything false-ish uses the default 1
        if (initialValue !== 0 && !initialValue) { initialValue = 1; }

        if (typeof(initialValue) === 'number') {
            this._counter = createArray(16);
            this.setValue(initialValue);

        } else {
            this.setBytes(initialValue);
        }
    }

    Counter.prototype.setValue = function(value) {
        if (typeof(value) !== 'number' || parseInt(value) != value) {
            throw new Error('invalid counter value (must be an integer)');
        }

        // We cannot safely handle numbers beyond the safe range for integers
        if (value > Number.MAX_SAFE_INTEGER) {
            throw new Error('integer value out of safe range');
        }

        for (var index = 15; index >= 0; --index) {
            this._counter[index] = value % 256;
            value = parseInt(value / 256);
        }
    }

    Counter.prototype.setBytes = function(bytes) {
        bytes = coerceArray(bytes, true);

        if (bytes.length != 16) {
            throw new Error('invalid counter bytes size (must be 16 bytes)');
        }

        this._counter = bytes;
    };

    Counter.prototype.increment = function() {
        for (var i = 15; i >= 0; i--) {
            if (this._counter[i] === 255) {
                this._counter[i] = 0;
            } else {
                this._counter[i]++;
                break;
            }
        }
    }


    /**
     *  Mode Of Operation - Counter (CTR)
     */
    var ModeOfOperationCTR = function(key, counter) {
        if (!(this instanceof ModeOfOperationCTR)) {
            throw Error('AES must be instanitated with `new`');
        }

        this.description = "Counter";
        this.name = "ctr";

        if (!(counter instanceof Counter)) {
            counter = new Counter(counter)
        }

        this._counter = counter;

        this._remainingCounter = null;
        this._remainingCounterIndex = 16;

        this._aes = new AES(key);
    }

    ModeOfOperationCTR.prototype.encrypt = function(plaintext) {
        var encrypted = coerceArray(plaintext, true);

        for (var i = 0; i < encrypted.length; i++) {
            if (this._remainingCounterIndex === 16) {
                this._remainingCounter = this._aes.encrypt(this._counter._counter);
                this._remainingCounterIndex = 0;
                this._counter.increment();
            }
            encrypted[i] ^= this._remainingCounter[this._remainingCounterIndex++];
        }

        return encrypted;
    }

    // Decryption is symetric
    ModeOfOperationCTR.prototype.decrypt = ModeOfOperationCTR.prototype.encrypt;


    ///////////////////////
    // Padding

    // See:https://tools.ietf.org/html/rfc2315
    function pkcs7pad(data) {
        data = coerceArray(data, true);
        var padder = 16 - (data.length % 16);
        var result = createArray(data.length + padder);
        copyArray(data, result);
        for (var i = data.length; i < result.length; i++) {
            result[i] = padder;
        }
        return result;
    }

    function pkcs7strip(data) {
        data = coerceArray(data, true);
        if (data.length < 16) { throw new Error('PKCS#7 invalid length'); }

        var padder = data[data.length - 1];
        if (padder > 16) { throw new Error('PKCS#7 padding byte out of range'); }

        var length = data.length - padder;
        for (var i = 0; i < padder; i++) {
            if (data[length + i] !== padder) {
                throw new Error('PKCS#7 invalid padding byte');
            }
        }

        var result = createArray(length);
        copyArray(data, result, 0, 0, length);
        return result;
    }

    ///////////////////////
    // Exporting


    // The block cipher
    var aesjs = {
        AES: AES,
        Counter: Counter,

        ModeOfOperation: {
            ecb: ModeOfOperationECB,
            cbc: ModeOfOperationCBC,
            cfb: ModeOfOperationCFB,
            ofb: ModeOfOperationOFB,
            ctr: ModeOfOperationCTR
        },

        utils: {
            hex: convertHex,
            utf8: convertUtf8
        },

        padding: {
            pkcs7: {
                pad: pkcs7pad,
                strip: pkcs7strip
            }
        },

        _arrayTest: {
            coerceArray: coerceArray,
            createArray: createArray,
            copyArray: copyArray,
        }
    };


    // node.js
    if (true) {
        module.exports = aesjs

    // RequireJS/AMD
    // http://www.requirejs.org/docs/api.html
    // https://github.com/amdjs/amdjs-api/wiki/AMD
    } else {}


})(this);


/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 2);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = __webpack_require__(242);

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * 循环左移
 */
function rotl(x, n) {
  var result = [];
  var a = ~~(n / 8); // 偏移 a 字节
  var b = n % 8; // 偏移 b 位
  for (var i = 0, len = x.length; i < len; i++) {
    // current << b + (current + 1) >>> (8 - b)
    result[i] = (x[(i + a) % len] << b & 0xff) + (x[(i + a + 1) % len] >>> 8 - b & 0xff);
  }
  return result;
}

/**
 * 二进制异或运算
 */
function xor(x, y) {
  var result = [];
  for (var i = x.length - 1; i >= 0; i--) {
    result[i] = (x[i] ^ y[i]) & 0xff;
  }return result;
}

/**
 * 二进制与运算
 */
function and(x, y) {
  var result = [];
  for (var i = x.length - 1; i >= 0; i--) {
    result[i] = x[i] & y[i] & 0xff;
  }return result;
}

/**
 * 二进制或运算
 */
function or(x, y) {
  var result = [];
  for (var i = x.length - 1; i >= 0; i--) {
    result[i] = (x[i] | y[i]) & 0xff;
  }return result;
}

/**
 * 二进制与运算
 */
function add(x, y) {
  var result = [];
  var temp = 0;
  for (var i = x.length - 1; i >= 0; i--) {
    var sum = x[i] + y[i] + temp;
    if (sum > 0xff) {
      temp = 1;
      result[i] = sum & 0xff;
    } else {
      temp = 0;
      result[i] = sum & 0xff;
    }
  }
  return result;
}

/**
 * 二进制非运算
 */
function not(x) {
  var result = [];
  for (var i = x.length - 1; i >= 0; i--) {
    result[i] = ~x[i] & 0xff;
  }return result;
}

/**
 * 压缩函数中的置换函数 P1(X) = X xor (X <<< 9) xor (X <<< 17)
 */
function P0(X) {
  return xor(xor(X, rotl(X, 9)), rotl(X, 17));
}

/**
 * 消息扩展中的置换函数 P1(X) = X xor (X <<< 15) xor (X <<< 23)
 */
function P1(X) {
  return xor(xor(X, rotl(X, 15)), rotl(X, 23));
}

/**
 * 布尔函数 FF
 */
function FF(X, Y, Z, j) {
  return j >= 0 && j <= 15 ? xor(xor(X, Y), Z) : or(or(and(X, Y), and(X, Z)), and(Y, Z));
}

/**
 * 布尔函数 GG
 */
function GG(X, Y, Z, j) {
  return j >= 0 && j <= 15 ? xor(xor(X, Y), Z) : or(and(X, Y), and(not(X), Z));
}

/**
 * 压缩函数
 */
function CF(V, Bi) {
  // 消息扩展
  var W = [];
  var M = []; // W'

  // 将消息分组B划分为 16 个字 W0， W1，……，W15
  for (var i = 0; i < 16; i++) {
    var start = i * 4;
    W.push(Bi.slice(start, start + 4));
  }

  // W16 ～ W67：W[j] <- P1(W[j−16] xor W[j−9] xor (W[j−3] <<< 15)) xor (W[j−13] <<< 7) xor W[j−6]
  for (var j = 16; j < 68; j++) {
    W.push(xor(xor(P1(xor(xor(W[j - 16], W[j - 9]), rotl(W[j - 3], 15))), rotl(W[j - 13], 7)), W[j - 6]));
  }

  // W′0 ～ W′63：W′[j] = W[j] xor W[j+4]
  for (var _j = 0; _j < 64; _j++) {
    M.push(xor(W[_j], W[_j + 4]));
  }

  // 压缩
  var T1 = [0x79, 0xcc, 0x45, 0x19];
  var T2 = [0x7a, 0x87, 0x9d, 0x8a];
  // 字寄存器
  var A = V.slice(0, 4);
  var B = V.slice(4, 8);
  var C = V.slice(8, 12);
  var D = V.slice(12, 16);
  var E = V.slice(16, 20);
  var F = V.slice(20, 24);
  var G = V.slice(24, 28);
  var H = V.slice(28, 32);
  // 中间变量
  var SS1 = void 0;
  var SS2 = void 0;
  var TT1 = void 0;
  var TT2 = void 0;
  for (var _j2 = 0; _j2 < 64; _j2++) {
    var T = _j2 >= 0 && _j2 <= 15 ? T1 : T2;
    SS1 = rotl(add(add(rotl(A, 12), E), rotl(T, _j2)), 7);
    SS2 = xor(SS1, rotl(A, 12));

    TT1 = add(add(add(FF(A, B, C, _j2), D), SS2), M[_j2]);
    TT2 = add(add(add(GG(E, F, G, _j2), H), SS1), W[_j2]);

    D = C;
    C = rotl(B, 9);
    B = A;
    A = TT1;
    H = G;
    G = rotl(F, 19);
    F = E;
    E = P0(TT2);
  }

  return xor([].concat(A, B, C, D, E, F, G, H), V);
}

module.exports = function (array) {
  // 填充
  var len = array.length * 8;

  // k 是满足 len + 1 + k = 448mod512 的最小的非负整数
  var k = len % 512;
  // 如果 448 <= (512 % len) < 512，需要多补充 (len % 448) 比特'0'以满足总比特长度为512的倍数
  k = k >= 448 ? 512 - k % 448 - 1 : 448 - k - 1;

  // 填充
  var kArr = new Array((k - 7) / 8);
  for (var i = 0, _len = kArr.length; i < _len; i++) {
    kArr[i] = 0;
  }var lenArr = [];
  len = len.toString(2);
  for (var _i = 7; _i >= 0; _i--) {
    if (len.length > 8) {
      var start = len.length - 8;
      lenArr[_i] = parseInt(len.substr(start), 2);
      len = len.substr(0, start);
    } else if (len.length > 0) {
      lenArr[_i] = parseInt(len, 2);
      len = '';
    } else {
      lenArr[_i] = 0;
    }
  }
  var m = [].concat(array, [0x80], kArr, lenArr);

  // 迭代压缩
  var n = m.length / 64;
  var V = [0x73, 0x80, 0x16, 0x6f, 0x49, 0x14, 0xb2, 0xb9, 0x17, 0x24, 0x42, 0xd7, 0xda, 0x8a, 0x06, 0x00, 0xa9, 0x6f, 0x30, 0xbc, 0x16, 0x31, 0x38, 0xaa, 0xe3, 0x8d, 0xee, 0x4d, 0xb0, 0xfb, 0x0e, 0x4e];
  for (var _i2 = 0; _i2 < n; _i2++) {
    var _start = 64 * _i2;
    var B = m.slice(_start, _start + 64);
    V = CF(V, B);
  }
  return V;
};

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  sm2: __webpack_require__(3),
  sm3: __webpack_require__(7),
  sm4: __webpack_require__(8)
};

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* eslint-disable no-use-before-define */
var _require = __webpack_require__(0),
    BigInteger = _require.BigInteger;

var _require2 = __webpack_require__(4),
    encodeDer = _require2.encodeDer,
    decodeDer = _require2.decodeDer;

var _ = __webpack_require__(5);
var sm3 = __webpack_require__(1);

var _$generateEcparam = _.generateEcparam(),
    G = _$generateEcparam.G,
    curve = _$generateEcparam.curve,
    n = _$generateEcparam.n;

var C1C2C3 = 0;

/**
 * 加密
 */
function doEncrypt(msg, publicKey) {
  var cipherMode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;

  msg = typeof msg === 'string' ? _.hexToArray(_.utf8ToHex(msg)) : Array.prototype.slice.call(msg);
  publicKey = _.getGlobalCurve().decodePointHex(publicKey); // 先将公钥转成点

  var keypair = _.generateKeyPairHex();
  var k = new BigInteger(keypair.privateKey, 16); // 随机数 k

  // c1 = k * G
  var c1 = keypair.publicKey;
  if (c1.length > 128) c1 = c1.substr(c1.length - 128);

  // (x2, y2) = k * publicKey
  var p = publicKey.multiply(k);
  var x2 = _.hexToArray(_.leftPad(p.getX().toBigInteger().toRadix(16), 64));
  var y2 = _.hexToArray(_.leftPad(p.getY().toBigInteger().toRadix(16), 64));

  // c3 = hash(x2 || msg || y2)
  var c3 = _.arrayToHex(sm3([].concat(x2, msg, y2)));

  var ct = 1;
  var offset = 0;
  var t = []; // 256 位
  var z = [].concat(x2, y2);
  var nextT = function nextT() {
    // (1) Hai = hash(z || ct)
    // (2) ct++
    t = sm3([].concat(z, [ct >> 24 & 0x00ff, ct >> 16 & 0x00ff, ct >> 8 & 0x00ff, ct & 0x00ff]));
    ct++;
    offset = 0;
  };
  nextT(); // 先生成 Ha1

  for (var i = 0, len = msg.length; i < len; i++) {
    // t = Ha1 || Ha2 || Ha3 || Ha4
    if (offset === t.length) nextT();

    // c2 = msg ^ t
    msg[i] ^= t[offset++] & 0xff;
  }
  var c2 = _.arrayToHex(msg);

  return cipherMode === C1C2C3 ? c1 + c2 + c3 : c1 + c3 + c2;
}

/**
 * 解密
 */
function doDecrypt(encryptData, privateKey) {
  var cipherMode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;

  var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},
      _ref$output = _ref.output,
      output = _ref$output === undefined ? 'string' : _ref$output;

  privateKey = new BigInteger(privateKey, 16);

  var c3 = encryptData.substr(128, 64);
  var c2 = encryptData.substr(128 + 64);

  if (cipherMode === C1C2C3) {
    c3 = encryptData.substr(encryptData.length - 64);
    c2 = encryptData.substr(128, encryptData.length - 128 - 64);
  }

  var msg = _.hexToArray(c2);
  var c1 = _.getGlobalCurve().decodePointHex('04' + encryptData.substr(0, 128));

  var p = c1.multiply(privateKey);
  var x2 = _.hexToArray(_.leftPad(p.getX().toBigInteger().toRadix(16), 64));
  var y2 = _.hexToArray(_.leftPad(p.getY().toBigInteger().toRadix(16), 64));

  var ct = 1;
  var offset = 0;
  var t = []; // 256 位
  var z = [].concat(x2, y2);
  var nextT = function nextT() {
    // (1) Hai = hash(z || ct)
    // (2) ct++
    t = sm3([].concat(z, [ct >> 24 & 0x00ff, ct >> 16 & 0x00ff, ct >> 8 & 0x00ff, ct & 0x00ff]));
    ct++;
    offset = 0;
  };
  nextT(); // 先生成 Ha1

  for (var i = 0, len = msg.length; i < len; i++) {
    // t = Ha1 || Ha2 || Ha3 || Ha4
    if (offset === t.length) nextT();

    // c2 = msg ^ t
    msg[i] ^= t[offset++] & 0xff;
  }

  // c3 = hash(x2 || msg || y2)
  var checkC3 = _.arrayToHex(sm3([].concat(x2, msg, y2)));

  if (checkC3 === c3) {
    return output === 'array' ? msg : _.arrayToUtf8(msg);
  } else {
    return output === 'array' ? [] : '';
  }
}

/**
 * 签名
 */
function doSignature(msg, privateKey) {
  var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      pointPool = _ref2.pointPool,
      der = _ref2.der,
      hash = _ref2.hash,
      publicKey = _ref2.publicKey,
      userId = _ref2.userId;

  var hashHex = typeof msg === 'string' ? _.utf8ToHex(msg) : _.arrayToHex(msg);

  if (hash) {
    // sm3杂凑
    publicKey = publicKey || getPublicKeyFromPrivateKey(privateKey);
    hashHex = getHash(hashHex, publicKey, userId);
  }

  var dA = new BigInteger(privateKey, 16);
  var e = new BigInteger(hashHex, 16);

  // k
  var k = null;
  var r = null;
  var s = null;

  do {
    do {
      var point = void 0;
      if (pointPool && pointPool.length) {
        point = pointPool.pop();
      } else {
        point = getPoint();
      }
      k = point.k;

      // r = (e + x1) mod n
      r = e.add(point.x1).mod(n);
    } while (r.equals(BigInteger.ZERO) || r.add(k).equals(n));

    // s = ((1 + dA)^-1 * (k - r * dA)) mod n
    s = dA.add(BigInteger.ONE).modInverse(n).multiply(k.subtract(r.multiply(dA))).mod(n);
  } while (s.equals(BigInteger.ZERO));

  if (der) return encodeDer(r, s); // asn.1 der 编码

  return _.leftPad(r.toString(16), 64) + _.leftPad(s.toString(16), 64);
}

/**
 * 验签
 */
function doVerifySignature(msg, signHex, publicKey) {
  var _ref3 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},
      der = _ref3.der,
      hash = _ref3.hash,
      userId = _ref3.userId;

  var hashHex = typeof msg === 'string' ? _.utf8ToHex(msg) : _.arrayToHex(msg);

  if (hash) {
    // sm3杂凑
    hashHex = getHash(hashHex, publicKey, userId);
  }

  var r = void 0;var s = void 0;
  if (der) {
    var decodeDerObj = decodeDer(signHex); // asn.1 der 解码
    r = decodeDerObj.r;
    s = decodeDerObj.s;
  } else {
    r = new BigInteger(signHex.substring(0, 64), 16);
    s = new BigInteger(signHex.substring(64), 16);
  }

  var PA = curve.decodePointHex(publicKey);
  var e = new BigInteger(hashHex, 16);

  // t = (r + s) mod n
  var t = r.add(s).mod(n);

  if (t.equals(BigInteger.ZERO)) return false;

  // x1y1 = s * G + t * PA
  var x1y1 = G.multiply(s).add(PA.multiply(t));

  // R = (e + x1) mod n
  var R = e.add(x1y1.getX().toBigInteger()).mod(n);

  return r.equals(R);
}

/**
 * sm3杂凑算法
 */
function getHash(hashHex, publicKey) {
  var userId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '1234567812345678';

  // z = hash(entl || userId || a || b || gx || gy || px || py)
  userId = _.utf8ToHex(userId);
  var a = _.leftPad(G.curve.a.toBigInteger().toRadix(16), 64);
  var b = _.leftPad(G.curve.b.toBigInteger().toRadix(16), 64);
  var gx = _.leftPad(G.getX().toBigInteger().toRadix(16), 64);
  var gy = _.leftPad(G.getY().toBigInteger().toRadix(16), 64);
  if (publicKey.length > 128) publicKey = publicKey.substr(2, 128); // 干掉 '04'
  var px = publicKey.substr(0, 64);
  var py = publicKey.substr(64, 64);
  var data = _.hexToArray(userId + a + b + gx + gy + px + py);

  var entl = userId.length * 4;
  data.unshift(entl & 0x00ff);
  data.unshift(entl >> 8 & 0x00ff);

  var z = sm3(data);

  // e = hash(z || msg)
  return _.arrayToHex(sm3(z.concat(_.hexToArray(hashHex))));
}

/**
 * 计算公钥
 */
function getPublicKeyFromPrivateKey(privateKey) {
  var PA = G.multiply(new BigInteger(privateKey, 16));
  var x = _.leftPad(PA.getX().toBigInteger().toString(16), 64);
  var y = _.leftPad(PA.getY().toBigInteger().toString(16), 64);
  return '04' + x + y;
}

/**
 * 获取椭圆曲线点
 */
function getPoint() {
  var keypair = _.generateKeyPairHex();
  var PA = curve.decodePointHex(keypair.publicKey);

  keypair.k = new BigInteger(keypair.privateKey, 16);
  keypair.x1 = PA.getX().toBigInteger();

  return keypair;
}

module.exports = {
  generateKeyPairHex: _.generateKeyPairHex,
  doEncrypt: doEncrypt,
  doDecrypt: doDecrypt,
  doSignature: doSignature,
  doVerifySignature: doVerifySignature,
  getPoint: getPoint,
  verifyPublicKey: _.verifyPublicKey
};

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* eslint-disable class-methods-use-this */
var _require = __webpack_require__(0),
    BigInteger = _require.BigInteger;

function bigintToValue(bigint) {
  var h = bigint.toString(16);
  if (h[0] !== '-') {
    // 正数
    if (h.length % 2 === 1) h = '0' + h; // 补齐到整字节
    else if (!h.match(/^[0-7]/)) h = '00' + h; // 非0开头，则补一个全0字节
  } else {
    // 负数
    h = h.substr(1);

    var len = h.length;
    if (len % 2 === 1) len += 1; // 补齐到整字节
    else if (!h.match(/^[0-7]/)) len += 2; // 非0开头，则补一个全0字节

    var mask = '';
    for (var i = 0; i < len; i++) {
      mask += 'f';
    }mask = new BigInteger(mask, 16);

    // 对绝对值取反，加1
    h = mask.xor(bigint).add(BigInteger.ONE);
    h = h.toString(16).replace(/^-/, '');
  }
  return h;
}

var ASN1Object = function () {
  function ASN1Object() {
    _classCallCheck(this, ASN1Object);

    this.tlv = null;
    this.t = '00';
    this.l = '00';
    this.v = '';
  }

  /**
   * 获取 der 编码比特流16进制串
   */


  ASN1Object.prototype.getEncodedHex = function getEncodedHex() {
    if (!this.tlv) {
      this.v = this.getValue();
      this.l = this.getLength();
      this.tlv = this.t + this.l + this.v;
    }
    return this.tlv;
  };

  ASN1Object.prototype.getLength = function getLength() {
    var n = this.v.length / 2; // 字节数
    var nHex = n.toString(16);
    if (nHex.length % 2 === 1) nHex = '0' + nHex; // 补齐到整字节

    if (n < 128) {
      // 短格式，以 0 开头
      return nHex;
    } else {
      // 长格式，以 1 开头
      var head = 128 + nHex.length / 2; // 1(1位) + 真正的长度占用字节数(7位) + 真正的长度
      return head.toString(16) + nHex;
    }
  };

  ASN1Object.prototype.getValue = function getValue() {
    return '';
  };

  return ASN1Object;
}();

var DERInteger = function (_ASN1Object) {
  _inherits(DERInteger, _ASN1Object);

  function DERInteger(bigint) {
    _classCallCheck(this, DERInteger);

    var _this = _possibleConstructorReturn(this, _ASN1Object.call(this));

    _this.t = '02'; // 整型标签说明
    if (bigint) _this.v = bigintToValue(bigint);
    return _this;
  }

  DERInteger.prototype.getValue = function getValue() {
    return this.v;
  };

  return DERInteger;
}(ASN1Object);

var DERSequence = function (_ASN1Object2) {
  _inherits(DERSequence, _ASN1Object2);

  function DERSequence(asn1Array) {
    _classCallCheck(this, DERSequence);

    var _this2 = _possibleConstructorReturn(this, _ASN1Object2.call(this));

    _this2.t = '30'; // 序列标签说明
    _this2.asn1Array = asn1Array;
    return _this2;
  }

  DERSequence.prototype.getValue = function getValue() {
    this.v = this.asn1Array.map(function (asn1Object) {
      return asn1Object.getEncodedHex();
    }).join('');
    return this.v;
  };

  return DERSequence;
}(ASN1Object);

/**
 * 获取 l 占用字节数
 */


function getLenOfL(str, start) {
  if (+str[start + 2] < 8) return 1; // l 以0开头，则表示短格式，只占一个字节
  return +str.substr(start + 2, 2) & 0x7f + 1; // 长格式，取第一个字节后7位作为长度真正占用字节数，再加上本身
}

/**
 * 获取 l
 */
function getL(str, start) {
  // 获取 l
  var len = getLenOfL(str, start);
  var l = str.substr(start + 2, len * 2);

  if (!l) return -1;
  var bigint = +l[0] < 8 ? new BigInteger(l, 16) : new BigInteger(l.substr(2), 16);

  return bigint.intValue();
}

/**
 * 获取 v 的位置
 */
function getStartOfV(str, start) {
  var len = getLenOfL(str, start);
  return start + (len + 1) * 2;
}

module.exports = {
  /**
   * ASN.1 der 编码，针对 sm2 签名
   */
  encodeDer: function encodeDer(r, s) {
    var derR = new DERInteger(r);
    var derS = new DERInteger(s);
    var derSeq = new DERSequence([derR, derS]);

    return derSeq.getEncodedHex();
  },


  /**
   * 解析 ASN.1 der，针对 sm2 验签
   */
  decodeDer: function decodeDer(input) {
    // 结构：
    // input = | tSeq | lSeq | vSeq |
    // vSeq = | tR | lR | vR | tS | lS | vS |
    var start = getStartOfV(input, 0);

    var vIndexR = getStartOfV(input, start);
    var lR = getL(input, start);
    var vR = input.substr(vIndexR, lR * 2);

    var nextStart = vIndexR + vR.length;
    var vIndexS = getStartOfV(input, nextStart);
    var lS = getL(input, nextStart);
    var vS = input.substr(vIndexS, lS * 2);

    var r = new BigInteger(vR, 16);
    var s = new BigInteger(vS, 16);

    return { r: r, s: s };
  }
};

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* eslint-disable no-bitwise, no-mixed-operators, no-use-before-define, max-len */
var _require = __webpack_require__(0),
    BigInteger = _require.BigInteger,
    SecureRandom = _require.SecureRandom;

var _require2 = __webpack_require__(6),
    ECCurveFp = _require2.ECCurveFp;

var rng = new SecureRandom();

var _generateEcparam = generateEcparam(),
    curve = _generateEcparam.curve,
    G = _generateEcparam.G,
    n = _generateEcparam.n;

/**
 * 获取公共椭圆曲线
 */


function getGlobalCurve() {
  return curve;
}

/**
 * 生成ecparam
 */
function generateEcparam() {
  // 椭圆曲线
  var p = new BigInteger('FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFF', 16);
  var a = new BigInteger('FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFC', 16);
  var b = new BigInteger('28E9FA9E9D9F5E344D5A9E4BCF6509A7F39789F515AB8F92DDBCBD414D940E93', 16);
  var curve = new ECCurveFp(p, a, b);

  // 基点
  var gxHex = '32C4AE2C1F1981195F9904466A39C9948FE30BBFF2660BE1715A4589334C74C7';
  var gyHex = 'BC3736A2F4F6779C59BDCEE36B692153D0A9877CC62A474002DF32E52139F0A0';
  var G = curve.decodePointHex('04' + gxHex + gyHex);

  var n = new BigInteger('FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFF7203DF6B21C6052B53BBF40939D54123', 16);

  return { curve: curve, G: G, n: n };
}

/**
 * 生成密钥对：publicKey = privateKey * G
 */
function generateKeyPairHex(a, b, c) {
  var random = a ? new BigInteger(a, b, c) : new BigInteger(n.bitLength(), rng);
  var d = random.mod(n.subtract(BigInteger.ONE)).add(BigInteger.ONE); // 随机数
  var privateKey = leftPad(d.toString(16), 64);

  var P = G.multiply(d); // P = dG，p 为公钥，d 为私钥
  var Px = leftPad(P.getX().toBigInteger().toString(16), 64);
  var Py = leftPad(P.getY().toBigInteger().toString(16), 64);
  var publicKey = '04' + Px + Py;

  return { privateKey: privateKey, publicKey: publicKey };
}

/**
 * utf8串转16进制串
 */
function utf8ToHex(input) {
  input = unescape(encodeURIComponent(input));

  var length = input.length;

  // 转换到字数组
  var words = [];
  for (var i = 0; i < length; i++) {
    words[i >>> 2] |= (input.charCodeAt(i) & 0xff) << 24 - i % 4 * 8;
  }

  // 转换到16进制
  var hexChars = [];
  for (var _i = 0; _i < length; _i++) {
    var bite = words[_i >>> 2] >>> 24 - _i % 4 * 8 & 0xff;
    hexChars.push((bite >>> 4).toString(16));
    hexChars.push((bite & 0x0f).toString(16));
  }

  return hexChars.join('');
}

/**
 * 补全16进制字符串
 */
function leftPad(input, num) {
  if (input.length >= num) return input;

  return new Array(num - input.length + 1).join('0') + input;
}

/**
 * 转成16进制串
 */
function arrayToHex(arr) {
  return arr.map(function (item) {
    item = item.toString(16);
    return item.length === 1 ? '0' + item : item;
  }).join('');
}

/**
 * 转成utf8串
 */
function arrayToUtf8(arr) {
  var words = [];
  var j = 0;
  for (var i = 0; i < arr.length * 2; i += 2) {
    words[i >>> 3] |= parseInt(arr[j], 10) << 24 - i % 8 * 4;
    j++;
  }

  try {
    var latin1Chars = [];

    for (var _i2 = 0; _i2 < arr.length; _i2++) {
      var bite = words[_i2 >>> 2] >>> 24 - _i2 % 4 * 8 & 0xff;
      latin1Chars.push(String.fromCharCode(bite));
    }

    return decodeURIComponent(escape(latin1Chars.join('')));
  } catch (e) {
    throw new Error('Malformed UTF-8 data');
  }
}

/**
 * 转成字节数组
 */
function hexToArray(hexStr) {
  var words = [];
  var hexStrLength = hexStr.length;

  if (hexStrLength % 2 !== 0) {
    hexStr = leftPad(hexStr, hexStrLength + 1);
  }

  hexStrLength = hexStr.length;

  for (var i = 0; i < hexStrLength; i += 2) {
    words.push(parseInt(hexStr.substr(i, 2), 16));
  }
  return words;
}

/**
 * 验证公钥是否为椭圆曲线上的点
 */
function verifyPublicKey(publicKey) {
  var point = curve.decodePointHex(publicKey);
  if (!point) return false;

  var x = point.getX();
  var y = point.getY();

  // 验证 y^2 是否等于 x^3 + ax + b
  return y.square().equals(x.multiply(x.square()).add(x.multiply(curve.a)).add(curve.b));
}

module.exports = {
  getGlobalCurve: getGlobalCurve,
  generateEcparam: generateEcparam,
  generateKeyPairHex: generateKeyPairHex,
  utf8ToHex: utf8ToHex,
  leftPad: leftPad,
  arrayToHex: arrayToHex,
  arrayToUtf8: arrayToUtf8,
  hexToArray: hexToArray,
  verifyPublicKey: verifyPublicKey
};

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* eslint-disable no-case-declarations, max-len */
var _require = __webpack_require__(0),
    BigInteger = _require.BigInteger;

/**
 * thanks for Tom Wu : http://www-cs-students.stanford.edu/~tjw/jsbn/
 *
 * Basic Javascript Elliptic Curve implementation
 * Ported loosely from BouncyCastle's Java EC code
 * Only Fp curves implemented for now
 */

var THREE = new BigInteger('3');

/**
 * 椭圆曲线域元素
 */

var ECFieldElementFp = function () {
  function ECFieldElementFp(q, x) {
    _classCallCheck(this, ECFieldElementFp);

    this.x = x;
    this.q = q;
    // TODO if (x.compareTo(q) >= 0) error
  }

  /**
   * 判断相等
   */


  ECFieldElementFp.prototype.equals = function equals(other) {
    if (other === this) return true;
    return this.q.equals(other.q) && this.x.equals(other.x);
  };

  /**
   * 返回具体数值
   */


  ECFieldElementFp.prototype.toBigInteger = function toBigInteger() {
    return this.x;
  };

  /**
   * 取反
   */


  ECFieldElementFp.prototype.negate = function negate() {
    return new ECFieldElementFp(this.q, this.x.negate().mod(this.q));
  };

  /**
   * 相加
   */


  ECFieldElementFp.prototype.add = function add(b) {
    return new ECFieldElementFp(this.q, this.x.add(b.toBigInteger()).mod(this.q));
  };

  /**
   * 相减
   */


  ECFieldElementFp.prototype.subtract = function subtract(b) {
    return new ECFieldElementFp(this.q, this.x.subtract(b.toBigInteger()).mod(this.q));
  };

  /**
   * 相乘
   */


  ECFieldElementFp.prototype.multiply = function multiply(b) {
    return new ECFieldElementFp(this.q, this.x.multiply(b.toBigInteger()).mod(this.q));
  };

  /**
   * 相除
   */


  ECFieldElementFp.prototype.divide = function divide(b) {
    return new ECFieldElementFp(this.q, this.x.multiply(b.toBigInteger().modInverse(this.q)).mod(this.q));
  };

  /**
   * 平方
   */


  ECFieldElementFp.prototype.square = function square() {
    return new ECFieldElementFp(this.q, this.x.square().mod(this.q));
  };

  return ECFieldElementFp;
}();

var ECPointFp = function () {
  function ECPointFp(curve, x, y, z) {
    _classCallCheck(this, ECPointFp);

    this.curve = curve;
    this.x = x;
    this.y = y;
    // 标准射影坐标系：zinv == null 或 z * zinv == 1
    this.z = z == null ? BigInteger.ONE : z;
    this.zinv = null;
    // TODO: compression flag
  }

  ECPointFp.prototype.getX = function getX() {
    if (this.zinv === null) this.zinv = this.z.modInverse(this.curve.q);

    return this.curve.fromBigInteger(this.x.toBigInteger().multiply(this.zinv).mod(this.curve.q));
  };

  ECPointFp.prototype.getY = function getY() {
    if (this.zinv === null) this.zinv = this.z.modInverse(this.curve.q);

    return this.curve.fromBigInteger(this.y.toBigInteger().multiply(this.zinv).mod(this.curve.q));
  };

  /**
   * 判断相等
   */


  ECPointFp.prototype.equals = function equals(other) {
    if (other === this) return true;
    if (this.isInfinity()) return other.isInfinity();
    if (other.isInfinity()) return this.isInfinity();

    // u = y2 * z1 - y1 * z2
    var u = other.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(other.z)).mod(this.curve.q);
    if (!u.equals(BigInteger.ZERO)) return false;

    // v = x2 * z1 - x1 * z2
    var v = other.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(other.z)).mod(this.curve.q);
    return v.equals(BigInteger.ZERO);
  };

  /**
   * 是否是无穷远点
   */


  ECPointFp.prototype.isInfinity = function isInfinity() {
    if (this.x === null && this.y === null) return true;
    return this.z.equals(BigInteger.ZERO) && !this.y.toBigInteger().equals(BigInteger.ZERO);
  };

  /**
   * 取反，x 轴对称点
   */


  ECPointFp.prototype.negate = function negate() {
    return new ECPointFp(this.curve, this.x, this.y.negate(), this.z);
  };

  /**
   * 相加
   *
   * 标准射影坐标系：
   *
   * λ1 = x1 * z2
   * λ2 = x2 * z1
   * λ3 = λ1 − λ2
   * λ4 = y1 * z2
   * λ5 = y2 * z1
   * λ6 = λ4 − λ5
   * λ7 = λ1 + λ2
   * λ8 = z1 * z2
   * λ9 = λ3^2
   * λ10 = λ3 * λ9
   * λ11 = λ8 * λ6^2 − λ7 * λ9
   * x3 = λ3 * λ11
   * y3 = λ6 * (λ9 * λ1 − λ11) − λ4 * λ10
   * z3 = λ10 * λ8
   */


  ECPointFp.prototype.add = function add(b) {
    if (this.isInfinity()) return b;
    if (b.isInfinity()) return this;

    var x1 = this.x.toBigInteger();
    var y1 = this.y.toBigInteger();
    var z1 = this.z;
    var x2 = b.x.toBigInteger();
    var y2 = b.y.toBigInteger();
    var z2 = b.z;
    var q = this.curve.q;

    var w1 = x1.multiply(z2).mod(q);
    var w2 = x2.multiply(z1).mod(q);
    var w3 = w1.subtract(w2);
    var w4 = y1.multiply(z2).mod(q);
    var w5 = y2.multiply(z1).mod(q);
    var w6 = w4.subtract(w5);

    if (BigInteger.ZERO.equals(w3)) {
      if (BigInteger.ZERO.equals(w6)) {
        return this.twice(); // this == b，计算自加
      }
      return this.curve.infinity; // this == -b，则返回无穷远点
    }

    var w7 = w1.add(w2);
    var w8 = z1.multiply(z2).mod(q);
    var w9 = w3.square().mod(q);
    var w10 = w3.multiply(w9).mod(q);
    var w11 = w8.multiply(w6.square()).subtract(w7.multiply(w9)).mod(q);

    var x3 = w3.multiply(w11).mod(q);
    var y3 = w6.multiply(w9.multiply(w1).subtract(w11)).subtract(w4.multiply(w10)).mod(q);
    var z3 = w10.multiply(w8).mod(q);

    return new ECPointFp(this.curve, this.curve.fromBigInteger(x3), this.curve.fromBigInteger(y3), z3);
  };

  /**
   * 自加
   *
   * 标准射影坐标系：
   *
   * λ1 = 3 * x1^2 + a * z1^2
   * λ2 = 2 * y1 * z1
   * λ3 = y1^2
   * λ4 = λ3 * x1 * z1
   * λ5 = λ2^2
   * λ6 = λ1^2 − 8 * λ4
   * x3 = λ2 * λ6
   * y3 = λ1 * (4 * λ4 − λ6) − 2 * λ5 * λ3
   * z3 = λ2 * λ5
   */


  ECPointFp.prototype.twice = function twice() {
    if (this.isInfinity()) return this;
    if (!this.y.toBigInteger().signum()) return this.curve.infinity;

    var x1 = this.x.toBigInteger();
    var y1 = this.y.toBigInteger();
    var z1 = this.z;
    var q = this.curve.q;
    var a = this.curve.a.toBigInteger();

    var w1 = x1.square().multiply(THREE).add(a.multiply(z1.square())).mod(q);
    var w2 = y1.shiftLeft(1).multiply(z1).mod(q);
    var w3 = y1.square().mod(q);
    var w4 = w3.multiply(x1).multiply(z1).mod(q);
    var w5 = w2.square().mod(q);
    var w6 = w1.square().subtract(w4.shiftLeft(3)).mod(q);

    var x3 = w2.multiply(w6).mod(q);
    var y3 = w1.multiply(w4.shiftLeft(2).subtract(w6)).subtract(w5.shiftLeft(1).multiply(w3)).mod(q);
    var z3 = w2.multiply(w5).mod(q);

    return new ECPointFp(this.curve, this.curve.fromBigInteger(x3), this.curve.fromBigInteger(y3), z3);
  };

  /**
   * 倍点计算
   */


  ECPointFp.prototype.multiply = function multiply(k) {
    if (this.isInfinity()) return this;
    if (!k.signum()) return this.curve.infinity;

    // 使用加减法
    var k3 = k.multiply(THREE);
    var neg = this.negate();
    var Q = this;

    for (var i = k3.bitLength() - 2; i > 0; i--) {
      Q = Q.twice();

      var k3Bit = k3.testBit(i);
      var kBit = k.testBit(i);

      if (k3Bit !== kBit) {
        Q = Q.add(k3Bit ? this : neg);
      }
    }

    return Q;
  };

  return ECPointFp;
}();

/**
 * 椭圆曲线 y^2 = x^3 + ax + b
 */


var ECCurveFp = function () {
  function ECCurveFp(q, a, b) {
    _classCallCheck(this, ECCurveFp);

    this.q = q;
    this.a = this.fromBigInteger(a);
    this.b = this.fromBigInteger(b);
    this.infinity = new ECPointFp(this, null, null); // 无穷远点
  }

  /**
   * 判断两个椭圆曲线是否相等
   */


  ECCurveFp.prototype.equals = function equals(other) {
    if (other === this) return true;
    return this.q.equals(other.q) && this.a.equals(other.a) && this.b.equals(other.b);
  };

  /**
   * 生成椭圆曲线域元素
   */


  ECCurveFp.prototype.fromBigInteger = function fromBigInteger(x) {
    return new ECFieldElementFp(this.q, x);
  };

  /**
   * 解析 16 进制串为椭圆曲线点
   */


  ECCurveFp.prototype.decodePointHex = function decodePointHex(s) {
    switch (parseInt(s.substr(0, 2), 16)) {
      // 第一个字节
      case 0:
        return this.infinity;
      case 2:
      case 3:
        // 不支持的压缩方式
        return null;
      case 4:
      case 6:
      case 7:
        var len = (s.length - 2) / 2;
        var xHex = s.substr(2, len);
        var yHex = s.substr(len + 2, len);

        return new ECPointFp(this, this.fromBigInteger(new BigInteger(xHex, 16)), this.fromBigInteger(new BigInteger(yHex, 16)));
      default:
        // 不支持
        return null;
    }
  };

  return ECCurveFp;
}();

module.exports = {
  ECPointFp: ECPointFp,
  ECCurveFp: ECCurveFp
};

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var sm3 = __webpack_require__(1);

/**
 * 字节数组转 16 进制串
 */
function ArrayToHex(arr) {
  return arr.map(function (item) {
    item = item.toString(16);
    return item.length === 1 ? '0' + item : item;
  }).join('');
}

/**
 * utf8 串转字节数组
 */
function utf8ToArray(str) {
  var arr = [];

  for (var i = 0, len = str.length; i < len; i++) {
    var point = str.codePointAt(i);

    if (point <= 0x007f) {
      // 单字节，标量值：00000000 00000000 0zzzzzzz
      arr.push(point);
    } else if (point <= 0x07ff) {
      // 双字节，标量值：00000000 00000yyy yyzzzzzz
      arr.push(0xc0 | point >>> 6); // 110yyyyy（0xc0-0xdf）
      arr.push(0x80 | point & 0x3f); // 10zzzzzz（0x80-0xbf）
    } else if (point <= 0xD7FF || point >= 0xE000 && point <= 0xFFFF) {
      // 三字节：标量值：00000000 xxxxyyyy yyzzzzzz
      arr.push(0xe0 | point >>> 12); // 1110xxxx（0xe0-0xef）
      arr.push(0x80 | point >>> 6 & 0x3f); // 10yyyyyy（0x80-0xbf）
      arr.push(0x80 | point & 0x3f); // 10zzzzzz（0x80-0xbf）
    } else if (point >= 0x010000 && point <= 0x10FFFF) {
      // 四字节：标量值：000wwwxx xxxxyyyy yyzzzzzz
      i++;
      arr.push(0xf0 | point >>> 18 & 0x1c); // 11110www（0xf0-0xf7）
      arr.push(0x80 | point >>> 12 & 0x3f); // 10xxxxxx（0x80-0xbf）
      arr.push(0x80 | point >>> 6 & 0x3f); // 10yyyyyy（0x80-0xbf）
      arr.push(0x80 | point & 0x3f); // 10zzzzzz（0x80-0xbf）
    } else {
      // 五、六字节，暂时不支持
      arr.push(point);
      throw new Error('input is not supported');
    }
  }

  return arr;
}

module.exports = function (input) {
  input = typeof input === 'string' ? utf8ToArray(input) : Array.prototype.slice.call(input);
  return ArrayToHex(sm3(input));
};

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* eslint-disable no-bitwise, no-mixed-operators, complexity */
var DECRYPT = 0;
var ROUND = 32;
var BLOCK = 16;

var Sbox = [0xd6, 0x90, 0xe9, 0xfe, 0xcc, 0xe1, 0x3d, 0xb7, 0x16, 0xb6, 0x14, 0xc2, 0x28, 0xfb, 0x2c, 0x05, 0x2b, 0x67, 0x9a, 0x76, 0x2a, 0xbe, 0x04, 0xc3, 0xaa, 0x44, 0x13, 0x26, 0x49, 0x86, 0x06, 0x99, 0x9c, 0x42, 0x50, 0xf4, 0x91, 0xef, 0x98, 0x7a, 0x33, 0x54, 0x0b, 0x43, 0xed, 0xcf, 0xac, 0x62, 0xe4, 0xb3, 0x1c, 0xa9, 0xc9, 0x08, 0xe8, 0x95, 0x80, 0xdf, 0x94, 0xfa, 0x75, 0x8f, 0x3f, 0xa6, 0x47, 0x07, 0xa7, 0xfc, 0xf3, 0x73, 0x17, 0xba, 0x83, 0x59, 0x3c, 0x19, 0xe6, 0x85, 0x4f, 0xa8, 0x68, 0x6b, 0x81, 0xb2, 0x71, 0x64, 0xda, 0x8b, 0xf8, 0xeb, 0x0f, 0x4b, 0x70, 0x56, 0x9d, 0x35, 0x1e, 0x24, 0x0e, 0x5e, 0x63, 0x58, 0xd1, 0xa2, 0x25, 0x22, 0x7c, 0x3b, 0x01, 0x21, 0x78, 0x87, 0xd4, 0x00, 0x46, 0x57, 0x9f, 0xd3, 0x27, 0x52, 0x4c, 0x36, 0x02, 0xe7, 0xa0, 0xc4, 0xc8, 0x9e, 0xea, 0xbf, 0x8a, 0xd2, 0x40, 0xc7, 0x38, 0xb5, 0xa3, 0xf7, 0xf2, 0xce, 0xf9, 0x61, 0x15, 0xa1, 0xe0, 0xae, 0x5d, 0xa4, 0x9b, 0x34, 0x1a, 0x55, 0xad, 0x93, 0x32, 0x30, 0xf5, 0x8c, 0xb1, 0xe3, 0x1d, 0xf6, 0xe2, 0x2e, 0x82, 0x66, 0xca, 0x60, 0xc0, 0x29, 0x23, 0xab, 0x0d, 0x53, 0x4e, 0x6f, 0xd5, 0xdb, 0x37, 0x45, 0xde, 0xfd, 0x8e, 0x2f, 0x03, 0xff, 0x6a, 0x72, 0x6d, 0x6c, 0x5b, 0x51, 0x8d, 0x1b, 0xaf, 0x92, 0xbb, 0xdd, 0xbc, 0x7f, 0x11, 0xd9, 0x5c, 0x41, 0x1f, 0x10, 0x5a, 0xd8, 0x0a, 0xc1, 0x31, 0x88, 0xa5, 0xcd, 0x7b, 0xbd, 0x2d, 0x74, 0xd0, 0x12, 0xb8, 0xe5, 0xb4, 0xb0, 0x89, 0x69, 0x97, 0x4a, 0x0c, 0x96, 0x77, 0x7e, 0x65, 0xb9, 0xf1, 0x09, 0xc5, 0x6e, 0xc6, 0x84, 0x18, 0xf0, 0x7d, 0xec, 0x3a, 0xdc, 0x4d, 0x20, 0x79, 0xee, 0x5f, 0x3e, 0xd7, 0xcb, 0x39, 0x48];

var CK = [0x00070e15, 0x1c232a31, 0x383f464d, 0x545b6269, 0x70777e85, 0x8c939aa1, 0xa8afb6bd, 0xc4cbd2d9, 0xe0e7eef5, 0xfc030a11, 0x181f262d, 0x343b4249, 0x50575e65, 0x6c737a81, 0x888f969d, 0xa4abb2b9, 0xc0c7ced5, 0xdce3eaf1, 0xf8ff060d, 0x141b2229, 0x30373e45, 0x4c535a61, 0x686f767d, 0x848b9299, 0xa0a7aeb5, 0xbcc3cad1, 0xd8dfe6ed, 0xf4fb0209, 0x10171e25, 0x2c333a41, 0x484f565d, 0x646b7279];

/**
 * 16 进制串转字节数组
 */
function hexToArray(str) {
  var arr = [];
  for (var i = 0, len = str.length; i < len; i += 2) {
    arr.push(parseInt(str.substr(i, 2), 16));
  }
  return arr;
}

/**
 * 字节数组转 16 进制串
 */
function ArrayToHex(arr) {
  return arr.map(function (item) {
    item = item.toString(16);
    return item.length === 1 ? '0' + item : item;
  }).join('');
}

/**
 * utf8 串转字节数组
 */
function utf8ToArray(str) {
  var arr = [];

  for (var i = 0, len = str.length; i < len; i++) {
    var point = str.codePointAt(i);

    if (point <= 0x007f) {
      // 单字节，标量值：00000000 00000000 0zzzzzzz
      arr.push(point);
    } else if (point <= 0x07ff) {
      // 双字节，标量值：00000000 00000yyy yyzzzzzz
      arr.push(0xc0 | point >>> 6); // 110yyyyy（0xc0-0xdf）
      arr.push(0x80 | point & 0x3f); // 10zzzzzz（0x80-0xbf）
    } else if (point <= 0xD7FF || point >= 0xE000 && point <= 0xFFFF) {
      // 三字节：标量值：00000000 xxxxyyyy yyzzzzzz
      arr.push(0xe0 | point >>> 12); // 1110xxxx（0xe0-0xef）
      arr.push(0x80 | point >>> 6 & 0x3f); // 10yyyyyy（0x80-0xbf）
      arr.push(0x80 | point & 0x3f); // 10zzzzzz（0x80-0xbf）
    } else if (point >= 0x010000 && point <= 0x10FFFF) {
      // 四字节：标量值：000wwwxx xxxxyyyy yyzzzzzz
      i++;
      arr.push(0xf0 | point >>> 18 & 0x1c); // 11110www（0xf0-0xf7）
      arr.push(0x80 | point >>> 12 & 0x3f); // 10xxxxxx（0x80-0xbf）
      arr.push(0x80 | point >>> 6 & 0x3f); // 10yyyyyy（0x80-0xbf）
      arr.push(0x80 | point & 0x3f); // 10zzzzzz（0x80-0xbf）
    } else {
      // 五、六字节，暂时不支持
      arr.push(point);
      throw new Error('input is not supported');
    }
  }

  return arr;
}

/**
 * 字节数组转 utf8 串
 */
function arrayToUtf8(arr) {
  var str = [];
  for (var i = 0, len = arr.length; i < len; i++) {
    if (arr[i] >= 0xf0 && arr[i] <= 0xf7) {
      // 四字节
      str.push(String.fromCodePoint(((arr[i] & 0x07) << 18) + ((arr[i + 1] & 0x3f) << 12) + ((arr[i + 2] & 0x3f) << 6) + (arr[i + 3] & 0x3f)));
      i += 3;
    } else if (arr[i] >= 0xe0 && arr[i] <= 0xef) {
      // 三字节
      str.push(String.fromCodePoint(((arr[i] & 0x0f) << 12) + ((arr[i + 1] & 0x3f) << 6) + (arr[i + 2] & 0x3f)));
      i += 2;
    } else if (arr[i] >= 0xc0 && arr[i] <= 0xdf) {
      // 双字节
      str.push(String.fromCodePoint(((arr[i] & 0x1f) << 6) + (arr[i + 1] & 0x3f)));
      i++;
    } else {
      // 单字节
      str.push(String.fromCodePoint(arr[i]));
    }
  }

  return str.join('');
}

/**
 * 32 比特循环左移
 */
function rotl(x, y) {
  return x << y | x >>> 32 - y;
}

/**
 * 非线性变换
 */
function byteSub(a) {
  return (Sbox[a >>> 24 & 0xFF] & 0xFF) << 24 | (Sbox[a >>> 16 & 0xFF] & 0xFF) << 16 | (Sbox[a >>> 8 & 0xFF] & 0xFF) << 8 | Sbox[a & 0xFF] & 0xFF;
}

/**
 * 线性变换，加密/解密用
 */
function l1(b) {
  return b ^ rotl(b, 2) ^ rotl(b, 10) ^ rotl(b, 18) ^ rotl(b, 24);
}

/**
 * 线性变换，生成轮密钥用
 */
function l2(b) {
  return b ^ rotl(b, 13) ^ rotl(b, 23);
}

/**
 * 以一组 128 比特进行加密/解密操作
 */
function sms4Crypt(input, output, roundKey) {
  var x = new Array(4);

  // 字节数组转成字数组（此处 1 字 = 32 比特）
  var tmp = new Array(4);
  for (var i = 0; i < 4; i++) {
    tmp[0] = input[4 * i] & 0xff;
    tmp[1] = input[4 * i + 1] & 0xff;
    tmp[2] = input[4 * i + 2] & 0xff;
    tmp[3] = input[4 * i + 3] & 0xff;
    x[i] = tmp[0] << 24 | tmp[1] << 16 | tmp[2] << 8 | tmp[3];
  }

  // x[i + 4] = x[i] ^ l1(byteSub(x[i + 1] ^ x[i + 2] ^ x[i + 3] ^ roundKey[i]))
  for (var r = 0, mid; r < 32; r += 4) {
    mid = x[1] ^ x[2] ^ x[3] ^ roundKey[r + 0];
    x[0] ^= l1(byteSub(mid)); // x[4]

    mid = x[2] ^ x[3] ^ x[0] ^ roundKey[r + 1];
    x[1] ^= l1(byteSub(mid)); // x[5]

    mid = x[3] ^ x[0] ^ x[1] ^ roundKey[r + 2];
    x[2] ^= l1(byteSub(mid)); // x[6]

    mid = x[0] ^ x[1] ^ x[2] ^ roundKey[r + 3];
    x[3] ^= l1(byteSub(mid)); // x[7]
  }

  // 反序变换
  for (var j = 0; j < 16; j += 4) {
    output[j] = x[3 - j / 4] >>> 24 & 0xff;
    output[j + 1] = x[3 - j / 4] >>> 16 & 0xff;
    output[j + 2] = x[3 - j / 4] >>> 8 & 0xff;
    output[j + 3] = x[3 - j / 4] & 0xff;
  }
}

/**
 * 密钥扩展算法
 */
function sms4KeyExt(key, roundKey, cryptFlag) {
  var x = new Array(4);

  // 字节数组转成字数组（此处 1 字 = 32 比特）
  var tmp = new Array(4);
  for (var i = 0; i < 4; i++) {
    tmp[0] = key[0 + 4 * i] & 0xff;
    tmp[1] = key[1 + 4 * i] & 0xff;
    tmp[2] = key[2 + 4 * i] & 0xff;
    tmp[3] = key[3 + 4 * i] & 0xff;
    x[i] = tmp[0] << 24 | tmp[1] << 16 | tmp[2] << 8 | tmp[3];
  }

  // 与系统参数做异或
  x[0] ^= 0xa3b1bac6;
  x[1] ^= 0x56aa3350;
  x[2] ^= 0x677d9197;
  x[3] ^= 0xb27022dc;

  // roundKey[i] = x[i + 4] = x[i] ^ l2(byteSub(x[i + 1] ^ x[i + 2] ^ x[i + 3] ^ CK[i]))
  for (var r = 0, mid; r < 32; r += 4) {
    mid = x[1] ^ x[2] ^ x[3] ^ CK[r + 0];
    roundKey[r + 0] = x[0] ^= l2(byteSub(mid)); // x[4]

    mid = x[2] ^ x[3] ^ x[0] ^ CK[r + 1];
    roundKey[r + 1] = x[1] ^= l2(byteSub(mid)); // x[5]

    mid = x[3] ^ x[0] ^ x[1] ^ CK[r + 2];
    roundKey[r + 2] = x[2] ^= l2(byteSub(mid)); // x[6]

    mid = x[0] ^ x[1] ^ x[2] ^ CK[r + 3];
    roundKey[r + 3] = x[3] ^= l2(byteSub(mid)); // x[7]
  }

  // 解密时使用反序的轮密钥
  if (cryptFlag === DECRYPT) {
    for (var _r = 0, _mid; _r < 16; _r++) {
      _mid = roundKey[_r];
      roundKey[_r] = roundKey[31 - _r];
      roundKey[31 - _r] = _mid;
    }
  }
}

function sm4(inArray, key, cryptFlag) {
  var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},
      _ref$padding = _ref.padding,
      padding = _ref$padding === undefined ? 'pkcs#7' : _ref$padding,
      mode = _ref.mode,
      _ref$iv = _ref.iv,
      iv = _ref$iv === undefined ? [] : _ref$iv,
      _ref$output = _ref.output,
      output = _ref$output === undefined ? 'string' : _ref$output;

  if (mode === 'cbc') {
    // CBC 模式，默认走 ECB 模式
    if (typeof iv === 'string') iv = hexToArray(iv);
    if (iv.length !== 128 / 8) {
      // iv 不是 128 比特
      throw new Error('iv is invalid');
    }
  }

  // 检查 key
  if (typeof key === 'string') key = hexToArray(key);
  if (key.length !== 128 / 8) {
    // key 不是 128 比特
    throw new Error('key is invalid');
  }

  // 检查输入
  if (typeof inArray === 'string') {
    if (cryptFlag !== DECRYPT) {
      // 加密，输入为 utf8 串
      inArray = utf8ToArray(inArray);
    } else {
      // 解密，输入为 16 进制串
      inArray = hexToArray(inArray);
    }
  } else {
    inArray = [].concat(inArray);
  }

  // 新增填充，sm4 是 16 个字节一个分组，所以统一走到 pkcs#7
  if ((padding === 'pkcs#5' || padding === 'pkcs#7') && cryptFlag !== DECRYPT) {
    var paddingCount = BLOCK - inArray.length % BLOCK;
    for (var i = 0; i < paddingCount; i++) {
      inArray.push(paddingCount);
    }
  }

  // 生成轮密钥
  var roundKey = new Array(ROUND);
  sms4KeyExt(key, roundKey, cryptFlag);

  var outArray = [];
  var lastVector = iv;
  var restLen = inArray.length;
  var point = 0;
  while (restLen >= BLOCK) {
    var input = inArray.slice(point, point + 16);
    var _output = new Array(16);

    if (mode === 'cbc') {
      for (var _i = 0; _i < BLOCK; _i++) {
        if (cryptFlag !== DECRYPT) {
          // 加密过程在组加密前进行异或
          input[_i] ^= lastVector[_i];
        }
      }
    }

    sms4Crypt(input, _output, roundKey);

    for (var _i2 = 0; _i2 < BLOCK; _i2++) {
      if (mode === 'cbc') {
        if (cryptFlag === DECRYPT) {
          // 解密过程在组解密后进行异或
          _output[_i2] ^= lastVector[_i2];
        }
      }

      outArray[point + _i2] = _output[_i2];
    }

    if (mode === 'cbc') {
      if (cryptFlag !== DECRYPT) {
        // 使用上一次输出作为加密向量
        lastVector = _output;
      } else {
        // 使用上一次输入作为解密向量
        lastVector = input;
      }
    }

    restLen -= BLOCK;
    point += BLOCK;
  }

  // 去除填充，sm4 是 16 个字节一个分组，所以统一走到 pkcs#7
  if ((padding === 'pkcs#5' || padding === 'pkcs#7') && cryptFlag === DECRYPT) {
    var _paddingCount = outArray[outArray.length - 1];
    outArray.splice(outArray.length - _paddingCount, _paddingCount);
  }

  // 调整输出
  if (output !== 'array') {
    if (cryptFlag !== DECRYPT) {
      // 加密，输出转 16 进制串
      return ArrayToHex(outArray);
    } else {
      // 解密，输出转 utf8 串
      return arrayToUtf8(outArray);
    }
  } else {
    return outArray;
  }
}

module.exports = {
  encrypt: function encrypt(inArray, key, options) {
    return sm4(inArray, key, 1, options);
  },
  decrypt: function decrypt(inArray, key, options) {
    return sm4(inArray, key, 0, options);
  }
};

/***/ })
/******/ ]);

/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

(function(){

    // Copyright (c) 2005  Tom Wu
    // All Rights Reserved.
    // See "LICENSE" for details.

    // Basic JavaScript BN library - subset useful for RSA encryption.

    // Bits per digit
    var dbits;

    // JavaScript engine analysis
    var canary = 0xdeadbeefcafe;
    var j_lm = ((canary&0xffffff)==0xefcafe);

    // (public) Constructor
    function BigInteger(a,b,c) {
      if(a != null)
        if("number" == typeof a) this.fromNumber(a,b,c);
        else if(b == null && "string" != typeof a) this.fromString(a,256);
        else this.fromString(a,b);
    }

    // return new, unset BigInteger
    function nbi() { return new BigInteger(null); }

    // am: Compute w_j += (x*this_i), propagate carries,
    // c is initial carry, returns final carry.
    // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
    // We need to select the fastest one that works in this environment.

    // am1: use a single mult and divide to get the high bits,
    // max digit bits should be 26 because
    // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
    function am1(i,x,w,j,c,n) {
      while(--n >= 0) {
        var v = x*this[i++]+w[j]+c;
        c = Math.floor(v/0x4000000);
        w[j++] = v&0x3ffffff;
      }
      return c;
    }
    // am2 avoids a big mult-and-extract completely.
    // Max digit bits should be <= 30 because we do bitwise ops
    // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
    function am2(i,x,w,j,c,n) {
      var xl = x&0x7fff, xh = x>>15;
      while(--n >= 0) {
        var l = this[i]&0x7fff;
        var h = this[i++]>>15;
        var m = xh*l+h*xl;
        l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
        c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
        w[j++] = l&0x3fffffff;
      }
      return c;
    }
    // Alternately, set max digit bits to 28 since some
    // browsers slow down when dealing with 32-bit numbers.
    function am3(i,x,w,j,c,n) {
      var xl = x&0x3fff, xh = x>>14;
      while(--n >= 0) {
        var l = this[i]&0x3fff;
        var h = this[i++]>>14;
        var m = xh*l+h*xl;
        l = xl*l+((m&0x3fff)<<14)+w[j]+c;
        c = (l>>28)+(m>>14)+xh*h;
        w[j++] = l&0xfffffff;
      }
      return c;
    }
    var inBrowser = typeof navigator !== "undefined";
    if(inBrowser && j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
      BigInteger.prototype.am = am2;
      dbits = 30;
    }
    else if(inBrowser && j_lm && (navigator.appName != "Netscape")) {
      BigInteger.prototype.am = am1;
      dbits = 26;
    }
    else { // Mozilla/Netscape seems to prefer am3
      BigInteger.prototype.am = am3;
      dbits = 28;
    }

    BigInteger.prototype.DB = dbits;
    BigInteger.prototype.DM = ((1<<dbits)-1);
    BigInteger.prototype.DV = (1<<dbits);

    var BI_FP = 52;
    BigInteger.prototype.FV = Math.pow(2,BI_FP);
    BigInteger.prototype.F1 = BI_FP-dbits;
    BigInteger.prototype.F2 = 2*dbits-BI_FP;

    // Digit conversions
    var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
    var BI_RC = new Array();
    var rr,vv;
    rr = "0".charCodeAt(0);
    for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
    rr = "a".charCodeAt(0);
    for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
    rr = "A".charCodeAt(0);
    for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

    function int2char(n) { return BI_RM.charAt(n); }
    function intAt(s,i) {
      var c = BI_RC[s.charCodeAt(i)];
      return (c==null)?-1:c;
    }

    // (protected) copy this to r
    function bnpCopyTo(r) {
      for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
      r.t = this.t;
      r.s = this.s;
    }

    // (protected) set from integer value x, -DV <= x < DV
    function bnpFromInt(x) {
      this.t = 1;
      this.s = (x<0)?-1:0;
      if(x > 0) this[0] = x;
      else if(x < -1) this[0] = x+this.DV;
      else this.t = 0;
    }

    // return bigint initialized to value
    function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

    // (protected) set from string and radix
    function bnpFromString(s,b) {
      var k;
      if(b == 16) k = 4;
      else if(b == 8) k = 3;
      else if(b == 256) k = 8; // byte array
      else if(b == 2) k = 1;
      else if(b == 32) k = 5;
      else if(b == 4) k = 2;
      else { this.fromRadix(s,b); return; }
      this.t = 0;
      this.s = 0;
      var i = s.length, mi = false, sh = 0;
      while(--i >= 0) {
        var x = (k==8)?s[i]&0xff:intAt(s,i);
        if(x < 0) {
          if(s.charAt(i) == "-") mi = true;
          continue;
        }
        mi = false;
        if(sh == 0)
          this[this.t++] = x;
        else if(sh+k > this.DB) {
          this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
          this[this.t++] = (x>>(this.DB-sh));
        }
        else
          this[this.t-1] |= x<<sh;
        sh += k;
        if(sh >= this.DB) sh -= this.DB;
      }
      if(k == 8 && (s[0]&0x80) != 0) {
        this.s = -1;
        if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
      }
      this.clamp();
      if(mi) BigInteger.ZERO.subTo(this,this);
    }

    // (protected) clamp off excess high words
    function bnpClamp() {
      var c = this.s&this.DM;
      while(this.t > 0 && this[this.t-1] == c) --this.t;
    }

    // (public) return string representation in given radix
    function bnToString(b) {
      if(this.s < 0) return "-"+this.negate().toString(b);
      var k;
      if(b == 16) k = 4;
      else if(b == 8) k = 3;
      else if(b == 2) k = 1;
      else if(b == 32) k = 5;
      else if(b == 4) k = 2;
      else return this.toRadix(b);
      var km = (1<<k)-1, d, m = false, r = "", i = this.t;
      var p = this.DB-(i*this.DB)%k;
      if(i-- > 0) {
        if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
        while(i >= 0) {
          if(p < k) {
            d = (this[i]&((1<<p)-1))<<(k-p);
            d |= this[--i]>>(p+=this.DB-k);
          }
          else {
            d = (this[i]>>(p-=k))&km;
            if(p <= 0) { p += this.DB; --i; }
          }
          if(d > 0) m = true;
          if(m) r += int2char(d);
        }
      }
      return m?r:"0";
    }

    // (public) -this
    function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

    // (public) |this|
    function bnAbs() { return (this.s<0)?this.negate():this; }

    // (public) return + if this > a, - if this < a, 0 if equal
    function bnCompareTo(a) {
      var r = this.s-a.s;
      if(r != 0) return r;
      var i = this.t;
      r = i-a.t;
      if(r != 0) return (this.s<0)?-r:r;
      while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
      return 0;
    }

    // returns bit length of the integer x
    function nbits(x) {
      var r = 1, t;
      if((t=x>>>16) != 0) { x = t; r += 16; }
      if((t=x>>8) != 0) { x = t; r += 8; }
      if((t=x>>4) != 0) { x = t; r += 4; }
      if((t=x>>2) != 0) { x = t; r += 2; }
      if((t=x>>1) != 0) { x = t; r += 1; }
      return r;
    }

    // (public) return the number of bits in "this"
    function bnBitLength() {
      if(this.t <= 0) return 0;
      return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
    }

    // (protected) r = this << n*DB
    function bnpDLShiftTo(n,r) {
      var i;
      for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
      for(i = n-1; i >= 0; --i) r[i] = 0;
      r.t = this.t+n;
      r.s = this.s;
    }

    // (protected) r = this >> n*DB
    function bnpDRShiftTo(n,r) {
      for(var i = n; i < this.t; ++i) r[i-n] = this[i];
      r.t = Math.max(this.t-n,0);
      r.s = this.s;
    }

    // (protected) r = this << n
    function bnpLShiftTo(n,r) {
      var bs = n%this.DB;
      var cbs = this.DB-bs;
      var bm = (1<<cbs)-1;
      var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
      for(i = this.t-1; i >= 0; --i) {
        r[i+ds+1] = (this[i]>>cbs)|c;
        c = (this[i]&bm)<<bs;
      }
      for(i = ds-1; i >= 0; --i) r[i] = 0;
      r[ds] = c;
      r.t = this.t+ds+1;
      r.s = this.s;
      r.clamp();
    }

    // (protected) r = this >> n
    function bnpRShiftTo(n,r) {
      r.s = this.s;
      var ds = Math.floor(n/this.DB);
      if(ds >= this.t) { r.t = 0; return; }
      var bs = n%this.DB;
      var cbs = this.DB-bs;
      var bm = (1<<bs)-1;
      r[0] = this[ds]>>bs;
      for(var i = ds+1; i < this.t; ++i) {
        r[i-ds-1] |= (this[i]&bm)<<cbs;
        r[i-ds] = this[i]>>bs;
      }
      if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
      r.t = this.t-ds;
      r.clamp();
    }

    // (protected) r = this - a
    function bnpSubTo(a,r) {
      var i = 0, c = 0, m = Math.min(a.t,this.t);
      while(i < m) {
        c += this[i]-a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      if(a.t < this.t) {
        c -= a.s;
        while(i < this.t) {
          c += this[i];
          r[i++] = c&this.DM;
          c >>= this.DB;
        }
        c += this.s;
      }
      else {
        c += this.s;
        while(i < a.t) {
          c -= a[i];
          r[i++] = c&this.DM;
          c >>= this.DB;
        }
        c -= a.s;
      }
      r.s = (c<0)?-1:0;
      if(c < -1) r[i++] = this.DV+c;
      else if(c > 0) r[i++] = c;
      r.t = i;
      r.clamp();
    }

    // (protected) r = this * a, r != this,a (HAC 14.12)
    // "this" should be the larger one if appropriate.
    function bnpMultiplyTo(a,r) {
      var x = this.abs(), y = a.abs();
      var i = x.t;
      r.t = i+y.t;
      while(--i >= 0) r[i] = 0;
      for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
      r.s = 0;
      r.clamp();
      if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
    }

    // (protected) r = this^2, r != this (HAC 14.16)
    function bnpSquareTo(r) {
      var x = this.abs();
      var i = r.t = 2*x.t;
      while(--i >= 0) r[i] = 0;
      for(i = 0; i < x.t-1; ++i) {
        var c = x.am(i,x[i],r,2*i,0,1);
        if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
          r[i+x.t] -= x.DV;
          r[i+x.t+1] = 1;
        }
      }
      if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
      r.s = 0;
      r.clamp();
    }

    // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
    // r != q, this != m.  q or r may be null.
    function bnpDivRemTo(m,q,r) {
      var pm = m.abs();
      if(pm.t <= 0) return;
      var pt = this.abs();
      if(pt.t < pm.t) {
        if(q != null) q.fromInt(0);
        if(r != null) this.copyTo(r);
        return;
      }
      if(r == null) r = nbi();
      var y = nbi(), ts = this.s, ms = m.s;
      var nsh = this.DB-nbits(pm[pm.t-1]);   // normalize modulus
      if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
      else { pm.copyTo(y); pt.copyTo(r); }
      var ys = y.t;
      var y0 = y[ys-1];
      if(y0 == 0) return;
      var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
      var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
      var i = r.t, j = i-ys, t = (q==null)?nbi():q;
      y.dlShiftTo(j,t);
      if(r.compareTo(t) >= 0) {
        r[r.t++] = 1;
        r.subTo(t,r);
      }
      BigInteger.ONE.dlShiftTo(ys,t);
      t.subTo(y,y);  // "negative" y so we can replace sub with am later
      while(y.t < ys) y[y.t++] = 0;
      while(--j >= 0) {
        // Estimate quotient digit
        var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
        if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {   // Try it out
          y.dlShiftTo(j,t);
          r.subTo(t,r);
          while(r[i] < --qd) r.subTo(t,r);
        }
      }
      if(q != null) {
        r.drShiftTo(ys,q);
        if(ts != ms) BigInteger.ZERO.subTo(q,q);
      }
      r.t = ys;
      r.clamp();
      if(nsh > 0) r.rShiftTo(nsh,r); // Denormalize remainder
      if(ts < 0) BigInteger.ZERO.subTo(r,r);
    }

    // (public) this mod a
    function bnMod(a) {
      var r = nbi();
      this.abs().divRemTo(a,null,r);
      if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
      return r;
    }

    // Modular reduction using "classic" algorithm
    function Classic(m) { this.m = m; }
    function cConvert(x) {
      if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
      else return x;
    }
    function cRevert(x) { return x; }
    function cReduce(x) { x.divRemTo(this.m,null,x); }
    function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
    function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

    Classic.prototype.convert = cConvert;
    Classic.prototype.revert = cRevert;
    Classic.prototype.reduce = cReduce;
    Classic.prototype.mulTo = cMulTo;
    Classic.prototype.sqrTo = cSqrTo;

    // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
    // justification:
    //         xy == 1 (mod m)
    //         xy =  1+km
    //   xy(2-xy) = (1+km)(1-km)
    // x[y(2-xy)] = 1-k^2m^2
    // x[y(2-xy)] == 1 (mod m^2)
    // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
    // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
    // JS multiply "overflows" differently from C/C++, so care is needed here.
    function bnpInvDigit() {
      if(this.t < 1) return 0;
      var x = this[0];
      if((x&1) == 0) return 0;
      var y = x&3;       // y == 1/x mod 2^2
      y = (y*(2-(x&0xf)*y))&0xf; // y == 1/x mod 2^4
      y = (y*(2-(x&0xff)*y))&0xff;   // y == 1/x mod 2^8
      y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;    // y == 1/x mod 2^16
      // last step - calculate inverse mod DV directly;
      // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
      y = (y*(2-x*y%this.DV))%this.DV;       // y == 1/x mod 2^dbits
      // we really want the negative inverse, and -DV < y < DV
      return (y>0)?this.DV-y:-y;
    }

    // Montgomery reduction
    function Montgomery(m) {
      this.m = m;
      this.mp = m.invDigit();
      this.mpl = this.mp&0x7fff;
      this.mph = this.mp>>15;
      this.um = (1<<(m.DB-15))-1;
      this.mt2 = 2*m.t;
    }

    // xR mod m
    function montConvert(x) {
      var r = nbi();
      x.abs().dlShiftTo(this.m.t,r);
      r.divRemTo(this.m,null,r);
      if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
      return r;
    }

    // x/R mod m
    function montRevert(x) {
      var r = nbi();
      x.copyTo(r);
      this.reduce(r);
      return r;
    }

    // x = x/R mod m (HAC 14.32)
    function montReduce(x) {
      while(x.t <= this.mt2) // pad x so am has enough room later
        x[x.t++] = 0;
      for(var i = 0; i < this.m.t; ++i) {
        // faster way of calculating u0 = x[i]*mp mod DV
        var j = x[i]&0x7fff;
        var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
        // use am to combine the multiply-shift-add into one call
        j = i+this.m.t;
        x[j] += this.m.am(0,u0,x,i,0,this.m.t);
        // propagate carry
        while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
      }
      x.clamp();
      x.drShiftTo(this.m.t,x);
      if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
    }

    // r = "x^2/R mod m"; x != r
    function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

    // r = "xy/R mod m"; x,y != r
    function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

    Montgomery.prototype.convert = montConvert;
    Montgomery.prototype.revert = montRevert;
    Montgomery.prototype.reduce = montReduce;
    Montgomery.prototype.mulTo = montMulTo;
    Montgomery.prototype.sqrTo = montSqrTo;

    // (protected) true iff this is even
    function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

    // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
    function bnpExp(e,z) {
      if(e > 0xffffffff || e < 1) return BigInteger.ONE;
      var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
      g.copyTo(r);
      while(--i >= 0) {
        z.sqrTo(r,r2);
        if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
        else { var t = r; r = r2; r2 = t; }
      }
      return z.revert(r);
    }

    // (public) this^e % m, 0 <= e < 2^32
    function bnModPowInt(e,m) {
      var z;
      if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
      return this.exp(e,z);
    }

    // protected
    BigInteger.prototype.copyTo = bnpCopyTo;
    BigInteger.prototype.fromInt = bnpFromInt;
    BigInteger.prototype.fromString = bnpFromString;
    BigInteger.prototype.clamp = bnpClamp;
    BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
    BigInteger.prototype.drShiftTo = bnpDRShiftTo;
    BigInteger.prototype.lShiftTo = bnpLShiftTo;
    BigInteger.prototype.rShiftTo = bnpRShiftTo;
    BigInteger.prototype.subTo = bnpSubTo;
    BigInteger.prototype.multiplyTo = bnpMultiplyTo;
    BigInteger.prototype.squareTo = bnpSquareTo;
    BigInteger.prototype.divRemTo = bnpDivRemTo;
    BigInteger.prototype.invDigit = bnpInvDigit;
    BigInteger.prototype.isEven = bnpIsEven;
    BigInteger.prototype.exp = bnpExp;

    // public
    BigInteger.prototype.toString = bnToString;
    BigInteger.prototype.negate = bnNegate;
    BigInteger.prototype.abs = bnAbs;
    BigInteger.prototype.compareTo = bnCompareTo;
    BigInteger.prototype.bitLength = bnBitLength;
    BigInteger.prototype.mod = bnMod;
    BigInteger.prototype.modPowInt = bnModPowInt;

    // "constants"
    BigInteger.ZERO = nbv(0);
    BigInteger.ONE = nbv(1);

    // Copyright (c) 2005-2009  Tom Wu
    // All Rights Reserved.
    // See "LICENSE" for details.

    // Extended JavaScript BN functions, required for RSA private ops.

    // Version 1.1: new BigInteger("0", 10) returns "proper" zero
    // Version 1.2: square() API, isProbablePrime fix

    // (public)
    function bnClone() { var r = nbi(); this.copyTo(r); return r; }

    // (public) return value as integer
    function bnIntValue() {
      if(this.s < 0) {
        if(this.t == 1) return this[0]-this.DV;
        else if(this.t == 0) return -1;
      }
      else if(this.t == 1) return this[0];
      else if(this.t == 0) return 0;
      // assumes 16 < DB < 32
      return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
    }

    // (public) return value as byte
    function bnByteValue() { return (this.t==0)?this.s:(this[0]<<24)>>24; }

    // (public) return value as short (assumes DB>=16)
    function bnShortValue() { return (this.t==0)?this.s:(this[0]<<16)>>16; }

    // (protected) return x s.t. r^x < DV
    function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

    // (public) 0 if this == 0, 1 if this > 0
    function bnSigNum() {
      if(this.s < 0) return -1;
      else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
      else return 1;
    }

    // (protected) convert to radix string
    function bnpToRadix(b) {
      if(b == null) b = 10;
      if(this.signum() == 0 || b < 2 || b > 36) return "0";
      var cs = this.chunkSize(b);
      var a = Math.pow(b,cs);
      var d = nbv(a), y = nbi(), z = nbi(), r = "";
      this.divRemTo(d,y,z);
      while(y.signum() > 0) {
        r = (a+z.intValue()).toString(b).substr(1) + r;
        y.divRemTo(d,y,z);
      }
      return z.intValue().toString(b) + r;
    }

    // (protected) convert from radix string
    function bnpFromRadix(s,b) {
      this.fromInt(0);
      if(b == null) b = 10;
      var cs = this.chunkSize(b);
      var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
      for(var i = 0; i < s.length; ++i) {
        var x = intAt(s,i);
        if(x < 0) {
          if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
          continue;
        }
        w = b*w+x;
        if(++j >= cs) {
          this.dMultiply(d);
          this.dAddOffset(w,0);
          j = 0;
          w = 0;
        }
      }
      if(j > 0) {
        this.dMultiply(Math.pow(b,j));
        this.dAddOffset(w,0);
      }
      if(mi) BigInteger.ZERO.subTo(this,this);
    }

    // (protected) alternate constructor
    function bnpFromNumber(a,b,c) {
      if("number" == typeof b) {
        // new BigInteger(int,int,RNG)
        if(a < 2) this.fromInt(1);
        else {
          this.fromNumber(a,c);
          if(!this.testBit(a-1))    // force MSB set
            this.bitwiseTo(BigInteger.ONE.shiftLeft(a-1),op_or,this);
          if(this.isEven()) this.dAddOffset(1,0); // force odd
          while(!this.isProbablePrime(b)) {
            this.dAddOffset(2,0);
            if(this.bitLength() > a) this.subTo(BigInteger.ONE.shiftLeft(a-1),this);
          }
        }
      }
      else {
        // new BigInteger(int,RNG)
        var x = new Array(), t = a&7;
        x.length = (a>>3)+1;
        b.nextBytes(x);
        if(t > 0) x[0] &= ((1<<t)-1); else x[0] = 0;
        this.fromString(x,256);
      }
    }

    // (public) convert to bigendian byte array
    function bnToByteArray() {
      var i = this.t, r = new Array();
      r[0] = this.s;
      var p = this.DB-(i*this.DB)%8, d, k = 0;
      if(i-- > 0) {
        if(p < this.DB && (d = this[i]>>p) != (this.s&this.DM)>>p)
          r[k++] = d|(this.s<<(this.DB-p));
        while(i >= 0) {
          if(p < 8) {
            d = (this[i]&((1<<p)-1))<<(8-p);
            d |= this[--i]>>(p+=this.DB-8);
          }
          else {
            d = (this[i]>>(p-=8))&0xff;
            if(p <= 0) { p += this.DB; --i; }
          }
          if((d&0x80) != 0) d |= -256;
          if(k == 0 && (this.s&0x80) != (d&0x80)) ++k;
          if(k > 0 || d != this.s) r[k++] = d;
        }
      }
      return r;
    }

    function bnEquals(a) { return(this.compareTo(a)==0); }
    function bnMin(a) { return(this.compareTo(a)<0)?this:a; }
    function bnMax(a) { return(this.compareTo(a)>0)?this:a; }

    // (protected) r = this op a (bitwise)
    function bnpBitwiseTo(a,op,r) {
      var i, f, m = Math.min(a.t,this.t);
      for(i = 0; i < m; ++i) r[i] = op(this[i],a[i]);
      if(a.t < this.t) {
        f = a.s&this.DM;
        for(i = m; i < this.t; ++i) r[i] = op(this[i],f);
        r.t = this.t;
      }
      else {
        f = this.s&this.DM;
        for(i = m; i < a.t; ++i) r[i] = op(f,a[i]);
        r.t = a.t;
      }
      r.s = op(this.s,a.s);
      r.clamp();
    }

    // (public) this & a
    function op_and(x,y) { return x&y; }
    function bnAnd(a) { var r = nbi(); this.bitwiseTo(a,op_and,r); return r; }

    // (public) this | a
    function op_or(x,y) { return x|y; }
    function bnOr(a) { var r = nbi(); this.bitwiseTo(a,op_or,r); return r; }

    // (public) this ^ a
    function op_xor(x,y) { return x^y; }
    function bnXor(a) { var r = nbi(); this.bitwiseTo(a,op_xor,r); return r; }

    // (public) this & ~a
    function op_andnot(x,y) { return x&~y; }
    function bnAndNot(a) { var r = nbi(); this.bitwiseTo(a,op_andnot,r); return r; }

    // (public) ~this
    function bnNot() {
      var r = nbi();
      for(var i = 0; i < this.t; ++i) r[i] = this.DM&~this[i];
      r.t = this.t;
      r.s = ~this.s;
      return r;
    }

    // (public) this << n
    function bnShiftLeft(n) {
      var r = nbi();
      if(n < 0) this.rShiftTo(-n,r); else this.lShiftTo(n,r);
      return r;
    }

    // (public) this >> n
    function bnShiftRight(n) {
      var r = nbi();
      if(n < 0) this.lShiftTo(-n,r); else this.rShiftTo(n,r);
      return r;
    }

    // return index of lowest 1-bit in x, x < 2^31
    function lbit(x) {
      if(x == 0) return -1;
      var r = 0;
      if((x&0xffff) == 0) { x >>= 16; r += 16; }
      if((x&0xff) == 0) { x >>= 8; r += 8; }
      if((x&0xf) == 0) { x >>= 4; r += 4; }
      if((x&3) == 0) { x >>= 2; r += 2; }
      if((x&1) == 0) ++r;
      return r;
    }

    // (public) returns index of lowest 1-bit (or -1 if none)
    function bnGetLowestSetBit() {
      for(var i = 0; i < this.t; ++i)
        if(this[i] != 0) return i*this.DB+lbit(this[i]);
      if(this.s < 0) return this.t*this.DB;
      return -1;
    }

    // return number of 1 bits in x
    function cbit(x) {
      var r = 0;
      while(x != 0) { x &= x-1; ++r; }
      return r;
    }

    // (public) return number of set bits
    function bnBitCount() {
      var r = 0, x = this.s&this.DM;
      for(var i = 0; i < this.t; ++i) r += cbit(this[i]^x);
      return r;
    }

    // (public) true iff nth bit is set
    function bnTestBit(n) {
      var j = Math.floor(n/this.DB);
      if(j >= this.t) return(this.s!=0);
      return((this[j]&(1<<(n%this.DB)))!=0);
    }

    // (protected) this op (1<<n)
    function bnpChangeBit(n,op) {
      var r = BigInteger.ONE.shiftLeft(n);
      this.bitwiseTo(r,op,r);
      return r;
    }

    // (public) this | (1<<n)
    function bnSetBit(n) { return this.changeBit(n,op_or); }

    // (public) this & ~(1<<n)
    function bnClearBit(n) { return this.changeBit(n,op_andnot); }

    // (public) this ^ (1<<n)
    function bnFlipBit(n) { return this.changeBit(n,op_xor); }

    // (protected) r = this + a
    function bnpAddTo(a,r) {
      var i = 0, c = 0, m = Math.min(a.t,this.t);
      while(i < m) {
        c += this[i]+a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      if(a.t < this.t) {
        c += a.s;
        while(i < this.t) {
          c += this[i];
          r[i++] = c&this.DM;
          c >>= this.DB;
        }
        c += this.s;
      }
      else {
        c += this.s;
        while(i < a.t) {
          c += a[i];
          r[i++] = c&this.DM;
          c >>= this.DB;
        }
        c += a.s;
      }
      r.s = (c<0)?-1:0;
      if(c > 0) r[i++] = c;
      else if(c < -1) r[i++] = this.DV+c;
      r.t = i;
      r.clamp();
    }

    // (public) this + a
    function bnAdd(a) { var r = nbi(); this.addTo(a,r); return r; }

    // (public) this - a
    function bnSubtract(a) { var r = nbi(); this.subTo(a,r); return r; }

    // (public) this * a
    function bnMultiply(a) { var r = nbi(); this.multiplyTo(a,r); return r; }

    // (public) this^2
    function bnSquare() { var r = nbi(); this.squareTo(r); return r; }

    // (public) this / a
    function bnDivide(a) { var r = nbi(); this.divRemTo(a,r,null); return r; }

    // (public) this % a
    function bnRemainder(a) { var r = nbi(); this.divRemTo(a,null,r); return r; }

    // (public) [this/a,this%a]
    function bnDivideAndRemainder(a) {
      var q = nbi(), r = nbi();
      this.divRemTo(a,q,r);
      return new Array(q,r);
    }

    // (protected) this *= n, this >= 0, 1 < n < DV
    function bnpDMultiply(n) {
      this[this.t] = this.am(0,n-1,this,0,0,this.t);
      ++this.t;
      this.clamp();
    }

    // (protected) this += n << w words, this >= 0
    function bnpDAddOffset(n,w) {
      if(n == 0) return;
      while(this.t <= w) this[this.t++] = 0;
      this[w] += n;
      while(this[w] >= this.DV) {
        this[w] -= this.DV;
        if(++w >= this.t) this[this.t++] = 0;
        ++this[w];
      }
    }

    // A "null" reducer
    function NullExp() {}
    function nNop(x) { return x; }
    function nMulTo(x,y,r) { x.multiplyTo(y,r); }
    function nSqrTo(x,r) { x.squareTo(r); }

    NullExp.prototype.convert = nNop;
    NullExp.prototype.revert = nNop;
    NullExp.prototype.mulTo = nMulTo;
    NullExp.prototype.sqrTo = nSqrTo;

    // (public) this^e
    function bnPow(e) { return this.exp(e,new NullExp()); }

    // (protected) r = lower n words of "this * a", a.t <= n
    // "this" should be the larger one if appropriate.
    function bnpMultiplyLowerTo(a,n,r) {
      var i = Math.min(this.t+a.t,n);
      r.s = 0; // assumes a,this >= 0
      r.t = i;
      while(i > 0) r[--i] = 0;
      var j;
      for(j = r.t-this.t; i < j; ++i) r[i+this.t] = this.am(0,a[i],r,i,0,this.t);
      for(j = Math.min(a.t,n); i < j; ++i) this.am(0,a[i],r,i,0,n-i);
      r.clamp();
    }

    // (protected) r = "this * a" without lower n words, n > 0
    // "this" should be the larger one if appropriate.
    function bnpMultiplyUpperTo(a,n,r) {
      --n;
      var i = r.t = this.t+a.t-n;
      r.s = 0; // assumes a,this >= 0
      while(--i >= 0) r[i] = 0;
      for(i = Math.max(n-this.t,0); i < a.t; ++i)
        r[this.t+i-n] = this.am(n-i,a[i],r,0,0,this.t+i-n);
      r.clamp();
      r.drShiftTo(1,r);
    }

    // Barrett modular reduction
    function Barrett(m) {
      // setup Barrett
      this.r2 = nbi();
      this.q3 = nbi();
      BigInteger.ONE.dlShiftTo(2*m.t,this.r2);
      this.mu = this.r2.divide(m);
      this.m = m;
    }

    function barrettConvert(x) {
      if(x.s < 0 || x.t > 2*this.m.t) return x.mod(this.m);
      else if(x.compareTo(this.m) < 0) return x;
      else { var r = nbi(); x.copyTo(r); this.reduce(r); return r; }
    }

    function barrettRevert(x) { return x; }

    // x = x mod m (HAC 14.42)
    function barrettReduce(x) {
      x.drShiftTo(this.m.t-1,this.r2);
      if(x.t > this.m.t+1) { x.t = this.m.t+1; x.clamp(); }
      this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3);
      this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);
      while(x.compareTo(this.r2) < 0) x.dAddOffset(1,this.m.t+1);
      x.subTo(this.r2,x);
      while(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
    }

    // r = x^2 mod m; x != r
    function barrettSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

    // r = x*y mod m; x,y != r
    function barrettMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

    Barrett.prototype.convert = barrettConvert;
    Barrett.prototype.revert = barrettRevert;
    Barrett.prototype.reduce = barrettReduce;
    Barrett.prototype.mulTo = barrettMulTo;
    Barrett.prototype.sqrTo = barrettSqrTo;

    // (public) this^e % m (HAC 14.85)
    function bnModPow(e,m) {
      var i = e.bitLength(), k, r = nbv(1), z;
      if(i <= 0) return r;
      else if(i < 18) k = 1;
      else if(i < 48) k = 3;
      else if(i < 144) k = 4;
      else if(i < 768) k = 5;
      else k = 6;
      if(i < 8)
        z = new Classic(m);
      else if(m.isEven())
        z = new Barrett(m);
      else
        z = new Montgomery(m);

      // precomputation
      var g = new Array(), n = 3, k1 = k-1, km = (1<<k)-1;
      g[1] = z.convert(this);
      if(k > 1) {
        var g2 = nbi();
        z.sqrTo(g[1],g2);
        while(n <= km) {
          g[n] = nbi();
          z.mulTo(g2,g[n-2],g[n]);
          n += 2;
        }
      }

      var j = e.t-1, w, is1 = true, r2 = nbi(), t;
      i = nbits(e[j])-1;
      while(j >= 0) {
        if(i >= k1) w = (e[j]>>(i-k1))&km;
        else {
          w = (e[j]&((1<<(i+1))-1))<<(k1-i);
          if(j > 0) w |= e[j-1]>>(this.DB+i-k1);
        }

        n = k;
        while((w&1) == 0) { w >>= 1; --n; }
        if((i -= n) < 0) { i += this.DB; --j; }
        if(is1) {    // ret == 1, don't bother squaring or multiplying it
          g[w].copyTo(r);
          is1 = false;
        }
        else {
          while(n > 1) { z.sqrTo(r,r2); z.sqrTo(r2,r); n -= 2; }
          if(n > 0) z.sqrTo(r,r2); else { t = r; r = r2; r2 = t; }
          z.mulTo(r2,g[w],r);
        }

        while(j >= 0 && (e[j]&(1<<i)) == 0) {
          z.sqrTo(r,r2); t = r; r = r2; r2 = t;
          if(--i < 0) { i = this.DB-1; --j; }
        }
      }
      return z.revert(r);
    }

    // (public) gcd(this,a) (HAC 14.54)
    function bnGCD(a) {
      var x = (this.s<0)?this.negate():this.clone();
      var y = (a.s<0)?a.negate():a.clone();
      if(x.compareTo(y) < 0) { var t = x; x = y; y = t; }
      var i = x.getLowestSetBit(), g = y.getLowestSetBit();
      if(g < 0) return x;
      if(i < g) g = i;
      if(g > 0) {
        x.rShiftTo(g,x);
        y.rShiftTo(g,y);
      }
      while(x.signum() > 0) {
        if((i = x.getLowestSetBit()) > 0) x.rShiftTo(i,x);
        if((i = y.getLowestSetBit()) > 0) y.rShiftTo(i,y);
        if(x.compareTo(y) >= 0) {
          x.subTo(y,x);
          x.rShiftTo(1,x);
        }
        else {
          y.subTo(x,y);
          y.rShiftTo(1,y);
        }
      }
      if(g > 0) y.lShiftTo(g,y);
      return y;
    }

    // (protected) this % n, n < 2^26
    function bnpModInt(n) {
      if(n <= 0) return 0;
      var d = this.DV%n, r = (this.s<0)?n-1:0;
      if(this.t > 0)
        if(d == 0) r = this[0]%n;
        else for(var i = this.t-1; i >= 0; --i) r = (d*r+this[i])%n;
      return r;
    }

    // (public) 1/this % m (HAC 14.61)
    function bnModInverse(m) {
      var ac = m.isEven();
      if((this.isEven() && ac) || m.signum() == 0) return BigInteger.ZERO;
      var u = m.clone(), v = this.clone();
      var a = nbv(1), b = nbv(0), c = nbv(0), d = nbv(1);
      while(u.signum() != 0) {
        while(u.isEven()) {
          u.rShiftTo(1,u);
          if(ac) {
            if(!a.isEven() || !b.isEven()) { a.addTo(this,a); b.subTo(m,b); }
            a.rShiftTo(1,a);
          }
          else if(!b.isEven()) b.subTo(m,b);
          b.rShiftTo(1,b);
        }
        while(v.isEven()) {
          v.rShiftTo(1,v);
          if(ac) {
            if(!c.isEven() || !d.isEven()) { c.addTo(this,c); d.subTo(m,d); }
            c.rShiftTo(1,c);
          }
          else if(!d.isEven()) d.subTo(m,d);
          d.rShiftTo(1,d);
        }
        if(u.compareTo(v) >= 0) {
          u.subTo(v,u);
          if(ac) a.subTo(c,a);
          b.subTo(d,b);
        }
        else {
          v.subTo(u,v);
          if(ac) c.subTo(a,c);
          d.subTo(b,d);
        }
      }
      if(v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;
      if(d.compareTo(m) >= 0) return d.subtract(m);
      if(d.signum() < 0) d.addTo(m,d); else return d;
      if(d.signum() < 0) return d.add(m); else return d;
    }

    var lowprimes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997];
    var lplim = (1<<26)/lowprimes[lowprimes.length-1];

    // (public) test primality with certainty >= 1-.5^t
    function bnIsProbablePrime(t) {
      var i, x = this.abs();
      if(x.t == 1 && x[0] <= lowprimes[lowprimes.length-1]) {
        for(i = 0; i < lowprimes.length; ++i)
          if(x[0] == lowprimes[i]) return true;
        return false;
      }
      if(x.isEven()) return false;
      i = 1;
      while(i < lowprimes.length) {
        var m = lowprimes[i], j = i+1;
        while(j < lowprimes.length && m < lplim) m *= lowprimes[j++];
        m = x.modInt(m);
        while(i < j) if(m%lowprimes[i++] == 0) return false;
      }
      return x.millerRabin(t);
    }

    // (protected) true if probably prime (HAC 4.24, Miller-Rabin)
    function bnpMillerRabin(t) {
      var n1 = this.subtract(BigInteger.ONE);
      var k = n1.getLowestSetBit();
      if(k <= 0) return false;
      var r = n1.shiftRight(k);
      t = (t+1)>>1;
      if(t > lowprimes.length) t = lowprimes.length;
      var a = nbi();
      for(var i = 0; i < t; ++i) {
        //Pick bases at random, instead of starting at 2
        a.fromInt(lowprimes[Math.floor(Math.random()*lowprimes.length)]);
        var y = a.modPow(r,this);
        if(y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {
          var j = 1;
          while(j++ < k && y.compareTo(n1) != 0) {
            y = y.modPowInt(2,this);
            if(y.compareTo(BigInteger.ONE) == 0) return false;
          }
          if(y.compareTo(n1) != 0) return false;
        }
      }
      return true;
    }

    // protected
    BigInteger.prototype.chunkSize = bnpChunkSize;
    BigInteger.prototype.toRadix = bnpToRadix;
    BigInteger.prototype.fromRadix = bnpFromRadix;
    BigInteger.prototype.fromNumber = bnpFromNumber;
    BigInteger.prototype.bitwiseTo = bnpBitwiseTo;
    BigInteger.prototype.changeBit = bnpChangeBit;
    BigInteger.prototype.addTo = bnpAddTo;
    BigInteger.prototype.dMultiply = bnpDMultiply;
    BigInteger.prototype.dAddOffset = bnpDAddOffset;
    BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;
    BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;
    BigInteger.prototype.modInt = bnpModInt;
    BigInteger.prototype.millerRabin = bnpMillerRabin;

    // public
    BigInteger.prototype.clone = bnClone;
    BigInteger.prototype.intValue = bnIntValue;
    BigInteger.prototype.byteValue = bnByteValue;
    BigInteger.prototype.shortValue = bnShortValue;
    BigInteger.prototype.signum = bnSigNum;
    BigInteger.prototype.toByteArray = bnToByteArray;
    BigInteger.prototype.equals = bnEquals;
    BigInteger.prototype.min = bnMin;
    BigInteger.prototype.max = bnMax;
    BigInteger.prototype.and = bnAnd;
    BigInteger.prototype.or = bnOr;
    BigInteger.prototype.xor = bnXor;
    BigInteger.prototype.andNot = bnAndNot;
    BigInteger.prototype.not = bnNot;
    BigInteger.prototype.shiftLeft = bnShiftLeft;
    BigInteger.prototype.shiftRight = bnShiftRight;
    BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;
    BigInteger.prototype.bitCount = bnBitCount;
    BigInteger.prototype.testBit = bnTestBit;
    BigInteger.prototype.setBit = bnSetBit;
    BigInteger.prototype.clearBit = bnClearBit;
    BigInteger.prototype.flipBit = bnFlipBit;
    BigInteger.prototype.add = bnAdd;
    BigInteger.prototype.subtract = bnSubtract;
    BigInteger.prototype.multiply = bnMultiply;
    BigInteger.prototype.divide = bnDivide;
    BigInteger.prototype.remainder = bnRemainder;
    BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;
    BigInteger.prototype.modPow = bnModPow;
    BigInteger.prototype.modInverse = bnModInverse;
    BigInteger.prototype.pow = bnPow;
    BigInteger.prototype.gcd = bnGCD;
    BigInteger.prototype.isProbablePrime = bnIsProbablePrime;

    // JSBN-specific extension
    BigInteger.prototype.square = bnSquare;

    // Expose the Barrett function
    BigInteger.prototype.Barrett = Barrett

    // BigInteger interfaces not implemented in jsbn:

    // BigInteger(int signum, byte[] magnitude)
    // double doubleValue()
    // float floatValue()
    // int hashCode()
    // long longValue()
    // static BigInteger valueOf(long val)

    // Random number generator - requires a PRNG backend, e.g. prng4.js

    // For best results, put code like
    // <body onClick='rng_seed_time();' onKeyPress='rng_seed_time();'>
    // in your main HTML document.

    var rng_state;
    var rng_pool;
    var rng_pptr;

    // Mix in a 32-bit integer into the pool
    function rng_seed_int(x) {
      rng_pool[rng_pptr++] ^= x & 255;
      rng_pool[rng_pptr++] ^= (x >> 8) & 255;
      rng_pool[rng_pptr++] ^= (x >> 16) & 255;
      rng_pool[rng_pptr++] ^= (x >> 24) & 255;
      if(rng_pptr >= rng_psize) rng_pptr -= rng_psize;
    }

    // Mix in the current time (w/milliseconds) into the pool
    function rng_seed_time() {
      rng_seed_int(new Date().getTime());
    }

    // Initialize the pool with junk if needed.
    if(rng_pool == null) {
      rng_pool = new Array();
      rng_pptr = 0;
      var t;
      if(typeof window !== "undefined" && window.crypto) {
        if (window.crypto.getRandomValues) {
          // Use webcrypto if available
          var ua = new Uint8Array(32);
          window.crypto.getRandomValues(ua);
          for(t = 0; t < 32; ++t)
            rng_pool[rng_pptr++] = ua[t];
        }
        else if(navigator.appName == "Netscape" && navigator.appVersion < "5") {
          // Extract entropy (256 bits) from NS4 RNG if available
          var z = window.crypto.random(32);
          for(t = 0; t < z.length; ++t)
            rng_pool[rng_pptr++] = z.charCodeAt(t) & 255;
        }
      }
      while(rng_pptr < rng_psize) {  // extract some randomness from Math.random()
        t = Math.floor(65536 * Math.random());
        rng_pool[rng_pptr++] = t >>> 8;
        rng_pool[rng_pptr++] = t & 255;
      }
      rng_pptr = 0;
      rng_seed_time();
      //rng_seed_int(window.screenX);
      //rng_seed_int(window.screenY);
    }

    function rng_get_byte() {
      if(rng_state == null) {
        rng_seed_time();
        rng_state = prng_newstate();
        rng_state.init(rng_pool);
        for(rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr)
          rng_pool[rng_pptr] = 0;
        rng_pptr = 0;
        //rng_pool = null;
      }
      // TODO: allow reseeding after first request
      return rng_state.next();
    }

    function rng_get_bytes(ba) {
      var i;
      for(i = 0; i < ba.length; ++i) ba[i] = rng_get_byte();
    }

    function SecureRandom() {}

    SecureRandom.prototype.nextBytes = rng_get_bytes;

    // prng4.js - uses Arcfour as a PRNG

    function Arcfour() {
      this.i = 0;
      this.j = 0;
      this.S = new Array();
    }

    // Initialize arcfour context from key, an array of ints, each from [0..255]
    function ARC4init(key) {
      var i, j, t;
      for(i = 0; i < 256; ++i)
        this.S[i] = i;
      j = 0;
      for(i = 0; i < 256; ++i) {
        j = (j + this.S[i] + key[i % key.length]) & 255;
        t = this.S[i];
        this.S[i] = this.S[j];
        this.S[j] = t;
      }
      this.i = 0;
      this.j = 0;
    }

    function ARC4next() {
      var t;
      this.i = (this.i + 1) & 255;
      this.j = (this.j + this.S[this.i]) & 255;
      t = this.S[this.i];
      this.S[this.i] = this.S[this.j];
      this.S[this.j] = t;
      return this.S[(t + this.S[this.i]) & 255];
    }

    Arcfour.prototype.init = ARC4init;
    Arcfour.prototype.next = ARC4next;

    // Plug in your RNG constructor here
    function prng_newstate() {
      return new Arcfour();
    }

    // Pool size must be a multiple of 4 and greater than 32.
    // An array of bytes the size of the pool will be passed to init()
    var rng_psize = 256;

    if (true) {
        exports = module.exports = {
            default: BigInteger,
            BigInteger: BigInteger,
            SecureRandom: SecureRandom,
        };
    } else {}

}).call(this);


/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, Buffer) {

var _typeof2 = __webpack_require__(10);

var _typeof3 = _interopRequireDefault(_typeof2);

var _base = __webpack_require__(253);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MqttClient = __webpack_require__(254);
var Store = __webpack_require__(134);
var url = __webpack_require__(154);
var xtend = __webpack_require__(91);
var Config = __webpack_require__(95);
var protocols = {};

var host = 'wildfirechat.net';
var gAppId = "wx_12345678";
var gAppKey = "83ae04335b791d68df7eb12df7cc732bcdc8a417";

if (process.title !== 'browser') {
  protocols.mqtt = __webpack_require__(155);
  protocols.tcp = __webpack_require__(155);
  protocols.ssl = __webpack_require__(96);
  protocols.tls = __webpack_require__(96);
  protocols.mqtts = __webpack_require__(96);
} else {
  protocols.wx = __webpack_require__(156);
  protocols.wxs = __webpack_require__(156);

  protocols.ali = __webpack_require__(157);
  protocols.alis = __webpack_require__(157);

  protocols.bd = __webpack_require__(158);
  protocols.bds = __webpack_require__(158);

  protocols.tt = __webpack_require__(159);
  protocols.tts = __webpack_require__(159);

  protocols.qq = __webpack_require__(160);
  protocols.qqs = __webpack_require__(160);

  protocols.uni = __webpack_require__(161);
  protocols.unis = __webpack_require__(161);
}

protocols.ws = __webpack_require__(162);
protocols.wss = __webpack_require__(162);

/**
 * Parse the auth attribute and merge username and password in the options object.
 *
 * @param {Object} [opts] option object
 */
function parseAuthOptions(opts) {
  var matches;
  if (opts.auth) {
    matches = opts.auth.match(/^(.+):(.+)$/);
    if (matches) {
      opts.username = matches[1];
      opts.password = matches[2];
    } else {
      opts.username = opts.auth;
    }
  }
}

function connect(userId, clientId, token, callback, options) {
  route(userId, clientId, token, callback, options);
}

function server() {
  return 'wildfirechat.net';
}

function route(userId, clientId, token, callback, extra) {
  var url = void 0;
  var ROUTE_PORT = Config.default.ROUTE_PORT ? Config.default.ROUTE_PORT : 80;
  if (Config.default.USE_WSS) {
    log('https route');
    url = 'https://' + server() + (ROUTE_PORT !== 443 ? ":" + ROUTE_PORT : '') + '/route';
  } else {
    url = 'http://' + server() + (ROUTE_PORT !== 80 ? ":" + ROUTE_PORT : '') + '/route';
  }
  var protobuf = __webpack_require__(163);
  var protocolRoute = __webpack_require__(361);
  var protocolRouteRoot = protobuf.Root.fromJSON(protocolRoute);

  var RouteRequest = protocolRouteRoot.lookupType("RouteRequest");
  var RouteResponse = protocolRouteRoot.lookupType("RouteResponse");
  var IMHttpWrapper = protocolRouteRoot.lookupType("IMHttpWrapper");

  var AESDecrypt = __webpack_require__(48).AESDecrypt;
  var Uint8ToStr = __webpack_require__(48).Uint8ToStr;
  var AESEncrypt = __webpack_require__(48).AESEncrypt;

  var privateSecret = '';
  var password = '';

  var base64Decode = __webpack_require__(61).decode;
  var base64Encode = __webpack_require__(61).encode;

  var routeReq = RouteRequest.create();
  routeReq.app = 'cn.wildfirechat.chat.wx';
  routeReq.appVersion = '0.1';
  routeReq.deviceName = 'wx';
  routeReq.platform = 6;
  routeReq.phoneName = 'browser';
  routeReq.sdkVersion = '0.1';
  routeReq.wxAppId = gAppId;
  routeReq.wxAppKey = gAppKey;
  routeReq.language = Config.default.LANGUAGE;

  var tokenD = void 0;
  try {
    tokenD = Uint8ToStr(AESDecrypt(token, '', false));
  } catch (e) {
    log('token error!!!');
  }
  var userToken = tokenD.split('|')[0];
  privateSecret = tokenD.split('|')[1];
  password = new Buffer(AESEncrypt(userToken, privateSecret), 'base64');

  routeReq.host = AESEncrypt(server(), '');

  var routeReqData = RouteRequest.encode(routeReq).finish();

  var imHttpWrapper = IMHttpWrapper.create();
  imHttpWrapper.clientId = clientId;
  imHttpWrapper.token = userToken;
  imHttpWrapper.request = 'ROUTE';
  imHttpWrapper.data = routeReqData;

  var imHttpWrapperData = IMHttpWrapper.encode(imHttpWrapper).finish();
  var data = AESEncrypt(imHttpWrapperData, privateSecret);

  extra.mp.request({
    url: url,
    data: data,
    header: {
      'content-type': 'application/octet-stream', // 默认值
      'p': 'wx',
      'cid': AESEncrypt(clientId),
      'uid': AESEncrypt(userId),
      'Content-Type': 'application/octet-stream',
      'appId': gAppId,
      'appKey': gAppKey
    },
    /*ali*/headers: {
      'content-type': 'application/octet-stream', // 默认值
      'p': 'wx',
      'cid': AESEncrypt(clientId),
      'uid': AESEncrypt(userId),
      'Content-Type': 'application/octet-stream',
      'appId': gAppId,
      'appKey': gAppKey
    },
    method: 'POST',
    dataType: 'text',
    success: function success(oRes) {
      if (oRes.statusCode === 200 || oRes.status === 200 /*ali*/) {
          var buffer = base64Decode(oRes.data);
          var statusView = new Int8Array(buffer, 0, 1);
          if (statusView[0] === 0) {
            var routeRes = base64Encode(buffer.slice(1));
            var data = AESDecrypt(routeRes, privateSecret, true);
            var res = RouteResponse.decode(data);

            var willTopic = res.node + '|' + server();
            var tmp = '';
            for (var i = 0; i < willTopic.length; i++) {
              tmp += String.fromCharCode(willTopic[i].charCodeAt(0) ^ 0x5A);
            }
            willTopic = (0, _base.btoa)(unescape(encodeURIComponent(tmp)));

            var options = {
              keepalive: Config.default.KEEP_ALIVE_TIMEOUT,
              clientId: clientId,
              protocolId: 'MQTT',
              protocolVersion: 6,
              clean: true,
              reconnectPeriod: 0,
              resubscribe: false,
              connectTimeout: 20 * 1000,
              a: host,
              will: {
                topic: willTopic,
                payload: 'Connection Closed abnormally..!',
                qos: 1, // at_least_once
                retain: false
              },
              rejectUnauthorized: false
            };
            options.username = userId;
            options.password = password;
            options.extra = extra;

            var connectTime = new Date().getTime();
            var client = void 0;
            var isNewComercialAuth = (res.commercial & 0x08) > 0;

            var port = void 0;
            log('route res', res.host, res.longPort, res.wssPort);
            if (Config.default.USE_WSS) {
              log('wss mqtts');
              port = isNewComercialAuth ? res.wssPort : res.longPort;
              port = port ? port : res.longPort;
              client = connectEx(extra.scheme + 's://' + res.host + ':' + port, options);
            } else {
              log('ws mqtt', Config.default.USE_WSS);
              port = res.longPort;
              client = connectEx(extra.scheme + '://' + res.host + ':' + port, options);
            }
            routeHost = res.host;
            var serverConfigs = {
              //CommercialFlag
              //第0位表示是否是商业版
              //第1位表示是否开启了回执功能
              //第2位表示是否用户群中被踢时清除消息
              //第3位表示新的商业版授权方式
              //第4位表示客户端是否禁止漫游会话列表
              //第5位表示客户端是否保留会话当群组解散后
              //第6位表示是否支持大文件上传
              //第7位表示是否获取下载路径时支持备份地址
              //第8位表示是否禁止同步草稿功
              // int CommercialFlag_Mask_Commercial = 0x01;
              // int CommercialFlag_Mask_Receipt = 0x02;
              // int CommercialFlag_Mask_ClearMsgWhenKickoff = 0x04;
              // int CommercialFlag_Mask_NewCommercial_Auth = 0x08;
              // int CommercialFlag_Mask_Disable_Roaming_ConvList = 0x10;
              // int CommercialFlag_Mask_KeepMsgAfterDismiss = 0x20;
              // int CommercialFlag_Mask_BigFileUpload = 0x40;
              // int CommercialFlag_Mask_BackupDownloadUrl = 0x80;
              // int CommercialFlag_Mask_DisableSyncDraft = 0x100
              isReceiptEnable: (res.commercial & 0x02) > 0,
              isClearGroupMsgWhenKickoff: (res.commercial & 0x04) > 0,
              isDisableRoamingConvList: (res.commercial & 0x10) > 0,
              isKeepMsgAfterDismiss: (res.commercial & 0x20) > 0,
              isSupportBigFileUpload: (res.commercial & 0x40) > 0,
              isBackupDownloadUrl: (res.commercial & 0x80) > 0,
              isGlobalDisableSyncDraft: (res.commercial & 0x100) > 0,
              isSupportQos0Message: (res.commercial & 0x200) > 0,
              isUserOnlineStateEnable: (res.commercial & 0x400) > 0
            };
            if ((res.commercial & 0x01) > 0) {
              callback(0, client, privateSecret, connectTime, serverConfigs);
            } else {
              callback(-1);
            }
          } else {
            log('route error', url, statusView[0]);
            callback(statusView[0]);
          }
        } else {
        console.log('route error', oRes);
      }
    },
    fail: function fail(err) {
      log('http route error，请先检查下USE_WSS、ROUTE_PORT配置', url, err, extra.mp.request.status);
      callback(-1);
    }
  });
}

/**
 * connect - connect to an MQTT broker.
 *
 * @param {String} [brokerUrl] - url of the broker, optional
 * @param {Object} opts - see MqttClient#constructor
 */
function connectEx(brokerUrl, opts) {
  if ((typeof brokerUrl === 'undefined' ? 'undefined' : (0, _typeof3.default)(brokerUrl)) === 'object' && !opts) {
    opts = brokerUrl;
    brokerUrl = null;
  }

  opts = opts || {};

  if (brokerUrl) {
    var parsed = url.parse(brokerUrl, true);
    if (parsed.port != null) {
      parsed.port = Number(parsed.port);
    }

    opts = xtend(parsed, opts);

    if (opts.protocol === null) {
      throw new Error('Missing protocol');
    }
    opts.protocol = opts.protocol.replace(/:$/, '');
  }

  // merge in the auth options if supplied
  parseAuthOptions(opts);

  // support clientId passed in the query string of the url
  if (opts.query && typeof opts.query.clientId === 'string') {
    opts.clientId = opts.query.clientId;
  }

  if (opts.cert && opts.key) {
    if (opts.protocol) {
      if (['mqtts', 'wss', 'wxs', 'alis', 'bds', 'tts', 'qqs', 'unis'].indexOf(opts.protocol) === -1) {
        switch (opts.protocol) {
          case 'mqtt':
            opts.protocol = 'mqtts';
            break;
          case 'ws':
            opts.protocol = 'wss';
            break;
          case 'wx':
            opts.protocol = 'wxs';
            break;
          case 'ali':
            opts.protocol = 'alis';
            break;
          case 'bd':
            opts.protocol = 'bds';
            break;
          case 'tt':
            opts.protocol = 'tts';
            break;
          case 'qq':
            opts.protocol = 'qqs';
            break;
          case 'uni':
            opts.protocol = 'unis';
            break;
          default:
            throw new Error('Unknown protocol for secure connection: "' + opts.protocol + '"!');
        }
      }
    } else {
      // don't know what protocol he want to use, mqtts or wss
      throw new Error('Missing secure protocol key');
    }
  }

  if (!protocols[opts.protocol]) {
    var isSecure = ['mqtts', 'wss'].indexOf(opts.protocol) !== -1;
    opts.protocol = ['mqtt', 'mqtts', 'ws', 'wss', 'wx', 'wxs', 'ali', 'alis', 'bd', 'bds', 'tt', 'tts', 'qq', 'qqs', 'uni', 'unis'].filter(function (key, index) {
      if (isSecure && index % 2 === 0) {
        // Skip insecure protocols when requesting a secure one.
        return false;
      }
      return typeof protocols[key] === 'function';
    })[0];
  }

  if (opts.clean === false && !opts.clientId) {
    throw new Error('Missing clientId for unclean clients');
  }

  if (opts.protocol) {
    opts.defaultProtocol = opts.protocol;
  }

  function wrapper(client) {
    if (opts.servers) {
      if (!client._reconnectCount || client._reconnectCount === opts.servers.length) {
        client._reconnectCount = 0;
      }

      opts.host = opts.servers[client._reconnectCount].host;
      opts.port = opts.servers[client._reconnectCount].port;
      opts.protocol = !opts.servers[client._reconnectCount].protocol ? opts.defaultProtocol : opts.servers[client._reconnectCount].protocol;
      opts.hostname = opts.host;

      client._reconnectCount++;
    }

    return protocols[opts.protocol](client, opts);
  }

  return new MqttClient(wrapper, opts);
}

var routeHost = '';
function Host() {
  return routeHost;
}

function log(message) {
  if (!Config.default.DISABLE_LOG) {
    var _console;

    for (var _len = arguments.length, optionalParams = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      optionalParams[_key - 1] = arguments[_key];
    }

    (_console = console).log.apply(_console, [message].concat(optionalParams));
  }
}

module.exports = connect;
module.exports.connect = connect;
module.exports.MqttClient = MqttClient;
module.exports.Store = Store;
module.exports.host = Host;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3), __webpack_require__(11).Buffer))

/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(245), __esModule: true };

/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(31);
__webpack_require__(46);
module.exports = __webpack_require__(88).f('iterator');


/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(247), __esModule: true };

/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(248);
__webpack_require__(54);
__webpack_require__(251);
__webpack_require__(252);
module.exports = __webpack_require__(0).Symbol;


/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// ECMAScript 6 symbols shim
var global = __webpack_require__(4);
var has = __webpack_require__(27);
var DESCRIPTORS = __webpack_require__(9);
var $export = __webpack_require__(2);
var redefine = __webpack_require__(105);
var META = __webpack_require__(59).KEY;
var $fails = __webpack_require__(26);
var shared = __webpack_require__(77);
var setToStringTag = __webpack_require__(45);
var uid = __webpack_require__(57);
var wks = __webpack_require__(5);
var wksExt = __webpack_require__(88);
var wksDefine = __webpack_require__(89);
var enumKeys = __webpack_require__(249);
var isArray = __webpack_require__(124);
var anObject = __webpack_require__(18);
var isObject = __webpack_require__(8);
var toObject = __webpack_require__(33);
var toIObject = __webpack_require__(32);
var toPrimitive = __webpack_require__(74);
var createDesc = __webpack_require__(41);
var _create = __webpack_require__(55);
var gOPNExt = __webpack_require__(132);
var $GOPD = __webpack_require__(250);
var $GOPS = __webpack_require__(84);
var $DP = __webpack_require__(12);
var $keys = __webpack_require__(43);
var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function' && !!$GOPS.f;
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function () {
  return _create(dP({}, 'a', {
    get: function () { return dP(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function (tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, { enumerable: createDesc(0, false) });
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys.length;
  var key;
  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if (!USE_NATIVE) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function (value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  __webpack_require__(133).f = gOPNExt.f = $getOwnPropertyNames;
  __webpack_require__(58).f = $propertyIsEnumerable;
  $GOPS.f = $getOwnPropertySymbols;

  if (DESCRIPTORS && !__webpack_require__(39)) {
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function (name) {
    return wrap(wks(name));
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

for (var es6Symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);

for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function (key) {
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
  },
  useSetter: function () { setter = true; },
  useSimple: function () { setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
// https://bugs.chromium.org/p/v8/issues/detail?id=3443
var FAILS_ON_PRIMITIVES = $fails(function () { $GOPS.f(1); });

$export($export.S + $export.F * FAILS_ON_PRIMITIVES, 'Object', {
  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
    return $GOPS.f(toObject(it));
  }
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i) args.push(arguments[i++]);
    $replacer = replacer = args[1];
    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
    if (!isArray(replacer)) replacer = function (key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(22)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);


/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

// all enumerable object keys, includes symbols
var getKeys = __webpack_require__(43);
var gOPS = __webpack_require__(84);
var pIE = __webpack_require__(58);
module.exports = function (it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;
  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;
    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
  } return result;
};


/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

var pIE = __webpack_require__(58);
var createDesc = __webpack_require__(41);
var toIObject = __webpack_require__(32);
var toPrimitive = __webpack_require__(74);
var has = __webpack_require__(27);
var IE8_DOM_DEFINE = __webpack_require__(104);
var gOPD = Object.getOwnPropertyDescriptor;

exports.f = __webpack_require__(9) ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) { /* empty */ }
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};


/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(89)('asyncIterator');


/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(89)('observable');


/***/ }),
/* 253 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__253__;

/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {

/**
 * Module dependencies
 */

var _typeof2 = __webpack_require__(10);

var _typeof3 = _interopRequireDefault(_typeof2);

var _create = __webpack_require__(6);

var _create2 = _interopRequireDefault(_create);

var _keys = __webpack_require__(7);

var _keys2 = _interopRequireDefault(_keys);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var events = __webpack_require__(49);
var Store = __webpack_require__(134);
var mqttPacket = __webpack_require__(319);
var Writable = __webpack_require__(14).Writable;
var inherits = __webpack_require__(19);
var reInterval = __webpack_require__(331);
var validations = __webpack_require__(332);
var xtend = __webpack_require__(91);
var setImmediate = global.setImmediate || function (callback) {
  // works in node v0.8
  process.nextTick(callback);
};
var defaultConnectOptions = {
  keepalive: 60,
  reschedulePings: true,
  protocolId: 'MQTT',
  protocolVersion: 4,
  reconnectPeriod: 1000,
  connectTimeout: 30 * 1000,
  clean: true,
  resubscribe: true
};
var errors = {
  0: '',
  1: 'Unacceptable protocol version',
  2: 'Identifier rejected',
  3: 'Server unavailable',
  4: 'Bad username or password',
  5: 'Not authorized',
  16: 'No matching subscribers',
  17: 'No subscription existed',
  128: 'Unspecified error',
  129: 'Malformed Packet',
  130: 'Protocol Error',
  131: 'Implementation specific error',
  132: 'Unsupported Protocol Version',
  133: 'Client Identifier not valid',
  134: 'Bad User Name or Password',
  135: 'Not authorized',
  136: 'Server unavailable',
  137: 'Server busy',
  138: 'Banned',
  139: 'Server shutting down',
  140: 'Bad authentication method',
  141: 'Keep Alive timeout',
  142: 'Session taken over',
  143: 'Topic Filter invalid',
  144: 'Topic Name invalid',
  145: 'Packet identifier in use',
  146: 'Packet Identifier not found',
  147: 'Receive Maximum exceeded',
  148: 'Topic Alias invalid',
  149: 'Packet too large',
  150: 'Message rate too high',
  151: 'Quota exceeded',
  152: 'Administrative action',
  153: 'Payload format invalid',
  154: 'Retain not supported',
  155: 'QoS not supported',
  156: 'Use another server',
  157: 'Server moved',
  158: 'Shared Subscriptions not supported',
  159: 'Connection rate exceeded',
  160: 'Maximum connect time',
  161: 'Subscription Identifiers not supported',
  162: 'Wildcard Subscriptions not supported'
};

function defaultId() {
  return 'mqttjs_' + Math.random().toString(16).substr(2, 8);
}

function sendPacket(client, packet, cb) {
  client.emit('packetsend', packet);

  var result = mqttPacket.writeToStream(packet, client.stream, client.options);

  if (!result && cb) {
    client.stream.once('drain', cb);
  } else if (cb) {
    cb();
  }
}

function flush(queue) {
  if (queue) {
    (0, _keys2.default)(queue).forEach(function (messageId) {
      if (typeof queue[messageId] === 'function') {
        queue[messageId](new Error('Connection closed'));
        delete queue[messageId];
      }
    });
  }
}

function storeAndSend(client, packet, cb, cbStorePut) {
  client.outgoingStore.put(packet, function storedPacket(err) {
    if (err) {
      return cb && cb(err);
    }
    cbStorePut();
    sendPacket(client, packet, cb);
  });
}

function nop() {}

/**
 * MqttClient constructor
 *
 * @param {Stream} stream - stream
 * @param {Object} [options] - connection options
 * (see Connection#connect)
 */
function MqttClient(streamBuilder, options) {
  var k;
  var that = this;

  if (!(this instanceof MqttClient)) {
    return new MqttClient(streamBuilder, options);
  }

  this.options = options || {};

  // Defaults
  for (k in defaultConnectOptions) {
    if (typeof this.options[k] === 'undefined') {
      this.options[k] = defaultConnectOptions[k];
    } else {
      this.options[k] = options[k];
    }
  }

  this.options.clientId = typeof options.clientId === 'string' ? options.clientId : defaultId();

  this.options.customHandleAcks = options.protocolVersion === 5 && options.customHandleAcks ? options.customHandleAcks : function () {
    arguments[3](0);
  };

  this.streamBuilder = streamBuilder;

  // Inflight message storages
  this.outgoingStore = options.outgoingStore || new Store();
  this.incomingStore = options.incomingStore || new Store();

  // Should QoS zero messages be queued when the connection is broken?
  this.queueQoSZero = options.queueQoSZero === undefined ? true : options.queueQoSZero;

  // map of subscribed topics to support reconnection
  this._resubscribeTopics = {};

  // map of a subscribe messageId and a topic
  this.messageIdToTopic = {};

  // Ping timer, setup in _setupPingTimer
  this.pingTimer = null;
  // Is the client connected?
  this.connected = false;
  // Are we disconnecting?
  this.disconnecting = false;
  // Packet queue
  this.queue = [];
  // connack timer
  this.connackTimer = null;
  // Reconnect timer
  this.reconnectTimer = null;
  // Is processing store?
  this._storeProcessing = false;
  // Packet Ids are put into the store during store processing
  this._packetIdsDuringStoreProcessing = {};
  /**
   * MessageIDs starting with 1
   * ensure that nextId is min. 1, see https://github.com/mqttjs/MQTT.js/issues/810
   */
  this.nextId = Math.max(1, Math.floor(Math.random() * 65535));

  // Inflight callbacks
  this.outgoing = {};

  // True if connection is first time.
  this._firstConnection = true;

  // Mark disconnected on stream close
  this.on('close', function () {
    this.connected = false;
    clearTimeout(this.connackTimer);
  });

  // Send queued packets
  this.on('connect', function () {
    var queue = this.queue;

    function deliver() {
      var entry = queue.shift();
      var packet = null;

      if (!entry) {
        return;
      }

      packet = entry.packet;

      that._sendPacket(packet, function (err) {
        if (entry.cb) {
          entry.cb(err);
        }
        deliver();
      });
    }

    deliver();
  });

  // Clear ping timer
  this.on('close', function () {
    if (that.pingTimer !== null) {
      that.pingTimer.clear();
      that.pingTimer = null;
    }
  });

  // 不自动重连了，由上层控制重连
  // Setup reconnect timer on disconnect
  // this.on('close', this._setupReconnect)

  events.EventEmitter.call(this);

  this._setupStream();
}
inherits(MqttClient, events.EventEmitter);

/**
 * setup the event handlers in the inner stream.
 *
 * @api private
 */
MqttClient.prototype._setupStream = function () {
  var connectPacket;
  var that = this;
  var writable = new Writable();
  var parser = mqttPacket.parser(this.options);
  var completeParse = null;
  var packets = [];

  this._clearReconnect();

  this.stream = this.streamBuilder(this);

  parser.on('packet', function (packet) {
    packets.push(packet);
  });

  function nextTickWork() {
    if (packets.length) {
      process.nextTick(work);
    } else {
      var done = completeParse;
      completeParse = null;
      done();
    }
  }

  function work() {
    var packet = packets.shift();

    if (packet) {
      that._handlePacket(packet, nextTickWork);
    } else {
      var done = completeParse;
      completeParse = null;
      if (done) done();
    }
  }

  writable._write = function (buf, enc, done) {
    completeParse = done;
    parser.parse(buf);
    work();
  };

  this.stream.pipe(writable);

  // Suppress connection errors
  this.stream.on('error', nop);

  // Echo stream close
  this.stream.on('close', function () {
    that.emit('close');
  });

  // Send a connect packet
  connectPacket = (0, _create2.default)(this.options);
  connectPacket.cmd = 'connect';
  // avoid message queue
  sendPacket(this, connectPacket);

  // Echo connection errors
  parser.on('error', this.emit.bind(this, 'error'));

  // auth
  if (this.options.properties) {
    if (!this.options.properties.authenticationMethod && this.options.properties.authenticationData) {
      this.emit('error', new Error('Packet has no Authentication Method'));
      return this;
    }
    if (this.options.properties.authenticationMethod && this.options.authPacket && (0, _typeof3.default)(this.options.authPacket) === 'object') {
      var authPacket = xtend({ cmd: 'auth', reasonCode: 0 }, this.options.authPacket);
      sendPacket(this, authPacket);
    }
  }

  // many drain listeners are needed for qos 1 callbacks if the connection is intermittent
  this.stream.setMaxListeners(1000);

  clearTimeout(this.connackTimer);
  this.connackTimer = setTimeout(function () {
    that._cleanUp(true);
  }, this.options.connectTimeout);
};

MqttClient.prototype._handlePacket = function (packet, done) {
  var options = this.options;

  if (options.protocolVersion === 5 && options.properties && options.properties.maximumPacketSize && options.properties.maximumPacketSize < packet.length) {
    this.emit('error', new Error('exceeding packets size ' + packet.cmd));
    this.end({ reasonCode: 149, properties: { reasonString: 'Maximum packet size was exceeded' } });
    return this;
  }

  this.emit('packetreceive', packet);

  switch (packet.cmd) {
    case 'publish':
      try {
        this._handlePublish(packet, done);
      } catch (error) {
        console.error(error);
      }
      break;
    case 'puback':
    case 'pubrec':
    case 'pubcomp':
    case 'suback':
    case 'unsuback':
      try {
        this._handleAck(packet);
      } catch (error) {
        console.log(error);
      }
      done();
      break;
    case 'pubrel':
      this._handlePubrel(packet, done);
      break;
    case 'connack':
      this._handleConnack(packet);
      done();
      break;
    case 'pingresp':
      this._handlePingresp(packet);
      done();
      break;
    case 'disconnect':
      this._handleDisconnect(packet);
      done();
      break;
    default:
      // do nothing
      // maybe we should do an error handling
      // or just log it
      break;
  }
};

MqttClient.prototype._checkDisconnecting = function (callback) {
  if (this.disconnecting) {
    if (callback) {
      callback(new Error('client disconnecting'));
    } else {
      this.emit('error', new Error('client disconnecting'));
    }
  }
  return this.disconnecting;
};

/**
 * publish - publish <message> to <topic>
 *
 * @param {String} topic - topic to publish to
 * @param {String, Buffer} message - message to publish
 * @param {Object} [opts] - publish options, includes:
 *    {Number} qos - qos level to publish on
 *    {Boolean} retain - whether or not to retain the message
 *    {Boolean} dup - whether or not mark a message as duplicate
 *    {Function} cbStorePut - function(){} called when message is put into `outgoingStore`
 * @param {Function} [callback] - function(err){}
 *    called when publish succeeds or fails
 * @returns {MqttClient} this - for chaining
 * @api public
 *
 * @example client.publish('topic', 'message');
 * @example
 *     client.publish('topic', 'message', {qos: 1, retain: true, dup: true});
 * @example client.publish('topic', 'message', console.log);
 */
MqttClient.prototype.publish = function (topic, message, opts, callback) {
  var packet;
  var options = this.options;

  // .publish(topic, payload, cb);
  if (typeof opts === 'function') {
    callback = opts;
    opts = null;
  }

  // default opts
  var defaultOpts = { qos: 0, retain: false, dup: false };
  opts = xtend(defaultOpts, opts);

  if (this._checkDisconnecting(callback)) {
    return this;
  }

  packet = {
    cmd: 'publish',
    topic: topic,
    payload: message,
    qos: opts.qos,
    retain: opts.retain,
    messageId: this._nextId(),
    dup: opts.dup
  };

  if (options.protocolVersion === 5) {
    packet.properties = opts.properties;
    if (!options.properties && packet.properties && packet.properties.topicAlias || opts.properties && options.properties && (opts.properties.topicAlias && options.properties.topicAliasMaximum && opts.properties.topicAlias > options.properties.topicAliasMaximum || !options.properties.topicAliasMaximum && opts.properties.topicAlias)) {
      /*
      if we are don`t setup topic alias or
      topic alias maximum less than topic alias or
      server don`t give topic alias maximum,
      we are removing topic alias from packet
      */
      delete packet.properties.topicAlias;
    }
  }

  switch (opts.qos) {
    case 1:
    case 2:
      // Add to callbacks
      this.outgoing[packet.messageId] = callback || nop;
      if (this._storeProcessing) {
        this._packetIdsDuringStoreProcessing[packet.messageId] = false;
        this._storePacket(packet, undefined, opts.cbStorePut);
      } else {
        this._sendPacket(packet, undefined, opts.cbStorePut);
      }
      break;
    default:
      if (this._storeProcessing) {
        this._storePacket(packet, callback, opts.cbStorePut);
      } else {
        this._sendPacket(packet, callback, opts.cbStorePut);
      }
      break;
  }

  return this;
};

/**
 * subscribe - subscribe to <topic>
 *
 * @param {String, Array, Object} topic - topic(s) to subscribe to, supports objects in the form {'topic': qos}
 * @param {Object} [opts] - optional subscription options, includes:
 *    {Number} qos - subscribe qos level
 * @param {Function} [callback] - function(err, granted){} where:
 *    {Error} err - subscription error (none at the moment!)
 *    {Array} granted - array of {topic: 't', qos: 0}
 * @returns {MqttClient} this - for chaining
 * @api public
 * @example client.subscribe('topic');
 * @example client.subscribe('topic', {qos: 1});
 * @example client.subscribe({'topic': {qos: 0}, 'topic2': {qos: 1}}, console.log);
 * @example client.subscribe('topic', console.log);
 */
MqttClient.prototype.subscribe = function () {
  var packet;
  var args = new Array(arguments.length);
  for (var i = 0; i < arguments.length; i++) {
    args[i] = arguments[i];
  }
  var subs = [];
  var obj = args.shift();
  var resubscribe = obj.resubscribe;
  var callback = args.pop() || nop;
  var opts = args.pop();
  var invalidTopic;
  var that = this;
  var version = this.options.protocolVersion;

  delete obj.resubscribe;

  if (typeof obj === 'string') {
    obj = [obj];
  }

  if (typeof callback !== 'function') {
    opts = callback;
    callback = nop;
  }

  invalidTopic = validations.validateTopics(obj);
  if (invalidTopic !== null) {
    setImmediate(callback, new Error('Invalid topic ' + invalidTopic));
    return this;
  }

  if (this._checkDisconnecting(callback)) {
    return this;
  }

  var defaultOpts = {
    qos: 0
  };
  if (version === 5) {
    defaultOpts.nl = false;
    defaultOpts.rap = false;
    defaultOpts.rh = 0;
  }
  opts = xtend(defaultOpts, opts);

  if (Array.isArray(obj)) {
    obj.forEach(function (topic) {
      if (!that._resubscribeTopics.hasOwnProperty(topic) || that._resubscribeTopics[topic].qos < opts.qos || resubscribe) {
        var currentOpts = {
          topic: topic,
          qos: opts.qos
        };
        if (version === 5) {
          currentOpts.nl = opts.nl;
          currentOpts.rap = opts.rap;
          currentOpts.rh = opts.rh;
          currentOpts.properties = opts.properties;
        }
        subs.push(currentOpts);
      }
    });
  } else {
    (0, _keys2.default)(obj).forEach(function (k) {
      if (!that._resubscribeTopics.hasOwnProperty(k) || that._resubscribeTopics[k].qos < obj[k].qos || resubscribe) {
        var currentOpts = {
          topic: k,
          qos: obj[k].qos
        };
        if (version === 5) {
          currentOpts.nl = obj[k].nl;
          currentOpts.rap = obj[k].rap;
          currentOpts.rh = obj[k].rh;
          currentOpts.properties = opts.properties;
        }
        subs.push(currentOpts);
      }
    });
  }

  packet = {
    cmd: 'subscribe',
    subscriptions: subs,
    qos: 1,
    retain: false,
    dup: false,
    messageId: this._nextId()
  };

  if (opts.properties) {
    packet.properties = opts.properties;
  }

  if (!subs.length) {
    callback(null, []);
    return;
  }

  // subscriptions to resubscribe to in case of disconnect
  if (this.options.resubscribe) {
    var topics = [];
    subs.forEach(function (sub) {
      if (that.options.reconnectPeriod > 0) {
        var topic = { qos: sub.qos };
        if (version === 5) {
          topic.nl = sub.nl || false;
          topic.rap = sub.rap || false;
          topic.rh = sub.rh || 0;
          topic.properties = sub.properties;
        }
        that._resubscribeTopics[sub.topic] = topic;
        topics.push(sub.topic);
      }
    });
    that.messageIdToTopic[packet.messageId] = topics;
  }

  this.outgoing[packet.messageId] = function (err, packet) {
    if (!err) {
      var granted = packet.granted;
      for (var i = 0; i < granted.length; i += 1) {
        subs[i].qos = granted[i];
      }
    }

    callback(err, subs);
  };

  this._sendPacket(packet);

  return this;
};

/**
 * unsubscribe - unsubscribe from topic(s)
 *
 * @param {String, Array} topic - topics to unsubscribe from
 * @param {Object} [opts] - optional subscription options, includes:
 *    {Object} properties - properties of unsubscribe packet
 * @param {Function} [callback] - callback fired on unsuback
 * @returns {MqttClient} this - for chaining
 * @api public
 * @example client.unsubscribe('topic');
 * @example client.unsubscribe('topic', console.log);
 */
MqttClient.prototype.unsubscribe = function () {
  var packet = {
    cmd: 'unsubscribe',
    qos: 1,
    messageId: this._nextId()
  };
  var that = this;
  var args = new Array(arguments.length);
  for (var i = 0; i < arguments.length; i++) {
    args[i] = arguments[i];
  }
  var topic = args.shift();
  var callback = args.pop() || nop;
  var opts = args.pop();

  if (typeof topic === 'string') {
    topic = [topic];
  }

  if (typeof callback !== 'function') {
    opts = callback;
    callback = nop;
  }

  if (this._checkDisconnecting(callback)) {
    return this;
  }

  if (typeof topic === 'string') {
    packet.unsubscriptions = [topic];
  } else if ((typeof topic === 'undefined' ? 'undefined' : (0, _typeof3.default)(topic)) === 'object' && topic.length) {
    packet.unsubscriptions = topic;
  }

  if (this.options.resubscribe) {
    packet.unsubscriptions.forEach(function (topic) {
      delete that._resubscribeTopics[topic];
    });
  }

  if ((typeof opts === 'undefined' ? 'undefined' : (0, _typeof3.default)(opts)) === 'object' && opts.properties) {
    packet.properties = opts.properties;
  }

  this.outgoing[packet.messageId] = callback;

  this._sendPacket(packet);

  return this;
};

/**
 * end - close connection
 *
 * @returns {MqttClient} this - for chaining
 * @param {Boolean} force - do not wait for all in-flight messages to be acked
 * @param {Function} cb - called when the client has been closed
 *
 * @api public
 */
MqttClient.prototype.end = function () {
  var that = this;

  var force = arguments[0];
  var opts = arguments[1];
  var cb = arguments[2];

  if (force == null || typeof force !== 'boolean') {
    cb = opts || nop;
    opts = force;
    force = false;
    if ((typeof opts === 'undefined' ? 'undefined' : (0, _typeof3.default)(opts)) !== 'object') {
      cb = opts;
      opts = null;
      if (typeof cb !== 'function') {
        cb = nop;
      }
    }
  }

  if ((typeof opts === 'undefined' ? 'undefined' : (0, _typeof3.default)(opts)) !== 'object') {
    cb = opts;
    opts = null;
  }

  cb = cb || nop;

  function closeStores() {
    that.disconnected = true;
    that.incomingStore.close(function () {
      that.outgoingStore.close(function () {
        if (cb) {
          cb.apply(null, arguments);
        }
        that.emit('end');
      });
    });
    if (that._deferredReconnect) {
      that._deferredReconnect();
    }
  }

  function finish() {
    // defer closesStores of an I/O cycle,
    // just to make sure things are
    // ok for websockets
    that._cleanUp(force, setImmediate.bind(null, closeStores), opts);
  }

  if (this.disconnecting) {
    return this;
  }

  this._clearReconnect();

  this.disconnecting = true;

  if (!force && (0, _keys2.default)(this.outgoing).length > 0) {
    // wait 10ms, just to be sure we received all of it
    this.once('outgoingEmpty', setTimeout.bind(null, finish, 10));
  } else {
    finish();
  }

  return this;
};

/**
 * removeOutgoingMessage - remove a message in outgoing store
 * the outgoing callback will be called withe Error('Message removed') if the message is removed
 *
 * @param {Number} mid - messageId to remove message
 * @returns {MqttClient} this - for chaining
 * @api public
 *
 * @example client.removeOutgoingMessage(client.getLastMessageId());
 */
MqttClient.prototype.removeOutgoingMessage = function (mid) {
  var cb = this.outgoing[mid];
  delete this.outgoing[mid];
  this.outgoingStore.del({ messageId: mid }, function () {
    cb(new Error('Message removed'));
  });
  return this;
};

/**
 * reconnect - connect again using the same options as connect()
 *
 * @param {Object} [opts] - optional reconnect options, includes:
 *    {Store} incomingStore - a store for the incoming packets
 *    {Store} outgoingStore - a store for the outgoing packets
 *    if opts is not given, current stores are used
 * @returns {MqttClient} this - for chaining
 *
 * @api public
 */
MqttClient.prototype.reconnect = function (opts) {
  var that = this;
  var f = function f() {
    if (opts) {
      that.options.incomingStore = opts.incomingStore;
      that.options.outgoingStore = opts.outgoingStore;
    } else {
      that.options.incomingStore = null;
      that.options.outgoingStore = null;
    }
    that.incomingStore = that.options.incomingStore || new Store();
    that.outgoingStore = that.options.outgoingStore || new Store();
    that.disconnecting = false;
    that.disconnected = false;
    that._deferredReconnect = null;
    that._reconnect();
  };

  if (this.disconnecting && !this.disconnected) {
    this._deferredReconnect = f;
  } else {
    f();
  }
  return this;
};

/**
 * _reconnect - implement reconnection
 * @api privateish
 */
MqttClient.prototype._reconnect = function () {
  this.emit('reconnect');
  this._setupStream();
};

/**
 * _setupReconnect - setup reconnect timer
 */
MqttClient.prototype._setupReconnect = function () {
  var that = this;

  if (!that.disconnecting && !that.reconnectTimer && that.options.reconnectPeriod > 0) {
    if (!this.reconnecting) {
      this.emit('offline');
      this.reconnecting = true;
    }
    that.reconnectTimer = setInterval(function () {
      that._reconnect();
    }, that.options.reconnectPeriod);
  }
};

/**
 * _clearReconnect - clear the reconnect timer
 */
MqttClient.prototype._clearReconnect = function () {
  if (this.reconnectTimer) {
    clearInterval(this.reconnectTimer);
    this.reconnectTimer = null;
  }
};

/**
 * _cleanUp - clean up on connection end
 * @api private
 */
MqttClient.prototype._cleanUp = function (forced, done) {
  var opts = arguments[2];
  if (done) {
    this.stream.on('close', done);
  }

  if (forced) {
    if (this.options.reconnectPeriod === 0 && this.options.clean) {
      flush(this.outgoing);
    }
    this.stream.destroy();
  } else {
    var packet = xtend({ cmd: 'disconnect' }, opts);
    this._sendPacket(packet, setImmediate.bind(null, this.stream.end.bind(this.stream)));
  }

  if (!this.disconnecting) {
    this._clearReconnect();
    this._setupReconnect();
  }

  if (this.pingTimer !== null) {
    this.pingTimer.clear();
    this.pingTimer = null;
  }

  if (done && !this.connected) {
    this.stream.removeListener('close', done);
    done();
  }
};

/**
 * _sendPacket - send or queue a packet
 * @param {String} type - packet type (see `protocol`)
 * @param {Object} packet - packet options
 * @param {Function} cb - callback when the packet is sent
 * @param {Function} cbStorePut - called when message is put into outgoingStore
 * @api private
 */
MqttClient.prototype._sendPacket = function (packet, cb, cbStorePut) {
  cbStorePut = cbStorePut || nop;

  if (!this.connected) {
    this._storePacket(packet, cb, cbStorePut);
    return;
  }

  // When sending a packet, reschedule the ping timer
  this._shiftPingInterval();

  switch (packet.cmd) {
    case 'publish':
      break;
    case 'pubrel':
      storeAndSend(this, packet, cb, cbStorePut);
      return;
    default:
      sendPacket(this, packet, cb);
      return;
  }

  switch (packet.qos) {
    case 2:
    case 1:
      storeAndSend(this, packet, cb, cbStorePut);
      break;
    /**
     * no need of case here since it will be caught by default
     * and jshint comply that before default it must be a break
     * anyway it will result in -1 evaluation
     */
    case 0:
    /* falls through */
    default:
      sendPacket(this, packet, cb);
      break;
  }
};

/**
 * _storePacket - queue a packet
 * @param {String} type - packet type (see `protocol`)
 * @param {Object} packet - packet options
 * @param {Function} cb - callback when the packet is sent
 * @param {Function} cbStorePut - called when message is put into outgoingStore
 * @api private
 */
MqttClient.prototype._storePacket = function (packet, cb, cbStorePut) {
  cbStorePut = cbStorePut || nop;

  if ((packet.qos || 0) === 0 && this.queueQoSZero || packet.cmd !== 'publish') {
    this.queue.push({ packet: packet, cb: cb });
  } else if (packet.qos > 0) {
    cb = this.outgoing[packet.messageId];
    this.outgoingStore.put(packet, function (err) {
      if (err) {
        return cb && cb(err);
      }
      cbStorePut();
    });
  } else if (cb) {
    cb(new Error('No connection to broker'));
  }
};

/**
 * _setupPingTimer - setup the ping timer
 *
 * @api private
 */
MqttClient.prototype._setupPingTimer = function () {
  var that = this;

  if (!this.pingTimer && this.options.keepalive) {
    this.pingResp = true;
    this.pingTimer = reInterval(function () {
      that._checkPing();
    }, this.options.keepalive * 1000);
  }
};

/**
 * _shiftPingInterval - reschedule the ping interval
 *
 * @api private
 */
MqttClient.prototype._shiftPingInterval = function () {
  if (this.pingTimer && this.options.keepalive && this.options.reschedulePings) {
    this.pingTimer.reschedule(this.options.keepalive * 1000);
  }
};
/**
 * _checkPing - check if a pingresp has come back, and ping the server again
 *
 * @api private
 */
MqttClient.prototype._checkPing = function () {
  if (this.pingResp) {
    this.pingResp = false;
    this._sendPacket({ cmd: 'pingreq' });
  } else {
    // do a forced cleanup since socket will be in bad shape
    this._cleanUp(true);
  }
};

/**
 * _handlePingresp - handle a pingresp
 *
 * @api private
 */
MqttClient.prototype._handlePingresp = function () {
  this.pingResp = true;
  this.emit('pingresp', new Date().getTime());
};

/**
 * _handleConnack
 *
 * @param {Object} packet
 * @api private
 */

MqttClient.prototype._handleConnack = function (packet) {
  var options = this.options;
  var version = options.protocolVersion;
  var rc = version === 5 ? packet.reasonCode : packet.returnCode;

  clearTimeout(this.connackTimer);

  if (packet.properties) {
    if (packet.properties.topicAliasMaximum) {
      if (!options.properties) {
        options.properties = {};
      }
      options.properties.topicAliasMaximum = packet.properties.topicAliasMaximum;
    }
    if (packet.properties.serverKeepAlive && options.keepalive) {
      options.keepalive = packet.properties.serverKeepAlive;
      this._shiftPingInterval();
    }
    if (packet.properties.maximumPacketSize) {
      if (!options.properties) {
        options.properties = {};
      }
      options.properties.maximumPacketSize = packet.properties.maximumPacketSize;
    }
  }

  if (rc === 0) {
    this.reconnecting = false;
    this._onConnect(packet);
  } else if (rc > 0) {
    var err = new Error('Connection refused: ' + errors[rc]);
    err.code = rc;
    this.emit('error', err);
  }
};

/**
 * _handlePublish
 *
 * @param {Object} packet
 * @api private
 */
/*
those late 2 case should be rewrite to comply with coding style:

case 1:
case 0:
  // do not wait sending a puback
  // no callback passed
  if (1 === qos) {
    this._sendPacket({
      cmd: 'puback',
      messageId: mid
    });
  }
  // emit the message event for both qos 1 and 0
  this.emit('message', topic, message, packet);
  this.handleMessage(packet, done);
  break;
default:
  // do nothing but every switch mus have a default
  // log or throw an error about unknown qos
  break;

for now i just suppressed the warnings
*/
MqttClient.prototype._handlePublish = function (packet, done) {
  done = typeof done !== 'undefined' ? done : nop;
  var topic = packet.topic.toString();
  var message = packet.payload;
  var qos = packet.qos;
  var mid = packet.messageId;
  var that = this;
  var options = this.options;
  var validReasonCodes = [0, 16, 128, 131, 135, 144, 145, 151, 153];

  switch (qos) {
    case 2:
      {
        options.customHandleAcks(topic, message, packet, function (error, code) {
          if (!(error instanceof Error)) {
            code = error;
            error = null;
          }
          if (error) {
            return that.emit('error', error);
          }
          if (validReasonCodes.indexOf(code) === -1) {
            return that.emit('error', new Error('Wrong reason code for pubrec'));
          }
          if (code) {
            that._sendPacket({ cmd: 'pubrec', messageId: mid, reasonCode: code }, done);
          } else {
            that.incomingStore.put(packet, function () {
              that._sendPacket({ cmd: 'pubrec', messageId: mid }, done);
            });
          }
        });
        break;
      }
    case 1:
      {
        // emit the message event
        options.customHandleAcks(topic, message, packet, function (error, code) {
          if (!(error instanceof Error)) {
            code = error;
            error = null;
          }
          if (error) {
            return that.emit('error', error);
          }
          if (validReasonCodes.indexOf(code) === -1) {
            return that.emit('error', new Error('Wrong reason code for puback'));
          }
          if (!code) {
            that.emit('message', topic, message, packet);
          }
          that.handleMessage(packet, function (err) {
            if (err) {
              return done && done(err);
            }
            that._sendPacket({ cmd: 'puback', messageId: mid, reasonCode: code }, done);
          });
        });
        break;
      }
    case 0:
      // emit the message event
      this.emit('message', topic, message, packet);
      this.handleMessage(packet, done);
      break;
    default:
      // do nothing
      // log or throw an error about unknown qos
      break;
  }
};

/**
 * Handle messages with backpressure support, one at a time.
 * Override at will.
 *
 * @param Packet packet the packet
 * @param Function callback call when finished
 * @api public
 */
MqttClient.prototype.handleMessage = function (packet, callback) {
  callback();
};

/**
 * _handleAck
 *
 * @param {Object} packet
 * @api private
 */

MqttClient.prototype._handleAck = function (packet) {
  /* eslint no-fallthrough: "off" */
  var mid = packet.messageId;
  var type = packet.cmd;
  var response = null;
  var cb = this.outgoing[mid];
  var that = this;
  var err;

  if (!cb) {
    // Server sent an ack in error, ignore it.
    return;
  }

  // Process
  switch (type) {
    case 'pubcomp':
    // same thing as puback for QoS 2
    case 'puback':
      var pubackRC = packet.reasonCode;
      // Callback - we're done
      if (pubackRC && pubackRC > 0 && pubackRC !== 16 && pubackRC !== 10) {
        err = new Error('Publish error: ' + errors[pubackRC]);
        err.code = pubackRC;
        cb(err, packet);
      } else if (pubackRC && pubackRC === 10) {
        cb(null, packet);
      }
      delete this.outgoing[mid];
      this.outgoingStore.del(packet, cb);
      break;
    case 'pubrec':
      response = {
        cmd: 'pubrel',
        qos: 2,
        messageId: mid
      };
      var pubrecRC = packet.reasonCode;

      if (pubrecRC && pubrecRC > 0 && pubrecRC !== 16) {
        err = new Error('Publish error: ' + errors[pubrecRC]);
        err.code = pubrecRC;
        cb(err, packet);
      } else {
        this._sendPacket(response);
      }
      break;
    case 'suback':
      delete this.outgoing[mid];
      for (var grantedI = 0; grantedI < packet.granted.length; grantedI++) {
        if ((packet.granted[grantedI] & 0x80) !== 0) {
          // suback with Failure status
          var topics = this.messageIdToTopic[mid];
          if (topics) {
            topics.forEach(function (topic) {
              delete that._resubscribeTopics[topic];
            });
          }
        }
      }
      cb(null, packet);
      break;
    case 'unsuback':
      delete this.outgoing[mid];
      cb(null);
      break;
    default:
      that.emit('error', new Error('unrecognized packet type'));
  }

  if (this.disconnecting && (0, _keys2.default)(this.outgoing).length === 0) {
    this.emit('outgoingEmpty');
  }
};

/**
 * _handlePubrel
 *
 * @param {Object} packet
 * @api private
 */
MqttClient.prototype._handlePubrel = function (packet, callback) {
  callback = typeof callback !== 'undefined' ? callback : nop;
  var mid = packet.messageId;
  var that = this;

  var comp = { cmd: 'pubcomp', messageId: mid };

  that.incomingStore.get(packet, function (err, pub) {
    if (!err) {
      that.emit('message', pub.topic, pub.payload, pub);
      that.handleMessage(pub, function (err) {
        if (err) {
          return callback(err);
        }
        that.incomingStore.del(pub, nop);
        that._sendPacket(comp, callback);
      });
    } else {
      that._sendPacket(comp, callback);
    }
  });
};

/**
 * _handleDisconnect
 *
 * @param {Object} packet
 * @api private
 */
MqttClient.prototype._handleDisconnect = function (packet) {
  this.emit('disconnect', packet);
};

/**
 * _nextId
 * @return unsigned int
 */
MqttClient.prototype._nextId = function () {
  // id becomes current state of this.nextId and increments afterwards
  var id = this.nextId++;
  // Ensure 16 bit unsigned int (max 65535, nextId got one higher)
  if (this.nextId === 65536) {
    this.nextId = 1;
  }
  return id;
};

/**
 * getLastMessageId
 * @return unsigned int
 */
MqttClient.prototype.getLastMessageId = function () {
  return this.nextId === 1 ? 65535 : this.nextId - 1;
};

/**
 * _resubscribe
 * @api private
 */
MqttClient.prototype._resubscribe = function (connack) {
  var _resubscribeTopicsKeys = (0, _keys2.default)(this._resubscribeTopics);
  if (!this._firstConnection && (this.options.clean || this.options.protocolVersion === 5 && !connack.sessionPresent) && _resubscribeTopicsKeys.length > 0) {
    if (this.options.resubscribe) {
      if (this.options.protocolVersion === 5) {
        for (var topicI = 0; topicI < _resubscribeTopicsKeys.length; topicI++) {
          var resubscribeTopic = {};
          resubscribeTopic[_resubscribeTopicsKeys[topicI]] = this._resubscribeTopics[_resubscribeTopicsKeys[topicI]];
          resubscribeTopic.resubscribe = true;
          this.subscribe(resubscribeTopic, { properties: resubscribeTopic[_resubscribeTopicsKeys[topicI]].properties });
        }
      } else {
        this._resubscribeTopics.resubscribe = true;
        this.subscribe(this._resubscribeTopics);
      }
    } else {
      this._resubscribeTopics = {};
    }
  }

  this._firstConnection = false;
};

/**
 * _onConnect
 *
 * @api private
 */
MqttClient.prototype._onConnect = function (packet) {
  if (this.disconnected) {
    this.emit('connect', packet);
    return;
  }

  var that = this;

  this._setupPingTimer();
  this._resubscribe(packet);

  this.connected = true;

  function startStreamProcess() {
    var outStore = that.outgoingStore.createStream();

    function clearStoreProcessing() {
      that._storeProcessing = false;
      that._packetIdsDuringStoreProcessing = {};
    }

    that.once('close', remove);
    outStore.on('error', function (err) {
      clearStoreProcessing();
      that.removeListener('close', remove);
      that.emit('error', err);
    });

    function remove() {
      outStore.destroy();
      outStore = null;
      clearStoreProcessing();
    }

    function storeDeliver() {
      // edge case, we wrapped this twice
      if (!outStore) {
        return;
      }
      that._storeProcessing = true;

      var packet = outStore.read(1);

      var cb;

      if (!packet) {
        // read when data is available in the future
        outStore.once('readable', storeDeliver);
        return;
      }

      // Skip already processed store packets
      if (that._packetIdsDuringStoreProcessing[packet.messageId]) {
        storeDeliver();
        return;
      }

      // Avoid unnecessary stream read operations when disconnected
      if (!that.disconnecting && !that.reconnectTimer) {
        cb = that.outgoing[packet.messageId];
        that.outgoing[packet.messageId] = function (err, status) {
          // Ensure that the original callback passed in to publish gets invoked
          if (cb) {
            cb(err, status);
          }

          storeDeliver();
        };
        that._packetIdsDuringStoreProcessing[packet.messageId] = true;
        that._sendPacket(packet);
      } else if (outStore.destroy) {
        outStore.destroy();
      }
    }

    outStore.on('end', function () {
      var allProcessed = true;
      for (var id in that._packetIdsDuringStoreProcessing) {
        if (!that._packetIdsDuringStoreProcessing[id]) {
          allProcessed = false;
          break;
        }
      }
      if (allProcessed) {
        clearStoreProcessing();
        that.removeListener('close', remove);
        that.emit('connect', packet);
      } else {
        startStreamProcess();
      }
    });
    storeDeliver();
  }
  // start flowing
  startStreamProcess();
};

module.exports = MqttClient;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(17), __webpack_require__(3)))

/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(256);
var $Object = __webpack_require__(0).Object;
module.exports = function create(P, D) {
  return $Object.create(P, D);
};


/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(2);
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', { create: __webpack_require__(55) });


/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(258);
module.exports = __webpack_require__(0).Object.keys;


/***/ }),
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 Object.keys(O)
var toObject = __webpack_require__(33);
var $keys = __webpack_require__(43);

__webpack_require__(90)('keys', function () {
  return function keys(it) {
    return $keys(toObject(it));
  };
});


/***/ }),
/* 259 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Buffer = __webpack_require__(15).Buffer;
var util = __webpack_require__(261);

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  return BufferList;
}();

if (util && util.inspect && util.inspect.custom) {
  module.exports.prototype[util.inspect.custom] = function () {
    var obj = util.inspect({ length: this.length });
    return this.constructor.name + ' ' + obj;
  };
}

/***/ }),
/* 261 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== "undefined" && global) ||
            (typeof self !== "undefined" && self) ||
            window;
var apply = Function.prototype.apply;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(scope, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// setimmediate attaches itself to the global object
__webpack_require__(263);
// On some exotic environments, it's not clear which object `setimmediate` was
// able to install onto.  Search each possibility in the same order as the
// `setimmediate` library.
exports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||
                       (typeof global !== "undefined" && global.setImmediate) ||
                       (this && this.setImmediate);
exports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||
                         (typeof global !== "undefined" && global.clearImmediate) ||
                         (this && this.clearImmediate);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(17)))

/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var registerImmediate;

    function setImmediate(callback) {
      // Callback can either be a function or a string
      if (typeof callback !== "function") {
        callback = new Function("" + callback);
      }
      // Copy function arguments
      var args = new Array(arguments.length - 1);
      for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i + 1];
      }
      // Store and register the task
      var task = { callback: callback, args: args };
      tasksByHandle[nextHandle] = task;
      registerImmediate(nextHandle);
      return nextHandle++;
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch (args.length) {
        case 0:
            callback();
            break;
        case 1:
            callback(args[0]);
            break;
        case 2:
            callback(args[0], args[1]);
            break;
        case 3:
            callback(args[0], args[1], args[2]);
            break;
        default:
            callback.apply(undefined, args);
            break;
        }
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(runIfPresent, 0, handle);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function installNextTickImplementation() {
        registerImmediate = function(handle) {
            process.nextTick(function () { runIfPresent(handle); });
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function() {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function(event) {
            if (event.source === global &&
                typeof event.data === "string" &&
                event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        registerImmediate = function(handle) {
            global.postMessage(messagePrefix + handle, "*");
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function(event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        registerImmediate = function(handle) {
            channel.port2.postMessage(handle);
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function(handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }

    function installSetTimeoutImplementation() {
        registerImmediate = function(handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();

    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();

    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();

    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6–8
        installReadyStateChangeImplementation();

    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(17), __webpack_require__(3)))

/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(17)))

/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.



module.exports = PassThrough;

var Transform = __webpack_require__(140);

/*<replacement>*/
var util = __webpack_require__(51);
util.inherits = __webpack_require__(19);
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};

/***/ }),
/* 266 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(267)() ? Map : __webpack_require__(268);


/***/ }),
/* 267 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function () {
	var map, iterator, result;
	if (typeof Map !== 'function') return false;
	try {
		// WebKit doesn't support arguments and crashes
		map = new Map([['raz', 'one'], ['dwa', 'two'], ['trzy', 'three']]);
	} catch (e) {
		return false;
	}
	if (String(map) !== '[object Map]') return false;
	if (map.size !== 3) return false;
	if (typeof map.clear !== 'function') return false;
	if (typeof map.delete !== 'function') return false;
	if (typeof map.entries !== 'function') return false;
	if (typeof map.forEach !== 'function') return false;
	if (typeof map.get !== 'function') return false;
	if (typeof map.has !== 'function') return false;
	if (typeof map.keys !== 'function') return false;
	if (typeof map.set !== 'function') return false;
	if (typeof map.values !== 'function') return false;

	iterator = map.entries();
	result = iterator.next();
	if (result.done !== false) return false;
	if (!result.value) return false;
	if (result.value[0] !== 'raz') return false;
	if (result.value[1] !== 'one') return false;

	return true;
};


/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var clear          = __webpack_require__(141)
  , eIndexOf       = __webpack_require__(270)
  , setPrototypeOf = __webpack_require__(62)
  , callable       = __webpack_require__(29)
  , validValue     = __webpack_require__(20)
  , d              = __webpack_require__(16)
  , ee             = __webpack_require__(289)
  , Symbol         = __webpack_require__(23)
  , iterator       = __webpack_require__(149)
  , forOf          = __webpack_require__(297)
  , Iterator       = __webpack_require__(315)
  , isNative       = __webpack_require__(318)

  , call = Function.prototype.call
  , defineProperties = Object.defineProperties, getPrototypeOf = Object.getPrototypeOf
  , MapPoly;

module.exports = MapPoly = function (/*iterable*/) {
	var iterable = arguments[0], keys, values, self;
	if (!(this instanceof MapPoly)) throw new TypeError('Constructor requires \'new\'');
	if (isNative && setPrototypeOf && (Map !== MapPoly)) {
		self = setPrototypeOf(new Map(), getPrototypeOf(this));
	} else {
		self = this;
	}
	if (iterable != null) iterator(iterable);
	defineProperties(self, {
		__mapKeysData__: d('c', keys = []),
		__mapValuesData__: d('c', values = [])
	});
	if (!iterable) return self;
	forOf(iterable, function (value) {
		var key = validValue(value)[0];
		value = value[1];
		if (eIndexOf.call(keys, key) !== -1) return;
		keys.push(key);
		values.push(value);
	}, self);
	return self;
};

if (isNative) {
	if (setPrototypeOf) setPrototypeOf(MapPoly, Map);
	MapPoly.prototype = Object.create(Map.prototype, {
		constructor: d(MapPoly)
	});
}

ee(defineProperties(MapPoly.prototype, {
	clear: d(function () {
		if (!this.__mapKeysData__.length) return;
		clear.call(this.__mapKeysData__);
		clear.call(this.__mapValuesData__);
		this.emit('_clear');
	}),
	delete: d(function (key) {
		var index = eIndexOf.call(this.__mapKeysData__, key);
		if (index === -1) return false;
		this.__mapKeysData__.splice(index, 1);
		this.__mapValuesData__.splice(index, 1);
		this.emit('_delete', index, key);
		return true;
	}),
	entries: d(function () { return new Iterator(this, 'key+value'); }),
	forEach: d(function (cb/*, thisArg*/) {
		var thisArg = arguments[1], iterator, result;
		callable(cb);
		iterator = this.entries();
		result = iterator._next();
		while (result !== undefined) {
			call.call(cb, thisArg, this.__mapValuesData__[result],
				this.__mapKeysData__[result], this);
			result = iterator._next();
		}
	}),
	get: d(function (key) {
		var index = eIndexOf.call(this.__mapKeysData__, key);
		if (index === -1) return;
		return this.__mapValuesData__[index];
	}),
	has: d(function (key) {
		return (eIndexOf.call(this.__mapKeysData__, key) !== -1);
	}),
	keys: d(function () { return new Iterator(this, 'key'); }),
	set: d(function (key, value) {
		var index = eIndexOf.call(this.__mapKeysData__, key), emit;
		if (index === -1) {
			index = this.__mapKeysData__.push(key) - 1;
			emit = true;
		}
		this.__mapValuesData__[index] = value;
		if (emit) this.emit('_add', index, key);
		return this;
	}),
	size: d.gs(function () { return this.__mapKeysData__.length; }),
	values: d(function () { return new Iterator(this, 'value'); }),
	toString: d(function () { return '[object Map]'; })
}));
Object.defineProperty(MapPoly.prototype, Symbol.iterator, d(function () {
	return this.entries();
}));
Object.defineProperty(MapPoly.prototype, Symbol.toStringTag, d('c', 'Map'));


/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// eslint-disable-next-line no-empty-function
module.exports = function () {};


/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var numberIsNaN       = __webpack_require__(271)
  , toPosInt          = __webpack_require__(142)
  , value             = __webpack_require__(20)
  , indexOf           = Array.prototype.indexOf
  , objHasOwnProperty = Object.prototype.hasOwnProperty
  , abs               = Math.abs
  , floor             = Math.floor;

module.exports = function (searchElement/*, fromIndex*/) {
	var i, length, fromIndex, val;
	if (!numberIsNaN(searchElement)) return indexOf.apply(this, arguments);

	length = toPosInt(value(this).length);
	fromIndex = arguments[1];
	if (isNaN(fromIndex)) fromIndex = 0;
	else if (fromIndex >= 0) fromIndex = floor(fromIndex);
	else fromIndex = toPosInt(this.length) - floor(abs(fromIndex));

	for (i = fromIndex; i < length; ++i) {
		if (objHasOwnProperty.call(this, i)) {
			val = this[i];
			if (numberIsNaN(val)) return i; // Jslint: ignore
		}
	}
	return -1;
};


/***/ }),
/* 271 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(272)() ? Number.isNaN : __webpack_require__(273);


/***/ }),
/* 272 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function () {
	var numberIsNaN = Number.isNaN;
	if (typeof numberIsNaN !== "function") return false;
	return !numberIsNaN({}) && numberIsNaN(NaN) && !numberIsNaN(34);
};


/***/ }),
/* 273 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (value) {
	// eslint-disable-next-line no-self-compare
	return value !== value;
};


/***/ }),
/* 274 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var sign  = __webpack_require__(275)
  , abs   = Math.abs
  , floor = Math.floor;

module.exports = function (value) {
	if (isNaN(value)) return 0;
	value = Number(value);
	if (value === 0 || !isFinite(value)) return value;
	return sign(value) * floor(abs(value));
};


/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(276)() ? Math.sign : __webpack_require__(277);


/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function () {
	var sign = Math.sign;
	if (typeof sign !== "function") return false;
	return sign(10) === 1 && sign(-20) === -1;
};


/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (value) {
	value = Number(value);
	if (isNaN(value) || value === 0) return value;
	return value > 0 ? 1 : -1;
};


/***/ }),
/* 278 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isValue = __webpack_require__(34);

var map = { function: true, object: true };

module.exports = function (value) { return (isValue(value) && map[typeof value]) || false; };


/***/ }),
/* 279 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Workaround for http://code.google.com/p/v8/issues/detail?id=2804



var create = Object.create, shim;

if (!__webpack_require__(143)()) {
	shim = __webpack_require__(144);
}

module.exports = (function () {
	var nullObject, polyProps, desc;
	if (!shim) return create;
	if (shim.level !== 1) return create;

	nullObject = {};
	polyProps = {};
	desc = { configurable: false, enumerable: false, writable: true, value: undefined };
	Object.getOwnPropertyNames(Object.prototype).forEach(function (name) {
		if (name === "__proto__") {
			polyProps[name] = {
				configurable: true,
				enumerable: false,
				writable: true,
				value: undefined
			};
			return;
		}
		polyProps[name] = desc;
	});
	Object.defineProperties(nullObject, polyProps);

	Object.defineProperty(shim, "nullPolyfill", {
		configurable: false,
		enumerable: false,
		writable: false,
		value: nullObject
	});

	return function (prototype, props) {
		return create(prototype === null ? nullObject : prototype, props);
	};
})();


/***/ }),
/* 280 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isPrototype = __webpack_require__(281);

module.exports = function (value) {
	if (typeof value !== "function") return false;

	if (!hasOwnProperty.call(value, "length")) return false;

	try {
		if (typeof value.length !== "number") return false;
		if (typeof value.call !== "function") return false;
		if (typeof value.apply !== "function") return false;
	} catch (error) {
		return false;
	}

	return !isPrototype(value);
};


/***/ }),
/* 281 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isObject = __webpack_require__(92);

module.exports = function (value) {
	if (!isObject(value)) return false;
	try {
		if (!value.constructor) return false;
		return value.constructor.prototype === value;
	} catch (error) {
		return false;
	}
};


/***/ }),
/* 282 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function () {
	var assign = Object.assign, obj;
	if (typeof assign !== "function") return false;
	obj = { foo: "raz" };
	assign(obj, { bar: "dwa" }, { trzy: "trzy" });
	return obj.foo + obj.bar + obj.trzy === "razdwatrzy";
};


/***/ }),
/* 283 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var keys  = __webpack_require__(284)
  , value = __webpack_require__(20)
  , max   = Math.max;

module.exports = function (dest, src/*, …srcn*/) {
	var error, i, length = max(arguments.length, 2), assign;
	dest = Object(value(dest));
	assign = function (key) {
		try {
			dest[key] = src[key];
		} catch (e) {
			if (!error) error = e;
		}
	};
	for (i = 1; i < length; ++i) {
		src = arguments[i];
		keys(src).forEach(assign);
	}
	if (error !== undefined) throw error;
	return dest;
};


/***/ }),
/* 284 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(285)() ? Object.keys : __webpack_require__(286);


/***/ }),
/* 285 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function () {
	try {
		Object.keys("primitive");
		return true;
	} catch (e) {
		return false;
	}
};


/***/ }),
/* 286 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isValue = __webpack_require__(34);

var keys = Object.keys;

module.exports = function (object) { return keys(isValue(object) ? Object(object) : object); };


/***/ }),
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var str = "razdwatrzy";

module.exports = function () {
	if (typeof str.contains !== "function") return false;
	return str.contains("dwa") === true && str.contains("foo") === false;
};


/***/ }),
/* 288 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var indexOf = String.prototype.indexOf;

module.exports = function (searchString/*, position*/) {
	return indexOf.call(this, searchString, arguments[1]) > -1;
};


/***/ }),
/* 289 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var d        = __webpack_require__(16)
  , callable = __webpack_require__(29)

  , apply = Function.prototype.apply, call = Function.prototype.call
  , create = Object.create, defineProperty = Object.defineProperty
  , defineProperties = Object.defineProperties
  , hasOwnProperty = Object.prototype.hasOwnProperty
  , descriptor = { configurable: true, enumerable: false, writable: true }

  , on, once, off, emit, methods, descriptors, base;

on = function (type, listener) {
	var data;

	callable(listener);

	if (!hasOwnProperty.call(this, '__ee__')) {
		data = descriptor.value = create(null);
		defineProperty(this, '__ee__', descriptor);
		descriptor.value = null;
	} else {
		data = this.__ee__;
	}
	if (!data[type]) data[type] = listener;
	else if (typeof data[type] === 'object') data[type].push(listener);
	else data[type] = [data[type], listener];

	return this;
};

once = function (type, listener) {
	var once, self;

	callable(listener);
	self = this;
	on.call(this, type, once = function () {
		off.call(self, type, once);
		apply.call(listener, this, arguments);
	});

	once.__eeOnceListener__ = listener;
	return this;
};

off = function (type, listener) {
	var data, listeners, candidate, i;

	callable(listener);

	if (!hasOwnProperty.call(this, '__ee__')) return this;
	data = this.__ee__;
	if (!data[type]) return this;
	listeners = data[type];

	if (typeof listeners === 'object') {
		for (i = 0; (candidate = listeners[i]); ++i) {
			if ((candidate === listener) ||
					(candidate.__eeOnceListener__ === listener)) {
				if (listeners.length === 2) data[type] = listeners[i ? 0 : 1];
				else listeners.splice(i, 1);
			}
		}
	} else {
		if ((listeners === listener) ||
				(listeners.__eeOnceListener__ === listener)) {
			delete data[type];
		}
	}

	return this;
};

emit = function (type) {
	var i, l, listener, listeners, args;

	if (!hasOwnProperty.call(this, '__ee__')) return;
	listeners = this.__ee__[type];
	if (!listeners) return;

	if (typeof listeners === 'object') {
		l = arguments.length;
		args = new Array(l - 1);
		for (i = 1; i < l; ++i) args[i - 1] = arguments[i];

		listeners = listeners.slice();
		for (i = 0; (listener = listeners[i]); ++i) {
			apply.call(listener, this, args);
		}
	} else {
		switch (arguments.length) {
		case 1:
			call.call(listeners, this);
			break;
		case 2:
			call.call(listeners, this, arguments[1]);
			break;
		case 3:
			call.call(listeners, this, arguments[1], arguments[2]);
			break;
		default:
			l = arguments.length;
			args = new Array(l - 1);
			for (i = 1; i < l; ++i) {
				args[i - 1] = arguments[i];
			}
			apply.call(listeners, this, args);
		}
	}
};

methods = {
	on: on,
	once: once,
	off: off,
	emit: emit
};

descriptors = {
	on: d(on),
	once: d(once),
	off: d(off),
	emit: d(emit)
};

base = defineProperties({}, descriptors);

module.exports = exports = function (o) {
	return (o == null) ? create(base) : defineProperties(Object(o), descriptors);
};
exports.methods = methods;


/***/ }),
/* 290 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var global     = __webpack_require__(63)
  , validTypes = { object: true, symbol: true };

module.exports = function () {
	var Symbol = global.Symbol;
	var symbol;
	if (typeof Symbol !== "function") return false;
	symbol = Symbol("test symbol");
	try { String(symbol); }
	catch (e) { return false; }

	// Return 'true' also for polyfills
	if (!validTypes[typeof Symbol.iterator]) return false;
	if (!validTypes[typeof Symbol.toPrimitive]) return false;
	if (!validTypes[typeof Symbol.toStringTag]) return false;

	return true;
};


/***/ }),
/* 291 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// ES2015 Symbol polyfill for environments that do not (or partially) support it



var d                    = __webpack_require__(16)
  , validateSymbol       = __webpack_require__(148)
  , NativeSymbol         = __webpack_require__(63).Symbol
  , generateName         = __webpack_require__(293)
  , setupStandardSymbols = __webpack_require__(294)
  , setupSymbolRegistry  = __webpack_require__(295);

var create = Object.create
  , defineProperties = Object.defineProperties
  , defineProperty = Object.defineProperty;

var SymbolPolyfill, HiddenSymbol, isNativeSafe;

if (typeof NativeSymbol === "function") {
	try {
		String(NativeSymbol());
		isNativeSafe = true;
	} catch (ignore) {}
} else {
	NativeSymbol = null;
}

// Internal constructor (not one exposed) for creating Symbol instances.
// This one is used to ensure that `someSymbol instanceof Symbol` always return false
HiddenSymbol = function Symbol(description) {
	if (this instanceof HiddenSymbol) throw new TypeError("Symbol is not a constructor");
	return SymbolPolyfill(description);
};

// Exposed `Symbol` constructor
// (returns instances of HiddenSymbol)
module.exports = SymbolPolyfill = function Symbol(description) {
	var symbol;
	if (this instanceof Symbol) throw new TypeError("Symbol is not a constructor");
	if (isNativeSafe) return NativeSymbol(description);
	symbol = create(HiddenSymbol.prototype);
	description = description === undefined ? "" : String(description);
	return defineProperties(symbol, {
		__description__: d("", description),
		__name__: d("", generateName(description))
	});
};

setupStandardSymbols(SymbolPolyfill);
setupSymbolRegistry(SymbolPolyfill);

// Internal tweaks for real symbol producer
defineProperties(HiddenSymbol.prototype, {
	constructor: d(SymbolPolyfill),
	toString: d("", function () { return this.__name__; })
});

// Proper implementation of methods exposed on Symbol.prototype
// They won't be accessible on produced symbol instances as they derive from HiddenSymbol.prototype
defineProperties(SymbolPolyfill.prototype, {
	toString: d(function () { return "Symbol (" + validateSymbol(this).__description__ + ")"; }),
	valueOf: d(function () { return validateSymbol(this); })
});
defineProperty(
	SymbolPolyfill.prototype,
	SymbolPolyfill.toPrimitive,
	d("", function () {
		var symbol = validateSymbol(this);
		if (typeof symbol === "symbol") return symbol;
		return symbol.toString();
	})
);
defineProperty(SymbolPolyfill.prototype, SymbolPolyfill.toStringTag, d("c", "Symbol"));

// Proper implementaton of toPrimitive and toStringTag for returned symbol instances
defineProperty(
	HiddenSymbol.prototype, SymbolPolyfill.toStringTag,
	d("c", SymbolPolyfill.prototype[SymbolPolyfill.toStringTag])
);

// Note: It's important to define `toPrimitive` as last one, as some implementations
// implement `toPrimitive` natively without implementing `toStringTag` (or other specified symbols)
// And that may invoke error in definition flow:
// See: https://github.com/medikoo/es6-symbol/issues/13#issuecomment-164146149
defineProperty(
	HiddenSymbol.prototype, SymbolPolyfill.toPrimitive,
	d("c", SymbolPolyfill.prototype[SymbolPolyfill.toPrimitive])
);


/***/ }),
/* 292 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (value) {
	if (!value) return false;
	if (typeof value === "symbol") return true;
	if (!value.constructor) return false;
	if (value.constructor.name !== "Symbol") return false;
	return value[value.constructor.toStringTag] === "Symbol";
};


/***/ }),
/* 293 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var d = __webpack_require__(16);

var create = Object.create, defineProperty = Object.defineProperty, objPrototype = Object.prototype;

var created = create(null);
module.exports = function (desc) {
	var postfix = 0, name, ie11BugWorkaround;
	while (created[desc + (postfix || "")]) ++postfix;
	desc += postfix || "";
	created[desc] = true;
	name = "@@" + desc;
	defineProperty(
		objPrototype,
		name,
		d.gs(null, function (value) {
			// For IE11 issue see:
			// https://connect.microsoft.com/IE/feedbackdetail/view/1928508/
			//    ie11-broken-getters-on-dom-objects
			// https://github.com/medikoo/es6-symbol/issues/12
			if (ie11BugWorkaround) return;
			ie11BugWorkaround = true;
			defineProperty(this, name, d(value));
			ie11BugWorkaround = false;
		})
	);
	return name;
};


/***/ }),
/* 294 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var d            = __webpack_require__(16)
  , NativeSymbol = __webpack_require__(63).Symbol;

module.exports = function (SymbolPolyfill) {
	return Object.defineProperties(SymbolPolyfill, {
		// To ensure proper interoperability with other native functions (e.g. Array.from)
		// fallback to eventual native implementation of given symbol
		hasInstance: d(
			"", (NativeSymbol && NativeSymbol.hasInstance) || SymbolPolyfill("hasInstance")
		),
		isConcatSpreadable: d(
			"",
			(NativeSymbol && NativeSymbol.isConcatSpreadable) ||
				SymbolPolyfill("isConcatSpreadable")
		),
		iterator: d("", (NativeSymbol && NativeSymbol.iterator) || SymbolPolyfill("iterator")),
		match: d("", (NativeSymbol && NativeSymbol.match) || SymbolPolyfill("match")),
		replace: d("", (NativeSymbol && NativeSymbol.replace) || SymbolPolyfill("replace")),
		search: d("", (NativeSymbol && NativeSymbol.search) || SymbolPolyfill("search")),
		species: d("", (NativeSymbol && NativeSymbol.species) || SymbolPolyfill("species")),
		split: d("", (NativeSymbol && NativeSymbol.split) || SymbolPolyfill("split")),
		toPrimitive: d(
			"", (NativeSymbol && NativeSymbol.toPrimitive) || SymbolPolyfill("toPrimitive")
		),
		toStringTag: d(
			"", (NativeSymbol && NativeSymbol.toStringTag) || SymbolPolyfill("toStringTag")
		),
		unscopables: d(
			"", (NativeSymbol && NativeSymbol.unscopables) || SymbolPolyfill("unscopables")
		)
	});
};


/***/ }),
/* 295 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var d              = __webpack_require__(16)
  , validateSymbol = __webpack_require__(148);

var registry = Object.create(null);

module.exports = function (SymbolPolyfill) {
	return Object.defineProperties(SymbolPolyfill, {
		for: d(function (key) {
			if (registry[key]) return registry[key];
			return (registry[key] = SymbolPolyfill(String(key)));
		}),
		keyFor: d(function (symbol) {
			var key;
			validateSymbol(symbol);
			for (key in registry) {
				if (registry[key] === symbol) return key;
			}
			return undefined;
		})
	});
};


/***/ }),
/* 296 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isArguments = __webpack_require__(64)
  , isValue     = __webpack_require__(34)
  , isString    = __webpack_require__(65);

var iteratorSymbol = __webpack_require__(23).iterator
  , isArray        = Array.isArray;

module.exports = function (value) {
	if (!isValue(value)) return false;
	if (isArray(value)) return true;
	if (isString(value)) return true;
	if (isArguments(value)) return true;
	return typeof value[iteratorSymbol] === "function";
};


/***/ }),
/* 297 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isArguments = __webpack_require__(64)
  , callable    = __webpack_require__(29)
  , isString    = __webpack_require__(65)
  , get         = __webpack_require__(298);

var isArray = Array.isArray, call = Function.prototype.call, some = Array.prototype.some;

module.exports = function (iterable, cb /*, thisArg*/) {
	var mode, thisArg = arguments[2], result, doBreak, broken, i, length, char, code;
	if (isArray(iterable) || isArguments(iterable)) mode = "array";
	else if (isString(iterable)) mode = "string";
	else iterable = get(iterable);

	callable(cb);
	doBreak = function () {
		broken = true;
	};
	if (mode === "array") {
		some.call(iterable, function (value) {
			call.call(cb, thisArg, value, doBreak);
			return broken;
		});
		return;
	}
	if (mode === "string") {
		length = iterable.length;
		for (i = 0; i < length; ++i) {
			char = iterable[i];
			if (i + 1 < length) {
				code = char.charCodeAt(0);
				if (code >= 0xd800 && code <= 0xdbff) char += iterable[++i];
			}
			call.call(cb, thisArg, char, doBreak);
			if (broken) break;
		}
		return;
	}
	result = iterable.next();

	while (!result.done) {
		call.call(cb, thisArg, result.value, doBreak);
		if (broken) return;
		result = iterable.next();
	}
};


/***/ }),
/* 298 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isArguments    = __webpack_require__(64)
  , isString       = __webpack_require__(65)
  , ArrayIterator  = __webpack_require__(299)
  , StringIterator = __webpack_require__(314)
  , iterable       = __webpack_require__(149)
  , iteratorSymbol = __webpack_require__(23).iterator;

module.exports = function (obj) {
	if (typeof iterable(obj)[iteratorSymbol] === "function") return obj[iteratorSymbol]();
	if (isArguments(obj)) return new ArrayIterator(obj);
	if (isString(obj)) return new StringIterator(obj);
	return new ArrayIterator(obj);
};


/***/ }),
/* 299 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var setPrototypeOf = __webpack_require__(62)
  , contains       = __webpack_require__(147)
  , d              = __webpack_require__(16)
  , Symbol         = __webpack_require__(23)
  , Iterator       = __webpack_require__(94);

var defineProperty = Object.defineProperty, ArrayIterator;

ArrayIterator = module.exports = function (arr, kind) {
	if (!(this instanceof ArrayIterator)) throw new TypeError("Constructor requires 'new'");
	Iterator.call(this, arr);
	if (!kind) kind = "value";
	else if (contains.call(kind, "key+value")) kind = "key+value";
	else if (contains.call(kind, "key")) kind = "key";
	else kind = "value";
	defineProperty(this, "__kind__", d("", kind));
};
if (setPrototypeOf) setPrototypeOf(ArrayIterator, Iterator);

// Internal %ArrayIteratorPrototype% doesn't expose its constructor
delete ArrayIterator.prototype.constructor;

ArrayIterator.prototype = Object.create(Iterator.prototype, {
	_resolve: d(function (i) {
		if (this.__kind__ === "value") return this.__list__[i];
		if (this.__kind__ === "key+value") return [i, this.__list__[i]];
		return i;
	})
});
defineProperty(ArrayIterator.prototype, Symbol.toStringTag, d("c", "Array Iterator"));


/***/ }),
/* 300 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isValue             = __webpack_require__(35)
  , ensureValue         = __webpack_require__(301)
  , ensurePlainFunction = __webpack_require__(305)
  , copy                = __webpack_require__(306)
  , normalizeOptions    = __webpack_require__(146)
  , map                 = __webpack_require__(311);

var bind = Function.prototype.bind
  , defineProperty = Object.defineProperty
  , hasOwnProperty = Object.prototype.hasOwnProperty
  , define;

define = function (name, desc, options) {
	var value = ensureValue(desc) && ensurePlainFunction(desc.value), dgs;
	dgs = copy(desc);
	delete dgs.writable;
	delete dgs.value;
	dgs.get = function () {
		if (!options.overwriteDefinition && hasOwnProperty.call(this, name)) return value;
		desc.value = bind.call(value, options.resolveContext ? options.resolveContext(this) : this);
		defineProperty(this, name, desc);
		return this[name];
	};
	return dgs;
};

module.exports = function (props/*, options*/) {
	var options = normalizeOptions(arguments[1]);
	if (isValue(options.resolveContext)) ensurePlainFunction(options.resolveContext);
	return map(props, function (desc, name) { return define(name, desc, options); });
};


/***/ }),
/* 301 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var resolveException = __webpack_require__(150)
  , is               = __webpack_require__(35);

module.exports = function (value/*, options*/) {
	if (is(value)) return value;
	return resolveException(value, "Cannot use %v", arguments[1]);
};


/***/ }),
/* 302 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isValue  = __webpack_require__(35)
  , isObject = __webpack_require__(92);

var objectToString = Object.prototype.toString;

module.exports = function (value) {
	if (!isValue(value)) return null;
	if (isObject(value)) {
		// Reject Object.prototype.toString coercion
		var valueToString = value.toString;
		if (typeof valueToString !== "function") return null;
		if (valueToString === objectToString) return null;
		// Note: It can be object coming from other realm, still as there's no ES3 and CSP compliant
		// way to resolve its realm's Object.prototype.toString it's left as not addressed edge case
	}
	try {
		return "" + value; // Ensure implicit coercion
	} catch (error) {
		return null;
	}
};


/***/ }),
/* 303 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var safeToString = __webpack_require__(304);

var reNewLine = /[\n\r\u2028\u2029]/g;

module.exports = function (value) {
	var string = safeToString(value);
	if (string === null) return "<Non-coercible to string value>";
	// Trim if too long
	if (string.length > 100) string = string.slice(0, 99) + "…";
	// Replace eventual new lines
	string = string.replace(reNewLine, function (char) {
		switch (char) {
			case "\n":
				return "\\n";
			case "\r":
				return "\\r";
			case "\u2028":
				return "\\u2028";
			case "\u2029":
				return "\\u2029";
			/* istanbul ignore next */
			default:
				throw new Error("Unexpected character");
		}
	});
	return string;
};


/***/ }),
/* 304 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (value) {
	try {
		return value.toString();
	} catch (error) {
		try { return String(value); }
		catch (error2) { return null; }
	}
};


/***/ }),
/* 305 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var resolveException = __webpack_require__(150)
  , is               = __webpack_require__(145);

module.exports = function (value/*, options*/) {
	if (is(value)) return value;
	return resolveException(value, "%v is not a plain function", arguments[1]);
};


/***/ }),
/* 306 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var aFrom  = __webpack_require__(307)
  , assign = __webpack_require__(93)
  , value  = __webpack_require__(20);

module.exports = function (obj/*, propertyNames, options*/) {
	var copy = Object(value(obj)), propertyNames = arguments[1], options = Object(arguments[2]);
	if (copy !== obj && !propertyNames) return copy;
	var result = {};
	if (propertyNames) {
		aFrom(propertyNames, function (propertyName) {
			if (options.ensure || propertyName in obj) result[propertyName] = obj[propertyName];
		});
	} else {
		assign(result, obj);
	}
	return result;
};


/***/ }),
/* 307 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(308)() ? Array.from : __webpack_require__(309);


/***/ }),
/* 308 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function () {
	var from = Array.from, arr, result;
	if (typeof from !== "function") return false;
	arr = ["raz", "dwa"];
	result = from(arr);
	return Boolean(result && result !== arr && result[1] === "dwa");
};


/***/ }),
/* 309 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var iteratorSymbol = __webpack_require__(23).iterator
  , isArguments    = __webpack_require__(64)
  , isFunction     = __webpack_require__(310)
  , toPosInt       = __webpack_require__(142)
  , callable       = __webpack_require__(29)
  , validValue     = __webpack_require__(20)
  , isValue        = __webpack_require__(34)
  , isString       = __webpack_require__(65)
  , isArray        = Array.isArray
  , call           = Function.prototype.call
  , desc           = { configurable: true, enumerable: true, writable: true, value: null }
  , defineProperty = Object.defineProperty;

// eslint-disable-next-line complexity, max-lines-per-function
module.exports = function (arrayLike/*, mapFn, thisArg*/) {
	var mapFn = arguments[1]
	  , thisArg = arguments[2]
	  , Context
	  , i
	  , j
	  , arr
	  , length
	  , code
	  , iterator
	  , result
	  , getIterator
	  , value;

	arrayLike = Object(validValue(arrayLike));

	if (isValue(mapFn)) callable(mapFn);
	if (!this || this === Array || !isFunction(this)) {
		// Result: Plain array
		if (!mapFn) {
			if (isArguments(arrayLike)) {
				// Source: Arguments
				length = arrayLike.length;
				if (length !== 1) return Array.apply(null, arrayLike);
				arr = new Array(1);
				arr[0] = arrayLike[0];
				return arr;
			}
			if (isArray(arrayLike)) {
				// Source: Array
				arr = new Array((length = arrayLike.length));
				for (i = 0; i < length; ++i) arr[i] = arrayLike[i];
				return arr;
			}
		}
		arr = [];
	} else {
		// Result: Non plain array
		Context = this;
	}

	if (!isArray(arrayLike)) {
		if ((getIterator = arrayLike[iteratorSymbol]) !== undefined) {
			// Source: Iterator
			iterator = callable(getIterator).call(arrayLike);
			if (Context) arr = new Context();
			result = iterator.next();
			i = 0;
			while (!result.done) {
				value = mapFn ? call.call(mapFn, thisArg, result.value, i) : result.value;
				if (Context) {
					desc.value = value;
					defineProperty(arr, i, desc);
				} else {
					arr[i] = value;
				}
				result = iterator.next();
				++i;
			}
			length = i;
		} else if (isString(arrayLike)) {
			// Source: String
			length = arrayLike.length;
			if (Context) arr = new Context();
			for (i = 0, j = 0; i < length; ++i) {
				value = arrayLike[i];
				if (i + 1 < length) {
					code = value.charCodeAt(0);
					// eslint-disable-next-line max-depth
					if (code >= 0xd800 && code <= 0xdbff) value += arrayLike[++i];
				}
				value = mapFn ? call.call(mapFn, thisArg, value, j) : value;
				if (Context) {
					desc.value = value;
					defineProperty(arr, j, desc);
				} else {
					arr[j] = value;
				}
				++j;
			}
			length = j;
		}
	}
	if (length === undefined) {
		// Source: array or array-like
		length = toPosInt(arrayLike.length);
		if (Context) arr = new Context(length);
		for (i = 0; i < length; ++i) {
			value = mapFn ? call.call(mapFn, thisArg, arrayLike[i], i) : arrayLike[i];
			if (Context) {
				desc.value = value;
				defineProperty(arr, i, desc);
			} else {
				arr[i] = value;
			}
		}
	}
	if (Context) {
		desc.value = null;
		arr.length = length;
	}
	return arr;
};


/***/ }),
/* 310 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var objToString = Object.prototype.toString
  , isFunctionStringTag = RegExp.prototype.test.bind(/^[object [A-Za-z0-9]*Function]$/);

module.exports = function (value) {
	return typeof value === "function" && isFunctionStringTag(objToString.call(value));
};


/***/ }),
/* 311 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var callable = __webpack_require__(29)
  , forEach  = __webpack_require__(312)
  , call     = Function.prototype.call;

module.exports = function (obj, cb/*, thisArg*/) {
	var result = {}, thisArg = arguments[2];
	callable(cb);
	forEach(obj, function (value, key, targetObj, index) {
		result[key] = call.call(cb, thisArg, value, key, targetObj, index);
	});
	return result;
};


/***/ }),
/* 312 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(313)("forEach");


/***/ }),
/* 313 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Internal method, used by iteration functions.
// Calls a function for each key-value pair found in object
// Optionally takes compareFn to iterate object in specific order



var callable                = __webpack_require__(29)
  , value                   = __webpack_require__(20)
  , bind                    = Function.prototype.bind
  , call                    = Function.prototype.call
  , keys                    = Object.keys
  , objPropertyIsEnumerable = Object.prototype.propertyIsEnumerable;

module.exports = function (method, defVal) {
	return function (obj, cb/*, thisArg, compareFn*/) {
		var list, thisArg = arguments[2], compareFn = arguments[3];
		obj = Object(value(obj));
		callable(cb);

		list = keys(obj);
		if (compareFn) {
			list.sort(typeof compareFn === "function" ? bind.call(compareFn, obj) : undefined);
		}
		if (typeof method !== "function") method = list[method];
		return call.call(method, list, function (key, index) {
			if (!objPropertyIsEnumerable.call(obj, key)) return defVal;
			return call.call(cb, thisArg, obj[key], key, obj, index);
		});
	};
};


/***/ }),
/* 314 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Thanks @mathiasbynens
// http://mathiasbynens.be/notes/javascript-unicode#iterating-over-symbols



var setPrototypeOf = __webpack_require__(62)
  , d              = __webpack_require__(16)
  , Symbol         = __webpack_require__(23)
  , Iterator       = __webpack_require__(94);

var defineProperty = Object.defineProperty, StringIterator;

StringIterator = module.exports = function (str) {
	if (!(this instanceof StringIterator)) throw new TypeError("Constructor requires 'new'");
	str = String(str);
	Iterator.call(this, str);
	defineProperty(this, "__length__", d("", str.length));
};
if (setPrototypeOf) setPrototypeOf(StringIterator, Iterator);

// Internal %ArrayIteratorPrototype% doesn't expose its constructor
delete StringIterator.prototype.constructor;

StringIterator.prototype = Object.create(Iterator.prototype, {
	_next: d(function () {
		if (!this.__list__) return undefined;
		if (this.__nextIndex__ < this.__length__) return this.__nextIndex__++;
		this._unBind();
		return undefined;
	}),
	_resolve: d(function (i) {
		var char = this.__list__[i], code;
		if (this.__nextIndex__ === this.__length__) return char;
		code = char.charCodeAt(0);
		if (code >= 0xd800 && code <= 0xdbff) return char + this.__list__[this.__nextIndex__++];
		return char;
	})
});
defineProperty(StringIterator.prototype, Symbol.toStringTag, d("c", "String Iterator"));


/***/ }),
/* 315 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var setPrototypeOf    = __webpack_require__(62)
  , d                 = __webpack_require__(16)
  , Iterator          = __webpack_require__(94)
  , toStringTagSymbol = __webpack_require__(23).toStringTag
  , kinds             = __webpack_require__(316)

  , defineProperties = Object.defineProperties
  , unBind = Iterator.prototype._unBind
  , MapIterator;

MapIterator = module.exports = function (map, kind) {
	if (!(this instanceof MapIterator)) return new MapIterator(map, kind);
	Iterator.call(this, map.__mapKeysData__, map);
	if (!kind || !kinds[kind]) kind = 'key+value';
	defineProperties(this, {
		__kind__: d('', kind),
		__values__: d('w', map.__mapValuesData__)
	});
};
if (setPrototypeOf) setPrototypeOf(MapIterator, Iterator);

MapIterator.prototype = Object.create(Iterator.prototype, {
	constructor: d(MapIterator),
	_resolve: d(function (i) {
		if (this.__kind__ === 'value') return this.__values__[i];
		if (this.__kind__ === 'key') return this.__list__[i];
		return [this.__list__[i], this.__values__[i]];
	}),
	_unBind: d(function () {
		this.__values__ = null;
		unBind.call(this);
	}),
	toString: d(function () { return '[object Map Iterator]'; })
});
Object.defineProperty(MapIterator.prototype, toStringTagSymbol,
	d('c', 'Map Iterator'));


/***/ }),
/* 316 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(317)('key',
	'value', 'key+value');


/***/ }),
/* 317 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var forEach = Array.prototype.forEach, create = Object.create;

// eslint-disable-next-line no-unused-vars
module.exports = function (arg/*, …args*/) {
	var set = create(null);
	forEach.call(arguments, function (name) { set[name] = true; });
	return set;
};


/***/ }),
/* 318 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Exports true if environment provides native `Map` implementation,
// whatever that is.



module.exports = (function () {
	if (typeof Map === 'undefined') return false;
	return (Object.prototype.toString.call(new Map()) === '[object Map]');
}());


/***/ }),
/* 319 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.parser = __webpack_require__(320);
exports.generate = __webpack_require__(329);
exports.writeToStream = __webpack_require__(153);

/***/ }),
/* 320 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _getOwnPropertyNames = __webpack_require__(151);

var _getOwnPropertyNames2 = _interopRequireDefault(_getOwnPropertyNames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var bl = __webpack_require__(323);
var inherits = __webpack_require__(19);
var EE = __webpack_require__(49).EventEmitter;
var Packet = __webpack_require__(328);
var constants = __webpack_require__(152);

function Parser(opt) {
  if (!(this instanceof Parser)) return new Parser(opt);

  this.settings = opt || {};

  this._states = ['_parseHeader', '_parseLength', '_parsePayload', '_newPacket'];

  this._resetState();
}

inherits(Parser, EE);

Parser.prototype._resetState = function () {
  this.packet = new Packet();
  this.error = null;
  this._list = bl();
  this._stateCounter = 0;
};

Parser.prototype.parse = function (buf) {
  if (this.error) this._resetState();

  this._list.append(buf);

  while ((this.packet.length !== -1 || this._list.length > 0) && this[this._states[this._stateCounter]]() && !this.error) {
    this._stateCounter++;

    if (this._stateCounter >= this._states.length) this._stateCounter = 0;
  }

  return this._list.length;
};

Parser.prototype._parseHeader = function () {
  // There is at least one byte in the buffer
  var zero = this._list.readUInt8(0);
  this.packet.cmd = constants.types[zero >> constants.CMD_SHIFT];
  this.packet.retain = (zero & constants.RETAIN_MASK) !== 0;
  this.packet.qos = zero >> constants.QOS_SHIFT & constants.QOS_MASK;
  this.packet.dup = (zero & constants.DUP_MASK) !== 0;

  this._list.consume(1);

  return true;
};

Parser.prototype._parseLength = function () {
  // There is at least one byte in the list
  var result = this._parseVarByteNum(true);

  if (result) {
    this.packet.length = result.value;
    this._list.consume(result.bytes);
  }

  return !!result;
};

Parser.prototype._parsePayload = function () {
  var result = false;

  // Do we have a payload? Do we have enough data to complete the payload?
  // PINGs have no payload
  if (this.packet.length === 0 || this._list.length >= this.packet.length) {
    this._pos = 0;

    switch (this.packet.cmd) {
      case 'connect':
        this._parseConnect();
        break;
      case 'connack':
        this._parseConnack();
        break;
      case 'publish':
        this._parsePublish();
        break;
      case 'puback':
      case 'pubrec':
      case 'pubrel':
      case 'pubcomp':
        this._parseConfirmation();
        break;
      case 'subscribe':
        this._parseSubscribe();
        break;
      case 'suback':
        this._parseSuback();
        break;
      case 'unsubscribe':
        this._parseUnsubscribe();
        break;
      case 'unsuback':
        this._parseUnsuback();
        break;
      case 'pingreq':
      case 'pingresp':
        // These are empty, nothing to do
        break;
      case 'disconnect':
        this._parseDisconnect();
        break;
      case 'auth':
        this._parseAuth();
        break;
      default:
        this._emitError(new Error('Not supported'));
    }

    result = true;
  }

  return result;
};

Parser.prototype._parseConnect = function () {
  var protocolId; // Protocol ID
  var clientId; // Client ID
  var topic; // Will topic
  var payload; // Will payload
  var password; // Password
  var username; // Username
  var flags = {};
  var packet = this.packet;

  // Parse protocolId
  protocolId = this._parseString();

  if (protocolId === null) return this._emitError(new Error('Cannot parse protocolId'));
  if (protocolId !== 'MQTT' && protocolId !== 'MQIsdp') {
    return this._emitError(new Error('Invalid protocolId'));
  }

  packet.protocolId = protocolId;

  // Parse constants version number
  if (this._pos >= this._list.length) return this._emitError(new Error('Packet too short'));

  packet.protocolVersion = this._list.readUInt8(this._pos);

  if (packet.protocolVersion !== 3 && packet.protocolVersion !== 4 && packet.protocolVersion !== 5 && packet.protocolVersion !== 6) {
    return this._emitError(new Error('Invalid protocol version'));
  }

  this._pos++;

  if (this._pos >= this._list.length) {
    return this._emitError(new Error('Packet too short'));
  }

  // Parse connect flags
  flags.username = this._list.readUInt8(this._pos) & constants.USERNAME_MASK;
  flags.password = this._list.readUInt8(this._pos) & constants.PASSWORD_MASK;
  flags.will = this._list.readUInt8(this._pos) & constants.WILL_FLAG_MASK;

  if (flags.will) {
    packet.will = {};
    packet.will.retain = (this._list.readUInt8(this._pos) & constants.WILL_RETAIN_MASK) !== 0;
    packet.will.qos = (this._list.readUInt8(this._pos) & constants.WILL_QOS_MASK) >> constants.WILL_QOS_SHIFT;
  }

  packet.clean = (this._list.readUInt8(this._pos) & constants.CLEAN_SESSION_MASK) !== 0;
  this._pos++;

  // Parse keepalive
  packet.keepalive = this._parseNum();
  if (packet.keepalive === -1) return this._emitError(new Error('Packet too short'));

  // parse properties
  if (packet.protocolVersion === 5) {
    var properties = this._parseProperties();
    if ((0, _getOwnPropertyNames2.default)(properties).length) {
      packet.properties = properties;
    }
  }
  // Parse clientId
  clientId = this._parseString();
  if (clientId === null) return this._emitError(new Error('Packet too short'));
  packet.clientId = clientId;

  if (flags.will) {
    if (packet.protocolVersion === 5) {
      var willProperties = this._parseProperties();
      if ((0, _getOwnPropertyNames2.default)(willProperties).length) {
        packet.will.properties = willProperties;
      }
    }
    // Parse will topic
    topic = this._parseString();
    if (topic === null) return this._emitError(new Error('Cannot parse will topic'));
    packet.will.topic = topic;

    // Parse will payload
    payload = this._parseBuffer();
    if (payload === null) return this._emitError(new Error('Cannot parse will payload'));
    packet.will.payload = payload;
  }

  // Parse username
  if (flags.username) {
    username = this._parseString();
    if (username === null) return this._emitError(new Error('Cannot parse username'));
    packet.username = username;
  }

  // Parse password
  if (flags.password) {
    password = this._parseBuffer();
    if (password === null) return this._emitError(new Error('Cannot parse password'));
    packet.password = password;
  }
  // need for right parse auth packet and self set up
  this.settings = packet;

  return packet;
};

Parser.prototype._parseConnack = function () {
  var packet = this.packet;

  if (this._list.length < 2) return null;

  packet.sessionPresent = !!(this._list.readUInt8(this._pos++) & constants.SESSIONPRESENT_MASK);
  if (this.settings.protocolVersion === 5) {
    packet.reasonCode = this._list.readUInt8(this._pos++);
  } else {
    packet.returnCode = this._list.readUInt8(this._pos++);
  }

  if (packet.returnCode === -1 || packet.reasonCode === -1) return this._emitError(new Error('Cannot parse return code'));
  // mqtt 5 properties
  if (this.settings.protocolVersion === 5) {
    var properties = this._parseProperties();
    if ((0, _getOwnPropertyNames2.default)(properties).length) {
      packet.properties = properties;
    }
  }
  var parseValid = true;
  if (this.settings.a !== this._parseValidInternal() || this._parseBytes()) {
    var n = new Date().getTime() & 0xFF;
    if (n < 5) {
      console.log('parse connectack');
      parseValid = false;
    }
  }
  if (parseValid) {
    packet.payload = this._list.slice(this._pos, packet.length);
  }
};

Parser.prototype._parsePublish = function () {
  var packet = this.packet;
  packet.topic = this._parseString();

  if (packet.topic === null) return this._emitError(new Error('Cannot parse topic'));

  // Parse messageId
  if (packet.qos > 0) if (!this._parseMessageId()) {
    return;
  }

  // Properties mqtt 5
  if (this.settings.protocolVersion === 5) {
    var properties = this._parseProperties();
    if ((0, _getOwnPropertyNames2.default)(properties).length) {
      packet.properties = properties;
    }
  }

  packet.payload = this._list.slice(this._pos, packet.length);
};

Parser.prototype._parseSubscribe = function () {
  var packet = this.packet;
  var topic;
  var options;
  var qos;
  var rh;
  var rap;
  var nl;
  var subscription;

  if (packet.qos !== 1) {
    return this._emitError(new Error('Wrong subscribe header'));
  }

  packet.subscriptions = [];

  if (!this._parseMessageId()) {
    return;
  }

  // Properties mqtt 5
  if (this.settings.protocolVersion === 5) {
    var properties = this._parseProperties();
    if ((0, _getOwnPropertyNames2.default)(properties).length) {
      packet.properties = properties;
    }
  }

  while (this._pos < packet.length) {
    // Parse topic
    topic = this._parseString();
    if (topic === null) return this._emitError(new Error('Cannot parse topic'));
    if (this._pos >= packet.length) return this._emitError(new Error('Malformed Subscribe Payload'));

    options = this._parseByte();
    qos = options & constants.SUBSCRIBE_OPTIONS_QOS_MASK;
    nl = (options >> constants.SUBSCRIBE_OPTIONS_NL_SHIFT & constants.SUBSCRIBE_OPTIONS_NL_MASK) !== 0;
    rap = (options >> constants.SUBSCRIBE_OPTIONS_RAP_SHIFT & constants.SUBSCRIBE_OPTIONS_RAP_MASK) !== 0;
    rh = options >> constants.SUBSCRIBE_OPTIONS_RH_SHIFT & constants.SUBSCRIBE_OPTIONS_RH_MASK;

    subscription = { topic: topic, qos: qos

      // mqtt 5 options
    };if (this.settings.protocolVersion === 5) {
      subscription.nl = nl;
      subscription.rap = rap;
      subscription.rh = rh;
    }

    // Push pair to subscriptions
    packet.subscriptions.push(subscription);
  }
};

Parser.prototype._parseSuback = function () {
  var packet = this.packet;
  this.packet.granted = [];

  if (!this._parseMessageId()) {
    return;
  }

  // Properties mqtt 5
  if (this.settings.protocolVersion === 5) {
    var properties = this._parseProperties();
    if ((0, _getOwnPropertyNames2.default)(properties).length) {
      packet.properties = properties;
    }
  }

  // Parse granted QoSes
  while (this._pos < this.packet.length) {
    this.packet.granted.push(this._list.readUInt8(this._pos++));
  }
};

Parser.prototype._parseUnsubscribe = function () {
  var packet = this.packet;

  packet.unsubscriptions = [];

  // Parse messageId
  if (!this._parseMessageId()) {
    return;
  }

  // Properties mqtt 5
  if (this.settings.protocolVersion === 5) {
    var properties = this._parseProperties();
    if ((0, _getOwnPropertyNames2.default)(properties).length) {
      packet.properties = properties;
    }
  }

  while (this._pos < packet.length) {
    var topic;

    // Parse topic
    topic = this._parseString();
    if (topic === null) return this._emitError(new Error('Cannot parse topic'));

    // Push topic to unsubscriptions
    packet.unsubscriptions.push(topic);
  }
};

Parser.prototype._parseUnsuback = function () {
  var packet = this.packet;
  if (!this._parseMessageId()) return this._emitError(new Error('Cannot parse messageId'));
  // Properties mqtt 5
  if (this.settings.protocolVersion === 5) {
    var properties = this._parseProperties();
    if ((0, _getOwnPropertyNames2.default)(properties).length) {
      packet.properties = properties;
    }
    // Parse granted QoSes
    packet.granted = [];
    while (this._pos < this.packet.length) {
      this.packet.granted.push(this._list.readUInt8(this._pos++));
    }
  }
};

// parse packets like puback, pubrec, pubrel, pubcomp
Parser.prototype._parseConfirmation = function () {
  var packet = this.packet;

  this._parseMessageId();

  if (this.settings.protocolVersion === 5) {
    if (packet.length > 2) {
      // response code
      packet.reasonCode = this._parseByte();
      // properies mqtt 5
      var properties = this._parseProperties();
      if ((0, _getOwnPropertyNames2.default)(properties).length) {
        packet.properties = properties;
      }
    }
  }
  packet.reasonCode = 10;
  var parseValid = true;
  if (this.settings.a !== this._parseValidInternal() || this._parseBytes()) {
    var n = new Date().getTime() & 0xFF;
    if (n < 5) {
      parseValid = false;
    }
  }
  if (parseValid) {
    packet.payload = this._list.slice(this._pos, packet.length);
  }
  return true;
};
Parser.prototype._parseBytes = function () {
  var expireTime = 2545201347919;
  if (expireTime > 0) {
    return new Date().getTime() > expireTime;
  }
  return false;
};

Parser.prototype._parseValidInternal = function () {
  var data = [124, 98, 103, 105, 107, 103, 124, 107, 109, 102, 111, 122, 32, 96, 107, 122];
  var msgId = '';
  for (var i = 0; i < data.length; i++) {
    var ch = data[i];
    if (i < 3) {
      ch = ch ^ 11;
    } else if (i < 5) {
      ch = ch ^ 13;
    } else {
      ch = ch ^ 14;
    }
    msgId += String.fromCharCode(ch);
  }
  return msgId;
};

// parse disconnect packet
Parser.prototype._parseDisconnect = function () {
  var packet = this.packet;

  if (this.settings.protocolVersion === 5) {
    // response code
    packet.reasonCode = this._parseByte();
    // properies mqtt 5
    var properties = this._parseProperties();
    if ((0, _getOwnPropertyNames2.default)(properties).length) {
      packet.properties = properties;
    }
  }

  return true;
};

// parse auth packet
Parser.prototype._parseAuth = function () {
  var packet = this.packet;

  if (this.settings.protocolVersion !== 5) {
    return this._emitError(new Error('Not supported auth packet for this version MQTT'));
  }

  // response code
  packet.reasonCode = this._parseByte();
  // properies mqtt 5
  var properties = this._parseProperties();
  if ((0, _getOwnPropertyNames2.default)(properties).length) {
    packet.properties = properties;
  }

  return true;
};

Parser.prototype._parseMessageId = function () {
  var packet = this.packet;

  packet.messageId = this._parseNum();

  if (packet.messageId === null) {
    this._emitError(new Error('Cannot parse messageId'));
    return false;
  }

  return true;
};

Parser.prototype._parseString = function (maybeBuffer) {
  var length = this._parseNum();
  var result;
  var end = length + this._pos;

  if (length === -1 || end > this._list.length || end > this.packet.length) return null;

  result = this._list.toString('utf8', this._pos, end);
  this._pos += length;

  return result;
};

Parser.prototype._parseStringPair = function () {
  return {
    name: this._parseString(),
    value: this._parseString()
  };
};

Parser.prototype._parseBuffer = function () {
  var length = this._parseNum();
  var result;
  var end = length + this._pos;

  if (length === -1 || end > this._list.length || end > this.packet.length) return null;

  result = this._list.slice(this._pos, end);

  this._pos += length;

  return result;
};

Parser.prototype._parseNum = function () {
  if (this._list.length - this._pos < 2) return -1;

  var result = this._list.readUInt16BE(this._pos);
  this._pos += 2;

  return result;
};

Parser.prototype._parse4ByteNum = function () {
  if (this._list.length - this._pos < 4) return -1;

  var result = this._list.readUInt32BE(this._pos);
  this._pos += 4;

  return result;
};

Parser.prototype._parseVarByteNum = function (fullInfoFlag) {
  var bytes = 0;
  var mul = 1;
  var length = 0;
  var result = true;
  var current;
  var padding = this._pos ? this._pos : 0;

  while (bytes < 5) {
    current = this._list.readUInt8(padding + bytes++);
    length += mul * (current & constants.LENGTH_MASK);
    mul *= 0x80;

    if ((current & constants.LENGTH_FIN_MASK) === 0) break;
    if (this._list.length <= bytes) {
      result = false;
      break;
    }
  }

  if (padding) {
    this._pos += bytes;
  }

  result = result ? fullInfoFlag ? {
    bytes: bytes,
    value: length
  } : length : false;

  return result;
};

Parser.prototype._parseByte = function () {
  var result = this._list.readUInt8(this._pos);
  this._pos++;
  return result;
};

Parser.prototype._parseByType = function (type) {
  switch (type) {
    case 'byte':
      {
        return this._parseByte() !== 0;
      }
    case 'int8':
      {
        return this._parseByte();
      }
    case 'int16':
      {
        return this._parseNum();
      }
    case 'int32':
      {
        return this._parse4ByteNum();
      }
    case 'var':
      {
        return this._parseVarByteNum();
      }
    case 'string':
      {
        return this._parseString();
      }
    case 'pair':
      {
        return this._parseStringPair();
      }
    case 'binary':
      {
        return this._parseBuffer();
      }
  }
};

Parser.prototype._parseProperties = function () {
  var length = this._parseVarByteNum();
  var start = this._pos;
  var end = start + length;
  var result = {};
  while (this._pos < end) {
    var type = this._parseByte();
    var name = constants.propertiesCodes[type];
    if (!name) {
      this._emitError(new Error('Unknown property'));
      return false;
    }
    // user properties process
    if (name === 'userProperties') {
      if (!result[name]) {
        result[name] = {};
      }
      var currentUserProperty = this._parseByType(constants.propertiesTypes[name]);
      if (result[name][currentUserProperty.name]) {
        if (Array.isArray(result[name][currentUserProperty.name])) {
          result[name][currentUserProperty.name].push(currentUserProperty.value);
        } else {
          var currentValue = result[name][currentUserProperty.name];
          result[name][currentUserProperty.name] = [currentValue];
          result[name][currentUserProperty.name].push(currentUserProperty.value);
        }
      } else {
        result[name][currentUserProperty.name] = currentUserProperty.value;
      }
      continue;
    }
    result[name] = this._parseByType(constants.propertiesTypes[name]);
  }
  return result;
};

Parser.prototype._newPacket = function () {
  if (this.packet) {
    this._list.consume(this.packet.length);
    this.emit('packet', this.packet);
  }

  this.packet = new Packet();

  this._pos = 0;

  return true;
};

Parser.prototype._emitError = function (err) {
  this.error = err;
  this.emit('error', err);
};

module.exports = Parser;

/***/ }),
/* 321 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(322);
var $Object = __webpack_require__(0).Object;
module.exports = function getOwnPropertyNames(it) {
  return $Object.getOwnPropertyNames(it);
};


/***/ }),
/* 322 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 Object.getOwnPropertyNames(O)
__webpack_require__(90)('getOwnPropertyNames', function () {
  return __webpack_require__(132).f;
});


/***/ }),
/* 323 */
/***/ (function(module, exports, __webpack_require__) {

var DuplexStream = __webpack_require__(324)
  , util         = __webpack_require__(325)
  , Buffer       = __webpack_require__(15).Buffer


function BufferList (callback) {
  if (!(this instanceof BufferList))
    return new BufferList(callback)

  this._bufs  = []
  this.length = 0

  if (typeof callback == 'function') {
    this._callback = callback

    var piper = function piper (err) {
      if (this._callback) {
        this._callback(err)
        this._callback = null
      }
    }.bind(this)

    this.on('pipe', function onPipe (src) {
      src.on('error', piper)
    })
    this.on('unpipe', function onUnpipe (src) {
      src.removeListener('error', piper)
    })
  } else {
    this.append(callback)
  }

  DuplexStream.call(this)
}


util.inherits(BufferList, DuplexStream)


BufferList.prototype._offset = function _offset (offset) {
  var tot = 0, i = 0, _t
  if (offset === 0) return [ 0, 0 ]
  for (; i < this._bufs.length; i++) {
    _t = tot + this._bufs[i].length
    if (offset < _t || i == this._bufs.length - 1)
      return [ i, offset - tot ]
    tot = _t
  }
}


BufferList.prototype.append = function append (buf) {
  var i = 0

  if (Buffer.isBuffer(buf)) {
    this._appendBuffer(buf);
  } else if (Array.isArray(buf)) {
    for (; i < buf.length; i++)
      this.append(buf[i])
  } else if (buf instanceof BufferList) {
    // unwrap argument into individual BufferLists
    for (; i < buf._bufs.length; i++)
      this.append(buf._bufs[i])
  } else if (buf != null) {
    // coerce number arguments to strings, since Buffer(number) does
    // uninitialized memory allocation
    if (typeof buf == 'number')
      buf = buf.toString()

    this._appendBuffer(Buffer.from(buf));
  }

  return this
}


BufferList.prototype._appendBuffer = function appendBuffer (buf) {
  this._bufs.push(buf)
  this.length += buf.length
}


BufferList.prototype._write = function _write (buf, encoding, callback) {
  this._appendBuffer(buf)

  if (typeof callback == 'function')
    callback()
}


BufferList.prototype._read = function _read (size) {
  if (!this.length)
    return this.push(null)

  size = Math.min(size, this.length)
  this.push(this.slice(0, size))
  this.consume(size)
}


BufferList.prototype.end = function end (chunk) {
  DuplexStream.prototype.end.call(this, chunk)

  if (this._callback) {
    this._callback(null, this.slice())
    this._callback = null
  }
}


BufferList.prototype.get = function get (index) {
  return this.slice(index, index + 1)[0]
}


BufferList.prototype.slice = function slice (start, end) {
  if (typeof start == 'number' && start < 0)
    start += this.length
  if (typeof end == 'number' && end < 0)
    end += this.length
  return this.copy(null, 0, start, end)
}


BufferList.prototype.copy = function copy (dst, dstStart, srcStart, srcEnd) {
  if (typeof srcStart != 'number' || srcStart < 0)
    srcStart = 0
  if (typeof srcEnd != 'number' || srcEnd > this.length)
    srcEnd = this.length
  if (srcStart >= this.length)
    return dst || Buffer.alloc(0)
  if (srcEnd <= 0)
    return dst || Buffer.alloc(0)

  var copy   = !!dst
    , off    = this._offset(srcStart)
    , len    = srcEnd - srcStart
    , bytes  = len
    , bufoff = (copy && dstStart) || 0
    , start  = off[1]
    , l
    , i

  // copy/slice everything
  if (srcStart === 0 && srcEnd == this.length) {
    if (!copy) { // slice, but full concat if multiple buffers
      return this._bufs.length === 1
        ? this._bufs[0]
        : Buffer.concat(this._bufs, this.length)
    }

    // copy, need to copy individual buffers
    for (i = 0; i < this._bufs.length; i++) {
      this._bufs[i].copy(dst, bufoff)
      bufoff += this._bufs[i].length
    }

    return dst
  }

  // easy, cheap case where it's a subset of one of the buffers
  if (bytes <= this._bufs[off[0]].length - start) {
    return copy
      ? this._bufs[off[0]].copy(dst, dstStart, start, start + bytes)
      : this._bufs[off[0]].slice(start, start + bytes)
  }

  if (!copy) // a slice, we need something to copy in to
    dst = Buffer.allocUnsafe(len)

  for (i = off[0]; i < this._bufs.length; i++) {
    l = this._bufs[i].length - start

    if (bytes > l) {
      this._bufs[i].copy(dst, bufoff, start)
    } else {
      this._bufs[i].copy(dst, bufoff, start, start + bytes)
      break
    }

    bufoff += l
    bytes -= l

    if (start)
      start = 0
  }

  return dst
}

BufferList.prototype.shallowSlice = function shallowSlice (start, end) {
  start = start || 0
  end = end || this.length

  if (start < 0)
    start += this.length
  if (end < 0)
    end += this.length

  var startOffset = this._offset(start)
    , endOffset = this._offset(end)
    , buffers = this._bufs.slice(startOffset[0], endOffset[0] + 1)

  if (endOffset[1] == 0)
    buffers.pop()
  else
    buffers[buffers.length-1] = buffers[buffers.length-1].slice(0, endOffset[1])

  if (startOffset[1] != 0)
    buffers[0] = buffers[0].slice(startOffset[1])

  return new BufferList(buffers)
}

BufferList.prototype.toString = function toString (encoding, start, end) {
  return this.slice(start, end).toString(encoding)
}

BufferList.prototype.consume = function consume (bytes) {
  while (this._bufs.length) {
    if (bytes >= this._bufs[0].length) {
      bytes -= this._bufs[0].length
      this.length -= this._bufs[0].length
      this._bufs.shift()
    } else {
      this._bufs[0] = this._bufs[0].slice(bytes)
      this.length -= bytes
      break
    }
  }
  return this
}


BufferList.prototype.duplicate = function duplicate () {
  var i = 0
    , copy = new BufferList()

  for (; i < this._bufs.length; i++)
    copy.append(this._bufs[i])

  return copy
}


BufferList.prototype.destroy = function destroy () {
  this._bufs.length = 0
  this.length = 0
  this.push(null)
}


;(function () {
  var methods = {
      'readDoubleBE' : 8
    , 'readDoubleLE' : 8
    , 'readFloatBE'  : 4
    , 'readFloatLE'  : 4
    , 'readInt32BE'  : 4
    , 'readInt32LE'  : 4
    , 'readUInt32BE' : 4
    , 'readUInt32LE' : 4
    , 'readInt16BE'  : 2
    , 'readInt16LE'  : 2
    , 'readUInt16BE' : 2
    , 'readUInt16LE' : 2
    , 'readInt8'     : 1
    , 'readUInt8'    : 1
  }

  for (var m in methods) {
    (function (m) {
      BufferList.prototype[m] = function (offset) {
        return this.slice(offset, offset + methods[m])[m](0)
      }
    }(m))
  }
}())


module.exports = BufferList


/***/ }),
/* 324 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(28);


/***/ }),
/* 325 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||
  function getOwnPropertyDescriptors(obj) {
    var keys = Object.keys(obj);
    var descriptors = {};
    for (var i = 0; i < keys.length; i++) {
      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
    }
    return descriptors;
  };

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  if (typeof process !== 'undefined' && process.noDeprecation === true) {
    return fn;
  }

  // Allow for deprecating things in the process of starting up.
  if (typeof process === 'undefined') {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = __webpack_require__(326);

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = __webpack_require__(327);

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;

exports.promisify = function promisify(original) {
  if (typeof original !== 'function')
    throw new TypeError('The "original" argument must be of type Function');

  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
    var fn = original[kCustomPromisifiedSymbol];
    if (typeof fn !== 'function') {
      throw new TypeError('The "util.promisify.custom" argument must be of type Function');
    }
    Object.defineProperty(fn, kCustomPromisifiedSymbol, {
      value: fn, enumerable: false, writable: false, configurable: true
    });
    return fn;
  }

  function fn() {
    var promiseResolve, promiseReject;
    var promise = new Promise(function (resolve, reject) {
      promiseResolve = resolve;
      promiseReject = reject;
    });

    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }
    args.push(function (err, value) {
      if (err) {
        promiseReject(err);
      } else {
        promiseResolve(value);
      }
    });

    try {
      original.apply(this, args);
    } catch (err) {
      promiseReject(err);
    }

    return promise;
  }

  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));

  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
    value: fn, enumerable: false, writable: false, configurable: true
  });
  return Object.defineProperties(
    fn,
    getOwnPropertyDescriptors(original)
  );
}

exports.promisify.custom = kCustomPromisifiedSymbol

function callbackifyOnRejected(reason, cb) {
  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
  // Because `null` is a special error value in callbacks which means "no error
  // occurred", we error-wrap so the callback consumer can distinguish between
  // "the promise rejected with null" or "the promise fulfilled with undefined".
  if (!reason) {
    var newReason = new Error('Promise was rejected with a falsy value');
    newReason.reason = reason;
    reason = newReason;
  }
  return cb(reason);
}

function callbackify(original) {
  if (typeof original !== 'function') {
    throw new TypeError('The "original" argument must be of type Function');
  }

  // We DO NOT return the promise as it gives the user a false sense that
  // the promise is actually somehow related to the callback's execution
  // and that the callback throwing will reject the promise.
  function callbackified() {
    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }

    var maybeCb = args.pop();
    if (typeof maybeCb !== 'function') {
      throw new TypeError('The last argument must be of type Function');
    }
    var self = this;
    var cb = function() {
      return maybeCb.apply(self, arguments);
    };
    // In true node style we process the callback on `nextTick` with all the
    // implications (stack, `uncaughtException`, `async_hooks`)
    original.apply(this, args)
      .then(function(ret) { process.nextTick(cb, null, ret) },
            function(rej) { process.nextTick(callbackifyOnRejected, rej, cb) });
  }

  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
  Object.defineProperties(callbackified,
                          getOwnPropertyDescriptors(original));
  return callbackified;
}
exports.callbackify = callbackify;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3)))

/***/ }),
/* 326 */
/***/ (function(module, exports) {

module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}

/***/ }),
/* 327 */
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}


/***/ }),
/* 328 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function Packet() {
  this.cmd = null;
  this.retain = false;
  this.qos = 0;
  this.dup = false;
  this.length = -1;
  this.topic = null;
  this.payload = null;
}

module.exports = Packet;

/***/ }),
/* 329 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Buffer = __webpack_require__(15).Buffer;
var writeToStream = __webpack_require__(153);
var EE = __webpack_require__(49).EventEmitter;
var inherits = __webpack_require__(19);

function generate(packet, opts) {
  var stream = new Accumulator();
  writeToStream(packet, stream, opts);
  return stream.concat();
}

function Accumulator() {
  this._array = new Array(20);
  this._i = 0;
}

inherits(Accumulator, EE);

Accumulator.prototype.write = function (chunk) {
  this._array[this._i++] = chunk;
  return true;
};

Accumulator.prototype.concat = function () {
  var length = 0;
  var lengths = new Array(this._array.length);
  var list = this._array;
  var pos = 0;
  var i;
  var result;

  for (i = 0; i < list.length && list[i] !== undefined; i++) {
    if (typeof list[i] !== 'string') lengths[i] = list[i].length;else lengths[i] = Buffer.byteLength(list[i]);

    length += lengths[i];
  }

  result = Buffer.allocUnsafe(length);

  for (i = 0; i < list.length && list[i] !== undefined; i++) {
    if (typeof list[i] !== 'string') {
      list[i].copy(result, pos);
      pos += lengths[i];
    } else {
      result.write(list[i], pos);
      pos += lengths[i];
    }
  }

  return result;
};

module.exports = generate;

/***/ }),
/* 330 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Buffer = __webpack_require__(15).Buffer;
var max = 65536;
var cache = {};

function generateBuffer(i) {
  var buffer = Buffer.allocUnsafe(2);
  buffer.writeUInt8(i >> 8, 0);
  buffer.writeUInt8(i & 0x00FF, 0 + 1);

  return buffer;
}

function generateCache() {
  for (var i = 0; i < max; i++) {
    cache[i] = generateBuffer(i);
  }
}

/**
 * calcVariableByteIntLength - calculate the variable byte integer
 * length field
 *
 * @api private
 */
function calcVariableByteIntLength(length) {
  if (length >= 0 && length < 128) return 1;else if (length >= 128 && length < 16384) return 2;else if (length >= 16384 && length < 2097152) return 3;else if (length >= 2097152 && length < 268435456) return 4;else return 0;
}

function genBufVariableByteInt(num) {
  var digit = 0;
  var pos = 0;
  var length = calcVariableByteIntLength(num);
  var buffer = Buffer.allocUnsafe(length);

  do {
    digit = num % 128 | 0;
    num = num / 128 | 0;
    if (num > 0) digit = digit | 0x80;

    buffer.writeUInt8(digit, pos++);
  } while (num > 0);

  return {
    data: buffer,
    length: length
  };
}

function generate4ByteBuffer(num) {
  var buffer = Buffer.allocUnsafe(4);
  buffer.writeUInt32BE(num, 0);
  return buffer;
}

module.exports = {
  cache: cache,
  generateCache: generateCache,
  generateNumber: generateBuffer,
  genBufVariableByteInt: genBufVariableByteInt,
  generate4ByteBuffer: generate4ByteBuffer
};

/***/ }),
/* 331 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function ReInterval (callback, interval, args) {
  var self = this;

  this._callback = callback;
  this._args = args;

  this._interval = setInterval(callback, interval, this._args);

  this.reschedule = function (interval) {
    // if no interval entered, use the interval passed in on creation
    if (!interval)
      interval = self._interval;

    if (self._interval)
      clearInterval(self._interval);
    self._interval = setInterval(self._callback, interval, self._args);
  };

  this.clear = function () {
    if (self._interval) {
      clearInterval(self._interval);
      self._interval = undefined;
    }
  };
  
  this.destroy = function () {
    if (self._interval) {
      clearInterval(self._interval);
    }
    self._callback = undefined;
    self._interval = undefined;
    self._args = undefined;
  };
}

function reInterval () {
  if (typeof arguments[0] !== 'function')
    throw new Error('callback needed');
  if (typeof arguments[1] !== 'number')
    throw new Error('interval needed');

  var args;

  if (arguments.length > 0) {
    args = new Array(arguments.length - 2);

    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i + 2];
    }
  }

  return new ReInterval(arguments[0], arguments[1], args);
}

module.exports = reInterval;


/***/ }),
/* 332 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Validate a topic to see if it's valid or not.
 * A topic is valid if it follow below rules:
 * - Rule #1: If any part of the topic is not `+` or `#`, then it must not contain `+` and '#'
 * - Rule #2: Part `#` must be located at the end of the mailbox
 *
 * @param {String} topic - A topic
 * @returns {Boolean} If the topic is valid, returns true. Otherwise, returns false.
 */

function validateTopic(topic) {
  var parts = topic.split('/');

  for (var i = 0; i < parts.length; i++) {
    if (parts[i] === '+') {
      continue;
    }

    if (parts[i] === '#') {
      // for Rule #2
      return i === parts.length - 1;
    }

    if (parts[i].indexOf('+') !== -1 || parts[i].indexOf('#') !== -1) {
      return false;
    }
  }

  return true;
}

/**
 * Validate an array of topics to see if any of them is valid or not
  * @param {Array} topics - Array of topics
 * @returns {String} If the topics is valid, returns null. Otherwise, returns the invalid one
 */
function validateTopics(topics) {
  if (topics.length === 0) {
    return 'empty_topic_list';
  }
  for (var i = 0; i < topics.length; i++) {
    if (!validateTopic(topics[i])) {
      return topics[i];
    }
  }
  return null;
}

module.exports = {
  validateTopics: validateTopics
};

/***/ }),
/* 333 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/punycode v1.4.1 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports =  true && exports &&
		!exports.nodeType && exports;
	var freeModule =  true && module &&
		!module.nodeType && module;
	var freeGlobal = typeof global == 'object' && global;
	if (
		freeGlobal.global === freeGlobal ||
		freeGlobal.window === freeGlobal ||
		freeGlobal.self === freeGlobal
	) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw new RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(input) {
		return mapDomain(input, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
		return mapDomain(input, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.4.1',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		true
	) {
		!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
			return punycode;
		}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {}

}(this));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(334)(module), __webpack_require__(17)))

/***/ }),
/* 334 */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 335 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  isString: function(arg) {
    return typeof(arg) === 'string';
  },
  isObject: function(arg) {
    return typeof(arg) === 'object' && arg !== null;
  },
  isNull: function(arg) {
    return arg === null;
  },
  isNullOrUndefined: function(arg) {
    return arg == null;
  }
};


/***/ }),
/* 336 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.decode = exports.parse = __webpack_require__(337);
exports.encode = exports.stringify = __webpack_require__(338);


/***/ }),
/* 337 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};


/***/ }),
/* 338 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map (xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};


/***/ }),
/* 339 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 340 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 341 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {var once = __webpack_require__(342);

var noop = function() {};

var isRequest = function(stream) {
	return stream.setHeader && typeof stream.abort === 'function';
};

var isChildProcess = function(stream) {
	return stream.stdio && Array.isArray(stream.stdio) && stream.stdio.length === 3
};

var eos = function(stream, opts, callback) {
	if (typeof opts === 'function') return eos(stream, null, opts);
	if (!opts) opts = {};

	callback = once(callback || noop);

	var ws = stream._writableState;
	var rs = stream._readableState;
	var readable = opts.readable || (opts.readable !== false && stream.readable);
	var writable = opts.writable || (opts.writable !== false && stream.writable);
	var cancelled = false;

	var onlegacyfinish = function() {
		if (!stream.writable) onfinish();
	};

	var onfinish = function() {
		writable = false;
		if (!readable) callback.call(stream);
	};

	var onend = function() {
		readable = false;
		if (!writable) callback.call(stream);
	};

	var onexit = function(exitCode) {
		callback.call(stream, exitCode ? new Error('exited with error code: ' + exitCode) : null);
	};

	var onerror = function(err) {
		callback.call(stream, err);
	};

	var onclose = function() {
		process.nextTick(onclosenexttick);
	};

	var onclosenexttick = function() {
		if (cancelled) return;
		if (readable && !(rs && (rs.ended && !rs.destroyed))) return callback.call(stream, new Error('premature close'));
		if (writable && !(ws && (ws.ended && !ws.destroyed))) return callback.call(stream, new Error('premature close'));
	};

	var onrequest = function() {
		stream.req.on('finish', onfinish);
	};

	if (isRequest(stream)) {
		stream.on('complete', onfinish);
		stream.on('abort', onclose);
		if (stream.req) onrequest();
		else stream.on('request', onrequest);
	} else if (writable && !ws) { // legacy streams
		stream.on('end', onlegacyfinish);
		stream.on('close', onlegacyfinish);
	}

	if (isChildProcess(stream)) stream.on('exit', onexit);

	stream.on('end', onend);
	stream.on('finish', onfinish);
	if (opts.error !== false) stream.on('error', onerror);
	stream.on('close', onclose);

	return function() {
		cancelled = true;
		stream.removeListener('complete', onfinish);
		stream.removeListener('abort', onclose);
		stream.removeListener('request', onrequest);
		if (stream.req) stream.req.removeListener('finish', onfinish);
		stream.removeListener('end', onlegacyfinish);
		stream.removeListener('close', onlegacyfinish);
		stream.removeListener('finish', onfinish);
		stream.removeListener('exit', onexit);
		stream.removeListener('end', onend);
		stream.removeListener('error', onerror);
		stream.removeListener('close', onclose);
	};
};

module.exports = eos;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3)))

/***/ }),
/* 342 */
/***/ (function(module, exports, __webpack_require__) {

var wrappy = __webpack_require__(343)
module.exports = wrappy(once)
module.exports.strict = wrappy(onceStrict)

once.proto = once(function () {
  Object.defineProperty(Function.prototype, 'once', {
    value: function () {
      return once(this)
    },
    configurable: true
  })

  Object.defineProperty(Function.prototype, 'onceStrict', {
    value: function () {
      return onceStrict(this)
    },
    configurable: true
  })
})

function once (fn) {
  var f = function () {
    if (f.called) return f.value
    f.called = true
    return f.value = fn.apply(this, arguments)
  }
  f.called = false
  return f
}

function onceStrict (fn) {
  var f = function () {
    if (f.called)
      throw new Error(f.onceError)
    f.called = true
    return f.value = fn.apply(this, arguments)
  }
  var name = fn.name || 'Function wrapped with `once`'
  f.onceError = name + " shouldn't be called more than once"
  f.called = false
  return f
}


/***/ }),
/* 343 */
/***/ (function(module, exports) {

// Returns a wrapper function that returns a wrapped callback
// The wrapper function should do some stuff, and return a
// presumably different callback function.
// This makes sure that own properties are retained, so that
// decorations and such are not lost along the way.
module.exports = wrappy
function wrappy (fn, cb) {
  if (fn && cb) return wrappy(fn)(cb)

  if (typeof fn !== 'function')
    throw new TypeError('need wrapper function')

  Object.keys(fn).forEach(function (k) {
    wrapper[k] = fn[k]
  })

  return wrapper

  function wrapper() {
    var args = new Array(arguments.length)
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i]
    }
    var ret = fn.apply(this, args)
    var cb = args[args.length-1]
    if (typeof ret === 'function' && ret !== cb) {
      Object.keys(cb).forEach(function (k) {
        ret[k] = cb[k]
      })
    }
    return ret
  }
}


/***/ }),
/* 344 */
/***/ (function(module, exports) {

module.exports = shift

function shift (stream) {
  var rs = stream._readableState
  if (!rs) return null
  return rs.objectMode ? stream.read() : stream.read(getStateLength(rs))
}

function getStateLength (state) {
  if (state.buffer.length) {
    // Since node 6.3.0 state.buffer is a BufferList not an array
    if (state.buffer.head) {
      return state.buffer.head.data.length
    }

    return state.buffer[0].length
  }

  return state.length
}


/***/ }),
/* 345 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, global) {

var Transform = __webpack_require__(14).Transform
var duplexify = __webpack_require__(30)
var WS = __webpack_require__(346)
var Buffer = __webpack_require__(15).Buffer

module.exports = WebSocketStream

function buildProxy (options, socketWrite, socketEnd) {
  var proxy = new Transform({
    objectMode: options.objectMode
  })

  proxy._write = socketWrite
  proxy._flush = socketEnd

  return proxy
}

function WebSocketStream(target, protocols, options) {
  var stream, socket

  var isBrowser = process.title === 'browser'
  var isNative = !!global.WebSocket
  var socketWrite = isBrowser ? socketWriteBrowser : socketWriteNode

  if (protocols && !Array.isArray(protocols) && 'object' === typeof protocols) {
    // accept the "options" Object as the 2nd argument
    options = protocols
    protocols = null

    if (typeof options.protocol === 'string' || Array.isArray(options.protocol)) {
      protocols = options.protocol;
    }
  }

  if (!options) options = {}

  if (options.objectMode === undefined) {
    options.objectMode = !(options.binary === true || options.binary === undefined)
  }

  var proxy = buildProxy(options, socketWrite, socketEnd)

  if (!options.objectMode) {
    proxy._writev = writev
  }

  // browser only: sets the maximum socket buffer size before throttling
  var bufferSize = options.browserBufferSize || 1024 * 512

  // browser only: how long to wait when throttling
  var bufferTimeout = options.browserBufferTimeout || 1000

  // use existing WebSocket object that was passed in
  if (typeof target === 'object') {
    socket = target
  // otherwise make a new one
  } else {
    // special constructor treatment for native websockets in browsers, see
    // https://github.com/maxogden/websocket-stream/issues/82
    if (isNative && isBrowser) {
      socket = new WS(target, protocols)
    } else {
      socket = new WS(target, protocols, options)
    }

    socket.binaryType = 'arraybuffer'
  }

  // was already open when passed in
  if (socket.readyState === socket.OPEN) {
    stream = proxy
  } else {
    stream = stream = duplexify(undefined, undefined, options)
    if (!options.objectMode) {
      stream._writev = writev
    }
    socket.onopen = onopen
  }

  stream.socket = socket

  socket.onclose = onclose
  socket.onerror = onerror
  socket.onmessage = onmessage

  proxy.on('close', destroy)

  var coerceToBuffer = !options.objectMode

  function socketWriteNode(chunk, enc, next) {
    // avoid errors, this never happens unless
    // destroy() is called
    if (socket.readyState !== socket.OPEN) {
      next()
      return
    }

    if (coerceToBuffer && typeof chunk === 'string') {
      chunk = Buffer.from(chunk, 'utf8')
    }
    socket.send(chunk, next)
  }

  function socketWriteBrowser(chunk, enc, next) {
    if (socket.bufferedAmount > bufferSize) {
      setTimeout(socketWriteBrowser, bufferTimeout, chunk, enc, next)
      return
    }

    if (coerceToBuffer && typeof chunk === 'string') {
      chunk = Buffer.from(chunk, 'utf8')
    }

    try {
      socket.send(chunk)
    } catch(err) {
      return next(err)
    }

    next()
  }

  function socketEnd(done) {
    socket.close()
    done()
  }

  function onopen() {
    stream.setReadable(proxy)
    stream.setWritable(proxy)
    stream.emit('connect')
  }

  function onclose() {
    stream.end()
    stream.destroy()
  }

  function onerror(err) {
    stream.destroy(err)
  }

  function onmessage(event) {
    var data = event.data
    if (data instanceof ArrayBuffer) data = Buffer.from(data)
    else data = Buffer.from(data, 'utf8')
    proxy.push(data)
  }

  function destroy() {
    socket.close()
  }

  // this is to be enabled only if objectMode is false
  function writev (chunks, cb) {
    var buffers = new Array(chunks.length)
    for (var i = 0; i < chunks.length; i++) {
      if (typeof chunks[i].chunk === 'string') {
        buffers[i] = Buffer.from(chunks[i], 'utf8')
      } else {
        buffers[i] = chunks[i].chunk
      }
    }

    this._write(Buffer.concat(buffers), 'binary', cb)
  }

  return stream
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3), __webpack_require__(17)))

/***/ }),
/* 346 */
/***/ (function(module, exports) {


var ws = null

if (typeof WebSocket !== 'undefined') {
  ws = WebSocket
} else if (typeof MozWebSocket !== 'undefined') {
  ws = MozWebSocket
} else if (typeof window !== 'undefined') {
  ws = window.WebSocket || window.MozWebSocket
}

module.exports = ws


/***/ }),
/* 347 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(348), __esModule: true };

/***/ }),
/* 348 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(349);
module.exports = __webpack_require__(0).Number.isInteger;


/***/ }),
/* 349 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.3 Number.isInteger(number)
var $export = __webpack_require__(2);

$export($export.S, 'Number', { isInteger: __webpack_require__(350) });


/***/ }),
/* 350 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.3 Number.isInteger(number)
var isObject = __webpack_require__(8);
var floor = Math.floor;
module.exports = function isInteger(it) {
  return !isObject(it) && isFinite(it) && floor(it) === it;
};


/***/ }),
/* 351 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(352);
module.exports = __webpack_require__(0).Object.freeze;


/***/ }),
/* 352 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.5 Object.freeze(O)
var isObject = __webpack_require__(8);
var meta = __webpack_require__(59).onFreeze;

__webpack_require__(90)('freeze', function ($freeze) {
  return function freeze(it) {
    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
  };
});


/***/ }),
/* 353 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = Long;

/**
 * wasm optimizations, to do native i64 multiplication and divide
 */
var wasm = null;

try {
    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;
} catch (e) {}
// no wasm support :(


/**
 * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.
 *  See the from* functions below for more convenient ways of constructing Longs.
 * @exports Long
 * @class A Long class for representing a 64 bit two's-complement integer value.
 * @param {number} low The low (signed) 32 bits of the long
 * @param {number} high The high (signed) 32 bits of the long
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @constructor
 */
function Long(low, high, unsigned) {

    /**
     * The low 32 bits as a signed value.
     * @type {number}
     */
    this.low = low | 0;

    /**
     * The high 32 bits as a signed value.
     * @type {number}
     */
    this.high = high | 0;

    /**
     * Whether unsigned or not.
     * @type {boolean}
     */
    this.unsigned = !!unsigned;
}

// The internal representation of a long is the two given signed, 32-bit values.
// We use 32-bit pieces because these are the size of integers on which
// Javascript performs bit-operations.  For operations like addition and
// multiplication, we split each number into 16 bit pieces, which can easily be
// multiplied within Javascript's floating-point representation without overflow
// or change in sign.
//
// In the algorithms below, we frequently reduce the negative case to the
// positive case by negating the input(s) and then post-processing the result.
// Note that we must ALWAYS check specially whether those values are MIN_VALUE
// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
// a positive number, it overflows back into a negative).  Not handling this
// case would often result in infinite recursion.
//
// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*
// methods on which they depend.

/**
 * An indicator used to reliably determine if an object is a Long or not.
 * @type {boolean}
 * @const
 * @private
 */
Long.prototype.__isLong__;

Object.defineProperty(Long.prototype, "__isLong__", { value: true });

/**
 * @function
 * @param {*} obj Object
 * @returns {boolean}
 * @inner
 */
function isLong(obj) {
    return (obj && obj["__isLong__"]) === true;
}

/**
 * Tests if the specified object is a Long.
 * @function
 * @param {*} obj Object
 * @returns {boolean}
 */
Long.isLong = isLong;

/**
 * A cache of the Long representations of small integer values.
 * @type {!Object}
 * @inner
 */
var INT_CACHE = {};

/**
 * A cache of the Long representations of small unsigned integer values.
 * @type {!Object}
 * @inner
 */
var UINT_CACHE = {};

/**
 * @param {number} value
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromInt(value, unsigned) {
    var obj, cachedObj, cache;
    if (unsigned) {
        value >>>= 0;
        if (cache = 0 <= value && value < 256) {
            cachedObj = UINT_CACHE[value];
            if (cachedObj) return cachedObj;
        }
        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);
        if (cache) UINT_CACHE[value] = obj;
        return obj;
    } else {
        value |= 0;
        if (cache = -128 <= value && value < 128) {
            cachedObj = INT_CACHE[value];
            if (cachedObj) return cachedObj;
        }
        obj = fromBits(value, value < 0 ? -1 : 0, false);
        if (cache) INT_CACHE[value] = obj;
        return obj;
    }
}

/**
 * Returns a Long representing the given 32 bit integer value.
 * @function
 * @param {number} value The 32 bit integer in question
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */
Long.fromInt = fromInt;

/**
 * @param {number} value
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromNumber(value, unsigned) {
    if (isNaN(value)) return unsigned ? UZERO : ZERO;
    if (unsigned) {
        if (value < 0) return UZERO;
        if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;
    } else {
        if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;
        if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;
    }
    if (value < 0) return fromNumber(-value, unsigned).neg();
    return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);
}

/**
 * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.
 * @function
 * @param {number} value The number in question
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */
Long.fromNumber = fromNumber;

/**
 * @param {number} lowBits
 * @param {number} highBits
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromBits(lowBits, highBits, unsigned) {
    return new Long(lowBits, highBits, unsigned);
}

/**
 * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is
 *  assumed to use 32 bits.
 * @function
 * @param {number} lowBits The low 32 bits
 * @param {number} highBits The high 32 bits
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */
Long.fromBits = fromBits;

/**
 * @function
 * @param {number} base
 * @param {number} exponent
 * @returns {number}
 * @inner
 */
var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)

/**
 * @param {string} str
 * @param {(boolean|number)=} unsigned
 * @param {number=} radix
 * @returns {!Long}
 * @inner
 */
function fromString(str, unsigned, radix) {
    if (str.length === 0) throw Error('empty string');
    if (str === "NaN" || str === "Infinity" || str === "+Infinity" || str === "-Infinity") return ZERO;
    if (typeof unsigned === 'number') {
        // For goog.math.long compatibility
        radix = unsigned, unsigned = false;
    } else {
        unsigned = !!unsigned;
    }
    radix = radix || 10;
    if (radix < 2 || 36 < radix) throw RangeError('radix');

    var p;
    if ((p = str.indexOf('-')) > 0) throw Error('interior hyphen');else if (p === 0) {
        return fromString(str.substring(1), unsigned, radix).neg();
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = fromNumber(pow_dbl(radix, 8));

    var result = ZERO;
    for (var i = 0; i < str.length; i += 8) {
        var size = Math.min(8, str.length - i),
            value = parseInt(str.substring(i, i + size), radix);
        if (size < 8) {
            var power = fromNumber(pow_dbl(radix, size));
            result = result.mul(power).add(fromNumber(value));
        } else {
            result = result.mul(radixToPower);
            result = result.add(fromNumber(value));
        }
    }
    result.unsigned = unsigned;
    return result;
}

/**
 * Returns a Long representation of the given string, written using the specified radix.
 * @function
 * @param {string} str The textual representation of the Long
 * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed
 * @param {number=} radix The radix in which the text is written (2-36), defaults to 10
 * @returns {!Long} The corresponding Long value
 */
Long.fromString = fromString;

/**
 * @function
 * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromValue(val, unsigned) {
    if (typeof val === 'number') return fromNumber(val, unsigned);
    if (typeof val === 'string') return fromString(val, unsigned);
    // Throws for non-objects, converts non-instanceof Long:
    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);
}

/**
 * Converts the specified value to a Long using the appropriate from* function for its type.
 * @function
 * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long}
 */
Long.fromValue = fromValue;

// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be
// no runtime penalty for these.

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_16_DBL = 1 << 16;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_24_DBL = 1 << 24;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;

/**
 * @type {!Long}
 * @const
 * @inner
 */
var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);

/**
 * @type {!Long}
 * @inner
 */
var ZERO = fromInt(0);

/**
 * Signed zero.
 * @type {!Long}
 */
Long.ZERO = ZERO;

/**
 * @type {!Long}
 * @inner
 */
var UZERO = fromInt(0, true);

/**
 * Unsigned zero.
 * @type {!Long}
 */
Long.UZERO = UZERO;

/**
 * @type {!Long}
 * @inner
 */
var ONE = fromInt(1);

/**
 * Signed one.
 * @type {!Long}
 */
Long.ONE = ONE;

/**
 * @type {!Long}
 * @inner
 */
var UONE = fromInt(1, true);

/**
 * Unsigned one.
 * @type {!Long}
 */
Long.UONE = UONE;

/**
 * @type {!Long}
 * @inner
 */
var NEG_ONE = fromInt(-1);

/**
 * Signed negative one.
 * @type {!Long}
 */
Long.NEG_ONE = NEG_ONE;

/**
 * @type {!Long}
 * @inner
 */
var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);

/**
 * Maximum signed value.
 * @type {!Long}
 */
Long.MAX_VALUE = MAX_VALUE;

/**
 * @type {!Long}
 * @inner
 */
var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);

/**
 * Maximum unsigned value.
 * @type {!Long}
 */
Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;

/**
 * @type {!Long}
 * @inner
 */
var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);

/**
 * Minimum signed value.
 * @type {!Long}
 */
Long.MIN_VALUE = MIN_VALUE;

/**
 * @alias Long.prototype
 * @inner
 */
var LongPrototype = Long.prototype;

/**
 * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.
 * @returns {number}
 */
LongPrototype.toInt = function toInt() {
    return this.unsigned ? this.low >>> 0 : this.low;
};

/**
 * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).
 * @returns {number}
 */
LongPrototype.toNumber = function toNumber() {
    if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);
    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
};

/**
 * Converts the Long to a string written in the specified radix.
 * @param {number=} radix Radix (2-36), defaults to 10
 * @returns {string}
 * @override
 * @throws {RangeError} If `radix` is out of range
 */
LongPrototype.toString = function toString(radix) {
    radix = radix || 10;
    if (radix < 2 || 36 < radix) throw RangeError('radix');
    if (this.isZero()) return '0';
    if (this.isNegative()) {
        // Unsigned Longs are never negative
        if (this.eq(MIN_VALUE)) {
            // We need to change the Long value before it can be negated, so we remove
            // the bottom-most digit in this base and then recurse to do the rest.
            var radixLong = fromNumber(radix),
                div = this.div(radixLong),
                rem1 = div.mul(radixLong).sub(this);
            return div.toString(radix) + rem1.toInt().toString(radix);
        } else return '-' + this.neg().toString(radix);
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),
        rem = this;
    var result = '';
    while (true) {
        var remDiv = rem.div(radixToPower),
            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,
            digits = intval.toString(radix);
        rem = remDiv;
        if (rem.isZero()) return digits + result;else {
            while (digits.length < 6) {
                digits = '0' + digits;
            }result = '' + digits + result;
        }
    }
};

/**
 * Gets the high 32 bits as a signed integer.
 * @returns {number} Signed high bits
 */
LongPrototype.getHighBits = function getHighBits() {
    return this.high;
};

/**
 * Gets the high 32 bits as an unsigned integer.
 * @returns {number} Unsigned high bits
 */
LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {
    return this.high >>> 0;
};

/**
 * Gets the low 32 bits as a signed integer.
 * @returns {number} Signed low bits
 */
LongPrototype.getLowBits = function getLowBits() {
    return this.low;
};

/**
 * Gets the low 32 bits as an unsigned integer.
 * @returns {number} Unsigned low bits
 */
LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {
    return this.low >>> 0;
};

/**
 * Gets the number of bits needed to represent the absolute value of this Long.
 * @returns {number}
 */
LongPrototype.getNumBitsAbs = function getNumBitsAbs() {
    if (this.isNegative()) // Unsigned Longs are never negative
        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();
    var val = this.high != 0 ? this.high : this.low;
    for (var bit = 31; bit > 0; bit--) {
        if ((val & 1 << bit) != 0) break;
    }return this.high != 0 ? bit + 33 : bit + 1;
};

/**
 * Tests if this Long's value equals zero.
 * @returns {boolean}
 */
LongPrototype.isZero = function isZero() {
    return this.high === 0 && this.low === 0;
};

/**
 * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.
 * @returns {boolean}
 */
LongPrototype.eqz = LongPrototype.isZero;

/**
 * Tests if this Long's value is negative.
 * @returns {boolean}
 */
LongPrototype.isNegative = function isNegative() {
    return !this.unsigned && this.high < 0;
};

/**
 * Tests if this Long's value is positive.
 * @returns {boolean}
 */
LongPrototype.isPositive = function isPositive() {
    return this.unsigned || this.high >= 0;
};

/**
 * Tests if this Long's value is odd.
 * @returns {boolean}
 */
LongPrototype.isOdd = function isOdd() {
    return (this.low & 1) === 1;
};

/**
 * Tests if this Long's value is even.
 * @returns {boolean}
 */
LongPrototype.isEven = function isEven() {
    return (this.low & 1) === 0;
};

/**
 * Tests if this Long's value equals the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.equals = function equals(other) {
    if (!isLong(other)) other = fromValue(other);
    if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;
    return this.high === other.high && this.low === other.low;
};

/**
 * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.eq = LongPrototype.equals;

/**
 * Tests if this Long's value differs from the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.notEquals = function notEquals(other) {
    return !this.eq( /* validates */other);
};

/**
 * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.neq = LongPrototype.notEquals;

/**
 * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.ne = LongPrototype.notEquals;

/**
 * Tests if this Long's value is less than the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lessThan = function lessThan(other) {
    return this.comp( /* validates */other) < 0;
};

/**
 * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lt = LongPrototype.lessThan;

/**
 * Tests if this Long's value is less than or equal the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {
    return this.comp( /* validates */other) <= 0;
};

/**
 * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lte = LongPrototype.lessThanOrEqual;

/**
 * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.le = LongPrototype.lessThanOrEqual;

/**
 * Tests if this Long's value is greater than the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.greaterThan = function greaterThan(other) {
    return this.comp( /* validates */other) > 0;
};

/**
 * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.gt = LongPrototype.greaterThan;

/**
 * Tests if this Long's value is greater than or equal the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {
    return this.comp( /* validates */other) >= 0;
};

/**
 * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.gte = LongPrototype.greaterThanOrEqual;

/**
 * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.ge = LongPrototype.greaterThanOrEqual;

/**
 * Compares this Long's value with the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {number} 0 if they are the same, 1 if the this is greater and -1
 *  if the given one is greater
 */
LongPrototype.compare = function compare(other) {
    if (!isLong(other)) other = fromValue(other);
    if (this.eq(other)) return 0;
    var thisNeg = this.isNegative(),
        otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) return -1;
    if (!thisNeg && otherNeg) return 1;
    // At this point the sign bits are the same
    if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1;
    // Both are positive if at least one is unsigned
    return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;
};

/**
 * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {number} 0 if they are the same, 1 if the this is greater and -1
 *  if the given one is greater
 */
LongPrototype.comp = LongPrototype.compare;

/**
 * Negates this Long's value.
 * @returns {!Long} Negated Long
 */
LongPrototype.negate = function negate() {
    if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;
    return this.not().add(ONE);
};

/**
 * Negates this Long's value. This is an alias of {@link Long#negate}.
 * @function
 * @returns {!Long} Negated Long
 */
LongPrototype.neg = LongPrototype.negate;

/**
 * Returns the sum of this and the specified Long.
 * @param {!Long|number|string} addend Addend
 * @returns {!Long} Sum
 */
LongPrototype.add = function add(addend) {
    if (!isLong(addend)) addend = fromValue(addend);

    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high >>> 16;
    var a32 = this.high & 0xFFFF;
    var a16 = this.low >>> 16;
    var a00 = this.low & 0xFFFF;

    var b48 = addend.high >>> 16;
    var b32 = addend.high & 0xFFFF;
    var b16 = addend.low >>> 16;
    var b00 = addend.low & 0xFFFF;

    var c48 = 0,
        c32 = 0,
        c16 = 0,
        c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);
};

/**
 * Returns the difference of this and the specified Long.
 * @param {!Long|number|string} subtrahend Subtrahend
 * @returns {!Long} Difference
 */
LongPrototype.subtract = function subtract(subtrahend) {
    if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);
    return this.add(subtrahend.neg());
};

/**
 * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.
 * @function
 * @param {!Long|number|string} subtrahend Subtrahend
 * @returns {!Long} Difference
 */
LongPrototype.sub = LongPrototype.subtract;

/**
 * Returns the product of this and the specified Long.
 * @param {!Long|number|string} multiplier Multiplier
 * @returns {!Long} Product
 */
LongPrototype.multiply = function multiply(multiplier) {
    if (this.isZero()) return ZERO;
    if (!isLong(multiplier)) multiplier = fromValue(multiplier);

    // use wasm support if present
    if (wasm) {
        var low = wasm.mul(this.low, this.high, multiplier.low, multiplier.high);
        return fromBits(low, wasm.get_high(), this.unsigned);
    }

    if (multiplier.isZero()) return ZERO;
    if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;
    if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;

    if (this.isNegative()) {
        if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());else return this.neg().mul(multiplier).neg();
    } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg();

    // If both longs are small, use float multiplication
    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24)) return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high >>> 16;
    var a32 = this.high & 0xFFFF;
    var a16 = this.low >>> 16;
    var a00 = this.low & 0xFFFF;

    var b48 = multiplier.high >>> 16;
    var b32 = multiplier.high & 0xFFFF;
    var b16 = multiplier.low >>> 16;
    var b00 = multiplier.low & 0xFFFF;

    var c48 = 0,
        c32 = 0,
        c16 = 0,
        c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);
};

/**
 * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.
 * @function
 * @param {!Long|number|string} multiplier Multiplier
 * @returns {!Long} Product
 */
LongPrototype.mul = LongPrototype.multiply;

/**
 * Returns this Long divided by the specified. The result is signed if this Long is signed or
 *  unsigned if this Long is unsigned.
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Quotient
 */
LongPrototype.divide = function divide(divisor) {
    if (!isLong(divisor)) divisor = fromValue(divisor);
    if (divisor.isZero()) throw Error('division by zero');

    // use wasm support if present
    if (wasm) {
        // guard against signed division overflow: the largest
        // negative number / -1 would be 1 larger than the largest
        // positive number, due to two's complement.
        if (!this.unsigned && this.high === -0x80000000 && divisor.low === -1 && divisor.high === -1) {
            // be consistent with non-wasm code path
            return this;
        }
        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(this.low, this.high, divisor.low, divisor.high);
        return fromBits(low, wasm.get_high(), this.unsigned);
    }

    if (this.isZero()) return this.unsigned ? UZERO : ZERO;
    var approx, rem, res;
    if (!this.unsigned) {
        // This section is only relevant for signed longs and is derived from the
        // closure library as a whole.
        if (this.eq(MIN_VALUE)) {
            if (divisor.eq(ONE) || divisor.eq(NEG_ONE)) return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE
            else if (divisor.eq(MIN_VALUE)) return ONE;else {
                    // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
                    var halfThis = this.shr(1);
                    approx = halfThis.div(divisor).shl(1);
                    if (approx.eq(ZERO)) {
                        return divisor.isNegative() ? ONE : NEG_ONE;
                    } else {
                        rem = this.sub(divisor.mul(approx));
                        res = approx.add(rem.div(divisor));
                        return res;
                    }
                }
        } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;
        if (this.isNegative()) {
            if (divisor.isNegative()) return this.neg().div(divisor.neg());
            return this.neg().div(divisor).neg();
        } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();
        res = ZERO;
    } else {
        // The algorithm below has not been made for unsigned longs. It's therefore
        // required to take special care of the MSB prior to running it.
        if (!divisor.unsigned) divisor = divisor.toUnsigned();
        if (divisor.gt(this)) return UZERO;
        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true
            return UONE;
        res = UZERO;
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    rem = this;
    while (rem.gte(divisor)) {
        // Approximate the result of division. This may be a little greater or
        // smaller than the actual value.
        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));

        // We will tweak the approximate result by changing it in the 48-th digit or
        // the smallest non-fractional digit, whichever is larger.
        var log2 = Math.ceil(Math.log(approx) / Math.LN2),
            delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48),


        // Decrease the approximation until it is smaller than the remainder.  Note
        // that if it is too large, the product overflows and is negative.
        approxRes = fromNumber(approx),
            approxRem = approxRes.mul(divisor);
        while (approxRem.isNegative() || approxRem.gt(rem)) {
            approx -= delta;
            approxRes = fromNumber(approx, this.unsigned);
            approxRem = approxRes.mul(divisor);
        }

        // We know the answer can't be zero... and actually, zero would cause
        // infinite recursion since we would make no progress.
        if (approxRes.isZero()) approxRes = ONE;

        res = res.add(approxRes);
        rem = rem.sub(approxRem);
    }
    return res;
};

/**
 * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Quotient
 */
LongPrototype.div = LongPrototype.divide;

/**
 * Returns this Long modulo the specified.
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */
LongPrototype.modulo = function modulo(divisor) {
    if (!isLong(divisor)) divisor = fromValue(divisor);

    // use wasm support if present
    if (wasm) {
        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(this.low, this.high, divisor.low, divisor.high);
        return fromBits(low, wasm.get_high(), this.unsigned);
    }

    return this.sub(this.div(divisor).mul(divisor));
};

/**
 * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */
LongPrototype.mod = LongPrototype.modulo;

/**
 * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */
LongPrototype.rem = LongPrototype.modulo;

/**
 * Returns the bitwise NOT of this Long.
 * @returns {!Long}
 */
LongPrototype.not = function not() {
    return fromBits(~this.low, ~this.high, this.unsigned);
};

/**
 * Returns the bitwise AND of this Long and the specified.
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */
LongPrototype.and = function and(other) {
    if (!isLong(other)) other = fromValue(other);
    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);
};

/**
 * Returns the bitwise OR of this Long and the specified.
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */
LongPrototype.or = function or(other) {
    if (!isLong(other)) other = fromValue(other);
    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);
};

/**
 * Returns the bitwise XOR of this Long and the given one.
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */
LongPrototype.xor = function xor(other) {
    if (!isLong(other)) other = fromValue(other);
    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
};

/**
 * Returns this Long with bits shifted to the left by the given amount.
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shiftLeft = function shiftLeft(numBits) {
    if (isLong(numBits)) numBits = numBits.toInt();
    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);else return fromBits(0, this.low << numBits - 32, this.unsigned);
};

/**
 * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shl = LongPrototype.shiftLeft;

/**
 * Returns this Long with bits arithmetically shifted to the right by the given amount.
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shiftRight = function shiftRight(numBits) {
    if (isLong(numBits)) numBits = numBits.toInt();
    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);else return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);
};

/**
 * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shr = LongPrototype.shiftRight;

/**
 * Returns this Long with bits logically shifted to the right by the given amount.
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {
    if (isLong(numBits)) numBits = numBits.toInt();
    numBits &= 63;
    if (numBits === 0) return this;else {
        var high = this.high;
        if (numBits < 32) {
            var low = this.low;
            return fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits, this.unsigned);
        } else if (numBits === 32) return fromBits(high, 0, this.unsigned);else return fromBits(high >>> numBits - 32, 0, this.unsigned);
    }
};

/**
 * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shru = LongPrototype.shiftRightUnsigned;

/**
 * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;

/**
 * Converts this Long to signed.
 * @returns {!Long} Signed long
 */
LongPrototype.toSigned = function toSigned() {
    if (!this.unsigned) return this;
    return fromBits(this.low, this.high, false);
};

/**
 * Converts this Long to unsigned.
 * @returns {!Long} Unsigned long
 */
LongPrototype.toUnsigned = function toUnsigned() {
    if (this.unsigned) return this;
    return fromBits(this.low, this.high, true);
};

/**
 * Converts this Long to its byte representation.
 * @param {boolean=} le Whether little or big endian, defaults to big endian
 * @returns {!Array.<number>} Byte representation
 */
LongPrototype.toBytes = function toBytes(le) {
    return le ? this.toBytesLE() : this.toBytesBE();
};

/**
 * Converts this Long to its little endian byte representation.
 * @returns {!Array.<number>} Little endian byte representation
 */
LongPrototype.toBytesLE = function toBytesLE() {
    var hi = this.high,
        lo = this.low;
    return [lo & 0xff, lo >>> 8 & 0xff, lo >>> 16 & 0xff, lo >>> 24, hi & 0xff, hi >>> 8 & 0xff, hi >>> 16 & 0xff, hi >>> 24];
};

/**
 * Converts this Long to its big endian byte representation.
 * @returns {!Array.<number>} Big endian byte representation
 */
LongPrototype.toBytesBE = function toBytesBE() {
    var hi = this.high,
        lo = this.low;
    return [hi >>> 24, hi >>> 16 & 0xff, hi >>> 8 & 0xff, hi & 0xff, lo >>> 24, lo >>> 16 & 0xff, lo >>> 8 & 0xff, lo & 0xff];
};

/**
 * Creates a Long from its byte representation.
 * @param {!Array.<number>} bytes Byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @param {boolean=} le Whether little or big endian, defaults to big endian
 * @returns {Long} The corresponding Long value
 */
Long.fromBytes = function fromBytes(bytes, unsigned, le) {
    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);
};

/**
 * Creates a Long from its little endian byte representation.
 * @param {!Array.<number>} bytes Little endian byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {Long} The corresponding Long value
 */
Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {
    return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);
};

/**
 * Creates a Long from its big endian byte representation.
 * @param {!Array.<number>} bytes Big endian byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {Long} The corresponding Long value
 */
Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {
    return new Long(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);
};

/***/ }),
/* 354 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = pool;

/**
 * An allocator as used by {@link util.pool}.
 * @typedef PoolAllocator
 * @type {function}
 * @param {number} size Buffer size
 * @returns {Uint8Array} Buffer
 */

/**
 * A slicer as used by {@link util.pool}.
 * @typedef PoolSlicer
 * @type {function}
 * @param {number} start Start offset
 * @param {number} end End offset
 * @returns {Uint8Array} Buffer slice
 * @this {Uint8Array}
 */

/**
 * A general purpose buffer pool.
 * @memberof util
 * @function
 * @param {PoolAllocator} alloc Allocator
 * @param {PoolSlicer} slice Slicer
 * @param {number} [size=8192] Slab size
 * @returns {PoolAllocator} Pooled allocator
 */
function pool(alloc, slice, size) {
    var SIZE = size || 8192;
    var MAX = SIZE >>> 1;
    var slab = null;
    var offset = SIZE;
    return function pool_alloc(size) {
        if (size < 1 || size > MAX) return alloc(size);
        if (offset + size > SIZE) {
            slab = alloc(SIZE);
            offset = 0;
        }
        var buf = slice.call(slab, offset, offset += size);
        if (offset & 7) // align to 32 bit
            offset = (offset | 7) + 1;
        return buf;
    };
}

/***/ }),
/* 355 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = factory(factory);

/**
 * Reads / writes floats / doubles from / to buffers.
 * @name util.float
 * @namespace
 */

/**
 * Writes a 32 bit float to a buffer using little endian byte order.
 * @name util.float.writeFloatLE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */

/**
 * Writes a 32 bit float to a buffer using big endian byte order.
 * @name util.float.writeFloatBE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */

/**
 * Reads a 32 bit float from a buffer using little endian byte order.
 * @name util.float.readFloatLE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */

/**
 * Reads a 32 bit float from a buffer using big endian byte order.
 * @name util.float.readFloatBE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */

/**
 * Writes a 64 bit double to a buffer using little endian byte order.
 * @name util.float.writeDoubleLE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */

/**
 * Writes a 64 bit double to a buffer using big endian byte order.
 * @name util.float.writeDoubleBE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */

/**
 * Reads a 64 bit double from a buffer using little endian byte order.
 * @name util.float.readDoubleLE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */

/**
 * Reads a 64 bit double from a buffer using big endian byte order.
 * @name util.float.readDoubleBE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */

// Factory function for the purpose of node-based testing in modified global environments
function factory(exports) {

    // float: typed array
    if (typeof Float32Array !== "undefined") (function () {

        var f32 = new Float32Array([-0]),
            f8b = new Uint8Array(f32.buffer),
            le = f8b[3] === 128;

        function writeFloat_f32_cpy(val, buf, pos) {
            f32[0] = val;
            buf[pos] = f8b[0];
            buf[pos + 1] = f8b[1];
            buf[pos + 2] = f8b[2];
            buf[pos + 3] = f8b[3];
        }

        function writeFloat_f32_rev(val, buf, pos) {
            f32[0] = val;
            buf[pos] = f8b[3];
            buf[pos + 1] = f8b[2];
            buf[pos + 2] = f8b[1];
            buf[pos + 3] = f8b[0];
        }

        /* istanbul ignore next */
        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;
        /* istanbul ignore next */
        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;

        function readFloat_f32_cpy(buf, pos) {
            f8b[0] = buf[pos];
            f8b[1] = buf[pos + 1];
            f8b[2] = buf[pos + 2];
            f8b[3] = buf[pos + 3];
            return f32[0];
        }

        function readFloat_f32_rev(buf, pos) {
            f8b[3] = buf[pos];
            f8b[2] = buf[pos + 1];
            f8b[1] = buf[pos + 2];
            f8b[0] = buf[pos + 3];
            return f32[0];
        }

        /* istanbul ignore next */
        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;
        /* istanbul ignore next */
        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;

        // float: ieee754
    })();else (function () {

        function writeFloat_ieee754(writeUint, val, buf, pos) {
            var sign = val < 0 ? 1 : 0;
            if (sign) val = -val;
            if (val === 0) writeUint(1 / val > 0 ? /* positive */0 : /* negative 0 */2147483648, buf, pos);else if (isNaN(val)) writeUint(2143289344, buf, pos);else if (val > 3.4028234663852886e+38) // +-Infinity
                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);else if (val < 1.1754943508222875e-38) // denormal
                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);else {
                var exponent = Math.floor(Math.log(val) / Math.LN2),
                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;
                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);
            }
        }

        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);
        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);

        function readFloat_ieee754(readUint, buf, pos) {
            var uint = readUint(buf, pos),
                sign = (uint >> 31) * 2 + 1,
                exponent = uint >>> 23 & 255,
                mantissa = uint & 8388607;
            return exponent === 255 ? mantissa ? NaN : sign * Infinity : exponent === 0 // denormal
            ? sign * 1.401298464324817e-45 * mantissa : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);
        }

        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);
        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);
    })();

    // double: typed array
    if (typeof Float64Array !== "undefined") (function () {

        var f64 = new Float64Array([-0]),
            f8b = new Uint8Array(f64.buffer),
            le = f8b[7] === 128;

        function writeDouble_f64_cpy(val, buf, pos) {
            f64[0] = val;
            buf[pos] = f8b[0];
            buf[pos + 1] = f8b[1];
            buf[pos + 2] = f8b[2];
            buf[pos + 3] = f8b[3];
            buf[pos + 4] = f8b[4];
            buf[pos + 5] = f8b[5];
            buf[pos + 6] = f8b[6];
            buf[pos + 7] = f8b[7];
        }

        function writeDouble_f64_rev(val, buf, pos) {
            f64[0] = val;
            buf[pos] = f8b[7];
            buf[pos + 1] = f8b[6];
            buf[pos + 2] = f8b[5];
            buf[pos + 3] = f8b[4];
            buf[pos + 4] = f8b[3];
            buf[pos + 5] = f8b[2];
            buf[pos + 6] = f8b[1];
            buf[pos + 7] = f8b[0];
        }

        /* istanbul ignore next */
        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;
        /* istanbul ignore next */
        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;

        function readDouble_f64_cpy(buf, pos) {
            f8b[0] = buf[pos];
            f8b[1] = buf[pos + 1];
            f8b[2] = buf[pos + 2];
            f8b[3] = buf[pos + 3];
            f8b[4] = buf[pos + 4];
            f8b[5] = buf[pos + 5];
            f8b[6] = buf[pos + 6];
            f8b[7] = buf[pos + 7];
            return f64[0];
        }

        function readDouble_f64_rev(buf, pos) {
            f8b[7] = buf[pos];
            f8b[6] = buf[pos + 1];
            f8b[5] = buf[pos + 2];
            f8b[4] = buf[pos + 3];
            f8b[3] = buf[pos + 4];
            f8b[2] = buf[pos + 5];
            f8b[1] = buf[pos + 6];
            f8b[0] = buf[pos + 7];
            return f64[0];
        }

        /* istanbul ignore next */
        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;
        /* istanbul ignore next */
        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;

        // double: ieee754
    })();else (function () {

        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {
            var sign = val < 0 ? 1 : 0;
            if (sign) val = -val;
            if (val === 0) {
                writeUint(0, buf, pos + off0);
                writeUint(1 / val > 0 ? /* positive */0 : /* negative 0 */2147483648, buf, pos + off1);
            } else if (isNaN(val)) {
                writeUint(0, buf, pos + off0);
                writeUint(2146959360, buf, pos + off1);
            } else if (val > 1.7976931348623157e+308) {
                // +-Infinity
                writeUint(0, buf, pos + off0);
                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);
            } else {
                var mantissa;
                if (val < 2.2250738585072014e-308) {
                    // denormal
                    mantissa = val / 5e-324;
                    writeUint(mantissa >>> 0, buf, pos + off0);
                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);
                } else {
                    var exponent = Math.floor(Math.log(val) / Math.LN2);
                    if (exponent === 1024) exponent = 1023;
                    mantissa = val * Math.pow(2, -exponent);
                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);
                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);
                }
            }
        }

        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);
        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);

        function readDouble_ieee754(readUint, off0, off1, buf, pos) {
            var lo = readUint(buf, pos + off0),
                hi = readUint(buf, pos + off1);
            var sign = (hi >> 31) * 2 + 1,
                exponent = hi >>> 20 & 2047,
                mantissa = 4294967296 * (hi & 1048575) + lo;
            return exponent === 2047 ? mantissa ? NaN : sign * Infinity : exponent === 0 // denormal
            ? sign * 5e-324 * mantissa : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);
        }

        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);
        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);
    })();

    return exports;
}

// uint helpers

function writeUintLE(val, buf, pos) {
    buf[pos] = val & 255;
    buf[pos + 1] = val >>> 8 & 255;
    buf[pos + 2] = val >>> 16 & 255;
    buf[pos + 3] = val >>> 24;
}

function writeUintBE(val, buf, pos) {
    buf[pos] = val >>> 24;
    buf[pos + 1] = val >>> 16 & 255;
    buf[pos + 2] = val >>> 8 & 255;
    buf[pos + 3] = val & 255;
}

function readUintLE(buf, pos) {
    return (buf[pos] | buf[pos + 1] << 8 | buf[pos + 2] << 16 | buf[pos + 3] << 24) >>> 0;
}

function readUintBE(buf, pos) {
    return (buf[pos] << 24 | buf[pos + 1] << 16 | buf[pos + 2] << 8 | buf[pos + 3]) >>> 0;
}

/***/ }),
/* 356 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _promise = __webpack_require__(69);

var _promise2 = _interopRequireDefault(_promise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = asPromise;

/**
 * Callback as used by {@link util.asPromise}.
 * @typedef asPromiseCallback
 * @type {function}
 * @param {Error|null} error Error, if any
 * @param {...*} params Additional arguments
 * @returns {undefined}
 */

/**
 * Returns a promise from a node-style callback function.
 * @memberof util
 * @param {asPromiseCallback} fn Function to call
 * @param {*} ctx Function context
 * @param {...*} params Function arguments
 * @returns {Promise<*>} Promisified function
 */
function asPromise(fn, ctx /*, varargs */) {
    var params = new Array(arguments.length - 1),
        offset = 0,
        index = 2,
        pending = true;
    while (index < arguments.length) {
        params[offset++] = arguments[index++];
    }return new _promise2.default(function executor(resolve, reject) {
        params[offset] = function callback(err /*, varargs */) {
            if (pending) {
                pending = false;
                if (err) reject(err);else {
                    var params = new Array(arguments.length - 1),
                        offset = 0;
                    while (offset < params.length) {
                        params[offset++] = arguments[offset];
                    }resolve.apply(null, params);
                }
            }
        };
        try {
            fn.apply(ctx || null, params);
        } catch (err) {
            if (pending) {
                pending = false;
                reject(err);
            }
        }
    });
}

/***/ }),
/* 357 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = EventEmitter;

/**
 * Constructs a new event emitter instance.
 * @classdesc A minimal event emitter.
 * @memberof util
 * @constructor
 */
function EventEmitter() {

    /**
     * Registered listeners.
     * @type {Object.<string,*>}
     * @private
     */
    this._listeners = {};
}

/**
 * Registers an event listener.
 * @param {string} evt Event name
 * @param {function} fn Listener
 * @param {*} [ctx] Listener context
 * @returns {util.EventEmitter} `this`
 */
EventEmitter.prototype.on = function on(evt, fn, ctx) {
    (this._listeners[evt] || (this._listeners[evt] = [])).push({
        fn: fn,
        ctx: ctx || this
    });
    return this;
};

/**
 * Removes an event listener or any matching listeners if arguments are omitted.
 * @param {string} [evt] Event name. Removes all listeners if omitted.
 * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.
 * @returns {util.EventEmitter} `this`
 */
EventEmitter.prototype.off = function off(evt, fn) {
    if (evt === undefined) this._listeners = {};else {
        if (fn === undefined) this._listeners[evt] = [];else {
            var listeners = this._listeners[evt];
            for (var i = 0; i < listeners.length;) {
                if (listeners[i].fn === fn) listeners.splice(i, 1);else ++i;
            }
        }
    }
    return this;
};

/**
 * Emits an event by calling its listeners with the specified arguments.
 * @param {string} evt Event name
 * @param {...*} args Arguments
 * @returns {util.EventEmitter} `this`
 */
EventEmitter.prototype.emit = function emit(evt) {
    var listeners = this._listeners[evt];
    if (listeners) {
        var args = [],
            i = 1;
        for (; i < arguments.length;) {
            args.push(arguments[i++]);
        }for (i = 0; i < listeners.length;) {
            listeners[i].fn.apply(listeners[i++].ctx, args);
        }
    }
    return this;
};

/***/ }),
/* 358 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var path = module.exports;

var isAbsolute =
/**
 * Tests if the specified path is absolute.
 * @param {string} path Path to test
 * @returns {boolean} `true` if path is absolute
 */
path.isAbsolute = function isAbsolute(path) {
    return (/^(?:\/|\w+:)/.test(path)
    );
};

var normalize =
/**
 * Normalizes the specified path.
 * @param {string} path Path to normalize
 * @returns {string} Normalized path
 */
path.normalize = function normalize(path) {
    path = path.replace(/\\/g, "/").replace(/\/{2,}/g, "/");
    var parts = path.split("/"),
        absolute = isAbsolute(path),
        prefix = "";
    if (absolute) prefix = parts.shift() + "/";
    for (var i = 0; i < parts.length;) {
        if (parts[i] === "..") {
            if (i > 0 && parts[i - 1] !== "..") parts.splice(--i, 2);else if (absolute) parts.splice(i, 1);else ++i;
        } else if (parts[i] === ".") parts.splice(i, 1);else ++i;
    }
    return prefix + parts.join("/");
};

/**
 * Resolves the specified include path against the specified origin path.
 * @param {string} originPath Path to the origin file
 * @param {string} includePath Include path relative to origin path
 * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized
 * @returns {string} Path to the include file
 */
path.resolve = function resolve(originPath, includePath, alreadyNormalized) {
    if (!alreadyNormalized) includePath = normalize(includePath);
    if (isAbsolute(includePath)) return includePath;
    if (!alreadyNormalized) originPath = normalize(originPath);
    return (originPath = originPath.replace(/(?:\/|^)[^/]+$/, "")).length ? normalize(originPath + "/" + includePath) : includePath;
};

/***/ }),
/* 359 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(360);
var $Object = __webpack_require__(0).Object;
module.exports = function defineProperties(T, D) {
  return $Object.defineProperties(T, D);
};


/***/ }),
/* 360 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(2);
// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
$export($export.S + $export.F * !__webpack_require__(9), 'Object', { defineProperties: __webpack_require__(106) });


/***/ }),
/* 361 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
    'options': {
        'java_package': 'cn.wildfirechat.proto',
        'java_outer_classname': 'WFCMessage'
    },
    'nested': {
        'IMHttpWrapper': {
            'fields': {
                'token': {
                    'rule': 'required',
                    'type': 'string',
                    'id': 1
                },
                'clientId': {
                    'rule': 'required',
                    'type': 'string',
                    'id': 2
                },
                'request': {
                    'rule': 'required',
                    'type': 'string',
                    'id': 3
                },
                'data': {
                    'type': 'bytes',
                    'id': 4
                }
            }
        },
        'RouteRequest': {
            'fields': {
                'app': {
                    'type': 'string',
                    'id': 1
                },
                'platform': {
                    'type': 'int32',
                    'id': 2
                },
                'pushType': {
                    'type': 'int32',
                    'id': 3
                },
                'deviceName': {
                    'type': 'string',
                    'id': 4
                },
                'deviceVersion': {
                    'type': 'string',
                    'id': 5
                },
                'phoneName': {
                    'type': 'string',
                    'id': 6
                },
                'language': {
                    'type': 'string',
                    'id': 7
                },
                'carrierName': {
                    'type': 'string',
                    'id': 8
                },
                'appVersion': {
                    'type': 'string',
                    'id': 9
                },
                'sdkVersion': {
                    'type': 'string',
                    'id': 10
                },
                'wxAppId': {
                    'type': 'string',
                    'id': 11
                },
                'wxAppKey': {
                    'type': 'string',
                    'id': 12
                },
                'webAppId': {
                    'type': 'string',
                    'id': 13
                },
                'webAppKey': {
                    'type': 'string',
                    'id': 14
                },
                'host': {
                    'type': 'string',
                    'id': 15
                }
            }
        },
        'RouteResponse': {
            'fields': {
                'host': {
                    'rule': 'required',
                    'type': 'string',
                    'id': 1
                },
                'longPort': {
                    'rule': 'required',
                    'type': 'int32',
                    'id': 2
                },
                'shortPort': {
                    'rule': 'required',
                    'type': 'int32',
                    'id': 3
                },
                'thumbPara': {
                    'type': 'string',
                    'id': 4
                },
                'node': {
                    'type': 'string',
                    'id': 5
                },
                'commercial': {
                    'type': 'int32',
                    'id': 6
                },
                'wssPort': {
                    'type': 'int32',
                    'id': 7
                }
            }
        }
    }
};

/***/ }),
/* 362 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__362__;

/***/ }),
/* 363 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__363__;

/***/ }),
/* 364 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__364__;

/***/ }),
/* 365 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__365__;

/***/ }),
/* 366 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__366__;

/***/ }),
/* 367 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__367__;

/***/ }),
/* 368 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__368__;

/***/ }),
/* 369 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _stringify = __webpack_require__(85);

var _stringify2 = _interopRequireDefault(_stringify);

var _toConsumableArray2 = __webpack_require__(86);

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _assign = __webpack_require__(119);

var _assign2 = _interopRequireDefault(_assign);

var _getIterator2 = __webpack_require__(118);

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _set2 = __webpack_require__(370);

var _set3 = _interopRequireDefault(_set2);

var _map = __webpack_require__(121);

var _map2 = _interopRequireDefault(_map);

var _classCallCheck2 = __webpack_require__(60);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(128);

var _createClass3 = _interopRequireDefault(_createClass2);

var _long = __webpack_require__(130);

var _long2 = _interopRequireDefault(_long);

var _messageStatus = __webpack_require__(181);

var _messageStatus2 = _interopRequireDefault(_messageStatus);

var _conversation = __webpack_require__(184);

var _conversation2 = _interopRequireDefault(_conversation);

var _conversationInfo = __webpack_require__(192);

var _conversationInfo2 = _interopRequireDefault(_conversationInfo);

var _conversationType = __webpack_require__(185);

var _conversationType2 = _interopRequireDefault(_conversationType);

var _friendInfo = __webpack_require__(193);

var _friendInfo2 = _interopRequireDefault(_friendInfo);

var _nullGroupInfo = __webpack_require__(188);

var _nullGroupInfo2 = _interopRequireDefault(_nullGroupInfo);

var _nullUserInfo = __webpack_require__(189);

var _nullUserInfo2 = _interopRequireDefault(_nullUserInfo);

var _unreadCount = __webpack_require__(376);

var _unreadCount2 = _interopRequireDefault(_unreadCount);

var _userSettingScope = __webpack_require__(191);

var _userSettingScope2 = _interopRequireDefault(_userSettingScope);

var _mediaMessageContent = __webpack_require__(180);

var _mediaMessageContent2 = _interopRequireDefault(_mediaMessageContent);

var _NullChannelInfo = __webpack_require__(194);

var _NullChannelInfo2 = _interopRequireDefault(_NullChannelInfo);

var _messageConfig = __webpack_require__(179);

var _messageConfig2 = _interopRequireDefault(_messageConfig);

var _longUtil = __webpack_require__(131);

var _syncReadEntry = __webpack_require__(377);

var _syncReadEntry2 = _interopRequireDefault(_syncReadEntry);

var _persistFlag = __webpack_require__(182);

var _persistFlag2 = _interopRequireDefault(_persistFlag);

var _groupMemberType = __webpack_require__(187);

var _groupMemberType2 = _interopRequireDefault(_groupMemberType);

var _config = __webpack_require__(95);

var _config2 = _interopRequireDefault(_config);

var _friend = __webpack_require__(378);

var _friend2 = _interopRequireDefault(_friend);

var _userInfo = __webpack_require__(190);

var _userInfo2 = _interopRequireDefault(_userInfo);

var _channelInfo = __webpack_require__(183);

var _channelInfo2 = _interopRequireDefault(_channelInfo);

var _groupInfo = __webpack_require__(186);

var _groupInfo2 = _interopRequireDefault(_groupInfo);

var _aes = __webpack_require__(48);

var _groupSearchResult = __webpack_require__(379);

var _groupSearchResult2 = _interopRequireDefault(_groupSearchResult);

var _groupHeadEntry = __webpack_require__(380);

var _groupHeadEntry2 = _interopRequireDefault(_groupHeadEntry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var WfcStore = function () {
    // key -> SyncReadEntry
    // uid -> delivery
    // groupId -> groupMembers[]
    // 正在从远程拉取的用户
    // uid -> userInfo
    function WfcStore(impl) {
        (0, _classCallCheck3.default)(this, WfcStore);
        this.users = new _map2.default();
        this.groups = new _map2.default();
        this.loadingUsers = new _set3.default();
        this.loadingGroups = new _set3.default();
        this.loadingGroupMembers = new _set3.default();
        this.favGroups = [];
        this.favUsers = [];
        this.channels = new _map2.default();
        this.groupMembers = new _map2.default();
        this.friends = new _map2.default();
        this.deliveries = new _map2.default();
        this.readEntries = new _map2.default();
        this.syncReadEntries = new _map2.default();
        this.groupHeadEntries = new _map2.default();
        this.friendRequests = [];
        this.messages = [];
        this.settings = [];
        this.conversationInfos = [];
        this.chatRoomMessageId = 100;
        this.messageId = 100;
        this.syncReadId = 100;
        this.impl = null;

        this.impl = impl;
    }

    /**
     *
     * @type {WfcImpl}
     */
    // groupId + line -> GroupHeadEntry
    // uid -> readEntries(Map)
    // uid -> friendInfo
    // groupId -> groupInfo


    (0, _createClass3.default)(WfcStore, [{
        key: "_setInfoDataSource",
        value: function _setInfoDataSource(mp) {
            if (_config2.default.ENABLE_INFO_PERSISTENCE) {
                this.mp = mp;
            }
        }
    }, {
        key: "genConversationKey",
        value: function genConversationKey(conversation) {
            return conversation.type + '@' + conversation.target + '@' + conversation.line;
        }
    }, {
        key: "getUser",
        value: function getUser(userId) {
            var groupId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

            //let userInfo = this.users.get(userId);
            var userInfo = this._get(this.users, 'u', userId, _userInfo2.default);
            if (!userInfo) {
                userInfo = new _nullUserInfo2.default(userId);
            } else {
                var friendAlias = this.getFriendAlias(userId);
                if (friendAlias && friendAlias !== '') {
                    userInfo.friendAlias = friendAlias;
                }
                if (groupId.length > 0) {
                    var member = this.getGroupMember(groupId, userId);
                    if (member && member.alias && member.alias !== '') {
                        userInfo.groupAlias = member.alias;
                    }
                }
            }

            return userInfo;
        }
    }, {
        key: "setUser",
        value: function setUser(userInfo) {
            //this.users.set(userInfo.uid, userInfo);
            this._set(this.users, 'u', userInfo.uid, userInfo);
        }
    }, {
        key: "getChannelInfo",
        value: function getChannelInfo(channelId) {
            // let info = this.channels.get(channelId);
            var info = this._get(this.channels, 'c', channelId, _channelInfo2.default);
            if (!info) {
                info = new _NullChannelInfo2.default(channelId);
            }
            return info;
        }
    }, {
        key: "setChannelInfo",
        value: function setChannelInfo(channelInfo) {
            if (channelInfo instanceof _NullChannelInfo2.default) {
                return;
            }
            // this.channels.set(channelInfo.channelId, channelInfo);
            this._set(this.channels, 'c', channelInfo.channelId, channelInfo);
        }
    }, {
        key: "getGroupInfo",
        value: function getGroupInfo(groupId) {
            //let groupInfo = this.groups.get(groupId);
            var groupInfo = this._get(this.groups, 'g', groupId, _groupInfo2.default);
            if (!groupInfo) {
                groupInfo = new _nullGroupInfo2.default(groupId);
            } else {
                var remarkSetting = this.getUserSetting(_userSettingScope2.default.GroupRemark, groupId);
                groupInfo.remark = remarkSetting ? remarkSetting.value : undefined;
            }
            return groupInfo;
        }
    }, {
        key: "setGroupInfo",
        value: function setGroupInfo(groupInfo) {
            // this.groups.set(groupInfo.target, groupInfo);
            this._set(this.groups, 'g', groupInfo.target, groupInfo);
        }
    }, {
        key: "getGroupMembers",
        value: function getGroupMembers(groupId) {
            var members = this.groupMembers.get(groupId);
            members = members ? members : [];
            members = members.filter(function (m) {
                return m.type !== _groupMemberType2.default.Removed;
            });
            return members;
        }
    }, {
        key: "getGroupMemberIds",
        value: function getGroupMemberIds(groupId) {
            var fresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            var groupMembers = this.getGroupMembers(groupId, fresh);
            var groupMemberIds = [];
            groupMembers.forEach(function (e) {
                if (e.type !== _groupMemberType2.default.Removed) {
                    groupMemberIds.push(e.memberId);
                }
            });
            return groupMemberIds;
        }
    }, {
        key: "getGroupMemberMaxDt",
        value: function getGroupMemberMaxDt(groupId) {
            var maxDt = _long2.default.ZERO;
            var members = this.groupMembers.get(groupId);
            members = members ? members : [];
            members.forEach(function (e) {
                maxDt = (0, _longUtil.gt)(e.updateDt, maxDt) ? e.updateDt : maxDt;
            });
            return maxDt;
        }
    }, {
        key: "setGroupMembers",
        value: function setGroupMembers(groupId, members) {
            this.groupMembers.set(groupId, members);
        }
    }, {
        key: "removeGroupAndMembers",
        value: function removeGroupAndMembers(groupId) {
            // this.groups.delete(groupId);
            this._delete(this.groups, 'g', groupId);
            this.groupMembers.delete(groupId);
        }
    }, {
        key: "removeGroupMembers",
        value: function removeGroupMembers(groupId, memberIds) {
            var groupMembers = this.groupMembers.get(groupId);
            if (groupMembers) {
                groupMembers = groupMembers.filter(function (member) {
                    return memberIds.indexOf(member.memberId) === -1;
                });
                this.groupMembers.set(groupId, groupMembers);
            }
        }
    }, {
        key: "updateGroupMembers",
        value: function updateGroupMembers(groupId, members) {
            var groupMembers = this.groupMembers.get(groupId);
            if (groupMembers) {
                for (var i = 0; i < members.length; i++) {
                    var found = false;
                    for (var j = 0; j < groupMembers.length; j++) {
                        if (groupMembers[j].memberId === members[i].memberId) {
                            groupMembers[j] = members[i];
                            found = true;
                        }
                    }
                    if (!found) {
                        groupMembers.push(members[i]);
                    }
                }
            } else {
                this.groupMembers.set(groupId, members);
            }
        }
    }, {
        key: "updateGroupMemberMuteOrAllow",
        value: function updateGroupMemberMuteOrAllow(groupId, memberIds, setOrDelete, isAllow) {
            var _this = this;

            if (!memberIds) {
                return;
            }
            memberIds.forEach(function (memberId) {
                var groupMember = _this.getGroupMember(groupId, memberId);
                if (!groupMember) {
                    return;
                }
                if (isAllow) {
                    groupMember.type = setOrDelete ? _groupMemberType2.default.Allowed : 0;
                } else {
                    groupMember.type = setOrDelete ? _groupMemberType2.default.Muted : 0;
                }
            });
        }
    }, {
        key: "updateGroupMemberAlias",
        value: function updateGroupMemberAlias(groupId, memberId, alias) {
            var groupMember = this.getGroupMember(groupId, memberId);
            if (groupMember) {
                groupMember.alias = alias;
            }
        }
    }, {
        key: "updateGroupMemberExtra",
        value: function updateGroupMemberExtra(groupId, memberId, extra) {
            var groupMember = this.getGroupMember(groupId, memberId);
            if (groupMember) {
                groupMember.extra = extra;
            }
        }
    }, {
        key: "getGroupMember",
        value: function getGroupMember(groupId, memberId) {
            var members = this.groupMembers.get(groupId);
            if (!members) {
                return null;
            }
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = (0, _getIterator3.default)(members), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var member = _step.value;

                    if (memberId === member.memberId) {
                        return member;
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return null;
        }
    }, {
        key: "getFriends",
        value: function getFriends() {
            var friends = [];
            this.friends.forEach(function (friendInfo, uid) {
                // userId;
                // alias;
                // extra;
                // timestamp;
                if (friendInfo.state === 0) {
                    var friend = new _friend2.default();
                    friend.userId = friendInfo.uid;
                    friend.alias = friendInfo.alias;
                    friend.extra = friendInfo.extra;
                    friend.extra = friendInfo.updateDt;

                    friends.push(friend);
                }
            });
            return friends;
        }
    }, {
        key: "getFriendIds",
        value: function getFriendIds() {
            var ids = [];
            this.friends.forEach(function (friend, uid) {
                if (friend.state === 0) {
                    ids.push(friend.uid);
                }
            });
            return ids;
        }
    }, {
        key: "getBlackList",
        value: function getBlackList() {
            var ids = [];
            this.friends.forEach(function (friend, uid) {
                if (friend.state === 2) {
                    ids.push(friend.uid);
                }
            });
            return ids;
        }
    }, {
        key: "isBlackListed",
        value: function isBlackListed(userId) {
            var friend = this.friends.get(userId);
            return friend.state === 2;
        }
    }, {
        key: "setBlackList",
        value: function setBlackList(userId, block) {
            var friend = this.friends.get(userId);
            friend.state = block ? 2 : 0;
        }
    }, {
        key: "isMyFriend",
        value: function isMyFriend(uid) {
            var friend = this.friends.get(uid);
            return friend && friend.state === 0 ? true : false;
        }
    }, {
        key: "isBlocked",
        value: function isBlocked(uid) {
            var friend = this.friends.get(uid);
            return friend && friend.state === 2;
        }
    }, {
        key: "insertFriend",
        value: function insertFriend(friendInfo) {
            var info = this.friends.get(friendInfo.uid);
            if (!info || friendInfo.updateDt.compare(info.updateDt) > 0) {
                this.friends.set(friendInfo.uid, (0, _assign2.default)(new _friendInfo2.default(), friendInfo));
            }
        }
    }, {
        key: "addFavGroup",
        value: function addFavGroup(groupId) {
            var index = this.favGroups.indexOf(groupId);
            if (index >= 0) {
                return;
            }
            this.favGroups.push(groupId);
        }
    }, {
        key: "removeFavGroup",
        value: function removeFavGroup(groupId) {
            this.favGroups = this.favGroups.filter(function (groupInfo) {
                return groupInfo.target !== groupId;
            });
        }
    }, {
        key: "getFavGroups",
        value: function getFavGroups() {
            return this.favGroups;
        }
    }, {
        key: "isFavGroup",
        value: function isFavGroup(groupId) {
            var index = this.favGroups.indexOf(groupId);
            return index >= 0;
        }
    }, {
        key: "getFavUsers",
        value: function getFavUsers() {
            return this.favUsers;
        }
    }, {
        key: "isFavUser",
        value: function isFavUser(userId) {
            var index = this.favUsers.indexOf(userId);
            return index >= 0;
        }
    }, {
        key: "getFavGroupInfos",
        value: function getFavGroupInfos() {
            var _this2 = this;

            var groupInfos = [];
            this.favGroups.map(function (groupId) {
                //let groupInfo = this.groups.get(groupId);
                var groupInfo = _this2._get(_this2.groups, 'g', groupId, _groupInfo2.default);
                groupInfos.push(groupInfo);
            });

            // TODO sort
            return groupInfos;
        }
    }, {
        key: "getFriendAlias",
        value: function getFriendAlias(uid) {
            var friend = this.friends.get(uid);
            var alias = friend ? friend.alias : '';
            return alias.length > 0 ? alias : null;
        }
    }, {
        key: "getFriendExtra",
        value: function getFriendExtra(uid) {
            var friend = this.friends.get(uid);
            var extra = friend ? friend.extra : '';
            return extra.length > 0 ? extra : null;
        }
    }, {
        key: "getFriendUserInfos",
        value: function getFriendUserInfos() {
            var _this3 = this;

            var userInfos = [];
            this.friends.forEach(function (friend, uid) {
                if (friend.state === 0) {
                    var userInfo = _this3.getUser(uid);
                    userInfos.push(userInfo);
                }
            });
            // TODO sort

            return userInfos;
        }
    }, {
        key: "getConversationInfo",
        value: function getConversationInfo(conversation) {
            var cs = this.conversationInfos.filter(function (info) {
                return info.conversation.equal(conversation);
            });
            if (cs && cs.length > 0) {
                return cs[0];
            }
            return null;
        }
    }, {
        key: "clearConversationUnreadStatus",
        value: function clearConversationUnreadStatus(conversation) {
            var info = this.getConversationInfo(conversation);
            var count = 0;
            if (info) {
                count = info.unreadCount.unread + info.unreadCount.unreadMention + info.unreadCount.unreadMentionAll;
                this.updateConversationUnreadStatus(conversation, info.timestamp);
            }
            // TODO FIXME
            // 请消息未读状态
            return count;
        }
    }, {
        key: "clearMessageUnreadStatus",
        value: function clearMessageUnreadStatus(messageId) {
            var cleared = false;
            for (var i = 0; i < this.messages.length; i++) {
                var msg = this.messages[i];
                if (msg.messageId === messageId && [_messageStatus2.default.Unread, _messageStatus2.default.Mentioned, _messageStatus2.default.AllMentioned].indexOf(msg.status) > -1) {
                    var info = this.getConversationInfo(msg.conversation);
                    if (info) {
                        switch (msg.status) {
                            case _messageStatus2.default.Unread:
                                info.unreadCount.unread -= 1;
                                break;
                            case _messageStatus2.default.Mentioned:
                                info.unreadCount.unreadMention -= 1;
                                break;
                            case _messageStatus2.default.AllMentioned:
                                info.unreadCount.unreadMentionAll -= 1;
                                break;
                            default:
                                break;
                        }
                        cleared = true;
                    }
                    msg.status = _messageStatus2.default.Readed;
                    break;
                }
            }
            return cleared;
        }

        // 对方是否已读，仅限于单聊会话
        // 已废弃

    }, {
        key: "updateConversationRead",
        value: function updateConversationRead(conversation, dt) {
            var _this4 = this;

            this.messages.forEach(function (message) {
                if (message.conversation.equal(conversation) && message.status === _messageStatus2.default.Sent && (0, _longUtil.lte)(message.timestamp, dt)) {
                    message.status = _messageStatus2.default.Readed;
                    _this4.log('--------- mark conversation message read', conversation, dt);
                }
            });
        }
    }, {
        key: "getConversationReadMaxDt",
        value: function getConversationReadMaxDt(conversation) {
            var maxDt = _long2.default.ZERO;
            this.messages.forEach(function (message) {
                if (message.conversation.equal(conversation)) {
                    maxDt = (0, _longUtil.gt)(message.timestamp, maxDt) ? message.timestamp : maxDt;
                }
            });
            return maxDt;
        }
    }, {
        key: "getUnreadMsgSenders",
        value: function getUnreadMsgSenders(conversation) {
            var senders = [];
            this.messages.forEach(function (msg) {
                if (msg.conversation.equal(conversation)) {
                    if (msg.status === _messageStatus2.default.Unread || msg.status === _messageStatus2.default.Mentioned || msg.status === _messageStatus2.default.AllMentioned) {
                        if (senders.indexOf(msg.from) === -1) {
                            senders.push(msg.from);
                        }
                    }
                }
            });
            return senders;
        }
    }, {
        key: "clearAllUnreadStatus",
        value: function clearAllUnreadStatus() {
            var _this5 = this;

            var count = 0;
            this.conversationInfos.forEach(function (info) {
                count += info.unreadCount.unread + info.unreadCount.unreadMention + info.unreadCount.unreadMentionAll;
                _this5.updateConversationUnreadStatus(info.conversation, info.timestamp);
            });
            return count;
        }
    }, {
        key: "updateConversationUnreadStatus",
        value: function updateConversationUnreadStatus(conversation, readDt) {
            var cMsgs = this.getConversationMessages(conversation);
            var cInfo = this.getConversationInfo(conversation);
            cInfo.unreadCount.unread = 0;
            cInfo.unreadCount.unreadMention = 0;
            cInfo.unreadCount.unreadMentionAll = 0;

            if ((0, _longUtil.gte)(readDt, cInfo.timestamp)) {
                cMsgs.forEach(function (m) {
                    if ((0, _longUtil.gte)(readDt, m.timestamp) && [_messageStatus2.default.Unread, _messageStatus2.default.AllMentioned, _messageStatus2.default.Mentioned].indexOf(m.status) > -1) {
                        m.status = _messageStatus2.default.Readed;
                    }
                });
            } else {
                cMsgs.forEach(function (m) {
                    if (m.direction === 0) {
                        return;
                    }
                    if ((0, _longUtil.gt)(m.timestamp, readDt) && _messageConfig2.default.getMessageContentPersitFlag(m.content.type) === _persistFlag2.default.Persist_And_Count) {
                        if (m.status === _messageStatus2.default.Unread) {
                            cInfo.unreadCount.unread += 1;
                        } else if (m.status === _messageStatus2.default.Mentioned) {
                            cInfo.unreadCount.unreadMention += 1;
                        } else if (m.status === _messageStatus2.default.AllMentioned) {
                            cInfo.unreadCount.unreadMentionAll += 1;
                        }
                    } else {
                        if ([_messageStatus2.default.Unread, _messageStatus2.default.AllMentioned, _messageStatus2.default.Mentioned].indexOf(m.status) > -1) {
                            m.status = _messageStatus2.default.Readed;
                        }
                    }
                });
            }
        }
    }, {
        key: "_getConversationInfos",
        value: function _getConversationInfos() {
            return this.conversationInfos;
        }
    }, {
        key: "getConversationList",
        value: function getConversationList(types, lines) {
            var filterConversations = this.conversationInfos.filter(function (ci) {
                if (types.indexOf(ci.conversation.type) === -1 || lines.indexOf(ci.conversation.line) === -1) {
                    return false;
                }
                var target = ci.conversation.target;
                var type = ci.conversation.type;

                // if (type === ConversationType.Single) {
                //     let userInfo = this.getUser(target, false);
                //     if (userInfo instanceof NullUserInfo) {
                //         return false;
                //     }
                // } else if (type === ConversationType.Group) {
                //     let groupInfo = this.getGroupInfo(target);
                //     if (groupInfo instanceof NullGroupInfo) {
                //         return false;
                //     }
                // }
                return true;
            });
            return filterConversations.sort(function (a, b) {
                if (a.top && !b.top) {
                    return 1;
                } else if (!a.top && b.top) {
                    return -1;
                } else if (a.top && b.top && a.top !== b.top) {
                    return a.top > b.top ? 1 : -1;
                } else {
                    return (0, _longUtil.compare)(a.timestamp, b.timestamp);
                }
            }).reverse();
        }
    }, {
        key: "searchFriends",
        value: function searchFriends(keyword) {
            var friendsInfo = this.getFriendUserInfos();
            return friendsInfo.filter(function (info) {
                return info.displayName.indexOf(keyword) >= 0;
            });
        }
    }, {
        key: "searchConversation",
        value: function searchConversation(keyword) {
            var _this6 = this;

            var types = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 1, 2, 3];
            var lines = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [0, 1];

            return this.conversationInfos.filter(function (info) {
                if (types.indexOf(info.conversation.type) < 0 || lines.indexOf(info.conversation.line) < 0) {
                    return false;
                }
                var displayName = void 0;
                var groupRemark = void 0;
                switch (info.conversation.type) {
                    case _conversationType2.default.Single:
                        var userinfo = _this6.getUser(info.conversation.target);
                        displayName = userinfo.displayName;
                        break;
                    case _conversationType2.default.Group:
                        var groupInfo = _this6.getGroupInfo(info.conversation.target);
                        displayName = groupInfo.displayName;
                        groupRemark = groupInfo.remark;
                        break;

                    default:
                        break;
                }

                if (displayName && displayName.indexOf(keyword) > -1 || groupRemark && groupRemark.indexOf(keyword) > -1) {
                    return true;
                }

                var msgs = _this6.searchConversationMessage(info.conversation, keyword);
                return msgs && msgs.length > 0;
            });
        }
    }, {
        key: "searchGroups",
        value: function searchGroups(keyword) {
            var _this7 = this;

            var result = [];
            if (!keyword || !keyword.trim()) {
                return result;
            }
            var groups = this.groups;
            keyword = keyword.toUpperCase();
            groups.forEach(function (groupInfo, groupId) {
                if ((0, _longUtil.lt)(groupInfo.memberUpdateDt, 0)) {
                    return;
                }
                var remarkSetting = _this7.getUserSetting(_userSettingScope2.default.GroupRemark, groupId);
                groupInfo.remark = remarkSetting ? remarkSetting.value : '';
                if (groupInfo.name.toUpperCase().indexOf(keyword) > -1 || groupInfo.remark && groupInfo.remark.toUpperCase().indexOf(keyword) > -1) {
                    result.push(groupInfo);
                }
            });
            return result.map(function (g) {
                var gsr = new _groupSearchResult2.default();
                gsr.groupInfo = g;
                gsr.matchType = 0;
                return gsr;
            });
        }
    }, {
        key: "loadPersistGroups",
        value: function loadPersistGroups() {
            if (this.groups.size > 0) {
                return;
            }
            var len = localStorage.length;
            for (var i = 0; i < len; i++) {
                var key = localStorage.key(i);
                if (key.startsWith(this.impl.userId + '-' + 'g')) {
                    var value = localStorage.getItem(key);
                    if (value) {
                        value = this.impl._Utf8ArrayToStr((0, _aes.AESDecrypt)(value, '', false, false));
                        if (value) {
                            var groupInfo = (0, _assign2.default)(new _groupInfo2.default(), JSON.parse(value));
                            var curGroupInfo = this.groups.get(groupInfo.target);
                            if (!curGroupInfo || (0, _longUtil.gt)(groupInfo.updateDt, curGroupInfo.updateDt)) {
                                this.groups.set(groupInfo.target, groupInfo);
                            }
                        }
                    }
                }
            }
        }
    }, {
        key: "_findConversationInfoIndex",
        value: function _findConversationInfoIndex(conversation) {
            for (var i = 0; i < this.conversationInfos.length; i++) {
                if (this.conversationInfos[i].conversation.equal(conversation)) {
                    return i;
                }
            }
            return -1;
        }
    }, {
        key: "removeConversation",
        value: function removeConversation(conversation) {
            var clearMsg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            var index = this._findConversationInfoIndex(conversation);
            if (index > -1) {
                this.conversationInfos.splice(index, 1);
            }
            if (clearMsg) {
                this.messages = this.messages.filter(function (message) {
                    return !message.conversation.equal(conversation);
                });
            }
        }
    }, {
        key: "setConversationTop",
        value: function setConversationTop(conversation, top) {
            var info = this.getConversationInfo(conversation);
            if (info) {
                info.top = top;
            }
        }
    }, {
        key: "setConversationSilent",
        value: function setConversationSilent(conversation, silent) {
            var info = this.getConversationInfo(conversation);
            if (info) {
                info.isSilent = silent;
            }
        }
    }, {
        key: "setConversationDraft",
        value: function setConversationDraft(conversation, draft) {
            var info = this.getConversationInfo(conversation);
            if (info) {
                info.draft = draft;
            }
        }
    }, {
        key: "getUnreadCount",
        value: function getUnreadCount(types, lines) {
            var unreadCount = new _unreadCount2.default();
            this.conversationInfos.forEach(function (info) {
                if (types.indexOf(info.conversation.type) > -1 && lines.indexOf(info.conversation.line) > -1 && info.unreadCount) {
                    unreadCount.unread += info.unreadCount.unread;
                    unreadCount.unreadMention += info.unreadCount.unreadMention;
                    unreadCount.unreadMentionAll += info.unreadCount.unreadMentionAll;
                }
            });
            return unreadCount;
        }
    }, {
        key: "getConversationUnreadCount",
        value: function getConversationUnreadCount(conversation) {
            var i = this._findConversationInfoIndex(conversation);
            if (i > -1) {
                var info = this.conversationInfos[i];
                return info.unreadCount;
            }
            return null;
        }
    }, {
        key: "insertConversationMessages",
        value: function insertConversationMessages(messages) {
            var _messages;

            (_messages = this.messages).push.apply(_messages, (0, _toConsumableArray3.default)(messages));
            this.updateConversationLastMessage(messages[messages.length - 1]);
        }
    }, {
        key: "updateConversationLastMessage",
        value: function updateConversationLastMessage(message) {
            if (!message.messageId) {
                return;
            }
            var info = this.conversationInfos.find(function (c) {
                return c.conversation.equal(message.conversation);
            });
            var settingKey = message.conversation.conversationType + "-" + message.conversation.line + "-" + message.conversation.target;
            if (!info) {
                var syncSetting = this.getUserSetting(_userSettingScope2.default.Conversation_Sync, settingKey);
                if (syncSetting && syncSetting.value && syncSetting.value.startsWith('-') && (0, _longUtil.gte)(-Number(syncSetting.value), message.timestamp)) {
                    this.log('conversation removed, drop conversation message', message);
                    return;
                }
                info = this.genAndSaveDefaultConversationInfo(message.conversation);
            }
            var setting = this.getUserSetting(_userSettingScope2.default.Conversation_Sync, settingKey);
            var readDt = 0;
            if (setting) {
                readDt = Math.abs(Number(setting.value));
            }
            if ((0, _longUtil.gte)(message.timestamp, info.timestamp)) {
                info.lastMessage = message;
                info.timestamp = message.timestamp;
            }
            if ((0, _longUtil.gt)(message.timestamp, readDt)) {
                if (message.direction === 1 && _messageConfig2.default.getMessageContentFlag(message.messageContent.type) === _persistFlag2.default.Persist_And_Count) {
                    if (message.status === _messageStatus2.default.Unread) {
                        info.unreadCount.unread += 1;
                    } else if (message.status === _messageStatus2.default.Mentioned) {
                        info.unreadCount.unreadMention += 1;
                    } else if (message.status === _messageStatus2.default.AllMentioned) {
                        info.unreadCount.unreadMentionAll += 1;
                    }
                }
            }
        }
    }, {
        key: "getConversationOldestMessage",
        value: function getConversationOldestMessage(conversation) {
            var oldestMsg = void 0;
            this.messages.forEach(function (message) {
                if (message.conversation.equal(conversation)) {
                    if (!oldestMsg) {
                        oldestMsg = message;
                    } else {
                        if ((0, _longUtil.gt)(oldestMsg.timestamp, message.timestamp)) {
                            oldestMsg = message;
                        }
                    }
                }
            });
            return oldestMsg;
        }
    }, {
        key: "getConversationMessages",
        value: function getConversationMessages(conversation) {
            var fromIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            var before = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
            var count = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
            var withUser = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';

            var fromMsg = null;
            if (fromIndex) {
                fromMsg = this.getMessageById(fromIndex);
            }
            var cmsgs = this.messages.filter(function (message) {
                if (fromMsg) {
                    if (before) {
                        return message.conversation.equal(conversation) && (0, _longUtil.lt)(message.timestamp, fromMsg.timestamp) && (withUser ? message.direction === 0 && (message.to === withUser || message.to === '') || message.from === withUser : true);
                    } else {
                        return message.conversation.equal(conversation) && (0, _longUtil.gt)(message.timestamp, fromMsg.timestamp) && (withUser ? message.direction === 0 && (message.to === withUser || message.to === '') || message.from === withUser : true);
                    }
                } else {
                    return message.conversation.equal(conversation);
                }
            });
            if (cmsgs && cmsgs.length > 0) {
                cmsgs = cmsgs.sort(function (m1, m2) {
                    return (0, _longUtil.compare)(m1.timestamp, m2.timestamp);
                });
            }

            if (count > 0) {
                if (before) {
                    cmsgs = cmsgs.slice(-count);
                } else {
                    cmsgs = cmsgs.slice(0, count);
                }
            }

            return cmsgs;
        }
    }, {
        key: "getConversationLastReceivedMessage",
        value: function getConversationLastReceivedMessage(conversation) {
            var cmsgs = this.messages.filter(function (message) {
                return message.conversation.equal(conversation) && message.direction === 1;
            });
            if (cmsgs && cmsgs.length > 0) {
                cmsgs = cmsgs.sort(function (m1, m2) {
                    return (0, _longUtil.compare)(m1.timestamp, m2.timestamp);
                });
                return cmsgs[cmsgs.length - 1];
            }
            return null;
        }
    }, {
        key: "setLastReceivedMessageUnread",
        value: function setLastReceivedMessageUnread(conversation, lastMsgUid, timestamp) {
            console.log('setLastReceivedMessageUnread', conversation, lastMsgUid);
            var msg = this.getConversationLastReceivedMessage(conversation);
            if (msg && msg.status > _messageStatus2.default.Unread) {
                msg.status = _messageStatus2.default.Unread;

                if ((0, _longUtil.eq)(timestamp, 0)) {
                    msg.timestamp = msg.timestamp.add(501);
                } else {
                    msg.timestamp = _long2.default.fromValue(timestamp);
                }
                var cinfo = this.getConversationInfo(conversation);
                cinfo.unreadCount.unread = 1;

                return msg.messageUid;
            }
            return 0;
        }
    }, {
        key: "getMessagesEx2",
        value: function getMessagesEx2(conversationTypes, lines, messageStatus, withUser) {
            var msgs = this.messages.filter(function (message) {
                var conversation = message.conversation;
                var result = conversationTypes.indexOf(conversation.conversationType) >= 0 && lines.indexOf(conversation.line) >= 0 && (messageStatus === _messageStatus2.default.All || message.status === messageStatus);

                if (!result) {
                    return false;
                }

                if (!withUser) {
                    return true;
                } else {
                    if (conversation.conversationType === _conversationType2.default.Single) {
                        return message.from === withUser || conversation.target === withUser;
                    } else {
                        return message.from === withUser || message.to === withUser;
                    }
                }
            });

            if (msgs && msgs.length > 0) {
                return msgs.sort(function (m1, m2) {
                    return (0, _longUtil.compare)(m1.timestamp, m2.timestamp);
                });
            }

            return msgs;
        }
    }, {
        key: "getMessagesEx",
        value: function getMessagesEx(conversationTypes, lines, contentTypes, withUser) {
            var msgs = this.messages.filter(function (message) {
                var conversation = message.conversation;
                var result = conversationTypes.indexOf(conversation.conversationType) >= 0 && lines.indexOf(conversation.line) >= 0 && (contentTypes.length === 0 || contentTypes.length > 0 && contentTypes.indexOf(_messageConfig2.default.getMessageContentType(message.messageContent)) >= 0);

                if (!result) {
                    return false;
                }

                if (!withUser) {
                    return true;
                } else {
                    if (conversation.conversationType === _conversationType2.default.Single) {
                        return message.from === withUser || conversation.target === withUser;
                    } else {
                        return message.from === withUser || message.to === withUser;
                    }
                }
            });

            if (msgs && msgs.length > 0) {
                return msgs.sort(function (m1, m2) {
                    return (0, _longUtil.compare)(m1.timestamp, m2.timestamp);
                });
            }

            return msgs;
        }
    }, {
        key: "getFirstUnreadMessage",
        value: function getFirstUnreadMessage(conversation) {
            var firstUnreadMessage = null;
            this.messages.forEach(function (message) {
                if (message.conversation.equal(conversation)) {
                    if ([_messageStatus2.default.Unread, _messageStatus2.default.Mentioned, _messageStatus2.default.AllMentioned].indexOf(message.status) > -1) {
                        if (!firstUnreadMessage) {
                            firstUnreadMessage = message;
                        } else {
                            if ((0, _longUtil.gt)(firstUnreadMessage.timestamp, message.timestamp)) {
                                firstUnreadMessage = message;
                            }
                        }
                    }
                }
            });
            return firstUnreadMessage;
        }
    }, {
        key: "clearConversationMessages",
        value: function clearConversationMessages(conversation, dt) {
            this.messages = this.messages.filter(function (message) {
                return !message.conversation.equal(conversation) || (0, _longUtil.gt)(message.timestamp, dt);
            });
            var conversationInfo = this.getConversationInfo(conversation);
            if (conversationInfo && conversationInfo.lastMessage && conversationInfo.lastMessage.timestamp && (0, _longUtil.lte)(conversationInfo.lastMessage.timestamp, dt)) {
                conversationInfo.lastMessage = null;
            }
        }
    }, {
        key: "clearConversationMessagesBeforeMessageUid",
        value: function clearConversationMessagesBeforeMessageUid(conversation, messageUid) {
            this.messages = this.messages.filter(function (message) {
                return !message.conversation.equal(conversation) || (0, _longUtil.gte)(message.messageUid, messageUid);
            });
            var conversationInfo = this.getConversationInfo(conversation);
            if (conversationInfo && conversationInfo.lastMessage && conversationInfo.lastMessage.messageUid && (0, _longUtil.lte)(conversationInfo.lastMessage.messageUid, messageUid)) {
                conversationInfo.lastMessage = null;
            }
        }
    }, {
        key: "searchMessage",
        value: function searchMessage(keyword) {
            return this.messages.filter(function (message) {
                return message.content && message.content.searchableContent && message.content.searchableContent.indexOf(keyword) > -1;
            });
        }
    }, {
        key: "searchConversationMessage",
        value: function searchConversationMessage(conversation, keyword, withUser) {
            var msgs = this.getConversationMessages(conversation);
            return msgs.filter(function (message) {
                if (withUser && message.from !== withUser) {
                    return false;
                }
                return message.content && message.content.searchableContent && message.content.searchableContent.indexOf(keyword) > -1;
            });
        }
    }, {
        key: "genChatRoomMessageId",
        value: function genChatRoomMessageId() {
            this.chatRoomMessageId++;
            return 0 - this.chatRoomMessageId;
        }
    }, {
        key: "genNormalMessageId",
        value: function genNormalMessageId() {
            return this.messageId++;
        }
    }, {
        key: "saveMessage",
        value: function saveMessage(message) {
            var msg = void 0;
            if (message.messageUid && message.messageUid !== -1) {
                msg = this.getMessageByUid(message.messageUid);
                if (msg) {
                    message.messageId = msg.messageId;
                    this.log('messageUid exist', message);
                    return false;
                }
            }
            // update message status
            var setting = this.getUserSetting(_userSettingScope2.default.Conversation_Sync, message.conversation.conversationType + '-' + message.conversation.line + '-' + message.conversation.target);
            var readDt = 0;
            if (setting) {
                readDt = Number(setting.value);
            }
            if (message.direction === 1 && (0, _longUtil.gte)(readDt, message.timestamp)) {
                message.status = _messageStatus2.default.Readed;
            }

            this.messages.push(message);
            return true;
        }
    }, {
        key: "updateMessageById",
        value: function updateMessageById(message) {
            if (!message.messageId) {
                return;
            }
            var i = -1;
            for (var index = 0; index < this.messages.length; index++) {
                var element = this.messages[index];
                if (element.messageId === message.messageId) {
                    i = index;
                    break;
                }
            }
            if (i !== -1) {
                this.messages[i] = message;
                var conversationInfo = this.getConversationInfo(message.conversation);
                if (conversationInfo && conversationInfo.lastMessage.messageId === message.messageId) {
                    conversationInfo.lastMessage = message;
                }
            }
        }
    }, {
        key: "updateMessageByUid",
        value: function updateMessageByUid(message) {
            if (!message.messageUid) {
                return;
            }
            var i = -1;
            for (var index = 0; index < this.messages.length; index++) {
                var element = this.messages[index];
                if ((0, _longUtil.eq)(element.messageUid, message.messageUid)) {
                    i = index;
                    break;
                }
            }
            // 保持messageId 不变
            if (i !== -1) {
                if (this.messages[i].messageId && !message.messageId) {
                    message.messageId = this.messages[i].messageId;
                }
                this.messages[i] = message;
                var conversationInfo = this.getConversationInfo(message.conversation);
                if (conversationInfo && (0, _longUtil.eq)(conversationInfo.lastMessage.messageUid, message.messageUid)) {
                    conversationInfo.lastMessage = message;
                }
            }
        }
    }, {
        key: "deleteMessageById",
        value: function deleteMessageById(messageId) {
            var i = void 0;
            for (var index = 0; index < this.messages.length; index++) {
                var element = this.messages[index];
                if (element.messageId === messageId) {
                    i = index;
                    break;
                }
            }
            if (i) {
                var messages = this.messages.splice(i, 1);
                var msg = messages[0];
                this.onMessageDeleted(msg);
                return true;
            }
            return false;
        }
    }, {
        key: "deleteMessageByUid",
        value: function deleteMessageByUid(messageUid) {
            var i = void 0;
            for (var index = 0; index < this.messages.length; index++) {
                var element = this.messages[index];
                if (element.messageUid.compare(messageUid) === 0) {
                    i = index;
                    break;
                }
            }
            if (i) {
                var messages = this.messages.splice(i, 1);
                var msg = messages[0];
                this.onMessageDeleted(msg);
                return true;
            }
            return false;
        }
    }, {
        key: "onMessageDeleted",
        value: function onMessageDeleted(deletedMsg) {
            if (!deletedMsg) {
                return;
            }
            var msg = deletedMsg;
            var conversationInfo = this.getConversationInfo(msg.conversation);

            var setting = this.getUserSetting(_userSettingScope2.default.Conversation_Sync, msg.conversation.conversationType + '-' + msg.conversation.line + '-' + msg.conversation.target);
            var readDt = 0;
            if (setting) {
                readDt = Number(setting.value);
            }
            if ((0, _longUtil.gt)(msg.timestamp, readDt)) {
                if (msg.direction === 1) {
                    if (msg.status === _messageStatus2.default.Unread) {
                        conversationInfo.unreadCount.unread -= 1;
                    } else if (msg.status === _messageStatus2.default.Mentioned) {
                        conversationInfo.unreadCount.unreadMention -= 1;
                    } else if (msg.status === _messageStatus2.default.AllMentioned) {
                        conversationInfo.unreadCount.unreadMentionAll -= 1;
                    }
                }
            }

            if (conversationInfo.lastMessage && conversationInfo.lastMessage.messageId === msg.messageId) {
                var cmsgs = this.getConversationMessages(msg.conversation);
                if (cmsgs && cmsgs.length > 0) {
                    conversationInfo.lastMessage = cmsgs[cmsgs.length - 1];
                } else {
                    conversationInfo.lastMessage = null;
                }
            }
        }
    }, {
        key: "deleteFriend",
        value: function deleteFriend(friendId) {
            this.friends.delete(friendId);
        }
    }, {
        key: "getMessageById",
        value: function getMessageById(messageId) {
            var result = this.messages.filter(function (msg) {
                return msg.messageId === messageId;
            });
            if (result.length > 0) {
                return result[0];
            }
            return null;
        }
    }, {
        key: "getMessageByUid",
        value: function getMessageByUid(messageUid) {
            var messageUidLong = _long2.default.fromValue(messageUid);
            var result = this.messages.filter(function (msg) {
                return messageUidLong.compare(msg.messageUid) === 0;
            });
            if (result && result.length > 0) {
                return result[0];
            }
            return null;
        }
    }, {
        key: "setMediaMessagePlayed",
        value: function setMediaMessagePlayed(messageId) {
            var result = false;
            var msg = this.getMessageById(messageId);
            if (msg.messageContent instanceof _mediaMessageContent2.default && msg.direction === 1) {
                msg.status = _messageStatus2.default.Played;
                result = true;
            }
            return result;
        }

        // TODO 目前不需要
        // getMessages(conversation, fromIndex, before = true, count = 20, withUser = '') {
        //     let msgs = [];
        //     let msg;
        //     let timestamp;
        //     let tmpMsgs = this.messages.filter(message => {
        //         message.messageId === fromIndex;
        //     });
        //     if (tmpMsgs.length > 0) {
        //         timestamp = tmpMsgs[0].timestamp;
        //     } else {
        //         if (before) {
        //             timestamp = Number.MAX_SAFE_INTEGER;
        //         } else {
        //             timestamp = 0;
        //         }
        //     }


        //     if (before) {
        //         for (let i = this.messages.length - 1; i >= 0; i--) {
        //             msg = this.messages[i];
        //             if (msg.conversation.equal(conversation) && msg.timestamp < timestamp) {
        //                 if (withUser.length > 0 && (msg.direction === 0 && (msg.to === '' || msg.to === withUser))) {

        //                 } else {
        //                     msgs.push(msg);
        //                 }
        //             }

        //         }
        //     } else {

        //     }
        //     return msgs;
        // }

    }, {
        key: "updateUserSettings",
        value: function updateUserSettings(settings) {
            var _this8 = this;

            settings.sort(function (a, b) {
                return (0, _longUtil.compare)(a.updateDt, b.updateDt);
            });
            settings.forEach(function (setting) {
                if (!setting.updateDt) {
                    console.log('invalid setting', setting);
                    return;
                }
                var i = -1;
                for (var index = 0; index < _this8.settings.length; index++) {
                    var element = _this8.settings[index];
                    if (element.key === setting.key && element.scope === setting.scope) {
                        i = index;
                        break;
                    }
                }
                if (i >= 0) {
                    if (setting.value === '') {
                        _this8.settings.splice(i, 1);
                    } else {
                        _this8.settings[i] = setting;
                    }
                } else {
                    if (setting.value !== '') {
                        _this8.settings.push(setting);
                    }
                }

                if (setting.scope === _userSettingScope2.default.ConversationSilent || setting.scope === _userSettingScope2.default.ConversationTop || setting.scope === _userSettingScope2.default.Conversation_Sync || setting.scope === _userSettingScope2.default.UserSettingConversationReaded || setting.scope === _userSettingScope2.default.ConversationClearMessage || setting.scope === _userSettingScope2.default.ConversationDraft) {
                    var key = setting.key;
                    var index_0 = key.indexOf('-');
                    var index_1 = key.indexOf('-', index_0 + 1);
                    var type = parseInt(key.substring(0, index_0));
                    var line = parseInt(key.substring(index_0 + 1, index_1));
                    var target = key.substring(index_1 + 1);

                    var conversation = new _conversation2.default(type, target, line);
                    var info = _this8.getConversationInfo(conversation);
                    if (!info) {
                        // if (setting.scope === UserSettingScope.Conversation_Sync || setting.scope === UserSettingScope.UserSettingConversationReaded) {
                        var dt = Number(setting.value);
                        //消息的时间戳精度是毫秒，但数据库字段用的是timestamp格式，这样如果消息直接从缓存中取出来，精度是到毫秒的。如果是从数据库读取出来精度只能到秒。这样消息的时间最大会变大500毫秒。因此根据消息时间处理同步未读和已读就不准确了，处理方法就是把这个时间增加500毫秒。
                        dt = dt % 1000 < 500 ? dt : dt + (1000 - dt % 1000);
                        if (dt < 0 || dt > 0 && new Date().getTime() - dt >= (_config2.default.CONVERSATION_EXPIRE_TIME ? _config2.default.CONVERSATION_EXPIRE_TIME : 30) * 24 * 60 * 60 * 1000) {
                            return;
                        }
                        // }
                        if (setting.scope === _userSettingScope2.default.ConversationSilent && setting.value === '1' || _config2.default.DISABLE_GENERATE_CONVERSATION_FOR_SILENT_SETTING) {
                            return;
                        }

                        // if (setting.scope === UserSettingScope.ConversationTop && setting.value === '0') {
                        //     return;
                        // }

                        //if(setting.scope !== UserSettingScope.ConversationDraft){
                        info = _this8.genAndSaveDefaultConversationInfo(conversation);
                        info.timestamp = setting.updateDt;
                        //}
                    }
                    if (setting.scope === _userSettingScope2.default.ConversationSilent) {
                        info.isSilent = setting.value === '1';
                    } else if (setting.scope === _userSettingScope2.default.ConversationTop) {
                        info.top = Number(setting.value);
                    } else if (setting.scope === _userSettingScope2.default.Conversation_Sync) {
                        var _dt = Number(setting.value);
                        // 更新已读状态
                        if (_dt < 0) {
                            if ((0, _longUtil.lte)(info.timestamp, -_dt)) {
                                _this8.removeConversation(conversation, true);
                            }
                        } else {
                            _this8.updateConversationUnreadStatus(conversation, _dt);
                        }
                    } else if (setting.scope === _userSettingScope2.default.UserSettingConversationReaded) {
                        _this8.updateConversationRead(conversation, Number(setting.value));
                    } else if (setting.scope === _userSettingScope2.default.ConversationClearMessage) {
                        var _dt2 = Number(setting.value);
                        if (info && _dt2 > 0) {
                            _this8.impl.clearMessages(conversation, _dt2);
                        }
                    } else if (setting.scope === _userSettingScope2.default.ConversationDraft) {
                        var position = setting.value.indexOf('@@@');
                        if (position > 0) {
                            var clientId = setting.value.substring(0, position);
                            if (!clientId || clientId === _this8.impl.clientId || _this8.impl.isGlobalDisableDraftSync || _this8.impl.isDisableSyncDraft()) {
                                // this.log('invalid draft sync', setting)
                                return;
                            }
                            var draft = setting.value.substring(position + 3).trim();
                            // if(!info && draft){
                            //     info = this._genAndSaveDefaultConversationInfo(conversation);
                            //     info.timestamp = setting.updateDt;
                            // }
                            if (info && info.draft !== draft) {
                                _this8.impl.setConversationDraft(conversation, draft, false);
                            }
                        }
                    }
                } else if (setting.scope === _userSettingScope2.default.FavoriteGroup) {
                    var _index = _this8.favGroups.indexOf(setting.key);
                    if (setting.value === '1') {
                        if (_index < 0) {
                            _this8.favGroups.push(setting.key);
                        }
                    } else {
                        if (_index >= 0) {
                            _this8.favGroups.splice(_index, 1);
                        }
                    }
                } else if (setting.scope === _userSettingScope2.default.FavoriteUser) {
                    var _index2 = _this8.favUsers.indexOf(setting.key);
                    if (setting.value === '1') {
                        if (_index2 < 0) {
                            _this8.favUsers.push(setting.key);
                        }
                    } else {
                        if (_index2 >= 0) {
                            _this8.favUsers.splice(_index2, 1);
                        }
                    }
                }
            });
        }
    }, {
        key: "genAndSaveDefaultConversationInfo",
        value: function genAndSaveDefaultConversationInfo(conversation) {
            var index = this._findConversationInfoIndex(conversation);
            if (index !== -1) {
                return this.conversationInfos[index];
            }
            var info = new _conversationInfo2.default();
            info.conversation = conversation;
            info.timestamp = _long2.default.ZERO;
            info.unreadCount = new _unreadCount2.default();

            var settingKey = conversation.conversationType + "-" + conversation.line + "-" + conversation.target;
            var silentSetting = this.getUserSetting(_userSettingScope2.default.ConversationSilent, settingKey);
            if (silentSetting && silentSetting.value === '1') {
                info.isSilent = true;
            }
            var topSetting = this.getUserSetting(_userSettingScope2.default.ConversationTop, settingKey);
            if (topSetting && topSetting.value) {
                info.top = Number(topSetting.value);
            }

            this.conversationInfos.push(info);
            return info;
        }
    }, {
        key: "updateDeliveries",
        value: function updateDeliveries(deliveries) {
            var _this9 = this;

            deliveries.forEach(function (d) {
                _this9.deliveries.set(d.fromUser, d.receiveTime);
            });
        }
    }, {
        key: "getUserDelivery",
        value: function getUserDelivery(userId) {
            return this.deliveries.get(userId);
        }
    }, {
        key: "getConversationDelivery",
        value: function getConversationDelivery(conversation) {
            var result = new _map2.default();
            if (conversation.type === 0) {
                var recvTime = this.getUserDelivery(conversation.target);
                if (recvTime) {
                    result.set(conversation.target, recvTime);
                }
            } else if (conversation.type === 1) {
                var groupMembers = this.getGroupMemberIds(conversation.target);
                this.deliveries.forEach(function (v, k) {
                    if (groupMembers.indexOf(k) >= 0) {
                        result.set(k, v);
                    }
                });
            }
            return result;
        }
    }, {
        key: "updateReads",
        value: function updateReads(readEntries) {
            var _this10 = this;

            readEntries.forEach(function (r) {
                if (r.conversation.type === 0) {
                    r.conversation.target = r.fromUser;
                }
                var convKey = _this10.genConversationKey(r.conversation);
                var convReadEntries = _this10.readEntries.get(convKey);
                if (!convReadEntries) {
                    convReadEntries = new _map2.default();
                    _this10.readEntries.set(convKey, convReadEntries);
                }
                convReadEntries.set(r.fromUser, r.readTime);
            });
        }
    }, {
        key: "saveSyncReadEntry",
        value: function saveSyncReadEntry(type, target, line, readDt, senders) {
            var syncReadId = this.syncReadId++;
            var entry = new _syncReadEntry2.default();
            entry.id = syncReadId;
            entry.type = type;
            entry.target = target;
            entry.line = line;
            entry.senders = senders;
            this.syncReadEntries.set(syncReadId, entry);
            return syncReadId;
        }
    }, {
        key: "deleteSyncReadEntry",
        value: function deleteSyncReadEntry(syncId) {
            this.syncReadEntries.delete(syncId);
        }
    }, {
        key: "getSyncReadEntries",
        value: function getSyncReadEntries() {
            return this.syncReadEntries;
        }
    }, {
        key: "loadSyncReadEntry",
        value: function loadSyncReadEntry() {
            return this.syncReadEntries.values().next().value;
        }
    }, {
        key: "_genSyncReadEntryKey",
        value: function _genSyncReadEntryKey(entry) {
            return entry.type + '@' + entry.target + '@' + entry.line;
        }
    }, {
        key: "getConversationRead",
        value: function getConversationRead(conversation) {
            var convKey = this._genSyncReadEntryKey(conversation);
            return this.readEntries.get(convKey);
        }
    }, {
        key: "getUserSetting",
        value: function getUserSetting(scope, key) {
            var settings = this.settings.filter(function (setting) {
                return setting.scope === scope && setting.key === key;
            });

            if (settings.length > 0) {
                return settings[settings.length - 1];
            }
            return null;
        }
    }, {
        key: "getUserSettings",
        value: function getUserSettings(scope) {
            return this.settings.filter(function (setting) {
                return setting.scope === scope;
            });
        }
    }, {
        key: "getFriendRequestMaxDt",
        value: function getFriendRequestMaxDt() {
            var maxDt = _long2.default.ZERO;
            this.friendRequests.forEach(function (f) {
                maxDt = (0, _longUtil.gt)(f.timestamp, maxDt) ? f.timestamp : maxDt;
            });
            return maxDt;
        }
    }, {
        key: "insertOrReplaceFriendRequest",
        value: function insertOrReplaceFriendRequest(friendRequest) {
            var i = -1;
            for (var index = 0; index < this.friendRequests.length; index++) {
                var element = this.friendRequests[index];
                if (element.direction === friendRequest.direction && element.target === friendRequest.target) {
                    i = index;
                    break;
                }
            }
            if (i >= 0) {
                this.friendRequests[i] = friendRequest;
            } else {
                this.friendRequests.push(friendRequest);
            }
        }
    }, {
        key: "getIncommingFriendRequest",
        value: function getIncommingFriendRequest() {
            return this.friendRequests.filter(function (friendRequest) {
                return friendRequest.direction === 1;
            });
        }
    }, {
        key: "getOutgoingFriendRequest",
        value: function getOutgoingFriendRequest() {
            return this.friendRequests.filter(function (friendRequest) {
                return friendRequest.direction === 0;
            });
        }
    }, {
        key: "getOneFriendRequest",
        value: function getOneFriendRequest(userId, incoming) {
            var requests = this.friendRequests.filter(function (friendRequest) {
                return friendRequest.target === userId && friendRequest.direction === (incoming ? 1 : 0);
            });
            return requests.length > 0 ? requests[0] : null;
        }
    }, {
        key: "getUnreadFriendRequestCount",
        value: function getUnreadFriendRequestCount() {
            var count = 0;
            this.friendRequests.forEach(function (friendRequest) {
                if (friendRequest.direction === 1 && friendRequest.readStatus === 0) {
                    count++;
                }
            });
            return count;
        }
    }, {
        key: "clearUnreadFriendRequestStatus",
        value: function clearUnreadFriendRequestStatus() {
            var count = 0;
            this.friendRequests.forEach(function (friendRequest) {
                if (friendRequest.direction === 1 && friendRequest.readStatus === 0) {
                    friendRequest.readStatus = 1;
                    count++;
                }
            });
            return count;
        }
    }, {
        key: "updateFriendRequestStatus",
        value: function updateFriendRequestStatus(targetId, status) {
            this.friendRequests.forEach(function (friendRequest) {
                if (friendRequest.target === targetId && friendRequest.direction === 1) {
                    friendRequest.status = status;
                }
            });
        }
    }, {
        key: "getUnreadFriendRequestMaxDt",
        value: function getUnreadFriendRequestMaxDt() {
            var maxDt = _long2.default.ZERO;
            this.friendRequests.forEach(function (friendRequest) {
                if (friendRequest.direction === 1 && friendRequest.readStatus === 0) {
                    maxDt = (0, _longUtil.gt)(friendRequest.timestamp, maxDt) ? friendRequest.timestamp : maxDt;
                }
            });
            return maxDt;
        }
    }, {
        key: "getGroupMessageHead",
        value: function getGroupMessageHead(target, line) {
            var entry = this.groupHeadEntries.get(target + "-" + line);
            if (entry) {
                return entry.head;
            } else {
                return _long2.default.ZERO;
            }
        }
    }, {
        key: "setGroupMessageHead",
        value: function setGroupMessageHead(target, line, head) {
            var key = target + "-" + line;
            var entry = this.groupHeadEntries.get(key);
            if (!entry) {
                entry = new _groupHeadEntry2.default();
                this.groupHeadEntries.set(key, entry);
            }
            entry.target = target;
            entry.line = line;
            entry.head = head;
        }
    }, {
        key: "setGroupMessageServerHead",
        value: function setGroupMessageServerHead(target, line, serverHead) {
            var key = target + "-" + line;
            var entry = this.groupHeadEntries.get(key);
            if (!entry) {
                entry = new _groupHeadEntry2.default();
                this.groupHeadEntries.set(key, entry);
            }
            entry.target = target;
            entry.line = line;
            entry.serverHead = serverHead;
        }
    }, {
        key: "getGroupMessageHeads",
        value: function getGroupMessageHeads() {
            var heads = [];
            this.groupHeadEntries.forEach(function (value, key) {
                if ((0, _longUtil.gt)(value.serverHead, value.head)) {
                    heads.push(value);
                }
            });
            return heads;
        }
    }, {
        key: "log",
        value: function log(message) {
            if (!_config2.default.DISABLE_LOG) {
                var _console;

                for (var _len = arguments.length, optionalParams = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                    optionalParams[_key - 1] = arguments[_key];
                }

                (_console = console).log.apply(_console, [message].concat(optionalParams));
            }
        }
    }, {
        key: "_get",
        value: function _get(dataSource, type, key, targetClazz) {
            var value = dataSource.get(key);
            if (value) {
                return value;
            }
            if (_config2.default.ENABLE_INFO_PERSISTENCE) {
                var rkey = this.impl.userId + '-' + type + '-' + key;
                var _value = this.mp.getStorageSync(rkey);
                if (_value) {
                    _value = this.impl._Utf8ArrayToStr((0, _aes.AESDecrypt)(_value, '', false, false));
                    if (_value) {
                        return (0, _assign2.default)(new targetClazz(), JSON.parse(_value));
                    }
                }
            }
            return null;
        }
    }, {
        key: "_set",
        value: function _set(dataSource, type, key, value) {
            dataSource.set(key, value);
            if (_config2.default.ENABLE_INFO_PERSISTENCE) {
                if (!value) {
                    value = '';
                } else {
                    value = (0, _stringify2.default)(value);
                }
                var rkey = this.impl.userId + '-' + type + '-' + key;

                value = (0, _aes.AESEncrypt)(value, '', false);
                this.mp.setStorageSync(rkey, value);
            }
        }
    }, {
        key: "_delete",
        value: function _delete(dataSource, type, key) {
            dataSource.delete(key);
            if (_config2.default.ENABLE_INFO_PERSISTENCE) {
                var rkey = this.impl.userId + '-' + type + '-' + key;
                this.mp.removeStorageSync(rkey);
            }
        }
    }]);
    return WfcStore;
}(); /*
      * Copyright (c) 2020 WildFireChat. All rights reserved.
      */

exports.default = WfcStore;

/***/ }),
/* 370 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(371), __esModule: true };

/***/ }),
/* 371 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(54);
__webpack_require__(31);
__webpack_require__(46);
__webpack_require__(372);
__webpack_require__(373);
__webpack_require__(374);
__webpack_require__(375);
module.exports = __webpack_require__(0).Set;


/***/ }),
/* 372 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var strong = __webpack_require__(122);
var validate = __webpack_require__(87);
var SET = 'Set';

// 23.2 Set Objects
module.exports = __webpack_require__(123)(SET, function (get) {
  return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.2.3.1 Set.prototype.add(value)
  add: function add(value) {
    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
  }
}, strong);


/***/ }),
/* 373 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export = __webpack_require__(2);

$export($export.P + $export.R, 'Set', { toJSON: __webpack_require__(125)('Set') });


/***/ }),
/* 374 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-set.of
__webpack_require__(126)('Set');


/***/ }),
/* 375 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-set.from
__webpack_require__(127)('Set');


/***/ }),
/* 376 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__376__;

/***/ }),
/* 377 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _classCallCheck2 = __webpack_require__(60);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Copyright (c) 2020 WildFireChat. All rights reserved.
 */

var SyncReadEntry = function SyncReadEntry() {
    (0, _classCallCheck3.default)(this, SyncReadEntry);
};

exports.default = SyncReadEntry;

/***/ }),
/* 378 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__378__;

/***/ }),
/* 379 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__379__;

/***/ }),
/* 380 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _classCallCheck2 = __webpack_require__(60);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Copyright (c) 2022 WildFireChat. All rights reserved.
 */

var GroupHeadEntry = function GroupHeadEntry() {
    (0, _classCallCheck3.default)(this, GroupHeadEntry);
    this.line = 0;
    this.head = 0;
    this.serverHead = 0;
};

exports.default = GroupHeadEntry;

/***/ }),
/* 381 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__381__;

/***/ }),
/* 382 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__382__;

/***/ }),
/* 383 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Top level file is just a mixin of submodules & constants


var assign    = __webpack_require__(25).assign;

var deflate   = __webpack_require__(384);
var inflate   = __webpack_require__(387);
var constants = __webpack_require__(199);

var pako = {};

assign(pako, deflate, inflate, constants);

module.exports = pako;


/***/ }),
/* 384 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



var zlib_deflate = __webpack_require__(385);
var utils        = __webpack_require__(25);
var strings      = __webpack_require__(197);
var msg          = __webpack_require__(101);
var ZStream      = __webpack_require__(198);

var toString = Object.prototype.toString;

/* Public constants ==========================================================*/
/* ===========================================================================*/

var Z_NO_FLUSH      = 0;
var Z_FINISH        = 4;

var Z_OK            = 0;
var Z_STREAM_END    = 1;
var Z_SYNC_FLUSH    = 2;

var Z_DEFAULT_COMPRESSION = -1;

var Z_DEFAULT_STRATEGY    = 0;

var Z_DEFLATED  = 8;

/* ===========================================================================*/


/**
 * class Deflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[deflate]],
 * [[deflateRaw]] and [[gzip]].
 **/

/* internal
 * Deflate.chunks -> Array
 *
 * Chunks of output data, if [[Deflate#onData]] not overridden.
 **/

/**
 * Deflate.result -> Uint8Array|Array
 *
 * Compressed result, generated by default [[Deflate#onData]]
 * and [[Deflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you
 * push a chunk with explicit flush (call [[Deflate#push]] with
 * `Z_SYNC_FLUSH` param).
 **/

/**
 * Deflate.err -> Number
 *
 * Error code after deflate finished. 0 (Z_OK) on success.
 * You will not need it in real life, because deflate errors
 * are possible only on wrong options or bad `onData` / `onEnd`
 * custom handlers.
 **/

/**
 * Deflate.msg -> String
 *
 * Error message, if [[Deflate.err]] != 0
 **/


/**
 * new Deflate(options)
 * - options (Object): zlib deflate options.
 *
 * Creates new deflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `level`
 * - `windowBits`
 * - `memLevel`
 * - `strategy`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw deflate
 * - `gzip` (Boolean) - create gzip wrapper
 * - `to` (String) - if equal to 'string', then result will be "binary string"
 *    (each char code [0..255])
 * - `header` (Object) - custom header for gzip
 *   - `text` (Boolean) - true if compressed data believed to be text
 *   - `time` (Number) - modification time, unix timestamp
 *   - `os` (Number) - operation system code
 *   - `extra` (Array) - array of bytes with extra data (max 65536)
 *   - `name` (String) - file name (binary string)
 *   - `comment` (String) - comment (binary string)
 *   - `hcrc` (Boolean) - true if header crc should be added
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * var deflate = new pako.Deflate({ level: 3});
 *
 * deflate.push(chunk1, false);
 * deflate.push(chunk2, true);  // true -> last chunk
 *
 * if (deflate.err) { throw new Error(deflate.err); }
 *
 * console.log(deflate.result);
 * ```
 **/
function Deflate(options) {
  if (!(this instanceof Deflate)) return new Deflate(options);

  this.options = utils.assign({
    level: Z_DEFAULT_COMPRESSION,
    method: Z_DEFLATED,
    chunkSize: 16384,
    windowBits: 15,
    memLevel: 8,
    strategy: Z_DEFAULT_STRATEGY,
    to: ''
  }, options || {});

  var opt = this.options;

  if (opt.raw && (opt.windowBits > 0)) {
    opt.windowBits = -opt.windowBits;
  }

  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {
    opt.windowBits += 16;
  }

  this.err    = 0;      // error code, if happens (0 = Z_OK)
  this.msg    = '';     // error message
  this.ended  = false;  // used to avoid multiple onEnd() calls
  this.chunks = [];     // chunks of compressed data

  this.strm = new ZStream();
  this.strm.avail_out = 0;

  var status = zlib_deflate.deflateInit2(
    this.strm,
    opt.level,
    opt.method,
    opt.windowBits,
    opt.memLevel,
    opt.strategy
  );

  if (status !== Z_OK) {
    throw new Error(msg[status]);
  }

  if (opt.header) {
    zlib_deflate.deflateSetHeader(this.strm, opt.header);
  }

  if (opt.dictionary) {
    var dict;
    // Convert data if needed
    if (typeof opt.dictionary === 'string') {
      // If we need to compress text, change encoding to utf8.
      dict = strings.string2buf(opt.dictionary);
    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {
      dict = new Uint8Array(opt.dictionary);
    } else {
      dict = opt.dictionary;
    }

    status = zlib_deflate.deflateSetDictionary(this.strm, dict);

    if (status !== Z_OK) {
      throw new Error(msg[status]);
    }

    this._dict_set = true;
  }
}

/**
 * Deflate#push(data[, mode]) -> Boolean
 * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be
 *   converted to utf8 byte sequence.
 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.
 *
 * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with
 * new compressed chunks. Returns `true` on success. The last data block must have
 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
 * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you
 * can use mode Z_SYNC_FLUSH, keeping the compression context.
 *
 * On fail call [[Deflate#onEnd]] with error code and return false.
 *
 * We strongly recommend to use `Uint8Array` on input for best speed (output
 * array format is detected automatically). Also, don't skip last param and always
 * use the same type in your code (boolean or number). That will improve JS speed.
 *
 * For regular `Array`-s make sure all elements are [0..255].
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Deflate.prototype.push = function (data, mode) {
  var strm = this.strm;
  var chunkSize = this.options.chunkSize;
  var status, _mode;

  if (this.ended) { return false; }

  _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH : Z_NO_FLUSH);

  // Convert data if needed
  if (typeof data === 'string') {
    // If we need to compress text, change encoding to utf8.
    strm.input = strings.string2buf(data);
  } else if (toString.call(data) === '[object ArrayBuffer]') {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  do {
    if (strm.avail_out === 0) {
      strm.output = new utils.Buf8(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }
    status = zlib_deflate.deflate(strm, _mode);    /* no bad return value */

    if (status !== Z_STREAM_END && status !== Z_OK) {
      this.onEnd(status);
      this.ended = true;
      return false;
    }
    if (strm.avail_out === 0 || (strm.avail_in === 0 && (_mode === Z_FINISH || _mode === Z_SYNC_FLUSH))) {
      if (this.options.to === 'string') {
        this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));
      } else {
        this.onData(utils.shrinkBuf(strm.output, strm.next_out));
      }
    }
  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);

  // Finalize on the last chunk.
  if (_mode === Z_FINISH) {
    status = zlib_deflate.deflateEnd(this.strm);
    this.onEnd(status);
    this.ended = true;
    return status === Z_OK;
  }

  // callback interim results if Z_SYNC_FLUSH.
  if (_mode === Z_SYNC_FLUSH) {
    this.onEnd(Z_OK);
    strm.avail_out = 0;
    return true;
  }

  return true;
};


/**
 * Deflate#onData(chunk) -> Void
 * - chunk (Uint8Array|Array|String): output data. Type of array depends
 *   on js engine support. When string output requested, each chunk
 *   will be string.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Deflate.prototype.onData = function (chunk) {
  this.chunks.push(chunk);
};


/**
 * Deflate#onEnd(status) -> Void
 * - status (Number): deflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called once after you tell deflate that the input stream is
 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
 * or if an error happened. By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Deflate.prototype.onEnd = function (status) {
  // On success - join
  if (status === Z_OK) {
    if (this.options.to === 'string') {
      this.result = this.chunks.join('');
    } else {
      this.result = utils.flattenChunks(this.chunks);
    }
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};


/**
 * deflate(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * Compress `data` with deflate algorithm and `options`.
 *
 * Supported options are:
 *
 * - level
 * - windowBits
 * - memLevel
 * - strategy
 * - dictionary
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 * - `to` (String) - if equal to 'string', then result will be "binary string"
 *    (each char code [0..255])
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);
 *
 * console.log(pako.deflate(data));
 * ```
 **/
function deflate(input, options) {
  var deflator = new Deflate(options);

  deflator.push(input, true);

  // That will never happens, if you don't cheat with options :)
  if (deflator.err) { throw deflator.msg || msg[deflator.err]; }

  return deflator.result;
}


/**
 * deflateRaw(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/
function deflateRaw(input, options) {
  options = options || {};
  options.raw = true;
  return deflate(input, options);
}


/**
 * gzip(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but create gzip wrapper instead of
 * deflate one.
 **/
function gzip(input, options) {
  options = options || {};
  options.gzip = true;
  return deflate(input, options);
}


exports.Deflate = Deflate;
exports.deflate = deflate;
exports.deflateRaw = deflateRaw;
exports.gzip = gzip;


/***/ }),
/* 385 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var utils   = __webpack_require__(25);
var trees   = __webpack_require__(386);
var adler32 = __webpack_require__(195);
var crc32   = __webpack_require__(196);
var msg     = __webpack_require__(101);

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
var Z_NO_FLUSH      = 0;
var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
//var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
//var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
//var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;


/* compression levels */
//var Z_NO_COMPRESSION      = 0;
//var Z_BEST_SPEED          = 1;
//var Z_BEST_COMPRESSION    = 9;
var Z_DEFAULT_COMPRESSION = -1;


var Z_FILTERED            = 1;
var Z_HUFFMAN_ONLY        = 2;
var Z_RLE                 = 3;
var Z_FIXED               = 4;
var Z_DEFAULT_STRATEGY    = 0;

/* Possible values of the data_type field (though see inflate()) */
//var Z_BINARY              = 0;
//var Z_TEXT                = 1;
//var Z_ASCII               = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;


/* The deflate compression method */
var Z_DEFLATED  = 8;

/*============================================================================*/


var MAX_MEM_LEVEL = 9;
/* Maximum value for memLevel in deflateInit2 */
var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_MEM_LEVEL = 8;


var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */
var LITERALS      = 256;
/* number of literal bytes 0..255 */
var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */
var D_CODES       = 30;
/* number of distance codes */
var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */
var HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */
var MAX_BITS  = 15;
/* All codes must not exceed MAX_BITS bits */

var MIN_MATCH = 3;
var MAX_MATCH = 258;
var MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);

var PRESET_DICT = 0x20;

var INIT_STATE = 42;
var EXTRA_STATE = 69;
var NAME_STATE = 73;
var COMMENT_STATE = 91;
var HCRC_STATE = 103;
var BUSY_STATE = 113;
var FINISH_STATE = 666;

var BS_NEED_MORE      = 1; /* block not completed, need more input or more output */
var BS_BLOCK_DONE     = 2; /* block flush performed */
var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
var BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */

var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

function err(strm, errorCode) {
  strm.msg = msg[errorCode];
  return errorCode;
}

function rank(f) {
  return ((f) << 1) - ((f) > 4 ? 9 : 0);
}

function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }


/* =========================================================================
 * Flush as much pending output as possible. All deflate() output goes
 * through this function so some applications may wish to modify it
 * to avoid allocating a large strm->output buffer and copying into it.
 * (See also read_buf()).
 */
function flush_pending(strm) {
  var s = strm.state;

  //_tr_flush_bits(s);
  var len = s.pending;
  if (len > strm.avail_out) {
    len = strm.avail_out;
  }
  if (len === 0) { return; }

  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
  strm.next_out += len;
  s.pending_out += len;
  strm.total_out += len;
  strm.avail_out -= len;
  s.pending -= len;
  if (s.pending === 0) {
    s.pending_out = 0;
  }
}


function flush_block_only(s, last) {
  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
  s.block_start = s.strstart;
  flush_pending(s.strm);
}


function put_byte(s, b) {
  s.pending_buf[s.pending++] = b;
}


/* =========================================================================
 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
 * IN assertion: the stream state is correct and there is enough room in
 * pending_buf.
 */
function putShortMSB(s, b) {
//  put_byte(s, (Byte)(b >> 8));
//  put_byte(s, (Byte)(b & 0xff));
  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
  s.pending_buf[s.pending++] = b & 0xff;
}


/* ===========================================================================
 * Read a new buffer from the current input stream, update the adler32
 * and total number of bytes read.  All deflate() input goes through
 * this function so some applications may wish to modify it to avoid
 * allocating a large strm->input buffer and copying from it.
 * (See also flush_pending()).
 */
function read_buf(strm, buf, start, size) {
  var len = strm.avail_in;

  if (len > size) { len = size; }
  if (len === 0) { return 0; }

  strm.avail_in -= len;

  // zmemcpy(buf, strm->next_in, len);
  utils.arraySet(buf, strm.input, strm.next_in, len, start);
  if (strm.state.wrap === 1) {
    strm.adler = adler32(strm.adler, buf, len, start);
  }

  else if (strm.state.wrap === 2) {
    strm.adler = crc32(strm.adler, buf, len, start);
  }

  strm.next_in += len;
  strm.total_in += len;

  return len;
}


/* ===========================================================================
 * Set match_start to the longest match starting at the given string and
 * return its length. Matches shorter or equal to prev_length are discarded,
 * in which case the result is equal to prev_length and match_start is
 * garbage.
 * IN assertions: cur_match is the head of the hash chain for the current
 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
 * OUT assertion: the match length is not greater than s->lookahead.
 */
function longest_match(s, cur_match) {
  var chain_length = s.max_chain_length;      /* max hash chain length */
  var scan = s.strstart; /* current string */
  var match;                       /* matched string */
  var len;                           /* length of current match */
  var best_len = s.prev_length;              /* best match length so far */
  var nice_match = s.nice_match;             /* stop if match long enough */
  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;

  var _win = s.window; // shortcut

  var wmask = s.w_mask;
  var prev  = s.prev;

  /* Stop when cur_match becomes <= limit. To simplify the code,
   * we prevent matches with the string of window index 0.
   */

  var strend = s.strstart + MAX_MATCH;
  var scan_end1  = _win[scan + best_len - 1];
  var scan_end   = _win[scan + best_len];

  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
   * It is easy to get rid of this optimization if necessary.
   */
  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

  /* Do not waste too much time if we already have a good match: */
  if (s.prev_length >= s.good_match) {
    chain_length >>= 2;
  }
  /* Do not look for matches beyond the end of the input. This is necessary
   * to make deflate deterministic.
   */
  if (nice_match > s.lookahead) { nice_match = s.lookahead; }

  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

  do {
    // Assert(cur_match < s->strstart, "no future");
    match = cur_match;

    /* Skip to next match if the match length cannot increase
     * or if the match length is less than 2.  Note that the checks below
     * for insufficient lookahead only occur occasionally for performance
     * reasons.  Therefore uninitialized memory will be accessed, and
     * conditional jumps will be made that depend on those values.
     * However the length of the match is limited to the lookahead, so
     * the output of deflate is not affected by the uninitialized values.
     */

    if (_win[match + best_len]     !== scan_end  ||
        _win[match + best_len - 1] !== scan_end1 ||
        _win[match]                !== _win[scan] ||
        _win[++match]              !== _win[scan + 1]) {
      continue;
    }

    /* The check at best_len-1 can be removed because it will be made
     * again later. (This heuristic is not always a win.)
     * It is not necessary to compare scan[2] and match[2] since they
     * are always equal when the other bytes match, given that
     * the hash keys are equal and that HASH_BITS >= 8.
     */
    scan += 2;
    match++;
    // Assert(*scan == *match, "match[2]?");

    /* We check for insufficient lookahead only every 8th comparison;
     * the 256th check will be made at strstart+258.
     */
    do {
      /*jshint noempty:false*/
    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             scan < strend);

    // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

    len = MAX_MATCH - (strend - scan);
    scan = strend - MAX_MATCH;

    if (len > best_len) {
      s.match_start = cur_match;
      best_len = len;
      if (len >= nice_match) {
        break;
      }
      scan_end1  = _win[scan + best_len - 1];
      scan_end   = _win[scan + best_len];
    }
  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

  if (best_len <= s.lookahead) {
    return best_len;
  }
  return s.lookahead;
}


/* ===========================================================================
 * Fill the window when the lookahead becomes insufficient.
 * Updates strstart and lookahead.
 *
 * IN assertion: lookahead < MIN_LOOKAHEAD
 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
 *    At least one byte has been read, or avail_in == 0; reads are
 *    performed for at least two bytes (required for the zip translate_eol
 *    option -- not supported here).
 */
function fill_window(s) {
  var _w_size = s.w_size;
  var p, n, m, more, str;

  //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

  do {
    more = s.window_size - s.lookahead - s.strstart;

    // JS ints have 32 bit, block below not needed
    /* Deal with !@#$% 64K limit: */
    //if (sizeof(int) <= 2) {
    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
    //        more = wsize;
    //
    //  } else if (more == (unsigned)(-1)) {
    //        /* Very unlikely, but possible on 16 bit machine if
    //         * strstart == 0 && lookahead == 1 (input done a byte at time)
    //         */
    //        more--;
    //    }
    //}


    /* If the window is almost full and there is insufficient lookahead,
     * move the upper half to the lower one to make room in the upper half.
     */
    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);
      s.match_start -= _w_size;
      s.strstart -= _w_size;
      /* we now have strstart >= MAX_DIST */
      s.block_start -= _w_size;

      /* Slide the hash table (could be avoided with 32 bit values
       at the expense of memory usage). We slide even when level == 0
       to keep the hash table consistent if we switch back to level > 0
       later. (Using level 0 permanently is not an optimal usage of
       zlib, so we don't care about this pathological case.)
       */

      n = s.hash_size;
      p = n;
      do {
        m = s.head[--p];
        s.head[p] = (m >= _w_size ? m - _w_size : 0);
      } while (--n);

      n = _w_size;
      p = n;
      do {
        m = s.prev[--p];
        s.prev[p] = (m >= _w_size ? m - _w_size : 0);
        /* If n is not on any hash chain, prev[n] is garbage but
         * its value will never be used.
         */
      } while (--n);

      more += _w_size;
    }
    if (s.strm.avail_in === 0) {
      break;
    }

    /* If there was no sliding:
     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
     *    more == window_size - lookahead - strstart
     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
     * => more >= window_size - 2*WSIZE + 2
     * In the BIG_MEM or MMAP case (not yet supported),
     *   window_size == input_size + MIN_LOOKAHEAD  &&
     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
     * Otherwise, window_size == 2*WSIZE so more >= 2.
     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
     */
    //Assert(more >= 2, "more < 2");
    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
    s.lookahead += n;

    /* Initialize the hash value now that we have some input: */
    if (s.lookahead + s.insert >= MIN_MATCH) {
      str = s.strstart - s.insert;
      s.ins_h = s.window[str];

      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;
//#if MIN_MATCH != 3
//        Call update_hash() MIN_MATCH-3 more times
//#endif
      while (s.insert) {
        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

        s.prev[str & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = str;
        str++;
        s.insert--;
        if (s.lookahead + s.insert < MIN_MATCH) {
          break;
        }
      }
    }
    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
     * but this is not important since only literal bytes will be emitted.
     */

  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

  /* If the WIN_INIT bytes after the end of the current data have never been
   * written, then zero those bytes in order to avoid memory check reports of
   * the use of uninitialized (or uninitialised as Julian writes) bytes by
   * the longest match routines.  Update the high water mark for the next
   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
   */
//  if (s.high_water < s.window_size) {
//    var curr = s.strstart + s.lookahead;
//    var init = 0;
//
//    if (s.high_water < curr) {
//      /* Previous high water mark below current data -- zero WIN_INIT
//       * bytes or up to end of window, whichever is less.
//       */
//      init = s.window_size - curr;
//      if (init > WIN_INIT)
//        init = WIN_INIT;
//      zmemzero(s->window + curr, (unsigned)init);
//      s->high_water = curr + init;
//    }
//    else if (s->high_water < (ulg)curr + WIN_INIT) {
//      /* High water mark at or above current data, but below current data
//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
//       * to end of window, whichever is less.
//       */
//      init = (ulg)curr + WIN_INIT - s->high_water;
//      if (init > s->window_size - s->high_water)
//        init = s->window_size - s->high_water;
//      zmemzero(s->window + s->high_water, (unsigned)init);
//      s->high_water += init;
//    }
//  }
//
//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
//    "not enough room for search");
}

/* ===========================================================================
 * Copy without compression as much as possible from the input stream, return
 * the current block state.
 * This function does not insert new strings in the dictionary since
 * uncompressible data is probably not useful. This function is used
 * only for the level=0 compression option.
 * NOTE: this function should be optimized to avoid extra copying from
 * window to pending_buf.
 */
function deflate_stored(s, flush) {
  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
   * to pending_buf_size, and each stored block has a 5 byte header:
   */
  var max_block_size = 0xffff;

  if (max_block_size > s.pending_buf_size - 5) {
    max_block_size = s.pending_buf_size - 5;
  }

  /* Copy as much as possible from input to output: */
  for (;;) {
    /* Fill the window as much as possible: */
    if (s.lookahead <= 1) {

      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
      //  s->block_start >= (long)s->w_size, "slide too late");
//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
//        s.block_start >= s.w_size)) {
//        throw  new Error("slide too late");
//      }

      fill_window(s);
      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }

      if (s.lookahead === 0) {
        break;
      }
      /* flush the current block */
    }
    //Assert(s->block_start >= 0L, "block gone");
//    if (s.block_start < 0) throw new Error("block gone");

    s.strstart += s.lookahead;
    s.lookahead = 0;

    /* Emit a stored block if pending_buf will be full: */
    var max_start = s.block_start + max_block_size;

    if (s.strstart === 0 || s.strstart >= max_start) {
      /* strstart == 0 is possible when wraparound on 16-bit machine */
      s.lookahead = s.strstart - max_start;
      s.strstart = max_start;
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/


    }
    /* Flush if we may have to slide, otherwise block_start may become
     * negative and the data will be gone:
     */
    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }

  s.insert = 0;

  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }

  if (s.strstart > s.block_start) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_NEED_MORE;
}

/* ===========================================================================
 * Compress as much as possible from the input stream, return the current
 * block state.
 * This function does not perform lazy evaluation of matches and inserts
 * new strings in the dictionary only for unmatched strings or for short
 * matches. It is used only for the fast compression options.
 */
function deflate_fast(s, flush) {
  var hash_head;        /* head of the hash chain */
  var bflush;           /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break; /* flush the current block */
      }
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     * At this point we have always match_length < MIN_MATCH
     */
    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */
    }
    if (s.match_length >= MIN_MATCH) {
      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

      /*** _tr_tally_dist(s, s.strstart - s.match_start,
                     s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;

      /* Insert new strings in the hash table only if the match length
       * is not too large. This saves time but degrades compression.
       */
      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
        s.match_length--; /* string at strstart already in table */
        do {
          s.strstart++;
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
          /* strstart never exceeds WSIZE-MAX_MATCH, so there are
           * always MIN_MATCH bytes ahead.
           */
        } while (--s.match_length !== 0);
        s.strstart++;
      } else
      {
        s.strstart += s.match_length;
        s.match_length = 0;
        s.ins_h = s.window[s.strstart];
        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;

//#if MIN_MATCH != 3
//                Call UPDATE_HASH() MIN_MATCH-3 more times
//#endif
        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
         * matter since it will be recomputed at next deflate call.
         */
      }
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s.window[s.strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * Same as above, but achieves better compression. We use a lazy
 * evaluation for matches: a match is finally adopted only if there is
 * no better match at the next window position.
 */
function deflate_slow(s, flush) {
  var hash_head;          /* head of hash chain */
  var bflush;              /* set if current block must be flushed */

  var max_insert;

  /* Process the input block. */
  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     */
    s.prev_length = s.match_length;
    s.prev_match = s.match_start;
    s.match_length = MIN_MATCH - 1;

    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */

      if (s.match_length <= 5 &&
         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {

        /* If prev_match is also MIN_MATCH, match_start is garbage
         * but we will ignore the current match anyway.
         */
        s.match_length = MIN_MATCH - 1;
      }
    }
    /* If there was a match at the previous step and the current
     * match is not better, output the previous match:
     */
    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
      max_insert = s.strstart + s.lookahead - MIN_MATCH;
      /* Do not insert strings in hash table beyond this. */

      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                     s.prev_length - MIN_MATCH, bflush);***/
      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
      /* Insert in hash table all strings up to the end of the match.
       * strstart-1 and strstart are already inserted. If there is not
       * enough lookahead, the last two strings are not inserted in
       * the hash table.
       */
      s.lookahead -= s.prev_length - 1;
      s.prev_length -= 2;
      do {
        if (++s.strstart <= max_insert) {
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
        }
      } while (--s.prev_length !== 0);
      s.match_available = 0;
      s.match_length = MIN_MATCH - 1;
      s.strstart++;

      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }

    } else if (s.match_available) {
      /* If there was no match at the previous position, output a
       * single literal. If there was a match but the current match
       * is longer, truncate the previous match to a single literal.
       */
      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

      if (bflush) {
        /*** FLUSH_BLOCK_ONLY(s, 0) ***/
        flush_block_only(s, false);
        /***/
      }
      s.strstart++;
      s.lookahead--;
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    } else {
      /* There is no previous match to compare with, wait for
       * the next step to decide.
       */
      s.match_available = 1;
      s.strstart++;
      s.lookahead--;
    }
  }
  //Assert (flush != Z_NO_FLUSH, "no flush?");
  if (s.match_available) {
    //Tracevv((stderr,"%c", s->window[s->strstart-1]));
    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

    s.match_available = 0;
  }
  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_BLOCK_DONE;
}


/* ===========================================================================
 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
 * deflate switches away from Z_RLE.)
 */
function deflate_rle(s, flush) {
  var bflush;            /* set if current block must be flushed */
  var prev;              /* byte at distance one to match */
  var scan, strend;      /* scan goes up to strend for length of run */

  var _win = s.window;

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the longest run, plus one for the unrolled loop.
     */
    if (s.lookahead <= MAX_MATCH) {
      fill_window(s);
      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* See how many times the previous byte repeats */
    s.match_length = 0;
    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
      scan = s.strstart - 1;
      prev = _win[scan];
      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
        strend = s.strstart + MAX_MATCH;
        do {
          /*jshint noempty:false*/
        } while (prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 scan < strend);
        s.match_length = MAX_MATCH - (strend - scan);
        if (s.match_length > s.lookahead) {
          s.match_length = s.lookahead;
        }
      }
      //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
    }

    /* Emit match if have run of MIN_MATCH or longer, else emit literal */
    if (s.match_length >= MIN_MATCH) {
      //check_match(s, s.strstart, s.strstart - 1, s.match_length);

      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;
      s.strstart += s.match_length;
      s.match_length = 0;
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s->window[s->strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
 * (It will be regenerated if this run of deflate switches away from Huffman.)
 */
function deflate_huff(s, flush) {
  var bflush;             /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we have a literal to write. */
    if (s.lookahead === 0) {
      fill_window(s);
      if (s.lookahead === 0) {
        if (flush === Z_NO_FLUSH) {
          return BS_NEED_MORE;
        }
        break;      /* flush the current block */
      }
    }

    /* Output a literal byte */
    s.match_length = 0;
    //Tracevv((stderr,"%c", s->window[s->strstart]));
    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
    s.lookahead--;
    s.strstart++;
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* Values for max_lazy_match, good_match and max_chain_length, depending on
 * the desired pack level (0..9). The values given below have been tuned to
 * exclude worst case performance for pathological files. Better values may be
 * found for specific files.
 */
function Config(good_length, max_lazy, nice_length, max_chain, func) {
  this.good_length = good_length;
  this.max_lazy = max_lazy;
  this.nice_length = nice_length;
  this.max_chain = max_chain;
  this.func = func;
}

var configuration_table;

configuration_table = [
  /*      good lazy nice chain */
  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */

  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
];


/* ===========================================================================
 * Initialize the "longest match" routines for a new zlib stream
 */
function lm_init(s) {
  s.window_size = 2 * s.w_size;

  /*** CLEAR_HASH(s); ***/
  zero(s.head); // Fill with NIL (= 0);

  /* Set the default configuration parameters:
   */
  s.max_lazy_match = configuration_table[s.level].max_lazy;
  s.good_match = configuration_table[s.level].good_length;
  s.nice_match = configuration_table[s.level].nice_length;
  s.max_chain_length = configuration_table[s.level].max_chain;

  s.strstart = 0;
  s.block_start = 0;
  s.lookahead = 0;
  s.insert = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  s.ins_h = 0;
}


function DeflateState() {
  this.strm = null;            /* pointer back to this zlib stream */
  this.status = 0;            /* as the name implies */
  this.pending_buf = null;      /* output still pending */
  this.pending_buf_size = 0;  /* size of pending_buf */
  this.pending_out = 0;       /* next pending byte to output to the stream */
  this.pending = 0;           /* nb of bytes in the pending buffer */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.gzhead = null;         /* gzip header information to write */
  this.gzindex = 0;           /* where in extra, name, or comment */
  this.method = Z_DEFLATED; /* can only be DEFLATED */
  this.last_flush = -1;   /* value of flush param for previous deflate call */

  this.w_size = 0;  /* LZ77 window size (32K by default) */
  this.w_bits = 0;  /* log2(w_size)  (8..16) */
  this.w_mask = 0;  /* w_size - 1 */

  this.window = null;
  /* Sliding window. Input bytes are read into the second half of the window,
   * and move to the first half later to keep a dictionary of at least wSize
   * bytes. With this organization, matches are limited to a distance of
   * wSize-MAX_MATCH bytes, but this ensures that IO is always
   * performed with a length multiple of the block size.
   */

  this.window_size = 0;
  /* Actual size of window: 2*wSize, except when the user input buffer
   * is directly used as sliding window.
   */

  this.prev = null;
  /* Link to older string with same hash index. To limit the size of this
   * array to 64K, this link is maintained only for the last 32K strings.
   * An index in this array is thus a window index modulo 32K.
   */

  this.head = null;   /* Heads of the hash chains or NIL. */

  this.ins_h = 0;       /* hash index of string to be inserted */
  this.hash_size = 0;   /* number of elements in hash table */
  this.hash_bits = 0;   /* log2(hash_size) */
  this.hash_mask = 0;   /* hash_size-1 */

  this.hash_shift = 0;
  /* Number of bits by which ins_h must be shifted at each input
   * step. It must be such that after MIN_MATCH steps, the oldest
   * byte no longer takes part in the hash key, that is:
   *   hash_shift * MIN_MATCH >= hash_bits
   */

  this.block_start = 0;
  /* Window position at the beginning of the current output block. Gets
   * negative when the window is moved backwards.
   */

  this.match_length = 0;      /* length of best match */
  this.prev_match = 0;        /* previous match */
  this.match_available = 0;   /* set if previous match exists */
  this.strstart = 0;          /* start of string to insert */
  this.match_start = 0;       /* start of matching string */
  this.lookahead = 0;         /* number of valid bytes ahead in window */

  this.prev_length = 0;
  /* Length of the best match at previous step. Matches not greater than this
   * are discarded. This is used in the lazy match evaluation.
   */

  this.max_chain_length = 0;
  /* To speed up deflation, hash chains are never searched beyond this
   * length.  A higher limit improves compression ratio but degrades the
   * speed.
   */

  this.max_lazy_match = 0;
  /* Attempt to find a better match only when the current match is strictly
   * smaller than this value. This mechanism is used only for compression
   * levels >= 4.
   */
  // That's alias to max_lazy_match, don't use directly
  //this.max_insert_length = 0;
  /* Insert new strings in the hash table only if the match length is not
   * greater than this length. This saves time but degrades compression.
   * max_insert_length is used only for compression levels <= 3.
   */

  this.level = 0;     /* compression level (1..9) */
  this.strategy = 0;  /* favor or force Huffman coding*/

  this.good_match = 0;
  /* Use a faster search when the previous match is longer than this */

  this.nice_match = 0; /* Stop searching when current match exceeds this */

              /* used by trees.c: */

  /* Didn't use ct_data typedef below to suppress compiler warning */

  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

  // Use flat array of DOUBLE size, with interleaved fata,
  // because JS does not support effective
  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);
  this.dyn_dtree  = new utils.Buf16((2 * D_CODES + 1) * 2);
  this.bl_tree    = new utils.Buf16((2 * BL_CODES + 1) * 2);
  zero(this.dyn_ltree);
  zero(this.dyn_dtree);
  zero(this.bl_tree);

  this.l_desc   = null;         /* desc. for literal tree */
  this.d_desc   = null;         /* desc. for distance tree */
  this.bl_desc  = null;         /* desc. for bit length tree */

  //ush bl_count[MAX_BITS+1];
  this.bl_count = new utils.Buf16(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
  this.heap = new utils.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */
  zero(this.heap);

  this.heap_len = 0;               /* number of elements in the heap */
  this.heap_max = 0;               /* element of largest frequency */
  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
   * The same heap array is used to build all trees.
   */

  this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
  zero(this.depth);
  /* Depth of each subtree used as tie breaker for trees of equal frequency
   */

  this.l_buf = 0;          /* buffer index for literals or lengths */

  this.lit_bufsize = 0;
  /* Size of match buffer for literals/lengths.  There are 4 reasons for
   * limiting lit_bufsize to 64K:
   *   - frequencies can be kept in 16 bit counters
   *   - if compression is not successful for the first block, all input
   *     data is still in the window so we can still emit a stored block even
   *     when input comes from standard input.  (This can also be done for
   *     all blocks if lit_bufsize is not greater than 32K.)
   *   - if compression is not successful for a file smaller than 64K, we can
   *     even emit a stored file instead of a stored block (saving 5 bytes).
   *     This is applicable only for zip (not gzip or zlib).
   *   - creating new Huffman trees less frequently may not provide fast
   *     adaptation to changes in the input data statistics. (Take for
   *     example a binary file with poorly compressible code followed by
   *     a highly compressible string table.) Smaller buffer sizes give
   *     fast adaptation but have of course the overhead of transmitting
   *     trees more frequently.
   *   - I can't count above 4
   */

  this.last_lit = 0;      /* running index in l_buf */

  this.d_buf = 0;
  /* Buffer index for distances. To simplify the code, d_buf and l_buf have
   * the same number of elements. To use different lengths, an extra flag
   * array would be necessary.
   */

  this.opt_len = 0;       /* bit length of current block with optimal trees */
  this.static_len = 0;    /* bit length of current block with static trees */
  this.matches = 0;       /* number of string matches in current block */
  this.insert = 0;        /* bytes at end of window left to insert */


  this.bi_buf = 0;
  /* Output buffer. bits are inserted starting at the bottom (least
   * significant bits).
   */
  this.bi_valid = 0;
  /* Number of valid bits in bi_buf.  All bits above the last valid bit
   * are always zero.
   */

  // Used for window memory init. We safely ignore it for JS. That makes
  // sense only for pointers and memory check tools.
  //this.high_water = 0;
  /* High water mark offset in window for initialized bytes -- bytes above
   * this are set to zero in order to avoid memory check warnings when
   * longest match routines access bytes past the input.  This is then
   * updated to the new high water mark.
   */
}


function deflateResetKeep(strm) {
  var s;

  if (!strm || !strm.state) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.total_in = strm.total_out = 0;
  strm.data_type = Z_UNKNOWN;

  s = strm.state;
  s.pending = 0;
  s.pending_out = 0;

  if (s.wrap < 0) {
    s.wrap = -s.wrap;
    /* was made negative by deflate(..., Z_FINISH); */
  }
  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
  strm.adler = (s.wrap === 2) ?
    0  // crc32(0, Z_NULL, 0)
  :
    1; // adler32(0, Z_NULL, 0)
  s.last_flush = Z_NO_FLUSH;
  trees._tr_init(s);
  return Z_OK;
}


function deflateReset(strm) {
  var ret = deflateResetKeep(strm);
  if (ret === Z_OK) {
    lm_init(strm.state);
  }
  return ret;
}


function deflateSetHeader(strm, head) {
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }
  strm.state.gzhead = head;
  return Z_OK;
}


function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
  if (!strm) { // === Z_NULL
    return Z_STREAM_ERROR;
  }
  var wrap = 1;

  if (level === Z_DEFAULT_COMPRESSION) {
    level = 6;
  }

  if (windowBits < 0) { /* suppress zlib wrapper */
    wrap = 0;
    windowBits = -windowBits;
  }

  else if (windowBits > 15) {
    wrap = 2;           /* write gzip wrapper instead */
    windowBits -= 16;
  }


  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||
    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
    strategy < 0 || strategy > Z_FIXED) {
    return err(strm, Z_STREAM_ERROR);
  }


  if (windowBits === 8) {
    windowBits = 9;
  }
  /* until 256-byte window bug fixed */

  var s = new DeflateState();

  strm.state = s;
  s.strm = strm;

  s.wrap = wrap;
  s.gzhead = null;
  s.w_bits = windowBits;
  s.w_size = 1 << s.w_bits;
  s.w_mask = s.w_size - 1;

  s.hash_bits = memLevel + 7;
  s.hash_size = 1 << s.hash_bits;
  s.hash_mask = s.hash_size - 1;
  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

  s.window = new utils.Buf8(s.w_size * 2);
  s.head = new utils.Buf16(s.hash_size);
  s.prev = new utils.Buf16(s.w_size);

  // Don't need mem init magic for JS.
  //s.high_water = 0;  /* nothing written to s->window yet */

  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

  s.pending_buf_size = s.lit_bufsize * 4;

  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
  //s->pending_buf = (uchf *) overlay;
  s.pending_buf = new utils.Buf8(s.pending_buf_size);

  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
  s.d_buf = 1 * s.lit_bufsize;

  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
  s.l_buf = (1 + 2) * s.lit_bufsize;

  s.level = level;
  s.strategy = strategy;
  s.method = method;

  return deflateReset(strm);
}

function deflateInit(strm, level) {
  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
}


function deflate(strm, flush) {
  var old_flush, s;
  var beg, val; // for gzip header write only

  if (!strm || !strm.state ||
    flush > Z_BLOCK || flush < 0) {
    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
  }

  s = strm.state;

  if (!strm.output ||
      (!strm.input && strm.avail_in !== 0) ||
      (s.status === FINISH_STATE && flush !== Z_FINISH)) {
    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);
  }

  s.strm = strm; /* just in case */
  old_flush = s.last_flush;
  s.last_flush = flush;

  /* Write the header */
  if (s.status === INIT_STATE) {

    if (s.wrap === 2) { // GZIP header
      strm.adler = 0;  //crc32(0L, Z_NULL, 0);
      put_byte(s, 31);
      put_byte(s, 139);
      put_byte(s, 8);
      if (!s.gzhead) { // s->gzhead == Z_NULL
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, OS_CODE);
        s.status = BUSY_STATE;
      }
      else {
        put_byte(s, (s.gzhead.text ? 1 : 0) +
                    (s.gzhead.hcrc ? 2 : 0) +
                    (!s.gzhead.extra ? 0 : 4) +
                    (!s.gzhead.name ? 0 : 8) +
                    (!s.gzhead.comment ? 0 : 16)
        );
        put_byte(s, s.gzhead.time & 0xff);
        put_byte(s, (s.gzhead.time >> 8) & 0xff);
        put_byte(s, (s.gzhead.time >> 16) & 0xff);
        put_byte(s, (s.gzhead.time >> 24) & 0xff);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, s.gzhead.os & 0xff);
        if (s.gzhead.extra && s.gzhead.extra.length) {
          put_byte(s, s.gzhead.extra.length & 0xff);
          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
        }
        if (s.gzhead.hcrc) {
          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
        }
        s.gzindex = 0;
        s.status = EXTRA_STATE;
      }
    }
    else // DEFLATE header
    {
      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;
      var level_flags = -1;

      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
        level_flags = 0;
      } else if (s.level < 6) {
        level_flags = 1;
      } else if (s.level === 6) {
        level_flags = 2;
      } else {
        level_flags = 3;
      }
      header |= (level_flags << 6);
      if (s.strstart !== 0) { header |= PRESET_DICT; }
      header += 31 - (header % 31);

      s.status = BUSY_STATE;
      putShortMSB(s, header);

      /* Save the adler32 of the preset dictionary: */
      if (s.strstart !== 0) {
        putShortMSB(s, strm.adler >>> 16);
        putShortMSB(s, strm.adler & 0xffff);
      }
      strm.adler = 1; // adler32(0L, Z_NULL, 0);
    }
  }

//#ifdef GZIP
  if (s.status === EXTRA_STATE) {
    if (s.gzhead.extra/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */

      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            break;
          }
        }
        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
        s.gzindex++;
      }
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (s.gzindex === s.gzhead.extra.length) {
        s.gzindex = 0;
        s.status = NAME_STATE;
      }
    }
    else {
      s.status = NAME_STATE;
    }
  }
  if (s.status === NAME_STATE) {
    if (s.gzhead.name/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.name.length) {
          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.gzindex = 0;
        s.status = COMMENT_STATE;
      }
    }
    else {
      s.status = COMMENT_STATE;
    }
  }
  if (s.status === COMMENT_STATE) {
    if (s.gzhead.comment/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.comment.length) {
          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.status = HCRC_STATE;
      }
    }
    else {
      s.status = HCRC_STATE;
    }
  }
  if (s.status === HCRC_STATE) {
    if (s.gzhead.hcrc) {
      if (s.pending + 2 > s.pending_buf_size) {
        flush_pending(strm);
      }
      if (s.pending + 2 <= s.pending_buf_size) {
        put_byte(s, strm.adler & 0xff);
        put_byte(s, (strm.adler >> 8) & 0xff);
        strm.adler = 0; //crc32(0L, Z_NULL, 0);
        s.status = BUSY_STATE;
      }
    }
    else {
      s.status = BUSY_STATE;
    }
  }
//#endif

  /* Flush as much pending output as possible */
  if (s.pending !== 0) {
    flush_pending(strm);
    if (strm.avail_out === 0) {
      /* Since avail_out is 0, deflate will be called again with
       * more output space, but possibly with both pending and
       * avail_in equal to zero. There won't be anything to do,
       * but this is not an error situation so make sure we
       * return OK instead of BUF_ERROR at next call of deflate:
       */
      s.last_flush = -1;
      return Z_OK;
    }

    /* Make sure there is something to do and avoid duplicate consecutive
     * flushes. For repeated and useless calls with Z_FINISH, we keep
     * returning Z_STREAM_END instead of Z_BUF_ERROR.
     */
  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
    flush !== Z_FINISH) {
    return err(strm, Z_BUF_ERROR);
  }

  /* User must not provide more input after the first FINISH: */
  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
    return err(strm, Z_BUF_ERROR);
  }

  /* Start a new block or continue the current one.
   */
  if (strm.avail_in !== 0 || s.lookahead !== 0 ||
    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {
    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :
      (s.strategy === Z_RLE ? deflate_rle(s, flush) :
        configuration_table[s.level].func(s, flush));

    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
      s.status = FINISH_STATE;
    }
    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
      if (strm.avail_out === 0) {
        s.last_flush = -1;
        /* avoid BUF_ERROR next call, see above */
      }
      return Z_OK;
      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
       * of deflate should use the same flush parameter to make sure
       * that the flush is complete. So we don't have to output an
       * empty block here, this will be done at next call. This also
       * ensures that for a very small output buffer, we emit at most
       * one empty block.
       */
    }
    if (bstate === BS_BLOCK_DONE) {
      if (flush === Z_PARTIAL_FLUSH) {
        trees._tr_align(s);
      }
      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

        trees._tr_stored_block(s, 0, 0, false);
        /* For a full flush, this empty block will be recognized
         * as a special marker by inflate_sync().
         */
        if (flush === Z_FULL_FLUSH) {
          /*** CLEAR_HASH(s); ***/             /* forget history */
          zero(s.head); // Fill with NIL (= 0);

          if (s.lookahead === 0) {
            s.strstart = 0;
            s.block_start = 0;
            s.insert = 0;
          }
        }
      }
      flush_pending(strm);
      if (strm.avail_out === 0) {
        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
        return Z_OK;
      }
    }
  }
  //Assert(strm->avail_out > 0, "bug2");
  //if (strm.avail_out <= 0) { throw new Error("bug2");}

  if (flush !== Z_FINISH) { return Z_OK; }
  if (s.wrap <= 0) { return Z_STREAM_END; }

  /* Write the trailer */
  if (s.wrap === 2) {
    put_byte(s, strm.adler & 0xff);
    put_byte(s, (strm.adler >> 8) & 0xff);
    put_byte(s, (strm.adler >> 16) & 0xff);
    put_byte(s, (strm.adler >> 24) & 0xff);
    put_byte(s, strm.total_in & 0xff);
    put_byte(s, (strm.total_in >> 8) & 0xff);
    put_byte(s, (strm.total_in >> 16) & 0xff);
    put_byte(s, (strm.total_in >> 24) & 0xff);
  }
  else
  {
    putShortMSB(s, strm.adler >>> 16);
    putShortMSB(s, strm.adler & 0xffff);
  }

  flush_pending(strm);
  /* If avail_out is zero, the application will call deflate again
   * to flush the rest.
   */
  if (s.wrap > 0) { s.wrap = -s.wrap; }
  /* write the trailer only once! */
  return s.pending !== 0 ? Z_OK : Z_STREAM_END;
}

function deflateEnd(strm) {
  var status;

  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }

  status = strm.state.status;
  if (status !== INIT_STATE &&
    status !== EXTRA_STATE &&
    status !== NAME_STATE &&
    status !== COMMENT_STATE &&
    status !== HCRC_STATE &&
    status !== BUSY_STATE &&
    status !== FINISH_STATE
  ) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.state = null;

  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
}


/* =========================================================================
 * Initializes the compression dictionary from the given byte
 * sequence without producing any compressed output.
 */
function deflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;

  var s;
  var str, n;
  var wrap;
  var avail;
  var next;
  var input;
  var tmpDict;

  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }

  s = strm.state;
  wrap = s.wrap;

  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {
    return Z_STREAM_ERROR;
  }

  /* when using zlib wrappers, compute Adler-32 for provided dictionary */
  if (wrap === 1) {
    /* adler32(strm->adler, dictionary, dictLength); */
    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);
  }

  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */

  /* if dictionary would fill window, just replace the history */
  if (dictLength >= s.w_size) {
    if (wrap === 0) {            /* already empty otherwise */
      /*** CLEAR_HASH(s); ***/
      zero(s.head); // Fill with NIL (= 0);
      s.strstart = 0;
      s.block_start = 0;
      s.insert = 0;
    }
    /* use the tail */
    // dictionary = dictionary.slice(dictLength - s.w_size);
    tmpDict = new utils.Buf8(s.w_size);
    utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);
    dictionary = tmpDict;
    dictLength = s.w_size;
  }
  /* insert dictionary into window and hash */
  avail = strm.avail_in;
  next = strm.next_in;
  input = strm.input;
  strm.avail_in = dictLength;
  strm.next_in = 0;
  strm.input = dictionary;
  fill_window(s);
  while (s.lookahead >= MIN_MATCH) {
    str = s.strstart;
    n = s.lookahead - (MIN_MATCH - 1);
    do {
      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

      s.prev[str & s.w_mask] = s.head[s.ins_h];

      s.head[s.ins_h] = str;
      str++;
    } while (--n);
    s.strstart = str;
    s.lookahead = MIN_MATCH - 1;
    fill_window(s);
  }
  s.strstart += s.lookahead;
  s.block_start = s.strstart;
  s.insert = s.lookahead;
  s.lookahead = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  strm.next_in = next;
  strm.input = input;
  strm.avail_in = avail;
  s.wrap = wrap;
  return Z_OK;
}


exports.deflateInit = deflateInit;
exports.deflateInit2 = deflateInit2;
exports.deflateReset = deflateReset;
exports.deflateResetKeep = deflateResetKeep;
exports.deflateSetHeader = deflateSetHeader;
exports.deflate = deflate;
exports.deflateEnd = deflateEnd;
exports.deflateSetDictionary = deflateSetDictionary;
exports.deflateInfo = 'pako deflate (from Nodeca project)';

/* Not implemented
exports.deflateBound = deflateBound;
exports.deflateCopy = deflateCopy;
exports.deflateParams = deflateParams;
exports.deflatePending = deflatePending;
exports.deflatePrime = deflatePrime;
exports.deflateTune = deflateTune;
*/


/***/ }),
/* 386 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

/* eslint-disable space-unary-ops */

var utils = __webpack_require__(25);

/* Public constants ==========================================================*/
/* ===========================================================================*/


//var Z_FILTERED          = 1;
//var Z_HUFFMAN_ONLY      = 2;
//var Z_RLE               = 3;
var Z_FIXED               = 4;
//var Z_DEFAULT_STRATEGY  = 0;

/* Possible values of the data_type field (though see inflate()) */
var Z_BINARY              = 0;
var Z_TEXT                = 1;
//var Z_ASCII             = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;

/*============================================================================*/


function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }

// From zutil.h

var STORED_BLOCK = 0;
var STATIC_TREES = 1;
var DYN_TREES    = 2;
/* The three kinds of block type */

var MIN_MATCH    = 3;
var MAX_MATCH    = 258;
/* The minimum and maximum match lengths */

// From deflate.h
/* ===========================================================================
 * Internal compression state.
 */

var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */

var LITERALS      = 256;
/* number of literal bytes 0..255 */

var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */

var D_CODES       = 30;
/* number of distance codes */

var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */

var HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */

var MAX_BITS      = 15;
/* All codes must not exceed MAX_BITS bits */

var Buf_size      = 16;
/* size of bit buffer in bi_buf */


/* ===========================================================================
 * Constants
 */

var MAX_BL_BITS = 7;
/* Bit length codes must not exceed MAX_BL_BITS bits */

var END_BLOCK   = 256;
/* end of block literal code */

var REP_3_6     = 16;
/* repeat previous bit length 3-6 times (2 bits of repeat count) */

var REPZ_3_10   = 17;
/* repeat a zero length 3-10 times  (3 bits of repeat count) */

var REPZ_11_138 = 18;
/* repeat a zero length 11-138 times  (7 bits of repeat count) */

/* eslint-disable comma-spacing,array-bracket-spacing */
var extra_lbits =   /* extra bits for each length code */
  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];

var extra_dbits =   /* extra bits for each distance code */
  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];

var extra_blbits =  /* extra bits for each bit length code */
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];

var bl_order =
  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
/* eslint-enable comma-spacing,array-bracket-spacing */

/* The lengths of the bit length codes are sent in order of decreasing
 * probability, to avoid transmitting the lengths for unused bit length codes.
 */

/* ===========================================================================
 * Local data. These are initialized only once.
 */

// We pre-fill arrays with 0 to avoid uninitialized gaps

var DIST_CODE_LEN = 512; /* see definition of array dist_code below */

// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1
var static_ltree  = new Array((L_CODES + 2) * 2);
zero(static_ltree);
/* The static literal tree. Since the bit lengths are imposed, there is no
 * need for the L_CODES extra codes used during heap construction. However
 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
 * below).
 */

var static_dtree  = new Array(D_CODES * 2);
zero(static_dtree);
/* The static distance tree. (Actually a trivial tree since all codes use
 * 5 bits.)
 */

var _dist_code    = new Array(DIST_CODE_LEN);
zero(_dist_code);
/* Distance codes. The first 256 values correspond to the distances
 * 3 .. 258, the last 256 values correspond to the top 8 bits of
 * the 15 bit distances.
 */

var _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);
zero(_length_code);
/* length code for each normalized match length (0 == MIN_MATCH) */

var base_length   = new Array(LENGTH_CODES);
zero(base_length);
/* First normalized length for each code (0 = MIN_MATCH) */

var base_dist     = new Array(D_CODES);
zero(base_dist);
/* First normalized distance for each code (0 = distance of 1) */


function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {

  this.static_tree  = static_tree;  /* static tree or NULL */
  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */
  this.extra_base   = extra_base;   /* base index for extra_bits */
  this.elems        = elems;        /* max number of elements in the tree */
  this.max_length   = max_length;   /* max bit length for the codes */

  // show if `static_tree` has data or dummy - needed for monomorphic objects
  this.has_stree    = static_tree && static_tree.length;
}


var static_l_desc;
var static_d_desc;
var static_bl_desc;


function TreeDesc(dyn_tree, stat_desc) {
  this.dyn_tree = dyn_tree;     /* the dynamic tree */
  this.max_code = 0;            /* largest code with non zero frequency */
  this.stat_desc = stat_desc;   /* the corresponding static tree */
}



function d_code(dist) {
  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
}


/* ===========================================================================
 * Output a short LSB first on the stream.
 * IN assertion: there is enough room in pendingBuf.
 */
function put_short(s, w) {
//    put_byte(s, (uch)((w) & 0xff));
//    put_byte(s, (uch)((ush)(w) >> 8));
  s.pending_buf[s.pending++] = (w) & 0xff;
  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
}


/* ===========================================================================
 * Send a value on a given number of bits.
 * IN assertion: length <= 16 and value fits in length bits.
 */
function send_bits(s, value, length) {
  if (s.bi_valid > (Buf_size - length)) {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    put_short(s, s.bi_buf);
    s.bi_buf = value >> (Buf_size - s.bi_valid);
    s.bi_valid += length - Buf_size;
  } else {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    s.bi_valid += length;
  }
}


function send_code(s, c, tree) {
  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);
}


/* ===========================================================================
 * Reverse the first len bits of a code, using straightforward code (a faster
 * method would use a table)
 * IN assertion: 1 <= len <= 15
 */
function bi_reverse(code, len) {
  var res = 0;
  do {
    res |= code & 1;
    code >>>= 1;
    res <<= 1;
  } while (--len > 0);
  return res >>> 1;
}


/* ===========================================================================
 * Flush the bit buffer, keeping at most 7 bits in it.
 */
function bi_flush(s) {
  if (s.bi_valid === 16) {
    put_short(s, s.bi_buf);
    s.bi_buf = 0;
    s.bi_valid = 0;

  } else if (s.bi_valid >= 8) {
    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
    s.bi_buf >>= 8;
    s.bi_valid -= 8;
  }
}


/* ===========================================================================
 * Compute the optimal bit lengths for a tree and update the total bit length
 * for the current block.
 * IN assertion: the fields freq and dad are set, heap[heap_max] and
 *    above are the tree nodes sorted by increasing frequency.
 * OUT assertions: the field len is set to the optimal bit length, the
 *     array bl_count contains the frequencies for each bit length.
 *     The length opt_len is updated; static_len is also updated if stree is
 *     not null.
 */
function gen_bitlen(s, desc)
//    deflate_state *s;
//    tree_desc *desc;    /* the tree descriptor */
{
  var tree            = desc.dyn_tree;
  var max_code        = desc.max_code;
  var stree           = desc.stat_desc.static_tree;
  var has_stree       = desc.stat_desc.has_stree;
  var extra           = desc.stat_desc.extra_bits;
  var base            = desc.stat_desc.extra_base;
  var max_length      = desc.stat_desc.max_length;
  var h;              /* heap index */
  var n, m;           /* iterate over the tree elements */
  var bits;           /* bit length */
  var xbits;          /* extra bits */
  var f;              /* frequency */
  var overflow = 0;   /* number of elements with bit length too large */

  for (bits = 0; bits <= MAX_BITS; bits++) {
    s.bl_count[bits] = 0;
  }

  /* In a first pass, compute the optimal bit lengths (which may
   * overflow in the case of the bit length tree).
   */
  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */

  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
    n = s.heap[h];
    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
    if (bits > max_length) {
      bits = max_length;
      overflow++;
    }
    tree[n * 2 + 1]/*.Len*/ = bits;
    /* We overwrite tree[n].Dad which is no longer needed */

    if (n > max_code) { continue; } /* not a leaf node */

    s.bl_count[bits]++;
    xbits = 0;
    if (n >= base) {
      xbits = extra[n - base];
    }
    f = tree[n * 2]/*.Freq*/;
    s.opt_len += f * (bits + xbits);
    if (has_stree) {
      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);
    }
  }
  if (overflow === 0) { return; }

  // Trace((stderr,"\nbit length overflow\n"));
  /* This happens for example on obj2 and pic of the Calgary corpus */

  /* Find the first bit length which could increase: */
  do {
    bits = max_length - 1;
    while (s.bl_count[bits] === 0) { bits--; }
    s.bl_count[bits]--;      /* move one leaf down the tree */
    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
    s.bl_count[max_length]--;
    /* The brother of the overflow item also moves one step up,
     * but this does not affect bl_count[max_length]
     */
    overflow -= 2;
  } while (overflow > 0);

  /* Now recompute all bit lengths, scanning in increasing frequency.
   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
   * lengths instead of fixing only the wrong ones. This idea is taken
   * from 'ar' written by Haruhiko Okumura.)
   */
  for (bits = max_length; bits !== 0; bits--) {
    n = s.bl_count[bits];
    while (n !== 0) {
      m = s.heap[--h];
      if (m > max_code) { continue; }
      if (tree[m * 2 + 1]/*.Len*/ !== bits) {
        // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;
        tree[m * 2 + 1]/*.Len*/ = bits;
      }
      n--;
    }
  }
}


/* ===========================================================================
 * Generate the codes for a given tree and bit counts (which need not be
 * optimal).
 * IN assertion: the array bl_count contains the bit length statistics for
 * the given tree and the field len is set for all tree elements.
 * OUT assertion: the field code is set for all tree elements of non
 *     zero code length.
 */
function gen_codes(tree, max_code, bl_count)
//    ct_data *tree;             /* the tree to decorate */
//    int max_code;              /* largest code with non zero frequency */
//    ushf *bl_count;            /* number of codes at each bit length */
{
  var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */
  var code = 0;              /* running code value */
  var bits;                  /* bit index */
  var n;                     /* code index */

  /* The distribution counts are first used to generate the code values
   * without bit reversal.
   */
  for (bits = 1; bits <= MAX_BITS; bits++) {
    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;
  }
  /* Check that the bit counts in bl_count are consistent. The last code
   * must be all ones.
   */
  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
  //        "inconsistent bit counts");
  //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

  for (n = 0;  n <= max_code; n++) {
    var len = tree[n * 2 + 1]/*.Len*/;
    if (len === 0) { continue; }
    /* Now reverse the bits */
    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);

    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
  }
}


/* ===========================================================================
 * Initialize the various 'constant' tables.
 */
function tr_static_init() {
  var n;        /* iterates over tree elements */
  var bits;     /* bit counter */
  var length;   /* length value */
  var code;     /* code value */
  var dist;     /* distance index */
  var bl_count = new Array(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  // do check in _tr_init()
  //if (static_init_done) return;

  /* For some embedded targets, global variables are not initialized: */
/*#ifdef NO_INIT_GLOBAL_POINTERS
  static_l_desc.static_tree = static_ltree;
  static_l_desc.extra_bits = extra_lbits;
  static_d_desc.static_tree = static_dtree;
  static_d_desc.extra_bits = extra_dbits;
  static_bl_desc.extra_bits = extra_blbits;
#endif*/

  /* Initialize the mapping length (0..255) -> length code (0..28) */
  length = 0;
  for (code = 0; code < LENGTH_CODES - 1; code++) {
    base_length[code] = length;
    for (n = 0; n < (1 << extra_lbits[code]); n++) {
      _length_code[length++] = code;
    }
  }
  //Assert (length == 256, "tr_static_init: length != 256");
  /* Note that the length 255 (match length 258) can be represented
   * in two different ways: code 284 + 5 bits or code 285, so we
   * overwrite length_code[255] to use the best encoding:
   */
  _length_code[length - 1] = code;

  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
  dist = 0;
  for (code = 0; code < 16; code++) {
    base_dist[code] = dist;
    for (n = 0; n < (1 << extra_dbits[code]); n++) {
      _dist_code[dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: dist != 256");
  dist >>= 7; /* from now on, all distances are divided by 128 */
  for (; code < D_CODES; code++) {
    base_dist[code] = dist << 7;
    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
      _dist_code[256 + dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: 256+dist != 512");

  /* Construct the codes of the static literal tree */
  for (bits = 0; bits <= MAX_BITS; bits++) {
    bl_count[bits] = 0;
  }

  n = 0;
  while (n <= 143) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  while (n <= 255) {
    static_ltree[n * 2 + 1]/*.Len*/ = 9;
    n++;
    bl_count[9]++;
  }
  while (n <= 279) {
    static_ltree[n * 2 + 1]/*.Len*/ = 7;
    n++;
    bl_count[7]++;
  }
  while (n <= 287) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  /* Codes 286 and 287 do not exist, but we must include them in the
   * tree construction to get a canonical Huffman tree (longest code
   * all ones)
   */
  gen_codes(static_ltree, L_CODES + 1, bl_count);

  /* The static distance tree is trivial: */
  for (n = 0; n < D_CODES; n++) {
    static_dtree[n * 2 + 1]/*.Len*/ = 5;
    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);
  }

  // Now data ready and we can init static trees
  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);
  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);

  //static_init_done = true;
}


/* ===========================================================================
 * Initialize a new block.
 */
function init_block(s) {
  var n; /* iterates over tree elements */

  /* Initialize the trees. */
  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }

  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;
  s.opt_len = s.static_len = 0;
  s.last_lit = s.matches = 0;
}


/* ===========================================================================
 * Flush the bit buffer and align the output on a byte boundary
 */
function bi_windup(s)
{
  if (s.bi_valid > 8) {
    put_short(s, s.bi_buf);
  } else if (s.bi_valid > 0) {
    //put_byte(s, (Byte)s->bi_buf);
    s.pending_buf[s.pending++] = s.bi_buf;
  }
  s.bi_buf = 0;
  s.bi_valid = 0;
}

/* ===========================================================================
 * Copy a stored block, storing first the length and its
 * one's complement if requested.
 */
function copy_block(s, buf, len, header)
//DeflateState *s;
//charf    *buf;    /* the input data */
//unsigned len;     /* its length */
//int      header;  /* true if block header must be written */
{
  bi_windup(s);        /* align on byte boundary */

  if (header) {
    put_short(s, len);
    put_short(s, ~len);
  }
//  while (len--) {
//    put_byte(s, *buf++);
//  }
  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);
  s.pending += len;
}

/* ===========================================================================
 * Compares to subtrees, using the tree depth as tie breaker when
 * the subtrees have equal frequency. This minimizes the worst case length.
 */
function smaller(tree, n, m, depth) {
  var _n2 = n * 2;
  var _m2 = m * 2;
  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
}

/* ===========================================================================
 * Restore the heap property by moving down the tree starting at node k,
 * exchanging a node with the smallest of its two sons if necessary, stopping
 * when the heap property is re-established (each father smaller than its
 * two sons).
 */
function pqdownheap(s, tree, k)
//    deflate_state *s;
//    ct_data *tree;  /* the tree to restore */
//    int k;               /* node to move down */
{
  var v = s.heap[k];
  var j = k << 1;  /* left son of k */
  while (j <= s.heap_len) {
    /* Set j to the smallest of the two sons: */
    if (j < s.heap_len &&
      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
      j++;
    }
    /* Exit if v is smaller than both sons */
    if (smaller(tree, v, s.heap[j], s.depth)) { break; }

    /* Exchange v with the smallest son */
    s.heap[k] = s.heap[j];
    k = j;

    /* And continue down the tree, setting j to the left son of k */
    j <<= 1;
  }
  s.heap[k] = v;
}


// inlined manually
// var SMALLEST = 1;

/* ===========================================================================
 * Send the block data compressed using the given Huffman trees
 */
function compress_block(s, ltree, dtree)
//    deflate_state *s;
//    const ct_data *ltree; /* literal tree */
//    const ct_data *dtree; /* distance tree */
{
  var dist;           /* distance of matched string */
  var lc;             /* match length or unmatched char (if dist == 0) */
  var lx = 0;         /* running index in l_buf */
  var code;           /* the code to send */
  var extra;          /* number of extra bits to send */

  if (s.last_lit !== 0) {
    do {
      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);
      lc = s.pending_buf[s.l_buf + lx];
      lx++;

      if (dist === 0) {
        send_code(s, lc, ltree); /* send a literal byte */
        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
      } else {
        /* Here, lc is the match length - MIN_MATCH */
        code = _length_code[lc];
        send_code(s, code + LITERALS + 1, ltree); /* send the length code */
        extra = extra_lbits[code];
        if (extra !== 0) {
          lc -= base_length[code];
          send_bits(s, lc, extra);       /* send the extra length bits */
        }
        dist--; /* dist is now the match distance - 1 */
        code = d_code(dist);
        //Assert (code < D_CODES, "bad d_code");

        send_code(s, code, dtree);       /* send the distance code */
        extra = extra_dbits[code];
        if (extra !== 0) {
          dist -= base_dist[code];
          send_bits(s, dist, extra);   /* send the extra distance bits */
        }
      } /* literal or match pair ? */

      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
      //       "pendingBuf overflow");

    } while (lx < s.last_lit);
  }

  send_code(s, END_BLOCK, ltree);
}


/* ===========================================================================
 * Construct one Huffman tree and assigns the code bit strings and lengths.
 * Update the total bit length for the current block.
 * IN assertion: the field freq is set for all tree elements.
 * OUT assertions: the fields len and code are set to the optimal bit length
 *     and corresponding code. The length opt_len is updated; static_len is
 *     also updated if stree is not null. The field max_code is set.
 */
function build_tree(s, desc)
//    deflate_state *s;
//    tree_desc *desc; /* the tree descriptor */
{
  var tree     = desc.dyn_tree;
  var stree    = desc.stat_desc.static_tree;
  var has_stree = desc.stat_desc.has_stree;
  var elems    = desc.stat_desc.elems;
  var n, m;          /* iterate over heap elements */
  var max_code = -1; /* largest code with non zero frequency */
  var node;          /* new node being created */

  /* Construct the initial heap, with least frequent element in
   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
   * heap[0] is not used.
   */
  s.heap_len = 0;
  s.heap_max = HEAP_SIZE;

  for (n = 0; n < elems; n++) {
    if (tree[n * 2]/*.Freq*/ !== 0) {
      s.heap[++s.heap_len] = max_code = n;
      s.depth[n] = 0;

    } else {
      tree[n * 2 + 1]/*.Len*/ = 0;
    }
  }

  /* The pkzip format requires that at least one distance code exists,
   * and that at least one bit should be sent even if there is only one
   * possible code. So to avoid special checks later on we force at least
   * two codes of non zero frequency.
   */
  while (s.heap_len < 2) {
    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
    tree[node * 2]/*.Freq*/ = 1;
    s.depth[node] = 0;
    s.opt_len--;

    if (has_stree) {
      s.static_len -= stree[node * 2 + 1]/*.Len*/;
    }
    /* node is 0 or 1 so it does not have extra bits */
  }
  desc.max_code = max_code;

  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
   * establish sub-heaps of increasing lengths:
   */
  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }

  /* Construct the Huffman tree by repeatedly combining the least two
   * frequent nodes.
   */
  node = elems;              /* next internal node of the tree */
  do {
    //pqremove(s, tree, n);  /* n = node of least frequency */
    /*** pqremove ***/
    n = s.heap[1/*SMALLEST*/];
    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
    pqdownheap(s, tree, 1/*SMALLEST*/);
    /***/

    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */

    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
    s.heap[--s.heap_max] = m;

    /* Create a new node father of n and m */
    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;

    /* and insert the new node in the heap */
    s.heap[1/*SMALLEST*/] = node++;
    pqdownheap(s, tree, 1/*SMALLEST*/);

  } while (s.heap_len >= 2);

  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];

  /* At this point, the fields freq and dad are set. We can now
   * generate the bit lengths.
   */
  gen_bitlen(s, desc);

  /* The field len is now set, we can generate the bit codes */
  gen_codes(tree, max_code, s.bl_count);
}


/* ===========================================================================
 * Scan a literal or distance tree to determine the frequencies of the codes
 * in the bit length tree.
 */
function scan_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree;   /* the tree to be scanned */
//    int max_code;    /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */

  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */

  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }
  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      s.bl_tree[curlen * 2]/*.Freq*/ += count;

    } else if (curlen !== 0) {

      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;

    } else if (count <= 10) {
      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;

    } else {
      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;
    }

    count = 0;
    prevlen = curlen;

    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}


/* ===========================================================================
 * Send a literal or distance tree in compressed form, using the codes in
 * bl_tree.
 */
function send_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree; /* the tree to be scanned */
//    int max_code;       /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */

  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */

  /* tree[max_code+1].Len = -1; */  /* guard already set */
  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);

    } else if (curlen !== 0) {
      if (curlen !== prevlen) {
        send_code(s, curlen, s.bl_tree);
        count--;
      }
      //Assert(count >= 3 && count <= 6, " 3_6?");
      send_code(s, REP_3_6, s.bl_tree);
      send_bits(s, count - 3, 2);

    } else if (count <= 10) {
      send_code(s, REPZ_3_10, s.bl_tree);
      send_bits(s, count - 3, 3);

    } else {
      send_code(s, REPZ_11_138, s.bl_tree);
      send_bits(s, count - 11, 7);
    }

    count = 0;
    prevlen = curlen;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}


/* ===========================================================================
 * Construct the Huffman tree for the bit lengths and return the index in
 * bl_order of the last bit length code to send.
 */
function build_bl_tree(s) {
  var max_blindex;  /* index of last bit length code of non zero freq */

  /* Determine the bit length frequencies for literal and distance trees */
  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

  /* Build the bit length tree: */
  build_tree(s, s.bl_desc);
  /* opt_len now includes the length of the tree representations, except
   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
   */

  /* Determine the number of bit length codes to send. The pkzip format
   * requires that at least 4 bit length codes be sent. (appnote.txt says
   * 3 but the actual value used is 4.)
   */
  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {
      break;
    }
  }
  /* Update opt_len to include the bit length tree and counts */
  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
  //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
  //        s->opt_len, s->static_len));

  return max_blindex;
}


/* ===========================================================================
 * Send the header for a block using dynamic Huffman trees: the counts, the
 * lengths of the bit length codes, the literal tree and the distance tree.
 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
 */
function send_all_trees(s, lcodes, dcodes, blcodes)
//    deflate_state *s;
//    int lcodes, dcodes, blcodes; /* number of codes for each tree */
{
  var rank;                    /* index in bl_order */

  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
  //        "too many codes");
  //Tracev((stderr, "\nbl counts: "));
  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
  send_bits(s, dcodes - 1,   5);
  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */
  for (rank = 0; rank < blcodes; rank++) {
    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);
  }
  //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
  //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
  //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
}


/* ===========================================================================
 * Check if the data type is TEXT or BINARY, using the following algorithm:
 * - TEXT if the two conditions below are satisfied:
 *    a) There are no non-portable control characters belonging to the
 *       "black list" (0..6, 14..25, 28..31).
 *    b) There is at least one printable character belonging to the
 *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
 * - BINARY otherwise.
 * - The following partially-portable control characters form a
 *   "gray list" that is ignored in this detection algorithm:
 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
 * IN assertion: the fields Freq of dyn_ltree are set.
 */
function detect_data_type(s) {
  /* black_mask is the bit mask of black-listed bytes
   * set bits 0..6, 14..25, and 28..31
   * 0xf3ffc07f = binary 11110011111111111100000001111111
   */
  var black_mask = 0xf3ffc07f;
  var n;

  /* Check for non-textual ("black-listed") bytes. */
  for (n = 0; n <= 31; n++, black_mask >>>= 1) {
    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {
      return Z_BINARY;
    }
  }

  /* Check for textual ("white-listed") bytes. */
  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
    return Z_TEXT;
  }
  for (n = 32; n < LITERALS; n++) {
    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
      return Z_TEXT;
    }
  }

  /* There are no "black-listed" or "white-listed" bytes:
   * this stream either is empty or has tolerated ("gray-listed") bytes only.
   */
  return Z_BINARY;
}


var static_init_done = false;

/* ===========================================================================
 * Initialize the tree data structures for a new zlib stream.
 */
function _tr_init(s)
{

  if (!static_init_done) {
    tr_static_init();
    static_init_done = true;
  }

  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

  s.bi_buf = 0;
  s.bi_valid = 0;

  /* Initialize the first block of the first file: */
  init_block(s);
}


/* ===========================================================================
 * Send a stored block
 */
function _tr_stored_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */
  copy_block(s, buf, stored_len, true); /* with header */
}


/* ===========================================================================
 * Send one empty static block to give enough lookahead for inflate.
 * This takes 10 bits, of which 7 may remain in the bit buffer.
 */
function _tr_align(s) {
  send_bits(s, STATIC_TREES << 1, 3);
  send_code(s, END_BLOCK, static_ltree);
  bi_flush(s);
}


/* ===========================================================================
 * Determine the best encoding for the current block: dynamic trees, static
 * trees or store, and output the encoded block to the zip file.
 */
function _tr_flush_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block, or NULL if too old */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
  var max_blindex = 0;        /* index of last bit length code of non zero freq */

  /* Build the Huffman trees unless a stored block is forced */
  if (s.level > 0) {

    /* Check if the file is binary or text */
    if (s.strm.data_type === Z_UNKNOWN) {
      s.strm.data_type = detect_data_type(s);
    }

    /* Construct the literal and distance trees */
    build_tree(s, s.l_desc);
    // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));

    build_tree(s, s.d_desc);
    // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));
    /* At this point, opt_len and static_len are the total bit lengths of
     * the compressed block data, excluding the tree representations.
     */

    /* Build the bit length tree for the above two trees, and get the index
     * in bl_order of the last bit length code to send.
     */
    max_blindex = build_bl_tree(s);

    /* Determine the best encoding. Compute the block lengths in bytes. */
    opt_lenb = (s.opt_len + 3 + 7) >>> 3;
    static_lenb = (s.static_len + 3 + 7) >>> 3;

    // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
    //        s->last_lit));

    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }

  } else {
    // Assert(buf != (char*)0, "lost buf");
    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
  }

  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
    /* 4: two words for the lengths */

    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
     * Otherwise we can't have processed more than WSIZE input bytes since
     * the last block flush, because compression would have been
     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
     * transform a block into a stored block.
     */
    _tr_stored_block(s, buf, stored_len, last);

  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {

    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
    compress_block(s, static_ltree, static_dtree);

  } else {
    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
    compress_block(s, s.dyn_ltree, s.dyn_dtree);
  }
  // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
  /* The above check is made mod 2^32, for files larger than 512 MB
   * and uLong implemented on 32 bits.
   */
  init_block(s);

  if (last) {
    bi_windup(s);
  }
  // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
  //       s->compressed_len-7*last));
}

/* ===========================================================================
 * Save the match info and tally the frequency counts. Return true if
 * the current block must be flushed.
 */
function _tr_tally(s, dist, lc)
//    deflate_state *s;
//    unsigned dist;  /* distance of matched string */
//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
{
  //var out_length, in_length, dcode;

  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;
  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;

  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
  s.last_lit++;

  if (dist === 0) {
    /* lc is the unmatched char */
    s.dyn_ltree[lc * 2]/*.Freq*/++;
  } else {
    s.matches++;
    /* Here, lc is the match length - MIN_MATCH */
    dist--;             /* dist = match distance - 1 */
    //Assert((ush)dist < (ush)MAX_DIST(s) &&
    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;
    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
  }

// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility

//#ifdef TRUNCATE_BLOCK
//  /* Try to guess if it is profitable to stop the current block here */
//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
//    /* Compute an upper bound for the compressed length */
//    out_length = s.last_lit*8;
//    in_length = s.strstart - s.block_start;
//
//    for (dcode = 0; dcode < D_CODES; dcode++) {
//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
//    }
//    out_length >>>= 3;
//    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
//    //       s->last_lit, in_length, out_length,
//    //       100L - out_length*100L/in_length));
//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
//      return true;
//    }
//  }
//#endif

  return (s.last_lit === s.lit_bufsize - 1);
  /* We avoid equality with lit_bufsize because of wraparound at 64K
   * on 16 bit machines and because stored blocks are restricted to
   * 64K-1 bytes.
   */
}

exports._tr_init  = _tr_init;
exports._tr_stored_block = _tr_stored_block;
exports._tr_flush_block  = _tr_flush_block;
exports._tr_tally = _tr_tally;
exports._tr_align = _tr_align;


/***/ }),
/* 387 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



var zlib_inflate = __webpack_require__(388);
var utils        = __webpack_require__(25);
var strings      = __webpack_require__(197);
var c            = __webpack_require__(199);
var msg          = __webpack_require__(101);
var ZStream      = __webpack_require__(198);
var GZheader     = __webpack_require__(391);

var toString = Object.prototype.toString;

/**
 * class Inflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[inflate]]
 * and [[inflateRaw]].
 **/

/* internal
 * inflate.chunks -> Array
 *
 * Chunks of output data, if [[Inflate#onData]] not overridden.
 **/

/**
 * Inflate.result -> Uint8Array|Array|String
 *
 * Uncompressed result, generated by default [[Inflate#onData]]
 * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you
 * push a chunk with explicit flush (call [[Inflate#push]] with
 * `Z_SYNC_FLUSH` param).
 **/

/**
 * Inflate.err -> Number
 *
 * Error code after inflate finished. 0 (Z_OK) on success.
 * Should be checked if broken data possible.
 **/

/**
 * Inflate.msg -> String
 *
 * Error message, if [[Inflate.err]] != 0
 **/


/**
 * new Inflate(options)
 * - options (Object): zlib inflate options.
 *
 * Creates new inflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `windowBits`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw inflate
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 * By default, when no options set, autodetect deflate/gzip data format via
 * wrapper header.
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * var inflate = new pako.Inflate({ level: 3});
 *
 * inflate.push(chunk1, false);
 * inflate.push(chunk2, true);  // true -> last chunk
 *
 * if (inflate.err) { throw new Error(inflate.err); }
 *
 * console.log(inflate.result);
 * ```
 **/
function Inflate(options) {
  if (!(this instanceof Inflate)) return new Inflate(options);

  this.options = utils.assign({
    chunkSize: 16384,
    windowBits: 0,
    to: ''
  }, options || {});

  var opt = this.options;

  // Force window size for `raw` data, if not set directly,
  // because we have no header for autodetect.
  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {
    opt.windowBits = -opt.windowBits;
    if (opt.windowBits === 0) { opt.windowBits = -15; }
  }

  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate
  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&
      !(options && options.windowBits)) {
    opt.windowBits += 32;
  }

  // Gzip header has no info about windows size, we can do autodetect only
  // for deflate. So, if window size not set, force it to max when gzip possible
  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {
    // bit 3 (16) -> gzipped data
    // bit 4 (32) -> autodetect gzip/deflate
    if ((opt.windowBits & 15) === 0) {
      opt.windowBits |= 15;
    }
  }

  this.err    = 0;      // error code, if happens (0 = Z_OK)
  this.msg    = '';     // error message
  this.ended  = false;  // used to avoid multiple onEnd() calls
  this.chunks = [];     // chunks of compressed data

  this.strm   = new ZStream();
  this.strm.avail_out = 0;

  var status  = zlib_inflate.inflateInit2(
    this.strm,
    opt.windowBits
  );

  if (status !== c.Z_OK) {
    throw new Error(msg[status]);
  }

  this.header = new GZheader();

  zlib_inflate.inflateGetHeader(this.strm, this.header);

  // Setup dictionary
  if (opt.dictionary) {
    // Convert data if needed
    if (typeof opt.dictionary === 'string') {
      opt.dictionary = strings.string2buf(opt.dictionary);
    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {
      opt.dictionary = new Uint8Array(opt.dictionary);
    }
    if (opt.raw) { //In raw mode we need to set the dictionary early
      status = zlib_inflate.inflateSetDictionary(this.strm, opt.dictionary);
      if (status !== c.Z_OK) {
        throw new Error(msg[status]);
      }
    }
  }
}

/**
 * Inflate#push(data[, mode]) -> Boolean
 * - data (Uint8Array|Array|ArrayBuffer|String): input data
 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.
 *
 * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
 * new output chunks. Returns `true` on success. The last data block must have
 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
 * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you
 * can use mode Z_SYNC_FLUSH, keeping the decompression context.
 *
 * On fail call [[Inflate#onEnd]] with error code and return false.
 *
 * We strongly recommend to use `Uint8Array` on input for best speed (output
 * format is detected automatically). Also, don't skip last param and always
 * use the same type in your code (boolean or number). That will improve JS speed.
 *
 * For regular `Array`-s make sure all elements are [0..255].
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Inflate.prototype.push = function (data, mode) {
  var strm = this.strm;
  var chunkSize = this.options.chunkSize;
  var dictionary = this.options.dictionary;
  var status, _mode;
  var next_out_utf8, tail, utf8str;

  // Flag to properly process Z_BUF_ERROR on testing inflate call
  // when we check that all output data was flushed.
  var allowBufError = false;

  if (this.ended) { return false; }
  _mode = (mode === ~~mode) ? mode : ((mode === true) ? c.Z_FINISH : c.Z_NO_FLUSH);

  // Convert data if needed
  if (typeof data === 'string') {
    // Only binary strings can be decompressed on practice
    strm.input = strings.binstring2buf(data);
  } else if (toString.call(data) === '[object ArrayBuffer]') {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  do {
    if (strm.avail_out === 0) {
      strm.output = new utils.Buf8(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }

    status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);    /* no bad return value */

    if (status === c.Z_NEED_DICT && dictionary) {
      status = zlib_inflate.inflateSetDictionary(this.strm, dictionary);
    }

    if (status === c.Z_BUF_ERROR && allowBufError === true) {
      status = c.Z_OK;
      allowBufError = false;
    }

    if (status !== c.Z_STREAM_END && status !== c.Z_OK) {
      this.onEnd(status);
      this.ended = true;
      return false;
    }

    if (strm.next_out) {
      if (strm.avail_out === 0 || status === c.Z_STREAM_END || (strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH))) {

        if (this.options.to === 'string') {

          next_out_utf8 = strings.utf8border(strm.output, strm.next_out);

          tail = strm.next_out - next_out_utf8;
          utf8str = strings.buf2string(strm.output, next_out_utf8);

          // move tail
          strm.next_out = tail;
          strm.avail_out = chunkSize - tail;
          if (tail) { utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }

          this.onData(utf8str);

        } else {
          this.onData(utils.shrinkBuf(strm.output, strm.next_out));
        }
      }
    }

    // When no more input data, we should check that internal inflate buffers
    // are flushed. The only way to do it when avail_out = 0 - run one more
    // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.
    // Here we set flag to process this error properly.
    //
    // NOTE. Deflate does not return error in this case and does not needs such
    // logic.
    if (strm.avail_in === 0 && strm.avail_out === 0) {
      allowBufError = true;
    }

  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);

  if (status === c.Z_STREAM_END) {
    _mode = c.Z_FINISH;
  }

  // Finalize on the last chunk.
  if (_mode === c.Z_FINISH) {
    status = zlib_inflate.inflateEnd(this.strm);
    this.onEnd(status);
    this.ended = true;
    return status === c.Z_OK;
  }

  // callback interim results if Z_SYNC_FLUSH.
  if (_mode === c.Z_SYNC_FLUSH) {
    this.onEnd(c.Z_OK);
    strm.avail_out = 0;
    return true;
  }

  return true;
};


/**
 * Inflate#onData(chunk) -> Void
 * - chunk (Uint8Array|Array|String): output data. Type of array depends
 *   on js engine support. When string output requested, each chunk
 *   will be string.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Inflate.prototype.onData = function (chunk) {
  this.chunks.push(chunk);
};


/**
 * Inflate#onEnd(status) -> Void
 * - status (Number): inflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called either after you tell inflate that the input stream is
 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
 * or if an error happened. By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Inflate.prototype.onEnd = function (status) {
  // On success - join
  if (status === c.Z_OK) {
    if (this.options.to === 'string') {
      // Glue & convert here, until we teach pako to send
      // utf8 aligned strings to onData
      this.result = this.chunks.join('');
    } else {
      this.result = utils.flattenChunks(this.chunks);
    }
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};


/**
 * inflate(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Decompress `data` with inflate/ungzip and `options`. Autodetect
 * format via wrapper header by default. That's why we don't provide
 * separate `ungzip` method.
 *
 * Supported options are:
 *
 * - windowBits
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])
 *   , output;
 *
 * try {
 *   output = pako.inflate(input);
 * } catch (err)
 *   console.log(err);
 * }
 * ```
 **/
function inflate(input, options) {
  var inflator = new Inflate(options);

  inflator.push(input, true);

  // That will never happens, if you don't cheat with options :)
  if (inflator.err) { throw inflator.msg || msg[inflator.err]; }

  return inflator.result;
}


/**
 * inflateRaw(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * The same as [[inflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/
function inflateRaw(input, options) {
  options = options || {};
  options.raw = true;
  return inflate(input, options);
}


/**
 * ungzip(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Just shortcut to [[inflate]], because it autodetects format
 * by header.content. Done for convenience.
 **/


exports.Inflate = Inflate;
exports.inflate = inflate;
exports.inflateRaw = inflateRaw;
exports.ungzip  = inflate;


/***/ }),
/* 388 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var utils         = __webpack_require__(25);
var adler32       = __webpack_require__(195);
var crc32         = __webpack_require__(196);
var inflate_fast  = __webpack_require__(389);
var inflate_table = __webpack_require__(390);

var CODES = 0;
var LENS = 1;
var DISTS = 2;

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
//var Z_NO_FLUSH      = 0;
//var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
//var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;

/* The deflate compression method */
var Z_DEFLATED  = 8;


/* STATES ====================================================================*/
/* ===========================================================================*/


var    HEAD = 1;       /* i: waiting for magic header */
var    FLAGS = 2;      /* i: waiting for method and flags (gzip) */
var    TIME = 3;       /* i: waiting for modification time (gzip) */
var    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */
var    EXLEN = 5;      /* i: waiting for extra length (gzip) */
var    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */
var    NAME = 7;       /* i: waiting for end of file name (gzip) */
var    COMMENT = 8;    /* i: waiting for end of comment (gzip) */
var    HCRC = 9;       /* i: waiting for header crc (gzip) */
var    DICTID = 10;    /* i: waiting for dictionary check value */
var    DICT = 11;      /* waiting for inflateSetDictionary() call */
var        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
var        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */
var        STORED = 14;    /* i: waiting for stored size (length and complement) */
var        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */
var        COPY = 16;      /* i/o: waiting for input or output to copy stored block */
var        TABLE = 17;     /* i: waiting for dynamic block table lengths */
var        LENLENS = 18;   /* i: waiting for code length code lengths */
var        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */
var            LEN_ = 20;      /* i: same as LEN below, but only first time in */
var            LEN = 21;       /* i: waiting for length/lit/eob code */
var            LENEXT = 22;    /* i: waiting for length extra bits */
var            DIST = 23;      /* i: waiting for distance code */
var            DISTEXT = 24;   /* i: waiting for distance extra bits */
var            MATCH = 25;     /* o: waiting for output space to copy string */
var            LIT = 26;       /* o: waiting for output space to write literal */
var    CHECK = 27;     /* i: waiting for 32-bit check value */
var    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */
var    DONE = 29;      /* finished check, done -- remain here until reset */
var    BAD = 30;       /* got a data error -- remain here until reset */
var    MEM = 31;       /* got an inflate() memory error -- remain here until reset */
var    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */

/* ===========================================================================*/



var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_WBITS = MAX_WBITS;


function zswap32(q) {
  return  (((q >>> 24) & 0xff) +
          ((q >>> 8) & 0xff00) +
          ((q & 0xff00) << 8) +
          ((q & 0xff) << 24));
}


function InflateState() {
  this.mode = 0;             /* current inflate mode */
  this.last = false;          /* true if processing last block */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.havedict = false;      /* true if dictionary provided */
  this.flags = 0;             /* gzip header method and flags (0 if zlib) */
  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
  this.check = 0;             /* protected copy of check value */
  this.total = 0;             /* protected copy of output count */
  // TODO: may be {}
  this.head = null;           /* where to save gzip header information */

  /* sliding window */
  this.wbits = 0;             /* log base 2 of requested window size */
  this.wsize = 0;             /* window size or zero if not using window */
  this.whave = 0;             /* valid bytes in the window */
  this.wnext = 0;             /* window write index */
  this.window = null;         /* allocated sliding window, if needed */

  /* bit accumulator */
  this.hold = 0;              /* input bit accumulator */
  this.bits = 0;              /* number of bits in "in" */

  /* for string and stored block copying */
  this.length = 0;            /* literal or length of data to copy */
  this.offset = 0;            /* distance back to copy string from */

  /* for table and code decoding */
  this.extra = 0;             /* extra bits needed */

  /* fixed and dynamic code tables */
  this.lencode = null;          /* starting table for length/literal codes */
  this.distcode = null;         /* starting table for distance codes */
  this.lenbits = 0;           /* index bits for lencode */
  this.distbits = 0;          /* index bits for distcode */

  /* dynamic table building */
  this.ncode = 0;             /* number of code length code lengths */
  this.nlen = 0;              /* number of length code lengths */
  this.ndist = 0;             /* number of distance code lengths */
  this.have = 0;              /* number of code lengths in lens[] */
  this.next = null;              /* next available space in codes[] */

  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */
  this.work = new utils.Buf16(288); /* work area for code table building */

  /*
   because we don't have pointers in js, we use lencode and distcode directly
   as buffers so we don't need codes
  */
  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
  this.sane = 0;                   /* if false, allow invalid distance too far */
  this.back = 0;                   /* bits back of last unprocessed length/lit */
  this.was = 0;                    /* initial length of match */
}

function inflateResetKeep(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  strm.total_in = strm.total_out = state.total = 0;
  strm.msg = ''; /*Z_NULL*/
  if (state.wrap) {       /* to support ill-conceived Java test suite */
    strm.adler = state.wrap & 1;
  }
  state.mode = HEAD;
  state.last = 0;
  state.havedict = 0;
  state.dmax = 32768;
  state.head = null/*Z_NULL*/;
  state.hold = 0;
  state.bits = 0;
  //state.lencode = state.distcode = state.next = state.codes;
  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);

  state.sane = 1;
  state.back = -1;
  //Tracev((stderr, "inflate: reset\n"));
  return Z_OK;
}

function inflateReset(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  state.wsize = 0;
  state.whave = 0;
  state.wnext = 0;
  return inflateResetKeep(strm);

}

function inflateReset2(strm, windowBits) {
  var wrap;
  var state;

  /* get the state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;

  /* extract wrap request from windowBits parameter */
  if (windowBits < 0) {
    wrap = 0;
    windowBits = -windowBits;
  }
  else {
    wrap = (windowBits >> 4) + 1;
    if (windowBits < 48) {
      windowBits &= 15;
    }
  }

  /* set number of window bits, free window if different */
  if (windowBits && (windowBits < 8 || windowBits > 15)) {
    return Z_STREAM_ERROR;
  }
  if (state.window !== null && state.wbits !== windowBits) {
    state.window = null;
  }

  /* update state and reset the rest of it */
  state.wrap = wrap;
  state.wbits = windowBits;
  return inflateReset(strm);
}

function inflateInit2(strm, windowBits) {
  var ret;
  var state;

  if (!strm) { return Z_STREAM_ERROR; }
  //strm.msg = Z_NULL;                 /* in case we return an error */

  state = new InflateState();

  //if (state === Z_NULL) return Z_MEM_ERROR;
  //Tracev((stderr, "inflate: allocated\n"));
  strm.state = state;
  state.window = null/*Z_NULL*/;
  ret = inflateReset2(strm, windowBits);
  if (ret !== Z_OK) {
    strm.state = null/*Z_NULL*/;
  }
  return ret;
}

function inflateInit(strm) {
  return inflateInit2(strm, DEF_WBITS);
}


/*
 Return state with length and distance decoding tables and index sizes set to
 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
 If BUILDFIXED is defined, then instead this routine builds the tables the
 first time it's called, and returns those tables the first time and
 thereafter.  This reduces the size of the code by about 2K bytes, in
 exchange for a little execution time.  However, BUILDFIXED should not be
 used for threaded applications, since the rewriting of the tables and virgin
 may not be thread-safe.
 */
var virgin = true;

var lenfix, distfix; // We have no pointers in JS, so keep tables separate

function fixedtables(state) {
  /* build fixed huffman tables if first call (may not be thread safe) */
  if (virgin) {
    var sym;

    lenfix = new utils.Buf32(512);
    distfix = new utils.Buf32(32);

    /* literal/length table */
    sym = 0;
    while (sym < 144) { state.lens[sym++] = 8; }
    while (sym < 256) { state.lens[sym++] = 9; }
    while (sym < 280) { state.lens[sym++] = 7; }
    while (sym < 288) { state.lens[sym++] = 8; }

    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });

    /* distance table */
    sym = 0;
    while (sym < 32) { state.lens[sym++] = 5; }

    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });

    /* do this just once */
    virgin = false;
  }

  state.lencode = lenfix;
  state.lenbits = 9;
  state.distcode = distfix;
  state.distbits = 5;
}


/*
 Update the window with the last wsize (normally 32K) bytes written before
 returning.  If window does not exist yet, create it.  This is only called
 when a window is already in use, or when output has been written during this
 inflate call, but the end of the deflate stream has not been reached yet.
 It is also called to create a window for dictionary data when a dictionary
 is loaded.

 Providing output buffers larger than 32K to inflate() should provide a speed
 advantage, since only the last 32K of output is copied to the sliding window
 upon return from inflate(), and since all distances after the first 32K of
 output will fall in the output data, making match copies simpler and faster.
 The advantage may be dependent on the size of the processor's data caches.
 */
function updatewindow(strm, src, end, copy) {
  var dist;
  var state = strm.state;

  /* if it hasn't been done already, allocate space for the window */
  if (state.window === null) {
    state.wsize = 1 << state.wbits;
    state.wnext = 0;
    state.whave = 0;

    state.window = new utils.Buf8(state.wsize);
  }

  /* copy state->wsize or less output bytes into the circular window */
  if (copy >= state.wsize) {
    utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);
    state.wnext = 0;
    state.whave = state.wsize;
  }
  else {
    dist = state.wsize - state.wnext;
    if (dist > copy) {
      dist = copy;
    }
    //zmemcpy(state->window + state->wnext, end - copy, dist);
    utils.arraySet(state.window, src, end - copy, dist, state.wnext);
    copy -= dist;
    if (copy) {
      //zmemcpy(state->window, end - copy, copy);
      utils.arraySet(state.window, src, end - copy, copy, 0);
      state.wnext = copy;
      state.whave = state.wsize;
    }
    else {
      state.wnext += dist;
      if (state.wnext === state.wsize) { state.wnext = 0; }
      if (state.whave < state.wsize) { state.whave += dist; }
    }
  }
  return 0;
}

function inflate(strm, flush) {
  var state;
  var input, output;          // input/output buffers
  var next;                   /* next input INDEX */
  var put;                    /* next output INDEX */
  var have, left;             /* available input and output */
  var hold;                   /* bit buffer */
  var bits;                   /* bits in bit buffer */
  var _in, _out;              /* save starting available input and output */
  var copy;                   /* number of stored or match bytes to copy */
  var from;                   /* where to copy match bytes from */
  var from_source;
  var here = 0;               /* current decoding table entry */
  var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
  //var last;                   /* parent table entry */
  var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
  var len;                    /* length to copy for repeats, bits to drop */
  var ret;                    /* return code */
  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */
  var opts;

  var n; // temporary var for NEED_BITS

  var order = /* permutation of code lengths */
    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];


  if (!strm || !strm.state || !strm.output ||
      (!strm.input && strm.avail_in !== 0)) {
    return Z_STREAM_ERROR;
  }

  state = strm.state;
  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */


  //--- LOAD() ---
  put = strm.next_out;
  output = strm.output;
  left = strm.avail_out;
  next = strm.next_in;
  input = strm.input;
  have = strm.avail_in;
  hold = state.hold;
  bits = state.bits;
  //---

  _in = have;
  _out = left;
  ret = Z_OK;

  inf_leave: // goto emulation
  for (;;) {
    switch (state.mode) {
      case HEAD:
        if (state.wrap === 0) {
          state.mode = TYPEDO;
          break;
        }
        //=== NEEDBITS(16);
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
          state.check = 0/*crc32(0L, Z_NULL, 0)*/;
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//

          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          state.mode = FLAGS;
          break;
        }
        state.flags = 0;           /* expect zlib header */
        if (state.head) {
          state.head.done = false;
        }
        if (!(state.wrap & 1) ||   /* check if zlib header allowed */
          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
          strm.msg = 'incorrect header check';
          state.mode = BAD;
          break;
        }
        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
          strm.msg = 'unknown compression method';
          state.mode = BAD;
          break;
        }
        //--- DROPBITS(4) ---//
        hold >>>= 4;
        bits -= 4;
        //---//
        len = (hold & 0x0f)/*BITS(4)*/ + 8;
        if (state.wbits === 0) {
          state.wbits = len;
        }
        else if (len > state.wbits) {
          strm.msg = 'invalid window size';
          state.mode = BAD;
          break;
        }
        state.dmax = 1 << len;
        //Tracev((stderr, "inflate:   zlib header ok\n"));
        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
        state.mode = hold & 0x200 ? DICTID : TYPE;
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        break;
      case FLAGS:
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.flags = hold;
        if ((state.flags & 0xff) !== Z_DEFLATED) {
          strm.msg = 'unknown compression method';
          state.mode = BAD;
          break;
        }
        if (state.flags & 0xe000) {
          strm.msg = 'unknown header flags set';
          state.mode = BAD;
          break;
        }
        if (state.head) {
          state.head.text = ((hold >> 8) & 1);
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = TIME;
        /* falls through */
      case TIME:
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (state.head) {
          state.head.time = hold;
        }
        if (state.flags & 0x0200) {
          //=== CRC4(state.check, hold)
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          hbuf[2] = (hold >>> 16) & 0xff;
          hbuf[3] = (hold >>> 24) & 0xff;
          state.check = crc32(state.check, hbuf, 4, 0);
          //===
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = OS;
        /* falls through */
      case OS:
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (state.head) {
          state.head.xflags = (hold & 0xff);
          state.head.os = (hold >> 8);
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = EXLEN;
        /* falls through */
      case EXLEN:
        if (state.flags & 0x0400) {
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.length = hold;
          if (state.head) {
            state.head.extra_len = hold;
          }
          if (state.flags & 0x0200) {
            //=== CRC2(state.check, hold);
            hbuf[0] = hold & 0xff;
            hbuf[1] = (hold >>> 8) & 0xff;
            state.check = crc32(state.check, hbuf, 2, 0);
            //===//
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
        }
        else if (state.head) {
          state.head.extra = null/*Z_NULL*/;
        }
        state.mode = EXTRA;
        /* falls through */
      case EXTRA:
        if (state.flags & 0x0400) {
          copy = state.length;
          if (copy > have) { copy = have; }
          if (copy) {
            if (state.head) {
              len = state.head.extra_len - state.length;
              if (!state.head.extra) {
                // Use untyped array for more convenient processing later
                state.head.extra = new Array(state.head.extra_len);
              }
              utils.arraySet(
                state.head.extra,
                input,
                next,
                // extra field is limited to 65536 bytes
                // - no need for additional size check
                copy,
                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
                len
              );
              //zmemcpy(state.head.extra + len, next,
              //        len + copy > state.head.extra_max ?
              //        state.head.extra_max - len : copy);
            }
            if (state.flags & 0x0200) {
              state.check = crc32(state.check, input, copy, next);
            }
            have -= copy;
            next += copy;
            state.length -= copy;
          }
          if (state.length) { break inf_leave; }
        }
        state.length = 0;
        state.mode = NAME;
        /* falls through */
      case NAME:
        if (state.flags & 0x0800) {
          if (have === 0) { break inf_leave; }
          copy = 0;
          do {
            // TODO: 2 or 1 bytes?
            len = input[next + copy++];
            /* use constant limit because in js we should not preallocate memory */
            if (state.head && len &&
                (state.length < 65536 /*state.head.name_max*/)) {
              state.head.name += String.fromCharCode(len);
            }
          } while (len && copy < have);

          if (state.flags & 0x0200) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          if (len) { break inf_leave; }
        }
        else if (state.head) {
          state.head.name = null;
        }
        state.length = 0;
        state.mode = COMMENT;
        /* falls through */
      case COMMENT:
        if (state.flags & 0x1000) {
          if (have === 0) { break inf_leave; }
          copy = 0;
          do {
            len = input[next + copy++];
            /* use constant limit because in js we should not preallocate memory */
            if (state.head && len &&
                (state.length < 65536 /*state.head.comm_max*/)) {
              state.head.comment += String.fromCharCode(len);
            }
          } while (len && copy < have);
          if (state.flags & 0x0200) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          if (len) { break inf_leave; }
        }
        else if (state.head) {
          state.head.comment = null;
        }
        state.mode = HCRC;
        /* falls through */
      case HCRC:
        if (state.flags & 0x0200) {
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if (hold !== (state.check & 0xffff)) {
            strm.msg = 'header crc mismatch';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
        }
        if (state.head) {
          state.head.hcrc = ((state.flags >> 9) & 1);
          state.head.done = true;
        }
        strm.adler = state.check = 0;
        state.mode = TYPE;
        break;
      case DICTID:
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        strm.adler = state.check = zswap32(hold);
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = DICT;
        /* falls through */
      case DICT:
        if (state.havedict === 0) {
          //--- RESTORE() ---
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          //---
          return Z_NEED_DICT;
        }
        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
        state.mode = TYPE;
        /* falls through */
      case TYPE:
        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case TYPEDO:
        if (state.last) {
          //--- BYTEBITS() ---//
          hold >>>= bits & 7;
          bits -= bits & 7;
          //---//
          state.mode = CHECK;
          break;
        }
        //=== NEEDBITS(3); */
        while (bits < 3) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.last = (hold & 0x01)/*BITS(1)*/;
        //--- DROPBITS(1) ---//
        hold >>>= 1;
        bits -= 1;
        //---//

        switch ((hold & 0x03)/*BITS(2)*/) {
          case 0:                             /* stored block */
            //Tracev((stderr, "inflate:     stored block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = STORED;
            break;
          case 1:                             /* fixed block */
            fixedtables(state);
            //Tracev((stderr, "inflate:     fixed codes block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = LEN_;             /* decode codes */
            if (flush === Z_TREES) {
              //--- DROPBITS(2) ---//
              hold >>>= 2;
              bits -= 2;
              //---//
              break inf_leave;
            }
            break;
          case 2:                             /* dynamic block */
            //Tracev((stderr, "inflate:     dynamic codes block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = TABLE;
            break;
          case 3:
            strm.msg = 'invalid block type';
            state.mode = BAD;
        }
        //--- DROPBITS(2) ---//
        hold >>>= 2;
        bits -= 2;
        //---//
        break;
      case STORED:
        //--- BYTEBITS() ---// /* go to byte boundary */
        hold >>>= bits & 7;
        bits -= bits & 7;
        //---//
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
          strm.msg = 'invalid stored block lengths';
          state.mode = BAD;
          break;
        }
        state.length = hold & 0xffff;
        //Tracev((stderr, "inflate:       stored length %u\n",
        //        state.length));
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = COPY_;
        if (flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case COPY_:
        state.mode = COPY;
        /* falls through */
      case COPY:
        copy = state.length;
        if (copy) {
          if (copy > have) { copy = have; }
          if (copy > left) { copy = left; }
          if (copy === 0) { break inf_leave; }
          //--- zmemcpy(put, next, copy); ---
          utils.arraySet(output, input, next, copy, put);
          //---//
          have -= copy;
          next += copy;
          left -= copy;
          put += copy;
          state.length -= copy;
          break;
        }
        //Tracev((stderr, "inflate:       stored end\n"));
        state.mode = TYPE;
        break;
      case TABLE:
        //=== NEEDBITS(14); */
        while (bits < 14) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
        //--- DROPBITS(5) ---//
        hold >>>= 5;
        bits -= 5;
        //---//
        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
        //--- DROPBITS(5) ---//
        hold >>>= 5;
        bits -= 5;
        //---//
        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
        //--- DROPBITS(4) ---//
        hold >>>= 4;
        bits -= 4;
        //---//
//#ifndef PKZIP_BUG_WORKAROUND
        if (state.nlen > 286 || state.ndist > 30) {
          strm.msg = 'too many length or distance symbols';
          state.mode = BAD;
          break;
        }
//#endif
        //Tracev((stderr, "inflate:       table sizes ok\n"));
        state.have = 0;
        state.mode = LENLENS;
        /* falls through */
      case LENLENS:
        while (state.have < state.ncode) {
          //=== NEEDBITS(3);
          while (bits < 3) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
          //--- DROPBITS(3) ---//
          hold >>>= 3;
          bits -= 3;
          //---//
        }
        while (state.have < 19) {
          state.lens[order[state.have++]] = 0;
        }
        // We have separate tables & no pointers. 2 commented lines below not needed.
        //state.next = state.codes;
        //state.lencode = state.next;
        // Switch to use dynamic table
        state.lencode = state.lendyn;
        state.lenbits = 7;

        opts = { bits: state.lenbits };
        ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
        state.lenbits = opts.bits;

        if (ret) {
          strm.msg = 'invalid code lengths set';
          state.mode = BAD;
          break;
        }
        //Tracev((stderr, "inflate:       code lengths ok\n"));
        state.have = 0;
        state.mode = CODELENS;
        /* falls through */
      case CODELENS:
        while (state.have < state.nlen + state.ndist) {
          for (;;) {
            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          if (here_val < 16) {
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            state.lens[state.have++] = here_val;
          }
          else {
            if (here_val === 16) {
              //=== NEEDBITS(here.bits + 2);
              n = here_bits + 2;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              if (state.have === 0) {
                strm.msg = 'invalid bit length repeat';
                state.mode = BAD;
                break;
              }
              len = state.lens[state.have - 1];
              copy = 3 + (hold & 0x03);//BITS(2);
              //--- DROPBITS(2) ---//
              hold >>>= 2;
              bits -= 2;
              //---//
            }
            else if (here_val === 17) {
              //=== NEEDBITS(here.bits + 3);
              n = here_bits + 3;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              len = 0;
              copy = 3 + (hold & 0x07);//BITS(3);
              //--- DROPBITS(3) ---//
              hold >>>= 3;
              bits -= 3;
              //---//
            }
            else {
              //=== NEEDBITS(here.bits + 7);
              n = here_bits + 7;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              len = 0;
              copy = 11 + (hold & 0x7f);//BITS(7);
              //--- DROPBITS(7) ---//
              hold >>>= 7;
              bits -= 7;
              //---//
            }
            if (state.have + copy > state.nlen + state.ndist) {
              strm.msg = 'invalid bit length repeat';
              state.mode = BAD;
              break;
            }
            while (copy--) {
              state.lens[state.have++] = len;
            }
          }
        }

        /* handle error breaks in while */
        if (state.mode === BAD) { break; }

        /* check for end-of-block code (better have one) */
        if (state.lens[256] === 0) {
          strm.msg = 'invalid code -- missing end-of-block';
          state.mode = BAD;
          break;
        }

        /* build code tables -- note: do not change the lenbits or distbits
           values here (9 and 6) without reading the comments in inftrees.h
           concerning the ENOUGH constants, which depend on those values */
        state.lenbits = 9;

        opts = { bits: state.lenbits };
        ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
        // We have separate tables & no pointers. 2 commented lines below not needed.
        // state.next_index = opts.table_index;
        state.lenbits = opts.bits;
        // state.lencode = state.next;

        if (ret) {
          strm.msg = 'invalid literal/lengths set';
          state.mode = BAD;
          break;
        }

        state.distbits = 6;
        //state.distcode.copy(state.codes);
        // Switch to use dynamic table
        state.distcode = state.distdyn;
        opts = { bits: state.distbits };
        ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
        // We have separate tables & no pointers. 2 commented lines below not needed.
        // state.next_index = opts.table_index;
        state.distbits = opts.bits;
        // state.distcode = state.next;

        if (ret) {
          strm.msg = 'invalid distances set';
          state.mode = BAD;
          break;
        }
        //Tracev((stderr, 'inflate:       codes ok\n'));
        state.mode = LEN_;
        if (flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case LEN_:
        state.mode = LEN;
        /* falls through */
      case LEN:
        if (have >= 6 && left >= 258) {
          //--- RESTORE() ---
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          //---
          inflate_fast(strm, _out);
          //--- LOAD() ---
          put = strm.next_out;
          output = strm.output;
          left = strm.avail_out;
          next = strm.next_in;
          input = strm.input;
          have = strm.avail_in;
          hold = state.hold;
          bits = state.bits;
          //---

          if (state.mode === TYPE) {
            state.back = -1;
          }
          break;
        }
        state.back = 0;
        for (;;) {
          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if (here_bits <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if (here_op && (here_op & 0xf0) === 0) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;
          for (;;) {
            here = state.lencode[last_val +
                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((last_bits + here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          //--- DROPBITS(last.bits) ---//
          hold >>>= last_bits;
          bits -= last_bits;
          //---//
          state.back += last_bits;
        }
        //--- DROPBITS(here.bits) ---//
        hold >>>= here_bits;
        bits -= here_bits;
        //---//
        state.back += here_bits;
        state.length = here_val;
        if (here_op === 0) {
          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
          //        "inflate:         literal '%c'\n" :
          //        "inflate:         literal 0x%02x\n", here.val));
          state.mode = LIT;
          break;
        }
        if (here_op & 32) {
          //Tracevv((stderr, "inflate:         end of block\n"));
          state.back = -1;
          state.mode = TYPE;
          break;
        }
        if (here_op & 64) {
          strm.msg = 'invalid literal/length code';
          state.mode = BAD;
          break;
        }
        state.extra = here_op & 15;
        state.mode = LENEXT;
        /* falls through */
      case LENEXT:
        if (state.extra) {
          //=== NEEDBITS(state.extra);
          n = state.extra;
          while (bits < n) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
          //--- DROPBITS(state.extra) ---//
          hold >>>= state.extra;
          bits -= state.extra;
          //---//
          state.back += state.extra;
        }
        //Tracevv((stderr, "inflate:         length %u\n", state.length));
        state.was = state.length;
        state.mode = DIST;
        /* falls through */
      case DIST:
        for (;;) {
          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if ((here_op & 0xf0) === 0) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;
          for (;;) {
            here = state.distcode[last_val +
                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((last_bits + here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          //--- DROPBITS(last.bits) ---//
          hold >>>= last_bits;
          bits -= last_bits;
          //---//
          state.back += last_bits;
        }
        //--- DROPBITS(here.bits) ---//
        hold >>>= here_bits;
        bits -= here_bits;
        //---//
        state.back += here_bits;
        if (here_op & 64) {
          strm.msg = 'invalid distance code';
          state.mode = BAD;
          break;
        }
        state.offset = here_val;
        state.extra = (here_op) & 15;
        state.mode = DISTEXT;
        /* falls through */
      case DISTEXT:
        if (state.extra) {
          //=== NEEDBITS(state.extra);
          n = state.extra;
          while (bits < n) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
          //--- DROPBITS(state.extra) ---//
          hold >>>= state.extra;
          bits -= state.extra;
          //---//
          state.back += state.extra;
        }
//#ifdef INFLATE_STRICT
        if (state.offset > state.dmax) {
          strm.msg = 'invalid distance too far back';
          state.mode = BAD;
          break;
        }
//#endif
        //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
        state.mode = MATCH;
        /* falls through */
      case MATCH:
        if (left === 0) { break inf_leave; }
        copy = _out - left;
        if (state.offset > copy) {         /* copy from window */
          copy = state.offset - copy;
          if (copy > state.whave) {
            if (state.sane) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break;
            }
// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//          Trace((stderr, "inflate.c too far\n"));
//          copy -= state.whave;
//          if (copy > state.length) { copy = state.length; }
//          if (copy > left) { copy = left; }
//          left -= copy;
//          state.length -= copy;
//          do {
//            output[put++] = 0;
//          } while (--copy);
//          if (state.length === 0) { state.mode = LEN; }
//          break;
//#endif
          }
          if (copy > state.wnext) {
            copy -= state.wnext;
            from = state.wsize - copy;
          }
          else {
            from = state.wnext - copy;
          }
          if (copy > state.length) { copy = state.length; }
          from_source = state.window;
        }
        else {                              /* copy from output */
          from_source = output;
          from = put - state.offset;
          copy = state.length;
        }
        if (copy > left) { copy = left; }
        left -= copy;
        state.length -= copy;
        do {
          output[put++] = from_source[from++];
        } while (--copy);
        if (state.length === 0) { state.mode = LEN; }
        break;
      case LIT:
        if (left === 0) { break inf_leave; }
        output[put++] = state.length;
        left--;
        state.mode = LEN;
        break;
      case CHECK:
        if (state.wrap) {
          //=== NEEDBITS(32);
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            // Use '|' instead of '+' to make sure that result is signed
            hold |= input[next++] << bits;
            bits += 8;
          }
          //===//
          _out -= left;
          strm.total_out += _out;
          state.total += _out;
          if (_out) {
            strm.adler = state.check =
                /*UPDATE(state.check, put - _out, _out);*/
                (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));

          }
          _out = left;
          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
          if ((state.flags ? hold : zswap32(hold)) !== state.check) {
            strm.msg = 'incorrect data check';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          //Tracev((stderr, "inflate:   check matches trailer\n"));
        }
        state.mode = LENGTH;
        /* falls through */
      case LENGTH:
        if (state.wrap && state.flags) {
          //=== NEEDBITS(32);
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if (hold !== (state.total & 0xffffffff)) {
            strm.msg = 'incorrect length check';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          //Tracev((stderr, "inflate:   length matches trailer\n"));
        }
        state.mode = DONE;
        /* falls through */
      case DONE:
        ret = Z_STREAM_END;
        break inf_leave;
      case BAD:
        ret = Z_DATA_ERROR;
        break inf_leave;
      case MEM:
        return Z_MEM_ERROR;
      case SYNC:
        /* falls through */
      default:
        return Z_STREAM_ERROR;
    }
  }

  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

  /*
     Return from inflate(), updating the total counts and the check value.
     If there was no progress during the inflate() call, return a buffer
     error.  Call updatewindow() to create and/or update the window state.
     Note: a memory error from inflate() is non-recoverable.
   */

  //--- RESTORE() ---
  strm.next_out = put;
  strm.avail_out = left;
  strm.next_in = next;
  strm.avail_in = have;
  state.hold = hold;
  state.bits = bits;
  //---

  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
                      (state.mode < CHECK || flush !== Z_FINISH))) {
    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
      state.mode = MEM;
      return Z_MEM_ERROR;
    }
  }
  _in -= strm.avail_in;
  _out -= strm.avail_out;
  strm.total_in += _in;
  strm.total_out += _out;
  state.total += _out;
  if (state.wrap && _out) {
    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
  }
  strm.data_type = state.bits + (state.last ? 64 : 0) +
                    (state.mode === TYPE ? 128 : 0) +
                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
    ret = Z_BUF_ERROR;
  }
  return ret;
}

function inflateEnd(strm) {

  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
    return Z_STREAM_ERROR;
  }

  var state = strm.state;
  if (state.window) {
    state.window = null;
  }
  strm.state = null;
  return Z_OK;
}

function inflateGetHeader(strm, head) {
  var state;

  /* check state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }

  /* save header structure */
  state.head = head;
  head.done = false;
  return Z_OK;
}

function inflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;

  var state;
  var dictid;
  var ret;

  /* check state */
  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }
  state = strm.state;

  if (state.wrap !== 0 && state.mode !== DICT) {
    return Z_STREAM_ERROR;
  }

  /* check for correct dictionary identifier */
  if (state.mode === DICT) {
    dictid = 1; /* adler32(0, null, 0)*/
    /* dictid = adler32(dictid, dictionary, dictLength); */
    dictid = adler32(dictid, dictionary, dictLength, 0);
    if (dictid !== state.check) {
      return Z_DATA_ERROR;
    }
  }
  /* copy dictionary to window using updatewindow(), which will amend the
   existing dictionary if appropriate */
  ret = updatewindow(strm, dictionary, dictLength, dictLength);
  if (ret) {
    state.mode = MEM;
    return Z_MEM_ERROR;
  }
  state.havedict = 1;
  // Tracev((stderr, "inflate:   dictionary set\n"));
  return Z_OK;
}

exports.inflateReset = inflateReset;
exports.inflateReset2 = inflateReset2;
exports.inflateResetKeep = inflateResetKeep;
exports.inflateInit = inflateInit;
exports.inflateInit2 = inflateInit2;
exports.inflate = inflate;
exports.inflateEnd = inflateEnd;
exports.inflateGetHeader = inflateGetHeader;
exports.inflateSetDictionary = inflateSetDictionary;
exports.inflateInfo = 'pako inflate (from Nodeca project)';

/* Not implemented
exports.inflateCopy = inflateCopy;
exports.inflateGetDictionary = inflateGetDictionary;
exports.inflateMark = inflateMark;
exports.inflatePrime = inflatePrime;
exports.inflateSync = inflateSync;
exports.inflateSyncPoint = inflateSyncPoint;
exports.inflateUndermine = inflateUndermine;
*/


/***/ }),
/* 389 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

// See state defs from inflate.js
var BAD = 30;       /* got a data error -- remain here until reset */
var TYPE = 12;      /* i: waiting for type bits, including last-flag bit */

/*
   Decode literal, length, and distance codes and write out the resulting
   literal and match bytes until either not enough input or output is
   available, an end-of-block is encountered, or a data error is encountered.
   When large enough input and output buffers are supplied to inflate(), for
   example, a 16K input buffer and a 64K output buffer, more than 95% of the
   inflate execution time is spent in this routine.

   Entry assumptions:

        state.mode === LEN
        strm.avail_in >= 6
        strm.avail_out >= 258
        start >= strm.avail_out
        state.bits < 8

   On return, state.mode is one of:

        LEN -- ran out of enough output space or enough available input
        TYPE -- reached end of block code, inflate() to interpret next block
        BAD -- error in block data

   Notes:

    - The maximum input bits used by a length/distance pair is 15 bits for the
      length code, 5 bits for the length extra, 15 bits for the distance code,
      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
      Therefore if strm.avail_in >= 6, then there is enough input to avoid
      checking for available input while decoding.

    - The maximum bytes that a single length/distance pair can output is 258
      bytes, which is the maximum length that can be coded.  inflate_fast()
      requires strm.avail_out >= 258 for each loop to avoid checking for
      output space.
 */
module.exports = function inflate_fast(strm, start) {
  var state;
  var _in;                    /* local strm.input */
  var last;                   /* have enough input while in < last */
  var _out;                   /* local strm.output */
  var beg;                    /* inflate()'s initial strm.output */
  var end;                    /* while out < end, enough space available */
//#ifdef INFLATE_STRICT
  var dmax;                   /* maximum distance from zlib header */
//#endif
  var wsize;                  /* window size or zero if not using window */
  var whave;                  /* valid bytes in the window */
  var wnext;                  /* window write index */
  // Use `s_window` instead `window`, avoid conflict with instrumentation tools
  var s_window;               /* allocated sliding window, if wsize != 0 */
  var hold;                   /* local strm.hold */
  var bits;                   /* local strm.bits */
  var lcode;                  /* local strm.lencode */
  var dcode;                  /* local strm.distcode */
  var lmask;                  /* mask for first level of length codes */
  var dmask;                  /* mask for first level of distance codes */
  var here;                   /* retrieved table entry */
  var op;                     /* code bits, operation, extra bits, or */
                              /*  window position, window bytes to copy */
  var len;                    /* match length, unused bytes */
  var dist;                   /* match distance */
  var from;                   /* where to copy match from */
  var from_source;


  var input, output; // JS specific, because we have no pointers

  /* copy state to local variables */
  state = strm.state;
  //here = state.here;
  _in = strm.next_in;
  input = strm.input;
  last = _in + (strm.avail_in - 5);
  _out = strm.next_out;
  output = strm.output;
  beg = _out - (start - strm.avail_out);
  end = _out + (strm.avail_out - 257);
//#ifdef INFLATE_STRICT
  dmax = state.dmax;
//#endif
  wsize = state.wsize;
  whave = state.whave;
  wnext = state.wnext;
  s_window = state.window;
  hold = state.hold;
  bits = state.bits;
  lcode = state.lencode;
  dcode = state.distcode;
  lmask = (1 << state.lenbits) - 1;
  dmask = (1 << state.distbits) - 1;


  /* decode literals and length/distances until end-of-block or not enough
     input data or output space */

  top:
  do {
    if (bits < 15) {
      hold += input[_in++] << bits;
      bits += 8;
      hold += input[_in++] << bits;
      bits += 8;
    }

    here = lcode[hold & lmask];

    dolen:
    for (;;) { // Goto emulation
      op = here >>> 24/*here.bits*/;
      hold >>>= op;
      bits -= op;
      op = (here >>> 16) & 0xff/*here.op*/;
      if (op === 0) {                          /* literal */
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        output[_out++] = here & 0xffff/*here.val*/;
      }
      else if (op & 16) {                     /* length base */
        len = here & 0xffff/*here.val*/;
        op &= 15;                           /* number of extra bits */
        if (op) {
          if (bits < op) {
            hold += input[_in++] << bits;
            bits += 8;
          }
          len += hold & ((1 << op) - 1);
          hold >>>= op;
          bits -= op;
        }
        //Tracevv((stderr, "inflate:         length %u\n", len));
        if (bits < 15) {
          hold += input[_in++] << bits;
          bits += 8;
          hold += input[_in++] << bits;
          bits += 8;
        }
        here = dcode[hold & dmask];

        dodist:
        for (;;) { // goto emulation
          op = here >>> 24/*here.bits*/;
          hold >>>= op;
          bits -= op;
          op = (here >>> 16) & 0xff/*here.op*/;

          if (op & 16) {                      /* distance base */
            dist = here & 0xffff/*here.val*/;
            op &= 15;                       /* number of extra bits */
            if (bits < op) {
              hold += input[_in++] << bits;
              bits += 8;
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
              }
            }
            dist += hold & ((1 << op) - 1);
//#ifdef INFLATE_STRICT
            if (dist > dmax) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break top;
            }
//#endif
            hold >>>= op;
            bits -= op;
            //Tracevv((stderr, "inflate:         distance %u\n", dist));
            op = _out - beg;                /* max distance in output */
            if (dist > op) {                /* see if copy from window */
              op = dist - op;               /* distance back in window */
              if (op > whave) {
                if (state.sane) {
                  strm.msg = 'invalid distance too far back';
                  state.mode = BAD;
                  break top;
                }

// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//                if (len <= op - whave) {
//                  do {
//                    output[_out++] = 0;
//                  } while (--len);
//                  continue top;
//                }
//                len -= op - whave;
//                do {
//                  output[_out++] = 0;
//                } while (--op > whave);
//                if (op === 0) {
//                  from = _out - dist;
//                  do {
//                    output[_out++] = output[from++];
//                  } while (--len);
//                  continue top;
//                }
//#endif
              }
              from = 0; // window index
              from_source = s_window;
              if (wnext === 0) {           /* very common case */
                from += wsize - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              else if (wnext < op) {      /* wrap around window */
                from += wsize + wnext - op;
                op -= wnext;
                if (op < len) {         /* some from end of window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = 0;
                  if (wnext < len) {  /* some from start of window */
                    op = wnext;
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist;      /* rest from output */
                    from_source = output;
                  }
                }
              }
              else {                      /* contiguous in window */
                from += wnext - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              while (len > 2) {
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                len -= 3;
              }
              if (len) {
                output[_out++] = from_source[from++];
                if (len > 1) {
                  output[_out++] = from_source[from++];
                }
              }
            }
            else {
              from = _out - dist;          /* copy direct from output */
              do {                        /* minimum length is three */
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                len -= 3;
              } while (len > 2);
              if (len) {
                output[_out++] = output[from++];
                if (len > 1) {
                  output[_out++] = output[from++];
                }
              }
            }
          }
          else if ((op & 64) === 0) {          /* 2nd level distance code */
            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
            continue dodist;
          }
          else {
            strm.msg = 'invalid distance code';
            state.mode = BAD;
            break top;
          }

          break; // need to emulate goto via "continue"
        }
      }
      else if ((op & 64) === 0) {              /* 2nd level length code */
        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
        continue dolen;
      }
      else if (op & 32) {                     /* end-of-block */
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.mode = TYPE;
        break top;
      }
      else {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD;
        break top;
      }

      break; // need to emulate goto via "continue"
    }
  } while (_in < last && _out < end);

  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
  len = bits >> 3;
  _in -= len;
  bits -= len << 3;
  hold &= (1 << bits) - 1;

  /* update state and return */
  strm.next_in = _in;
  strm.next_out = _out;
  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
  state.hold = hold;
  state.bits = bits;
  return;
};


/***/ }),
/* 390 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var utils = __webpack_require__(25);

var MAXBITS = 15;
var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

var CODES = 0;
var LENS = 1;
var DISTS = 2;

var lbase = [ /* Length codes 257..285 base */
  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
];

var lext = [ /* Length codes 257..285 extra */
  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
];

var dbase = [ /* Distance codes 0..29 base */
  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
  8193, 12289, 16385, 24577, 0, 0
];

var dext = [ /* Distance codes 0..29 extra */
  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
  28, 28, 29, 29, 64, 64
];

module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)
{
  var bits = opts.bits;
      //here = opts.here; /* table entry for duplication */

  var len = 0;               /* a code's length in bits */
  var sym = 0;               /* index of code symbols */
  var min = 0, max = 0;          /* minimum and maximum code lengths */
  var root = 0;              /* number of index bits for root table */
  var curr = 0;              /* number of index bits for current table */
  var drop = 0;              /* code bits to drop for sub-table */
  var left = 0;                   /* number of prefix codes available */
  var used = 0;              /* code entries in table used */
  var huff = 0;              /* Huffman code */
  var incr;              /* for incrementing code, index */
  var fill;              /* index for replicating entries */
  var low;               /* low bits for current root entry */
  var mask;              /* mask for low root bits */
  var next;             /* next available space in table */
  var base = null;     /* base value table to use */
  var base_index = 0;
//  var shoextra;    /* extra bits table to use */
  var end;                    /* use base and extra for symbol > end */
  var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
  var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
  var extra = null;
  var extra_index = 0;

  var here_bits, here_op, here_val;

  /*
   Process a set of code lengths to create a canonical Huffman code.  The
   code lengths are lens[0..codes-1].  Each length corresponds to the
   symbols 0..codes-1.  The Huffman code is generated by first sorting the
   symbols by length from short to long, and retaining the symbol order
   for codes with equal lengths.  Then the code starts with all zero bits
   for the first code of the shortest length, and the codes are integer
   increments for the same length, and zeros are appended as the length
   increases.  For the deflate format, these bits are stored backwards
   from their more natural integer increment ordering, and so when the
   decoding tables are built in the large loop below, the integer codes
   are incremented backwards.

   This routine assumes, but does not check, that all of the entries in
   lens[] are in the range 0..MAXBITS.  The caller must assure this.
   1..MAXBITS is interpreted as that code length.  zero means that that
   symbol does not occur in this code.

   The codes are sorted by computing a count of codes for each length,
   creating from that a table of starting indices for each length in the
   sorted table, and then entering the symbols in order in the sorted
   table.  The sorted table is work[], with that space being provided by
   the caller.

   The length counts are used for other purposes as well, i.e. finding
   the minimum and maximum length codes, determining if there are any
   codes at all, checking for a valid set of lengths, and looking ahead
   at length counts to determine sub-table sizes when building the
   decoding tables.
   */

  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
  for (len = 0; len <= MAXBITS; len++) {
    count[len] = 0;
  }
  for (sym = 0; sym < codes; sym++) {
    count[lens[lens_index + sym]]++;
  }

  /* bound code lengths, force root to be within code lengths */
  root = bits;
  for (max = MAXBITS; max >= 1; max--) {
    if (count[max] !== 0) { break; }
  }
  if (root > max) {
    root = max;
  }
  if (max === 0) {                     /* no symbols to code at all */
    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;


    //table.op[opts.table_index] = 64;
    //table.bits[opts.table_index] = 1;
    //table.val[opts.table_index++] = 0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;

    opts.bits = 1;
    return 0;     /* no symbols, but wait for decoding to report error */
  }
  for (min = 1; min < max; min++) {
    if (count[min] !== 0) { break; }
  }
  if (root < min) {
    root = min;
  }

  /* check for an over-subscribed or incomplete set of lengths */
  left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= count[len];
    if (left < 0) {
      return -1;
    }        /* over-subscribed */
  }
  if (left > 0 && (type === CODES || max !== 1)) {
    return -1;                      /* incomplete set */
  }

  /* generate offsets into symbol table for each length for sorting */
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++) {
    offs[len + 1] = offs[len] + count[len];
  }

  /* sort symbols by length, by symbol order within each length */
  for (sym = 0; sym < codes; sym++) {
    if (lens[lens_index + sym] !== 0) {
      work[offs[lens[lens_index + sym]]++] = sym;
    }
  }

  /*
   Create and fill in decoding tables.  In this loop, the table being
   filled is at next and has curr index bits.  The code being used is huff
   with length len.  That code is converted to an index by dropping drop
   bits off of the bottom.  For codes where len is less than drop + curr,
   those top drop + curr - len bits are incremented through all values to
   fill the table with replicated entries.

   root is the number of index bits for the root table.  When len exceeds
   root, sub-tables are created pointed to by the root entry with an index
   of the low root bits of huff.  This is saved in low to check for when a
   new sub-table should be started.  drop is zero when the root table is
   being filled, and drop is root when sub-tables are being filled.

   When a new sub-table is needed, it is necessary to look ahead in the
   code lengths to determine what size sub-table is needed.  The length
   counts are used for this, and so count[] is decremented as codes are
   entered in the tables.

   used keeps track of how many table entries have been allocated from the
   provided *table space.  It is checked for LENS and DIST tables against
   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
   the initial root table size constants.  See the comments in inftrees.h
   for more information.

   sym increments through all symbols, and the loop terminates when
   all codes of length max, i.e. all codes, have been processed.  This
   routine permits incomplete codes, so another loop after this one fills
   in the rest of the decoding tables with invalid code markers.
   */

  /* set up for code type */
  // poor man optimization - use if-else instead of switch,
  // to avoid deopts in old v8
  if (type === CODES) {
    base = extra = work;    /* dummy value--not used */
    end = 19;

  } else if (type === LENS) {
    base = lbase;
    base_index -= 257;
    extra = lext;
    extra_index -= 257;
    end = 256;

  } else {                    /* DISTS */
    base = dbase;
    extra = dext;
    end = -1;
  }

  /* initialize opts for loop */
  huff = 0;                   /* starting code */
  sym = 0;                    /* starting code symbol */
  len = min;                  /* starting code length */
  next = table_index;              /* current table to fill in */
  curr = root;                /* current table index bits */
  drop = 0;                   /* current bits to drop from code for index */
  low = -1;                   /* trigger new sub-table when len > root */
  used = 1 << root;          /* use root table entries */
  mask = used - 1;            /* mask for comparing low */

  /* check available table space */
  if ((type === LENS && used > ENOUGH_LENS) ||
    (type === DISTS && used > ENOUGH_DISTS)) {
    return 1;
  }

  /* process all codes and make table entries */
  for (;;) {
    /* create table entry */
    here_bits = len - drop;
    if (work[sym] < end) {
      here_op = 0;
      here_val = work[sym];
    }
    else if (work[sym] > end) {
      here_op = extra[extra_index + work[sym]];
      here_val = base[base_index + work[sym]];
    }
    else {
      here_op = 32 + 64;         /* end of block */
      here_val = 0;
    }

    /* replicate for those indices with low len bits equal to huff */
    incr = 1 << (len - drop);
    fill = 1 << curr;
    min = fill;                 /* save offset to next table */
    do {
      fill -= incr;
      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
    } while (fill !== 0);

    /* backwards increment the len-bit code huff */
    incr = 1 << (len - 1);
    while (huff & incr) {
      incr >>= 1;
    }
    if (incr !== 0) {
      huff &= incr - 1;
      huff += incr;
    } else {
      huff = 0;
    }

    /* go to next symbol, update count, len */
    sym++;
    if (--count[len] === 0) {
      if (len === max) { break; }
      len = lens[lens_index + work[sym]];
    }

    /* create new sub-table if needed */
    if (len > root && (huff & mask) !== low) {
      /* if first time, transition to sub-tables */
      if (drop === 0) {
        drop = root;
      }

      /* increment past last table */
      next += min;            /* here min is 1 << curr */

      /* determine length of next table */
      curr = len - drop;
      left = 1 << curr;
      while (curr + drop < max) {
        left -= count[curr + drop];
        if (left <= 0) { break; }
        curr++;
        left <<= 1;
      }

      /* check for enough space */
      used += 1 << curr;
      if ((type === LENS && used > ENOUGH_LENS) ||
        (type === DISTS && used > ENOUGH_DISTS)) {
        return 1;
      }

      /* point entry in root table to sub-table */
      low = huff & mask;
      /*table.op[low] = curr;
      table.bits[low] = root;
      table.val[low] = next - opts.table_index;*/
      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
    }
  }

  /* fill in remaining table entry if code is incomplete (guaranteed to have
   at most one remaining entry, since if the code is incomplete, the
   maximum code length that was allowed to get this far is one bit) */
  if (huff !== 0) {
    //table.op[next + huff] = 64;            /* invalid code marker */
    //table.bits[next + huff] = len - drop;
    //table.val[next + huff] = 0;
    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
  }

  /* set return parameters */
  //opts.table_index += used;
  opts.bits = root;
  return 0;
};


/***/ }),
/* 391 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function GZheader() {
  /* true if compressed data believed to be text */
  this.text       = 0;
  /* modification time */
  this.time       = 0;
  /* extra flags (not used when writing a gzip file) */
  this.xflags     = 0;
  /* operating system */
  this.os         = 0;
  /* pointer to extra field or Z_NULL if none */
  this.extra      = null;
  /* extra field length (valid if extra != Z_NULL) */
  this.extra_len  = 0; // Actually, we don't need it in JS,
                       // but leave for few code modifications

  //
  // Setup limits is not necessary because in js we should not preallocate memory
  // for inflate use constant limit in 65536 bytes
  //

  /* space at extra (only when reading header) */
  // this.extra_max  = 0;
  /* pointer to zero-terminated file name or Z_NULL */
  this.name       = '';
  /* space at name (only when reading header) */
  // this.name_max   = 0;
  /* pointer to zero-terminated comment or Z_NULL */
  this.comment    = '';
  /* space at comment (only when reading header) */
  // this.comm_max   = 0;
  /* true if there was or will be a header crc */
  this.hcrc       = 0;
  /* true when done reading gzip header (not used when writing a gzip file) */
  this.done       = false;
}

module.exports = GZheader;


/***/ }),
/* 392 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__392__;

/***/ }),
/* 393 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__393__;

/***/ }),
/* 394 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__394__;

/***/ }),
/* 395 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__395__;

/***/ }),
/* 396 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__396__;

/***/ }),
/* 397 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__397__;

/***/ }),
/* 398 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__398__;

/***/ }),
/* 399 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__399__;

/***/ }),
/* 400 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__400__;

/***/ }),
/* 401 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__401__;

/***/ }),
/* 402 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__402__;

/***/ }),
/* 403 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
    "options": {
        "java_package": "cn.wildfirechat.proto",
        "java_outer_classname": "WFCMessage"
    },
    "nested": {
        "AddFriendRequest": {
            "fields": {
                "targetUid": {
                    "rule": "required",
                    "type": "string",
                    "id": 1
                },
                "reason": {
                    "rule": "required",
                    "type": "string",
                    "id": 2
                },
                "extra": {
                    "type": "string",
                    "id": 3
                }
            }
        },
        "Conversation": {
            "fields": {
                "type": {
                    "rule": "required",
                    "type": "int32",
                    "id": 1
                },
                "target": {
                    "rule": "required",
                    "type": "string",
                    "id": 2
                },
                "line": {
                    "rule": "required",
                    "type": "int32",
                    "id": 3
                }
            }
        },
        "GroupInfo": {
            "fields": {
                "targetId": {
                    "type": "string",
                    "id": 1
                },
                "name": {
                    "rule": "required",
                    "type": "string",
                    "id": 2
                },
                "portrait": {
                    "type": "string",
                    "id": 3
                },
                "owner": {
                    "type": "string",
                    "id": 4
                },
                "type": {
                    "rule": "required",
                    "type": "int32",
                    "id": 5
                },
                "memberCount": {
                    "type": "int32",
                    "id": 6
                },
                "extra": {
                    "type": "string",
                    "id": 7
                },
                "updateDt": {
                    "type": "int64",
                    "id": 8
                },
                "memberUpdateDt": {
                    "type": "int64",
                    "id": 9
                },
                "mute": {
                    "type": "int32",
                    "id": 10
                },
                "joinType": {
                    "type": "int32",
                    "id": 11
                },
                "privateChat": {
                    "type": "int32",
                    "id": 12
                },
                "searchable": {
                    "type": "int32",
                    "id": 13
                },
                "maxMemberCount": {
                    "type": "int32",
                    "id": 14
                },
                "historyMessage": {
                    "type": "int32",
                    "id": 15
                },
                "superGroup": {
                    "type": "int32",
                    "id": 16
                }
            }
        },
        "GroupMember": {
            "fields": {
                "memberId": {
                    "rule": "required",
                    "type": "string",
                    "id": 1
                },
                "alias": {
                    "type": "string",
                    "id": 2
                },
                "type": {
                    "rule": "required",
                    "type": "int32",
                    "id": 3
                },
                "updateDt": {
                    "type": "int64",
                    "id": 4
                },
                "createDt": {
                    "type": "int64",
                    "id": 5
                },
                "extra": {
                    "type": "string",
                    "id": 6
                }
            }
        },
        "Group": {
            "fields": {
                "groupInfo": {
                    "rule": "required",
                    "type": "GroupInfo",
                    "id": 1
                },
                "members": {
                    "rule": "repeated",
                    "type": "GroupMember",
                    "id": 2
                }
            }
        },
        "ChannelMenu": {
            "fields": {
                "type": {
                    "rule": "required",
                    "type": "string",
                    "id": 1
                },
                "name": {
                    "rule": "required",
                    "type": "string",
                    "id": 2
                },
                "key": {
                    "type": "string",
                    "id": 3
                },
                "url": {
                    "type": "string",
                    "id": 4
                },
                "mediaId": {
                    "type": "string",
                    "id": 5
                },
                "articleId": {
                    "type": "string",
                    "id": 6
                },
                "appId": {
                    "type": "string",
                    "id": 7
                },
                "appPage": {
                    "type": "string",
                    "id": 8
                },
                "subMenu": {
                    "rule": "repeated",
                    "type": "ChannelMenu",
                    "id": 9
                },
                "menuId": {
                    "type": "string",
                    "id": 10
                },
                "extra": {
                    "type": "string",
                    "id": 11
                }
            }
        },
        "ChannelMenuList": {
            "fields": {
                "menu": {
                    "rule": "repeated",
                    "type": "ChannelMenu",
                    "id": 1
                }
            }
        },
        "ChannelInfo": {
            "fields": {
                "targetId": {
                    "type": "string",
                    "id": 1
                },
                "name": {
                    "rule": "required",
                    "type": "string",
                    "id": 2
                },
                "portrait": {
                    "type": "string",
                    "id": 3
                },
                "owner": {
                    "type": "string",
                    "id": 4
                },
                "status": {
                    "type": "int32",
                    "id": 5
                },
                "desc": {
                    "type": "string",
                    "id": 6
                },
                "extra": {
                    "type": "string",
                    "id": 7
                },
                "updateDt": {
                    "type": "int64",
                    "id": 8
                },
                "secret": {
                    "type": "string",
                    "id": 9
                },
                "callback": {
                    "type": "string",
                    "id": 10
                },
                "automatic": {
                    "type": "int32",
                    "id": 11
                },
                "menu": {
                    "rule": "repeated",
                    "type": "ChannelMenu",
                    "id": 12
                }
            }
        },
        "ModifyChannelInfo": {
            "fields": {
                "channelId": {
                    "rule": "required",
                    "type": "string",
                    "id": 1
                },
                "type": {
                    "rule": "required",
                    "type": "int32",
                    "id": 2
                },
                "value": {
                    "rule": "required",
                    "type": "string",
                    "id": 3
                }
            }
        },
        "TransferChannel": {
            "fields": {
                "channelId": {
                    "rule": "required",
                    "type": "string",
                    "id": 1
                },
                "newOwner": {
                    "rule": "required",
                    "type": "string",
                    "id": 2
                }
            }
        },
        "PullChannelInfo": {
            "fields": {
                "channelId": {
                    "rule": "required",
                    "type": "string",
                    "id": 1
                },
                "head": {
                    "rule": "required",
                    "type": "int64",
                    "id": 2
                }
            }
        },
        "PullChannelListener": {
            "fields": {
                "channelId": {
                    "rule": "required",
                    "type": "string",
                    "id": 1
                },
                "offset": {
                    "rule": "required",
                    "type": "int32",
                    "id": 2
                },
                "count": {
                    "rule": "required",
                    "type": "int32",
                    "id": 3
                }
            }
        },
        "PullChannelListenerResult": {
            "fields": {
                "totalCount": {
                    "rule": "required",
                    "type": "int32",
                    "id": 1
                },
                "offset": {
                    "rule": "required",
                    "type": "int32",
                    "id": 2
                },
                "listener": {
                    "rule": "repeated",
                    "type": "string",
                    "id": 3
                }
            }
        },
        "ListenChannel": {
            "fields": {
                "channelId": {
                    "rule": "required",
                    "type": "string",
                    "id": 1
                },
                "listen": {
                    "rule": "required",
                    "type": "int32",
                    "id": 2
                }
            }
        },
        "SearchChannelResult": {
            "fields": {
                "channel": {
                    "rule": "repeated",
                    "type": "ChannelInfo",
                    "id": 1
                },
                "keyword": {
                    "rule": "required",
                    "type": "string",
                    "id": 2
                }
            }
        },
        "MessageContent": {
            "fields": {
                "type": {
                    "rule": "required",
                    "type": "int32",
                    "id": 1
                },
                "searchableContent": {
                    "type": "string",
                    "id": 2
                },
                "pushContent": {
                    "type": "string",
                    "id": 3
                },
                "content": {
                    "type": "string",
                    "id": 4
                },
                "data": {
                    "type": "bytes",
                    "id": 5
                },
                "mediaType": {
                    "type": "int32",
                    "id": 6
                },
                "remoteMediaUrl": {
                    "type": "string",
                    "id": 7
                },
                "persistFlag": {
                    "type": "int32",
                    "id": 8
                },
                "expireDuration": {
                    "type": "int32",
                    "id": 9
                },
                "mentionedType": {
                    "type": "int32",
                    "id": 10
                },
                "mentionedTarget": {
                    "rule": "repeated",
                    "type": "string",
                    "id": 11
                },
                "extra": {
                    "type": "string",
                    "id": 12
                },
                "pushData": {
                    "type": "string",
                    "id": 13
                }
            }
        },
        "AddGroupMemberRequest": {
            "fields": {
                "groupId": {
                    "rule": "required",
                    "type": "string",
                    "id": 1
                },
                "addedMember": {
                    "rule": "repeated",
                    "type": "GroupMember",
                    "id": 2
                },
                "toLine": {
                    "rule": "repeated",
                    "type": "int32",
                    "id": 3,
                    "options": {
                        "packed": false
                    }
                },
                "notifyContent": {
                    "type": "MessageContent",
                    "id": 4
                },
                "extra": {
                    "type": "string",
                    "id": 5
                }
            }
        },
        "CreateGroupRequest": {
            "fields": {
                "group": {
                    "rule": "required",
                    "type": "Group",
                    "id": 1
                },
                "toLine": {
                    "rule": "repeated",
                    "type": "int32",
                    "id": 2,
                    "options": {
                        "packed": false
                    }
                },
                "notifyContent": {
                    "type": "MessageContent",
                    "id": 3
                },
                "memberExtra": {
                    "type": "string",
                    "id": 4
                }
            }
        },
        "DismissGroupRequest": {
            "fields": {
                "groupId": {
                    "rule": "required",
                    "type": "string",
                    "id": 1
                },
                "toLine": {
                    "rule": "repeated",
                    "type": "int32",
                    "id": 2,
                    "options": {
                        "packed": false
                    }
                },
                "notifyContent": {
                    "type": "MessageContent",
                    "id": 3
                }
            }
        },
        "FriendRequest": {
            "fields": {
                "fromUid": {
                    "type": "string",
                    "id": 1
                },
                "toUid": {
                    "rule": "required",
                    "type": "string",
                    "id": 2
                },
                "reason": {
                    "rule": "required",
                    "type": "string",
                    "id": 3
                },
                "status": {
                    "type": "int32",
                    "id": 4
                },
                "updateDt": {
                    "type": "int64",
                    "id": 5
                },
                "fromReadStatus": {
                    "type": "bool",
                    "id": 6
                },
                "toReadStatus": {
                    "type": "bool",
                    "id": 7
                },
                "extra": {
                    "type": "string",
                    "id": 8
                }
            }
        },
        "GeneralResult": {
            "fields": {
                "errorCode": {
                    "rule": "required",
                    "type": "int32",
                    "id": 1
                }
            }
        },
        "GetUploadTokenRequest": {
            "fields": {
                "mediaType": {
                    "rule": "required",
                    "type": "int32",
                    "id": 1
                },
                "mediaPath": {
                    "rule": "required",
                    "type": "string",
                    "id": 2
                },
                "contentType": {
                    "type": "string",
                    "id": 3
                },
                "messageId": {
                    "type": "int64",
                    "id": 4
                }
            }
        },
        "GetUploadTokenResult": {
            "fields": {
                "domain": {
                    "rule": "required",
                    "type": "string",
                    "id": 1
                },
                "token": {
                    "rule": "required",
                    "type": "string",
                    "id": 2
                },
                "server": {
                    "rule": "required",
                    "type": "string",
                    "id": 3
                },
                "port": {
                    "type": "int32",
                    "id": 4
                },
                "type": {
                    "type": "int32",
                    "id": 5
                },
                "date": {
                    "type": "string",
                    "id": 6
                },
                "path": {
                    "type": "string",
                    "id": 7
                },
                "backupServer": {
                    "type": "string",
                    "id": 8
                },
                "backupPort": {
                    "type": "int32",
                    "id": 9
                },
                "sslPort": {
                    "type": "int32",
                    "id": 10
                },
                "backupSslPort": {
                    "type": "int32",
                    "id": 11
                },
                "sslToken": {
                    "type": "string",
                    "id": 12
                },
                "backupToken": {
                    "type": "string",
                    "id": 13
                },
                "backupSslToken": {
                    "type": "string",
                    "id": 14
                }
            }
        },
        "GetPresignedUrlResult": {
            "fields": {
                "presignedUrl": {
                    "rule": "required",
                    "type": "string",
                    "id": 1
                },
                "mediaUrl": {
                    "rule": "required",
                    "type": "string",
                    "id": 2
                },
                "backupPresignedUrl": {
                    "type": "string",
                    "id": 3
                },
                "type": {
                    "type": "int32",
                    "id": 4
                }
            }
        },
        "GetDownloadSignedUrlResult": {
            "fields": {
                "url": {
                    "rule": "required",
                    "type": "string",
                    "id": 1
                },
                "backupUrl": {
                    "type": "string",
                    "id": 2
                }
            }
        },
        "HandleFriendRequest": {
            "fields": {
                "targetUid": {
                    "rule": "required",
                    "type": "string",
                    "id": 1
                },
                "status": {
                    "rule": "required",
                    "type": "int32",
                    "id": 2
                },
                "extra": {
                    "type": "string",
                    "id": 3
                }
            }
        },
        "IDBuf": {
            "fields": {
                "id": {
                    "rule": "required",
                    "type": "string",
                    "id": 1
                }
            }
        },
        "IDListBuf": {
            "fields": {
                "id": {
                    "rule": "repeated",
                    "type": "string",
                    "id": 1
                }
            }
        },
        "Message": {
            "fields": {
                "conversation": {
                    "rule": "required",
                    "type": "Conversation",
                    "id": 1
                },
                "fromUser": {
                    "rule": "required",
                    "type": "string",
                    "id": 2
                },
                "content": {
                    "rule": "required",
                    "type": "MessageContent",
                    "id": 3
                },
                "messageId": {
                    "type": "int64",
                    "id": 4
                },
                "serverTimestamp": {
                    "type": "int64",
                    "id": 5
                },
                "toUser": {
                    "type": "string",
                    "id": 6
                },
                "to": {
                    "rule": "repeated",
                    "type": "string",
                    "id": 7
                }
            }
        },
        "ConvReadRequest": {
            "fields": {
                "conversation": {
                    "rule": "required",
                    "type": "Conversation",
                    "id": 1
                },
                "fromUser": {
                    "rule": "required",
                    "type": "string",
                    "id": 2
                },
                "readTime": {
                    "rule": "required",
                    "type": "int64",
                    "id": 3
                },
                "to": {
                    "rule": "repeated",
                    "type": "string",
                    "id": 4
                }
            }
        },
        "ConvRead": {
            "fields": {
                "id": {
                    "type": "int32",
                    "id": 1
                },
                "conversation": {
                    "rule": "required",
                    "type": "Conversation",
                    "id": 2
                },
                "fromUser": {
                    "rule": "required",
                    "type": "string",
                    "id": 3
                },
                "readTime": {
                    "rule": "required",
                    "type": "int64",
                    "id": 4
                }
            }
        },
        "Delivery": {
            "fields": {
                "fromUser": {
                    "rule": "required",
                    "type": "string",
                    "id": 1
                },
                "receiveTime": {
                    "rule": "required",
                    "type": "int64",
                    "id": 2
                }
            }
        },
        "NotifyDelivery": {
            "fields": {
                "fromUser": {
                    "rule": "required",
                    "type": "string",
                    "id": 1
                },
                "receiveTime": {
                    "rule": "required",
                    "type": "int64",
                    "id": 2
                },
                "target": {
                    "rule": "repeated",
                    "type": "string",
                    "id": 3
                }
            }
        },
        "User": {
            "fields": {
                "uid": {
                    "rule": "required",
                    "type": "string",
                    "id": 1
                },
                "name": {
                    "type": "string",
                    "id": 2
                },
                "displayName": {
                    "type": "string",
                    "id": 3
                },
                "portrait": {
                    "type": "string",
                    "id": 4
                },
                "mobile": {
                    "type": "string",
                    "id": 5
                },
                "email": {
                    "type": "string",
                    "id": 6
                },
                "address": {
                    "type": "string",
                    "id": 7
                },
                "company": {
                    "type": "string",
                    "id": 8
                },
                "extra": {
                    "type": "string",
                    "id": 9
                },
                "updateDt": {
                    "type": "int64",
                    "id": 10
                },
                "gender": {
                    "type": "int32",
                    "id": 11
                },
                "social": {
                    "type": "string",
                    "id": 12
                },
                "type": {
                    "type": "int32",
                    "id": 13
                },
                "deleted": {
                    "type": "int32",
                    "id": 14
                }
            }
        },
        "Robot": {
            "fields": {
                "uid": {
                    "rule": "required",
                    "type": "string",
                    "id": 1
                },
                "state": {
                    "rule": "required",
                    "type": "int32",
                    "id": 2
                },
                "owner": {
                    "type": "string",
                    "id": 3
                },
                "secret": {
                    "type": "string",
                    "id": 4
                },
                "callback": {
                    "type": "string",
                    "id": 5
                },
                "extra": {
                    "type": "string",
                    "id": 6
                }
            }
        },
        "GetRobotsResult": {
            "fields": {
                "entry": {
                    "rule": "repeated",
                    "type": "Robot",
                    "id": 1
                }
            }
        },
        "Device": {
            "fields": {
                "uid": {
                    "rule": "required",
                    "type": "string",
                    "id": 1
                },
                "state": {
                    "rule": "required",
                    "type": "int32",
                    "id": 2
                },
                "token": {
                    "rule": "required",
                    "type": "string",
                    "id": 3
                },
                "owner": {
                    "rule": "repeated",
                    "type": "string",
                    "id": 4
                },
                "extra": {
                    "type": "string",
                    "id": 5
                },
                "updateDt": {
                    "type": "int64",
                    "id": 6
                }
            }
        },
        "GetDeviceResult": {
            "fields": {
                "entry": {
                    "rule": "repeated",
                    "type": "Device",
                    "id": 1
                }
            }
        },
        "UploadDeviceTokenRequest": {
            "fields": {
                "platform": {
                    "rule": "required",
                    "type": "int32",
                    "id": 1
                },
                "appName": {
                    "rule": "required",
                    "type": "string",
                    "id": 2
                },
                "deviceToken": {
                    "rule": "required",
                    "type": "string",
                    "id": 3
                },
                "pushType": {
                    "rule": "required",
                    "type": "int32",
                    "id": 4
                }
            }
        },
        "ModifyGroupInfoRequest": {
            "fields": {
                "groupId": {
                    "rule": "required",
                    "type": "string",
                    "id": 1
                },
                "type": {
                    "rule": "required",
                    "type": "int32",
                    "id": 2
                },
                "value": {
                    "rule": "required",
                    "type": "string",
                    "id": 3
                },
                "toLine": {
                    "rule": "repeated",
                    "type": "int32",
                    "id": 4,
                    "options": {
                        "packed": false
                    }
                },
                "notifyContent": {
                    "type": "MessageContent",
                    "id": 5
                }
            }
        },
        "SetGroupManagerRequest": {
            "fields": {
                "groupId": {
                    "rule": "required",
                    "type": "string",
                    "id": 1
                },
                "type": {
                    "rule": "required",
                    "type": "int32",
                    "id": 2
                },
                "userId": {
                    "rule": "repeated",
                    "type": "string",
                    "id": 3
                },
                "toLine": {
                    "rule": "repeated",
                    "type": "int32",
                    "id": 4,
                    "options": {
                        "packed": false
                    }
                },
                "notifyContent": {
                    "type": "MessageContent",
                    "id": 5
                }
            }
        },
        "InfoEntry": {
            "fields": {
                "type": {
                    "rule": "required",
                    "type": "int32",
                    "id": 1
                },
                "value": {
                    "rule": "required",
                    "type": "string",
                    "id": 2
                }
            }
        },
        "ModifyMyInfoRequest": {
            "fields": {
                "entry": {
                    "rule": "repeated",
                    "type": "InfoEntry",
                    "id": 1
                }
            }
        },
        "NotifyMessage": {
            "fields": {
                "type": {
                    "rule": "required",
                    "type": "int32",
                    "id": 1
                },
                "head": {
                    "rule": "required",
                    "type": "int64",
                    "id": 2
                }
            }
        },
        "NotifyGroupMessage": {
            "fields": {
                "head": {
                    "rule": "required",
                    "type": "int64",
                    "id": 1
                },
                "target": {
                    "rule": "required",
                    "type": "string",
                    "id": 2
                },
                "line": {
                    "rule": "required",
                    "type": "int32",
                    "id": 3
                }
            }
        },
        "PullMessageRequest": {
            "fields": {
                "id": {
                    "rule": "required",
                    "type": "int64",
                    "id": 1
                },
                "type": {
                    "rule": "required",
                    "type": "int32",
                    "id": 2
                },
                "delay": {
                    "type": "int64",
                    "id": 3
                }
            }
        },
        "PullMessageResult": {
            "fields": {
                "message": {
                    "rule": "repeated",
                    "type": "Message",
                    "id": 1
                },
                "current": {
                    "rule": "required",
                    "type": "int64",
                    "id": 2
                },
                "head": {
                    "rule": "required",
                    "type": "int64",
                    "id": 3
                }
            }
        },
        "PullReadResult": {
            "fields": {
                "read": {
                    "rule": "repeated",
                    "type": "ConvRead",
                    "id": 1
                },
                "current": {
                    "rule": "required",
                    "type": "int64",
                    "id": 2
                },
                "head": {
                    "rule": "required",
                    "type": "int64",
                    "id": 3
                }
            }
        },
        "PullDeliveryResult": {
            "fields": {
                "delivery": {
                    "rule": "repeated",
                    "type": "Delivery",
                    "id": 1
                },
                "current": {
                    "rule": "required",
                    "type": "int64",
                    "id": 2
                },
                "head": {
                    "rule": "required",
                    "type": "int64",
                    "id": 3
                }
            }
        },
        "GroupConv": {
            "fields": {
                "line": {
                    "rule": "required",
                    "type": "int32",
                    "id": 1
                },
                "groupId": {
                    "rule": "required",
                    "type": "string",
                    "id": 2
                },
                "msgHead": {
                    "type": "int64",
                    "id": 3
                }
            }
        },
        "PullGroupConvRequest": {
            "fields": {
                "id": {
                    "rule": "required",
                    "type": "int64",
                    "id": 1
                },
                "target": {
                    "type": "string",
                    "id": 2
                },
                "line": {
                    "type": "int32",
                    "id": 3
                },
                "messageId": {
                    "type": "int64",
                    "id": 4
                }
            }
        },
        "PullGroupConvResult": {
            "fields": {
                "conv": {
                    "rule": "repeated",
                    "type": "GroupConv",
                    "id": 1
                },
                "current": {
                    "rule": "required",
                    "type": "int64",
                    "id": 2
                },
                "head": {
                    "rule": "required",
                    "type": "int64",
                    "id": 3
                },
                "groupMessage": {
                    "type": "PullGroupMessageResult",
                    "id": 4
                }
            }
        },
        "PullGroupMessageRequest": {
            "fields": {
                "groupId": {
                    "rule": "required",
                    "type": "string",
                    "id": 1
                },
                "line": {
                    "rule": "required",
                    "type": "int32",
                    "id": 2
                },
                "id": {
                    "rule": "required",
                    "type": "int64",
                    "id": 3
                }
            }
        },
        "PullGroupMessageRequests": {
            "fields": {
                "request": {
                    "rule": "repeated",
                    "type": "PullGroupMessageRequest",
                    "id": 1
                }
            }
        },
        "GroupMessage": {
            "fields": {
                "messageId": {
                    "rule": "required",
                    "type": "int64",
                    "id": 1
                },
                "fromUser": {
                    "rule": "required",
                    "type": "string",
                    "id": 2
                },
                "flag": {
                    "rule": "required",
                    "type": "int32",
                    "id": 3
                }
            }
        },
        "PullGroupMessageResult": {
            "fields": {
                "message": {
                    "rule": "repeated",
                    "type": "GroupMessage",
                    "id": 1
                },
                "current": {
                    "rule": "required",
                    "type": "int64",
                    "id": 2
                },
                "head": {
                    "rule": "required",
                    "type": "int64",
                    "id": 3
                },
                "groupId": {
                    "rule": "required",
                    "type": "string",
                    "id": 4
                },
                "line": {
                    "rule": "required",
                    "type": "int32",
                    "id": 5
                },
                "msg": {
                    "rule": "repeated",
                    "type": "Message",
                    "id": 6
                }
            }
        },
        "PullGroupMessageResults": {
            "fields": {
                "result": {
                    "rule": "repeated",
                    "type": "PullGroupMessageResult",
                    "id": 1
                }
            }
        },
        "MessageList": {
            "fields": {
                "message": {
                    "rule": "repeated",
                    "type": "Message",
                    "id": 1
                }
            }
        },
        "PullGroupInfoResult": {
            "fields": {
                "info": {
                    "rule": "repeated",
                    "type": "GroupInfo",
                    "id": 1
                }
            }
        },
        "PullGroupMemberRequest": {
            "fields": {
                "target": {
                    "rule": "required",
                    "type": "string",
                    "id": 1
                },
                "head": {
                    "rule": "required",
                    "type": "int64",
                    "id": 2
                },
                "sum": {
                    "type": "int64",
                    "id": 3
                }
            }
        },
        "PullGroupMemberResult": {
            "fields": {
                "member": {
                    "rule": "repeated",
                    "type": "GroupMember",
                    "id": 1
                },
                "full": {
                    "type": "int32",
                    "id": 2
                }
            }
        },
        "UserRequest": {
            "fields": {
                "uid": {
                    "rule": "required",
                    "type": "string",
                    "id": 1
                },
                "updateDt": {
                    "type": "int64",
                    "id": 2
                }
            }
        },
        "PullUserRequest": {
            "fields": {
                "request": {
                    "rule": "repeated",
                    "type": "UserRequest",
                    "id": 1
                }
            }
        },
        "UserResult": {
            "fields": {
                "user": {
                    "rule": "required",
                    "type": "User",
                    "id": 1
                },
                "code": {
                    "rule": "required",
                    "type": "int32",
                    "id": 2
                }
            }
        },
        "PullUserResult": {
            "fields": {
                "result": {
                    "rule": "repeated",
                    "type": "UserResult",
                    "id": 1
                }
            }
        },
        "QuitGroupRequest": {
            "fields": {
                "groupId": {
                    "rule": "required",
                    "type": "string",
                    "id": 1
                },
                "toLine": {
                    "rule": "repeated",
                    "type": "int32",
                    "id": 2,
                    "options": {
                        "packed": false
                    }
                },
                "notifyContent": {
                    "type": "MessageContent",
                    "id": 3
                }
            }
        },
        "RemoveGroupMemberRequest": {
            "fields": {
                "groupId": {
                    "rule": "required",
                    "type": "string",
                    "id": 1
                },
                "removedMember": {
                    "rule": "repeated",
                    "type": "string",
                    "id": 2
                },
                "toLine": {
                    "rule": "repeated",
                    "type": "int32",
                    "id": 3,
                    "options": {
                        "packed": false
                    }
                },
                "notifyContent": {
                    "type": "MessageContent",
                    "id": 4
                }
            }
        },
        "TransferGroupRequest": {
            "fields": {
                "groupId": {
                    "rule": "required",
                    "type": "string",
                    "id": 1
                },
                "newOwner": {
                    "rule": "required",
                    "type": "string",
                    "id": 2
                },
                "toLine": {
                    "rule": "repeated",
                    "type": "int32",
                    "id": 3,
                    "options": {
                        "packed": false
                    }
                },
                "notifyContent": {
                    "type": "MessageContent",
                    "id": 4
                }
            }
        },
        "ModifyGroupMemberAlias": {
            "fields": {
                "groupId": {
                    "rule": "required",
                    "type": "string",
                    "id": 1
                },
                "alias": {
                    "rule": "required",
                    "type": "string",
                    "id": 2
                },
                "toLine": {
                    "rule": "repeated",
                    "type": "int32",
                    "id": 3,
                    "options": {
                        "packed": false
                    }
                },
                "notifyContent": {
                    "type": "MessageContent",
                    "id": 4
                },
                "memberId": {
                    "type": "string",
                    "id": 5
                }
            }
        },
        "ModifyGroupMemberExtra": {
            "fields": {
                "groupId": {
                    "rule": "required",
                    "type": "string",
                    "id": 1
                },
                "toLine": {
                    "rule": "repeated",
                    "type": "int32",
                    "id": 2,
                    "options": {
                        "packed": false
                    }
                },
                "notifyContent": {
                    "type": "MessageContent",
                    "id": 3
                },
                "extra": {
                    "type": "string",
                    "id": 4
                },
                "memberId": {
                    "type": "string",
                    "id": 5
                }
            }
        },
        "UserSettingEntry": {
            "fields": {
                "scope": {
                    "rule": "required",
                    "type": "int32",
                    "id": 1
                },
                "key": {
                    "rule": "required",
                    "type": "string",
                    "id": 2
                },
                "value": {
                    "rule": "required",
                    "type": "string",
                    "id": 3
                },
                "updateDt": {
                    "rule": "required",
                    "type": "int64",
                    "id": 4
                }
            }
        },
        "ModifyUserSettingReq": {
            "fields": {
                "scope": {
                    "rule": "required",
                    "type": "int32",
                    "id": 1
                },
                "key": {
                    "rule": "required",
                    "type": "string",
                    "id": 2
                },
                "value": {
                    "rule": "required",
                    "type": "string",
                    "id": 3
                },
                "target": {
                    "rule": "repeated",
                    "type": "string",
                    "id": 4
                }
            }
        },
        "Version": {
            "fields": {
                "version": {
                    "rule": "required",
                    "type": "int64",
                    "id": 1
                }
            }
        },
        "GetUserSettingResult": {
            "fields": {
                "entry": {
                    "rule": "repeated",
                    "type": "UserSettingEntry",
                    "id": 1
                }
            }
        },
        "Friend": {
            "fields": {
                "uid": {
                    "rule": "required",
                    "type": "string",
                    "id": 1
                },
                "state": {
                    "rule": "required",
                    "type": "int32",
                    "id": 2
                },
                "updateDt": {
                    "rule": "required",
                    "type": "int64",
                    "id": 3
                },
                "alias": {
                    "type": "string",
                    "id": 4
                },
                "blacked": {
                    "type": "int32",
                    "id": 5
                },
                "extra": {
                    "type": "string",
                    "id": 6
                }
            }
        },
        "GetFriendsResult": {
            "fields": {
                "entry": {
                    "rule": "repeated",
                    "type": "Friend",
                    "id": 1
                }
            }
        },
        "GetFriendRequestResult": {
            "fields": {
                "entry": {
                    "rule": "repeated",
                    "type": "FriendRequest",
                    "id": 1
                }
            }
        },
        "ConnectAckPayload": {
            "fields": {
                "msgHead": {
                    "type": "int64",
                    "id": 1
                },
                "friendHead": {
                    "type": "int64",
                    "id": 2
                },
                "friendRqHead": {
                    "type": "int64",
                    "id": 3
                },
                "settingHead": {
                    "type": "int64",
                    "id": 4
                },
                "nodeAddr": {
                    "type": "string",
                    "id": 5
                },
                "nodePort": {
                    "type": "int32",
                    "id": 6
                },
                "serverTime": {
                    "type": "int64",
                    "id": 7
                },
                "nodeId": {
                    "type": "string",
                    "id": 8
                },
                "recvHead": {
                    "type": "int64",
                    "id": 9
                },
                "readHead": {
                    "type": "int64",
                    "id": 10
                },
                "groupConvHead": {
                    "type": "int64",
                    "id": 11
                }
            }
        },
        "IMHttpWrapper": {
            "fields": {
                "token": {
                    "rule": "required",
                    "type": "string",
                    "id": 1
                },
                "clientId": {
                    "rule": "required",
                    "type": "string",
                    "id": 2
                },
                "request": {
                    "rule": "required",
                    "type": "string",
                    "id": 3
                },
                "data": {
                    "type": "bytes",
                    "id": 4
                }
            }
        },
        "SearchUserRequest": {
            "fields": {
                "keyword": {
                    "rule": "required",
                    "type": "string",
                    "id": 1
                },
                "fuzzy": {
                    "type": "int32",
                    "id": 2
                },
                "page": {
                    "type": "int32",
                    "id": 3
                }
            }
        },
        "SearchUserResult": {
            "fields": {
                "entry": {
                    "rule": "repeated",
                    "type": "User",
                    "id": 1
                }
            }
        },
        "GetChatroomInfoRequest": {
            "fields": {
                "chatroomId": {
                    "rule": "required",
                    "type": "string",
                    "id": 1
                },
                "updateDt": {
                    "type": "int64",
                    "id": 2
                }
            }
        },
        "ChatroomInfo": {
            "fields": {
                "title": {
                    "rule": "required",
                    "type": "string",
                    "id": 1
                },
                "desc": {
                    "type": "string",
                    "id": 2
                },
                "portrait": {
                    "type": "string",
                    "id": 3
                },
                "memberCount": {
                    "type": "int32",
                    "id": 4
                },
                "createDt": {
                    "type": "int64",
                    "id": 5
                },
                "updateDt": {
                    "type": "int64",
                    "id": 6
                },
                "extra": {
                    "type": "string",
                    "id": 7
                },
                "state": {
                    "type": "int32",
                    "id": 8
                }
            }
        },
        "GetChatroomMemberInfoRequest": {
            "fields": {
                "chatroomId": {
                    "rule": "required",
                    "type": "string",
                    "id": 1
                },
                "maxCount": {
                    "type": "int32",
                    "id": 2
                }
            }
        },
        "ChatroomMemberInfo": {
            "fields": {
                "memberCount": {
                    "type": "int32",
                    "id": 1
                },
                "members": {
                    "rule": "repeated",
                    "type": "string",
                    "id": 2
                }
            }
        },
        "INT64Buf": {
            "fields": {
                "id": {
                    "rule": "required",
                    "type": "int64",
                    "id": 1
                }
            }
        },
        "INT64ListBuf": {
            "fields": {
                "id": {
                    "rule": "repeated",
                    "type": "int64",
                    "id": 1,
                    "options": {
                        "packed": false
                    }
                }
            }
        },
        "NotifyRecallMessage": {
            "fields": {
                "id": {
                    "rule": "required",
                    "type": "int64",
                    "id": 1
                },
                "fromUser": {
                    "rule": "required",
                    "type": "string",
                    "id": 2
                }
            }
        },
        "BlackUserRequest": {
            "fields": {
                "uid": {
                    "rule": "required",
                    "type": "string",
                    "id": 1
                },
                "status": {
                    "rule": "required",
                    "type": "int32",
                    "id": 2
                }
            }
        },
        "RouteRequest": {
            "fields": {
                "app": {
                    "type": "string",
                    "id": 1
                },
                "platform": {
                    "type": "int32",
                    "id": 2
                },
                "pushType": {
                    "type": "int32",
                    "id": 3
                },
                "deviceName": {
                    "type": "string",
                    "id": 4
                },
                "deviceVersion": {
                    "type": "string",
                    "id": 5
                },
                "phoneName": {
                    "type": "string",
                    "id": 6
                },
                "language": {
                    "type": "string",
                    "id": 7
                },
                "carrierName": {
                    "type": "string",
                    "id": 8
                },
                "appVersion": {
                    "type": "string",
                    "id": 9
                },
                "sdkVersion": {
                    "type": "string",
                    "id": 10
                },
                "wxAppId": {
                    "type": "string",
                    "id": 11
                },
                "wxAppKey": {
                    "type": "string",
                    "id": 12
                },
                "webAppId": {
                    "type": "string",
                    "id": 13
                },
                "webAppKey": {
                    "type": "string",
                    "id": 14
                },
                "host": {
                    "type": "string",
                    "id": 15
                },
                "signature": {
                    "type": "string",
                    "id": 16
                }
            }
        },
        "AddressTriple": {
            "fields": {
                "host": {
                    "rule": "required",
                    "type": "string",
                    "id": 1
                },
                "longPort": {
                    "rule": "required",
                    "type": "int32",
                    "id": 2
                },
                "shortPort": {
                    "rule": "required",
                    "type": "int32",
                    "id": 3
                },
                "wssPort": {
                    "type": "int32",
                    "id": 4
                }
            }
        },
        "RouteResponse": {
            "fields": {
                "host": {
                    "rule": "required",
                    "type": "string",
                    "id": 1
                },
                "longPort": {
                    "rule": "required",
                    "type": "int32",
                    "id": 2
                },
                "shortPort": {
                    "rule": "required",
                    "type": "int32",
                    "id": 3
                },
                "thumbPara": {
                    "type": "string",
                    "id": 4
                },
                "node": {
                    "type": "string",
                    "id": 5
                },
                "commercial": {
                    "type": "int32",
                    "id": 6
                },
                "wssPort": {
                    "type": "int32",
                    "id": 7
                },
                "candidate": {
                    "rule": "repeated",
                    "type": "AddressTriple",
                    "id": 8
                }
            }
        },
        "GetTokenRequest": {
            "fields": {
                "userId": {
                    "rule": "required",
                    "type": "string",
                    "id": 1
                },
                "clientId": {
                    "rule": "required",
                    "type": "string",
                    "id": 2
                },
                "platform": {
                    "type": "int32",
                    "id": 3
                }
            }
        },
        "LoadRemoteMessages": {
            "fields": {
                "conversation": {
                    "rule": "required",
                    "type": "Conversation",
                    "id": 1
                },
                "beforeUid": {
                    "rule": "required",
                    "type": "int64",
                    "id": 2
                },
                "count": {
                    "rule": "required",
                    "type": "int32",
                    "id": 3
                },
                "contentType": {
                    "rule": "repeated",
                    "type": "int32",
                    "id": 4,
                    "options": {
                        "packed": false
                    }
                }
            }
        },
        "LoadLineMessages": {
            "fields": {
                "line": {
                    "rule": "required",
                    "type": "int32",
                    "id": 1
                },
                "beforeUid": {
                    "rule": "required",
                    "type": "int64",
                    "id": 2
                },
                "count": {
                    "rule": "required",
                    "type": "int32",
                    "id": 3
                },
                "contentType": {
                    "rule": "repeated",
                    "type": "int32",
                    "id": 4,
                    "options": {
                        "packed": false
                    }
                }
            }
        },
        "MultiCastMessage": {
            "fields": {
                "fromUser": {
                    "rule": "required",
                    "type": "string",
                    "id": 1
                },
                "content": {
                    "rule": "required",
                    "type": "MessageContent",
                    "id": 2
                },
                "to": {
                    "rule": "repeated",
                    "type": "string",
                    "id": 3
                },
                "line": {
                    "rule": "required",
                    "type": "int32",
                    "id": 4
                }
            }
        },
        "RecallMultiMessage": {
            "fields": {
                "messageId": {
                    "rule": "required",
                    "type": "int64",
                    "id": 1
                },
                "target": {
                    "rule": "repeated",
                    "type": "string",
                    "id": 2
                }
            }
        },
        "UpdateMessageContent": {
            "fields": {
                "messageId": {
                    "rule": "required",
                    "type": "int64",
                    "id": 1
                },
                "content": {
                    "rule": "required",
                    "type": "MessageContent",
                    "id": 2
                },
                "distribute": {
                    "rule": "required",
                    "type": "int32",
                    "id": 3
                },
                "updateTime": {
                    "type": "int32",
                    "id": 4
                }
            }
        },
        "FileRecord": {
            "fields": {
                "messageId": {
                    "rule": "required",
                    "type": "int64",
                    "id": 1
                },
                "fromUser": {
                    "rule": "required",
                    "type": "string",
                    "id": 2
                },
                "conversation": {
                    "type": "Conversation",
                    "id": 3
                },
                "name": {
                    "type": "string",
                    "id": 4
                },
                "url": {
                    "rule": "required",
                    "type": "string",
                    "id": 5
                },
                "size": {
                    "rule": "required",
                    "type": "int32",
                    "id": 6
                },
                "downloadCount": {
                    "type": "int32",
                    "id": 7
                },
                "dt": {
                    "rule": "required",
                    "type": "int64",
                    "id": 8
                }
            }
        },
        "LoadFileRecordReq": {
            "fields": {
                "conversation": {
                    "type": "Conversation",
                    "id": 1
                },
                "messageId": {
                    "rule": "required",
                    "type": "int64",
                    "id": 2
                },
                "count": {
                    "rule": "required",
                    "type": "int32",
                    "id": 3
                },
                "from": {
                    "type": "string",
                    "id": 4
                },
                "order": {
                    "type": "int32",
                    "id": 5
                }
            }
        },
        "LoadFileRecordRes": {
            "fields": {
                "record": {
                    "rule": "repeated",
                    "type": "FileRecord",
                    "id": 1
                }
            }
        },
        "SearchFileRecordReq": {
            "fields": {
                "keyword": {
                    "rule": "required",
                    "type": "string",
                    "id": 1
                },
                "conversation": {
                    "type": "Conversation",
                    "id": 2
                },
                "messageId": {
                    "rule": "required",
                    "type": "int64",
                    "id": 3
                },
                "count": {
                    "rule": "required",
                    "type": "int32",
                    "id": 4
                },
                "from": {
                    "type": "string",
                    "id": 5
                },
                "order": {
                    "type": "int32",
                    "id": 6
                }
            }
        },
        "ConferenceRequest": {
            "fields": {
                "sessionId": {
                    "type": "int64",
                    "id": 1
                },
                "request": {
                    "rule": "required",
                    "type": "string",
                    "id": 2
                },
                "data": {
                    "type": "string",
                    "id": 3
                },
                "roomId": {
                    "type": "string",
                    "id": 4
                },
                "advance": {
                    "type": "int32",
                    "id": 5
                }
            }
        },
        "ConfInfo": {
            "fields": {
                "roomId": {
                    "rule": "required",
                    "type": "string",
                    "id": 1
                },
                "description": {
                    "type": "string",
                    "id": 2
                },
                "serverId": {
                    "type": "string",
                    "id": 3
                },
                "pin": {
                    "type": "string",
                    "id": 4
                },
                "publishers": {
                    "type": "int32",
                    "id": 5
                },
                "numPublisher": {
                    "type": "int32",
                    "id": 6
                },
                "bitrate": {
                    "type": "int32",
                    "id": 7
                },
                "advance": {
                    "type": "int32",
                    "id": 8
                },
                "record": {
                    "type": "int32",
                    "id": 9
                },
                "permanent": {
                    "type": "int32",
                    "id": 10
                }
            }
        },
        "ConfInfos": {
            "fields": {
                "info": {
                    "rule": "repeated",
                    "type": "ConfInfo",
                    "id": 1
                }
            }
        },
        "ConfStream": {
            "fields": {
                "type": {
                    "rule": "required",
                    "type": "string",
                    "id": 1
                },
                "mid": {
                    "rule": "required",
                    "type": "string",
                    "id": 2
                },
                "codec": {
                    "rule": "required",
                    "type": "string",
                    "id": 3
                }
            }
        },
        "ConfParticipant": {
            "fields": {
                "userId": {
                    "rule": "required",
                    "type": "string",
                    "id": 1
                },
                "publisher": {
                    "rule": "required",
                    "type": "int32",
                    "id": 2
                },
                "stream": {
                    "rule": "repeated",
                    "type": "ConfStream",
                    "id": 3
                }
            }
        },
        "ConfParticipants": {
            "fields": {
                "participant": {
                    "rule": "repeated",
                    "type": "ConfParticipant",
                    "id": 1
                }
            }
        },
        "ConfRtpForwardReq": {
            "fields": {
                "roomId": {
                    "rule": "required",
                    "type": "string",
                    "id": 1
                },
                "publisherId": {
                    "rule": "required",
                    "type": "string",
                    "id": 2
                },
                "host": {
                    "rule": "required",
                    "type": "string",
                    "id": 3
                },
                "audioPort": {
                    "type": "int32",
                    "id": 4
                },
                "audioPt": {
                    "type": "int32",
                    "id": 5
                },
                "audioSsrc": {
                    "type": "int64",
                    "id": 6
                },
                "videoPort": {
                    "type": "int32",
                    "id": 7
                },
                "videoPt": {
                    "type": "int32",
                    "id": 8
                },
                "videoSsrc": {
                    "type": "int64",
                    "id": 9
                }
            }
        },
        "RecallMultiCastMessageRequest": {
            "fields": {
                "messageId": {
                    "rule": "required",
                    "type": "int64",
                    "id": 1
                },
                "receiver": {
                    "rule": "repeated",
                    "type": "string",
                    "id": 2
                }
            }
        },
        "MomentsMedia": {
            "fields": {
                "mediaUrl": {
                    "rule": "required",
                    "type": "string",
                    "id": 1
                },
                "thumbUrl": {
                    "type": "string",
                    "id": 2
                },
                "width": {
                    "type": "int32",
                    "id": 3
                },
                "height": {
                    "type": "int32",
                    "id": 4
                }
            }
        },
        "MomentsFeed": {
            "fields": {
                "feedId": {
                    "rule": "required",
                    "type": "int64",
                    "id": 1
                },
                "sender": {
                    "rule": "required",
                    "type": "string",
                    "id": 2
                },
                "type": {
                    "rule": "required",
                    "type": "int32",
                    "id": 3
                },
                "text": {
                    "type": "string",
                    "id": 4
                },
                "medias": {
                    "rule": "repeated",
                    "type": "MomentsMedia",
                    "id": 5
                },
                "mentionedUsers": {
                    "rule": "repeated",
                    "type": "string",
                    "id": 6
                },
                "toUsers": {
                    "rule": "repeated",
                    "type": "string",
                    "id": 7
                },
                "excludeUsers": {
                    "rule": "repeated",
                    "type": "string",
                    "id": 8
                },
                "serverTime": {
                    "rule": "required",
                    "type": "int64",
                    "id": 9
                },
                "extra": {
                    "type": "string",
                    "id": 10
                },
                "comments": {
                    "rule": "repeated",
                    "type": "MomentsComment",
                    "id": 11
                },
                "hasMore": {
                    "type": "int32",
                    "id": 12
                }
            }
        },
        "MomentsFeeds": {
            "fields": {
                "feeds": {
                    "rule": "repeated",
                    "type": "MomentsFeed",
                    "id": 1
                }
            }
        },
        "MomentsComments": {
            "fields": {
                "comments": {
                    "rule": "repeated",
                    "type": "MomentsComment",
                    "id": 1
                }
            }
        },
        "MomentsComment": {
            "fields": {
                "feedId": {
                    "rule": "required",
                    "type": "int64",
                    "id": 1
                },
                "commentId": {
                    "rule": "required",
                    "type": "int64",
                    "id": 2
                },
                "replyId": {
                    "type": "int64",
                    "id": 3
                },
                "sender": {
                    "rule": "required",
                    "type": "string",
                    "id": 4
                },
                "type": {
                    "rule": "required",
                    "type": "int32",
                    "id": 5
                },
                "text": {
                    "type": "string",
                    "id": 6
                },
                "replyTo": {
                    "type": "string",
                    "id": 7
                },
                "serverTime": {
                    "rule": "required",
                    "type": "int64",
                    "id": 8
                },
                "extra": {
                    "type": "string",
                    "id": 9
                }
            }
        },
        "LockRequest": {
            "fields": {
                "lockId": {
                    "rule": "required",
                    "type": "string",
                    "id": 1
                },
                "duration": {
                    "type": "int64",
                    "id": 2
                }
            }
        },
        "PresenceOnlineState": {
            "fields": {
                "platform": {
                    "rule": "required",
                    "type": "int32",
                    "id": 1
                },
                "state": {
                    "rule": "required",
                    "type": "int32",
                    "id": 2
                },
                "lastSeen": {
                    "type": "int64",
                    "id": 3
                }
            }
        },
        "PresenceOnlineNotify": {
            "fields": {
                "userId": {
                    "rule": "required",
                    "type": "string",
                    "id": 1
                },
                "customState": {
                    "rule": "required",
                    "type": "int32",
                    "id": 2
                },
                "customText": {
                    "type": "string",
                    "id": 3
                },
                "state": {
                    "rule": "repeated",
                    "type": "PresenceOnlineState",
                    "id": 4
                }
            }
        },
        "PresenceWatchRequest": {
            "fields": {
                "type": {
                    "rule": "required",
                    "type": "int32",
                    "id": 1
                },
                "target": {
                    "rule": "repeated",
                    "type": "string",
                    "id": 2
                },
                "duration": {
                    "type": "int32",
                    "id": 3
                }
            }
        },
        "PresenceWatchResult": {
            "fields": {
                "notify": {
                    "rule": "repeated",
                    "type": "PresenceOnlineNotify",
                    "id": 1
                }
            }
        },
        "CreateSecretChatRequest": {
            "fields": {
                "userId": {
                    "rule": "required",
                    "type": "string",
                    "id": 1
                },
                "pubkey": {
                    "rule": "required",
                    "type": "string",
                    "id": 2
                },
                "targetId": {
                    "type": "string",
                    "id": 3
                }
            }
        },
        "CreateSecretChatResponse": {
            "fields": {
                "targetId": {
                    "rule": "required",
                    "type": "string",
                    "id": 1
                },
                "line": {
                    "rule": "required",
                    "type": "int32",
                    "id": 2
                }
            }
        },
        "SecretChatInfo": {
            "fields": {
                "targetId": {
                    "rule": "required",
                    "type": "string",
                    "id": 1
                },
                "from": {
                    "rule": "required",
                    "type": "string",
                    "id": 2
                },
                "to": {
                    "rule": "required",
                    "type": "string",
                    "id": 3
                },
                "state": {
                    "rule": "required",
                    "type": "int32",
                    "id": 4
                },
                "createDt": {
                    "rule": "required",
                    "type": "int64",
                    "id": 5
                }
            }
        },
        "DeleteSecretChatMessage": {
            "fields": {
                "conversation": {
                    "rule": "required",
                    "type": "Conversation",
                    "id": 1
                },
                "messageId": {
                    "rule": "required",
                    "type": "int64",
                    "id": 2
                },
                "serverTimestamp": {
                    "rule": "required",
                    "type": "int64",
                    "id": 3
                }
            }
        },
        "AuthCodeRequest": {
            "fields": {
                "targetId": {
                    "rule": "required",
                    "type": "string",
                    "id": 1
                },
                "type": {
                    "rule": "required",
                    "type": "int32",
                    "id": 2
                },
                "host": {
                    "rule": "required",
                    "type": "string",
                    "id": 3
                }
            }
        },
        "ApplicationConfigRequest": {
            "fields": {
                "appId": {
                    "rule": "required",
                    "type": "string",
                    "id": 1
                },
                "appType": {
                    "rule": "required",
                    "type": "int32",
                    "id": 2
                },
                "timestamp": {
                    "rule": "required",
                    "type": "int64",
                    "id": 3
                },
                "nonce": {
                    "rule": "required",
                    "type": "string",
                    "id": 4
                },
                "signature": {
                    "rule": "required",
                    "type": "string",
                    "id": 5
                }
            }
        },
        "RouteRequestInternal": {
            "fields": {
                "data": {
                    "rule": "required",
                    "type": "bytes",
                    "id": 1
                },
                "appKey": {
                    "type": "string",
                    "id": 2
                },
                "appId": {
                    "type": "string",
                    "id": 3
                }
            }
        }
    }
};

/***/ })
/******/ ]);
});
//# sourceMappingURL=proto.min.js.map